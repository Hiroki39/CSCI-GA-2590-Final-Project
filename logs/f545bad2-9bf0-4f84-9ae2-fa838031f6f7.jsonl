{"question": "Each pack of dvds costs c0 dollars. If there is a discount of c1 dollars on each packHow much do you have to pay to buy each pack?", "answer": [51.0], "response": "def Problem(c0, c1):\n    #Each pack of dvds costs c0 dollars\n    original_price = c0\n\n    #There is a discount of c1 dollars on each pack\n    discount = c1\n\n    #The price to buy each pack after the discount can be calculated by subtracting the discount from the original price\n    price_after_discount = original_price - discount\n\n    return price_after_discount", "mapping": {"c0": 76.0, "c1": 25.0}}
{"question": "Dan had $ c0 left with him after he bought a candy bar. If he had $ c1 at the startHow much did the candy bar cost?", "answer": [1.0], "response": "def candy_bar_cost(c0, c1):\n    # Dan had c1 dollars at the start\n    start = c1\n\n    # Dan had c0 dollars left after buying the candy bar\n    left = c0\n\n    # The cost of the candy bar can be calculated by subtracting the amount left from the amount at the start\n    cost = start - left\n\n    return cost", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "Paco had c0 salty cookies and c1 sweet cookies. He ate c2 sweet cookies and c3 salty cookies.How many salty cookies did Paco have left?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 salty cookies\n    salty_cookies = c0\n\n    #Paco had c1 sweet cookies\n    sweet_cookies = c1\n\n    #Paco ate c2 sweet cookies\n    ate_sweet = c2\n\n    #Paco ate c3 salty cookies\n    ate_salty = c3\n\n    #The number of salty cookies Paco has left can be calculated by subtracting the number of salty cookies he ate from the original number of salty cookies he had\n    salty_left = salty_cookies - ate_salty\n\n    return salty_left", "mapping": {"c0": 26.0, "c1": 17.0, "c2": 14.0, "c3": 9.0}}
{"question": "c0 children were riding on the bus. At the bus stop some children got off the bus. Then there were c1 children left on the bus.How many children got off the bus at the bus stop?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children were left on the bus after some got off\n    left = c1\n\n    #The number of children who got off the bus can be calculated by subtracting the number of children left on the bus from the original number of children\n    got_off = original - left\n\n    return got_off", "mapping": {"c0": 43.0, "c1": 21.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many more children got on the bus than those that got off?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got on the bus\n    got_on = c1\n\n    #some children got off the bus\n    got_off = original + got_on - c2\n\n    #the difference between the number of children who got on and off the bus can be calculated by subtracting the number of children who got off from the number of children who got on\n    difference = got_on - got_off\n\n    return difference", "mapping": {"c0": 28.0, "c1": 82.0, "c2": 30.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much more money did she collect at the atm than she spent at the supermarket?", "answer": [46.0], "response": "def Problem(c0, c1, c2):\n    #Olivia originally had c0 dollars in her wallet\n    original_money = c0\n\n    #She collected c1 more dollars from an atm\n    collected_money = c1\n\n    #After visiting the supermarket, she had c2 dollars left\n    remaining_money = c2\n\n    #The amount of money she spent at the supermarket can be calculated by subtracting the remaining money from the total money she had after collecting from the atm\n    spent_money = collected_money - remaining_money\n\n    #The amount of money she collected at the atm more than she spent at the supermarket can be calculated by subtracting the spent money from the collected money\n    difference = collected_money - spent_money\n\n    return difference", "mapping": {"c0": 3.0, "c1": 49.0, "c2": 49.0}}
{"question": "Jerry had some action figures on a shelf in his room. Later he added c0 more action figures to the shelf. If there are a total of c1 action figures on his shelf nowHow many action figures did he have initially on the shelf?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef initial_figures(c0, c1):\n    # Jerry added c0 more action figures to the shelf\n    added_figures = c0\n    \n    # There are a total of c1 action figures on his shelf now\n    total_figures = c1\n    \n    # The number of action figures Jerry had initially on the shelf can be calculated by subtracting the added figures from the total figures\n    initial_figures = total_figures - added_figures\n    \n    return initial_figures", "mapping": {"c0": 7.0, "c1": 10.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many more cookies did he eat than those he gave to his friend?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco gave c1 cookies to his friend\n    gave = c1\n\n    #Paco ate c2 cookies\n    ate = c2\n\n    #The difference between the number of cookies Paco ate and the number of cookies he gave to his friend can be calculated by subtracting the number of cookies he gave from the number of cookies he ate\n    difference = ate - gave\n\n    return difference", "mapping": {"c0": 41.0, "c1": 9.0, "c2": 18.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour does she need to add?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #The recipe calls for c1 cups of flour\n    flour_needed = c1\n\n    #Mary already put in c3 cups of flour\n    flour_added = c3\n\n    #The number of cups of flour Mary still needs to add can be calculated by subtracting the amount of flour she already added from the amount of flour needed\n    flour_remaining = flour_needed - flour_added\n\n    return flour_remaining", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 15.0, "c3": 6.0}}
{"question": "A waiter had some customers. After c0 customers left he still had c1 customers.How many customers did he have at the start?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #After c0 customers left, the waiter had c1 customers\n    customers_after = c1\n\n    #The number of customers the waiter had at the start can be calculated by adding the number of customers who left to the number of customers the waiter had after they left\n    customers_before = customers_after + c0\n\n    return customers_before", "mapping": {"c0": 9.0, "c1": 12.0}}
{"question": "c0 birds were sitting on the fence. c1 more storks and c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds were sitting on the fence\n    birds = c0\n\n    #c1 more storks came to join them\n    storks = c1\n\n    #c2 more birds came to join them\n    more_birds = c2\n\n    #The total number of birds and storks on the fence now\n    total_now = birds + storks + more_birds\n\n    #The difference between the number of storks and birds on the fence can be calculated by subtracting the number of birds from the total number of birds and storks, and then subtracting the number of storks from the result\n    difference = (total_now - birds) - storks\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 2.0}}
{"question": "They decided to hold the party in their backyard. If they have c0 sets of tables and each set has c1 chairsHow many chairs do they have in the backyard?", "answer": [143.0], "response": "def Problem(c0, c1):\n    #there are c0 sets of tables\n    sets_of_tables = c0\n\n    #each set of tables has c1 chairs\n    chairs_per_set = c1\n\n    #The total number of chairs in the backyard can be calculated by multiplying the number of sets of tables by the number of chairs per set\n    total_chairs = sets_of_tables * chairs_per_set\n\n    return total_chairs", "mapping": {"c0": 11.0, "c1": 13.0}}
{"question": "In a school there are c0 more girls than boys. If there are c1 girlsHow many pupils are there in that school?", "answer": [926.0], "response": "def Problem(c0, c1):\n    #there are c0 more girls than boys\n    boys = c1 - c0\n\n    #total number of pupils is the sum of boys and girls\n    pupils = c1 + boys\n\n    return pupils", "mapping": {"c0": 458.0, "c1": 692.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. Dean is c1 feet taller than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [255.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Dean's height is c1 feet taller than Ron's height\n    ron_height = c2\n    dean_height = ron_height + c1\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * dean_height\n\n    return water_depth", "mapping": {"c0": 15.0, "c1": 4.0, "c2": 13.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many birds are sitting on the fence?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds were sitting on the fence\n    birds_before = c0\n\n    #c1 more birds came to join them\n    more_birds = c1\n\n    #c2 more storks came to join them\n    more_storks = c2\n\n    #The total number of birds sitting on the fence can be calculated by adding the original number of birds with the number of more birds and more storks that joined them\n    total_birds = birds_before + more_birds + more_storks\n\n    return total_birds", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 8.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco ' dad lost c1 pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh now?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The total weight of strawberries they collected was c0 pounds\n    total_weight = c0\n\n    #Marco's strawberries now weigh c2 pounds\n    marco_weight = c2\n\n    #The weight of strawberries his dad lost can be calculated by subtracting Marco's strawberries weight from the total weight\n    dad_lost = total_weight - marco_weight\n\n    #His dad's strawberries weight now can be calculated by subtracting the weight his dad lost from the total weight\n    dad_weight = total_weight - dad_lost\n\n    return dad_weight", "mapping": {"c0": 36.0, "c1": 8.0, "c2": 12.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more girls than boysHow many boys are there in that school?", "answer": [469.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more girls than boys\n    more_girls = c1\n\n    #let's calculate the total number of students in the school\n    total_students = girls + more_girls\n\n    #since the rest of the students are boys, we can calculate the number of boys by subtracting the number of girls from the total number of students\n    boys = total_students - girls\n\n    return boys", "mapping": {"c0": 697.0, "c1": 228.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls and c3 more boys joined the school.How many girls are there in the school now?", "answer": [1414.0], "response": "def total_girls(c0, c1, c2, c3):\n    #total number of girls before new students joined\n    girls_before = c0\n\n    #total number of boys before new students joined\n    boys_before = c1\n\n    #number of new girls who joined\n    new_girls = c2\n\n    #number of new boys who joined\n    new_boys = c3\n\n    #total number of girls after new students joined\n    girls_after = girls_before + new_girls\n\n    #total number of boys after new students joined\n    boys_after = boys_before + new_boys\n\n    return girls_after", "mapping": {"c0": 732.0, "c1": 761.0, "c2": 682.0, "c3": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many wrappers did danny have at first?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    found_caps = c0\n    found_wrappers = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers in his collection\n    total_caps = c2\n    total_wrappers = c3\n\n    #Danny started with some number of wrappers, which we'll call x\n    starting_wrappers = x\n\n    #We know that Danny found c1 wrappers at the park, so we can add that to his starting wrappers to get his total number of wrappers before he started collecting bottle caps\n    total_wrappers_before_caps = starting_wrappers + found_wrappers\n\n    #We also know that Danny collected c0 bottle caps, and each bottle cap comes with a wrapper. So we can add c0 to his starting wrappers to get his total number of wrappers after collecting bottle caps\n    total_wrappers_after_caps = starting_wrappers + found_wrappers + c0\n\n    #Finally, we know that Danny has c3 wrappers in his collection now. So we can set up an equation to solve for x, his starting number of wrappers:\n    #total_wrappers_before_caps + (total_wrappers_after_caps - total_wrappers_before_caps) = c3\n    #Simplifying:\n    #total_wrappers_after_caps = c3 + total_wrappers_before_caps\n    #starting_wrappers + found_wrappers + c0 = c3 + starting_wrappers + found_wrappers\n    #c0 = c3 - starting_wrappers\n    starting_wrappers = c3 - c0\n\n    return starting_wrappers", "mapping": {"c0": 22.0, "c1": 30.0, "c2": 17.0, "c3": 57.0}}
{"question": "Paul got a box of c0 erasers and c1 crayons for his birthday. At the end of the school year he only had c2 crayons left while not having lost a single eraser.How many more crayons than erasers did he have left?", "answer": [66.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul got c0 erasers and c1 crayons for his birthday\n    erasers = c0\n    crayons = c1\n\n    #At the end of the school year, he had c2 crayons left\n    crayons_left = c2\n\n    #Paul did not lose any erasers, so he still has c0 erasers left\n    erasers_left = erasers\n\n    #The number of crayons more than erasers that Paul has left can be calculated by subtracting the number of erasers left from the number of crayons left\n    more_crayons = crayons_left - erasers_left\n\n    return more_crayons", "mapping": {"c0": 457.0, "c1": 617.0, "c2": 523.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many cakes does baker still have?", "answer": [186.0], "response": "def Problem(c0, c1, c2):\n    #Baker originally made c0 cakes\n    original_cakes = c0\n\n    #Baker sold c1 cakes\n    sold_cakes = c1\n\n    #Baker bought c2 new cakes\n    bought_cakes = c2\n\n    #The number of cakes Baker still has can be calculated by subtracting the number of cakes he sold and adding the number of cakes he bought from the original number of cakes he made\n    remaining_cakes = original_cakes - sold_cakes + bought_cakes\n\n    return remaining_cakes", "mapping": {"c0": 121.0, "c1": 105.0, "c2": 170.0}}
{"question": "An industrial machine worked for c0 minutes. It can make c1 shirts a minute.How many shirts did machine make?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #The machine worked for c0 minutes\n    minutes_worked = c0\n\n    #The machine can make c1 shirts a minute\n    shirts_per_minute = c1\n\n    #The number of shirts the machine made can be calculated by multiplying the number of minutes worked by the number of shirts made per minute\n    shirts_made = minutes_worked * shirts_per_minute\n\n    return shirts_made", "mapping": {"c0": 5.0, "c1": 4.0}}
{"question": "The bananas in Philip's collection are organized into groups of size c0. If there are a total of c1 bananas in Philip's banana collectionHow many groups are there?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #The bananas are organized into groups of size c0\n    group_size = c0\n\n    #There are a total of c1 bananas in the collection\n    total_bananas = c1\n\n    #The number of groups can be calculated by dividing the total number of bananas by the group size\n    num_groups = total_bananas // group_size\n\n    return num_groups", "mapping": {"c0": 18.0, "c1": 180.0}}
{"question": "There were some birds sitting on the fence. c0 more birds came to join them. If there are a total of c1 birds on the fence nowHow many birds had been sitting on the fence at the start?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #The number of birds sitting on the fence before c0 more birds came can be calculated by subtracting c0 from the total number of birds on the fence now\n    birds_before = c1 - c0\n\n    return birds_before", "mapping": {"c0": 4.0, "c1": 5.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf and removed some of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he remove from the shelf?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures on the shelf\n    original = c0\n\n    #Jerry added c1 more action figures to the shelf\n    added = c1\n\n    #Jerry now has c2 action figures on the shelf\n    now = c2\n\n    #The number of action figures Jerry removed can be calculated by subtracting the original number of action figures and the added number of action figures from the current number of action figures\n    removed = now - (original + added)\n\n    return removed", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 6.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps did danny find at the park?", "answer": [60.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    bottle_caps_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    wrappers_now = c3\n    bottle_caps_now = c2\n\n    #The difference between the number of wrappers and bottle caps Danny found at the park can be calculated by subtracting the number of bottle caps found from the number of wrappers found\n    difference = wrappers_found - bottle_caps_found\n\n    #The number of extra wrappers Danny has now can be calculated by subtracting the number of bottle caps he has now from the number of wrappers he has now\n    extra_wrappers = wrappers_now - bottle_caps_now\n\n    #The final answer is the difference between the number of wrappers and bottle caps found at the park minus the number of extra wrappers Danny has now\n    answer = difference - extra_wrappers\n\n    return answer", "mapping": {"c0": 65.0, "c1": 5.0, "c2": 31.0, "c3": 9.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food from a total of c0 choices. If c1 students suggested adding mashed potatoes c2 suggested adding bacon to the menu and the rest did not participateHow many students participated in the suggestion of new food items?", "answer": [488.0], "response": "def Problem(c0, c1, c2):\n    #The total number of choices was c0\n    total_choices = c0\n\n    #c1 students suggested adding mashed potatoes\n    mashed_potatoes = c1\n\n    #c2 students suggested adding bacon\n    bacon = c2\n\n    #The number of students who participated in suggesting new food items can be calculated by adding the number of students who suggested mashed potatoes and the number of students who suggested bacon\n    participated = mashed_potatoes + bacon\n\n    return participated", "mapping": {"c0": 66.0, "c1": 450.0, "c2": 38.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many crackers and cakes did each person eat?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    #So each friend got c1/c0 crackers and c2/c0 cakes\n    crackers_per_person = c1/c0\n    cakes_per_person = c2/c0\n\n    #Now let's say each person ate x crackers and y cakes\n    #Then the total number of crackers and cakes eaten would be x*c0 and y*c0 respectively\n    #And we know that the total number of crackers and cakes eaten is c1 and c2 respectively\n    #So we can solve for x and y as follows:\n    x = c1/c0\n    y = c2/c0\n\n    #Now we have the number of crackers and cakes each person ate\n    return x, y", "mapping": {"c0": 28.0, "c1": 13.0, "c2": 15.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many bottles of regular soda and diet soda did they have altogether?", "answer": [89.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of regular soda\n    regular = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet = c1\n\n    #The total number of regular and diet soda bottles can be calculated by adding the number of regular soda bottles and the number of diet soda bottles\n    total = regular + diet\n\n    return total", "mapping": {"c0": 49.0, "c1": 40.0, "c2": 6.0}}
{"question": "Dan has $ c0. He bought c1 candy bar for $ c2, each one costing the same amount of money.How much did each candy bar cost?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought c1 candy bars\n    candy_bars = c1\n\n    #Each candy bar costs c2 dollars\n    candy_bar_cost = c2\n\n    #The cost of each candy bar can be calculated by dividing the total cost of candy bars by the number of candy bars\n    cost_per_candy_bar = (dan_money - (candy_bars * candy_bar_cost)) / candy_bars\n\n    return cost_per_candy_bar", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 4.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags worth of cans.How many more bags did she find on the next day than she had on monday?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Tiffany had c0 bags of cans on Monday\n    monday = c0\n\n    #She found c1 more bags worth of cans the next day\n    tuesday = c0 + c1\n\n    #The number of more bags she found on Tuesday than she had on Monday can be calculated by subtracting the number of bags she had on Monday from the number of bags she had on Tuesday\n    more_bags = tuesday - monday\n\n    return more_bags", "mapping": {"c0": 7.0, "c1": 12.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many roses did she cut?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #there are now c2 roses and c3 orchids in the vase\n    roses_after = c2\n    orchids_after = c3\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = roses_after - roses_before\n    orchids_cut = orchids_after - orchids_before\n\n    #return the number of roses she cut\n    return roses_cut", "mapping": {"c0": 15.0, "c1": 62.0, "c2": 17.0, "c3": 96.0}}
{"question": "There are some baskets of peaches. Each basket has c0 red peaches and c1 green peaches. If there are a total of c2 peaches in all basketsHow many baskets of peaches are there?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c0 red peaches and c1 green peaches\n    red_peaches = c0\n    green_peaches = c1\n\n    #there are a total of c2 peaches in all baskets\n    total_peaches = c2\n\n    #we can calculate the total number of baskets by dividing the total number of peaches by the number of peaches in each basket\n    #since each basket has c0 + c1 peaches, we can divide the total number of peaches by c0 + c1 to get the number of baskets\n    baskets = total_peaches / (c0 + c1)\n\n    return baskets", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 7.0}}
{"question": "There were c0 dollars in Olivia's wallet. She spent c1 dollars at a supermarket.How much money does she have left?", "answer": [63.0], "response": "def remaining_money(c0, c1):\n    # Olivia originally had c0 dollars in her wallet\n    original_money = c0\n\n    # Olivia spent c1 dollars at the supermarket\n    spent_money = c1\n\n    # The amount of money Olivia has left can be calculated by subtracting the amount she spent from the original amount she had\n    remaining_money = original_money - spent_money\n\n    return remaining_money", "mapping": {"c0": 78.0, "c1": 15.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and some more in the evening. If he received a total of c2 emails in the dayHow many emails did Jack receive in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon = c1\n\n    #Jack received a total of c2 emails in the day\n    total = c2\n\n    #The number of emails Jack received in the evening can be calculated by subtracting the sum of morning and afternoon emails from the total emails he received in the day\n    evening = total - (morning + afternoon)\n\n    #The number of emails Jack received in the afternoon is c1\n    return afternoon", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 10.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1. Then his friend have him $ c2 How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan originally had c0 dollars\n    dan_money = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_bar_cost = c1\n\n    #Dan's friend gave him c2 dollars\n    friend_gave = c2\n\n    #The amount of money Dan has left can be calculated by subtracting the cost of the candy bar from the original amount of money Dan had and adding the amount his friend gave him\n    money_left = dan_money - candy_bar_cost + friend_gave\n\n    return money_left", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 5.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If there were c1 visitors on that dayHow many visited the Buckingham palace within c2 days?", "answer": [949.0], "response": "def visitors_in_c2_days(c0, c1, c2):\n    #calculate the average number of visitors per day\n    avg_visitors_per_day = c1 / 1\n\n    #calculate the total number of visitors in c2 days\n    total_visitors = avg_visitors_per_day * c2\n\n    #add the visitors from the previous day\n    total_visitors += c0\n\n    return total_visitors", "mapping": {"c0": 703.0, "c1": 246.0, "c2": 25.0}}
{"question": "For Gwen's birthday she received c0 dollars from her dad. Her mom gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her mom than she did from her dad?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her dad\n    dad = c0\n\n    #Gwen's mom gave her c1 more dollars\n    mom = c0 + c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The amount of money Gwen received from her mom more than her dad can be calculated by subtracting the original amount of money she received from her dad from the amount of money she received from her mom\n    difference = mom - dad\n\n    return difference", "mapping": {"c0": 5.0, "c1": 7.0, "c2": 4.0}}
{"question": "There are c0 bananas and c1 oranges in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of oranges?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of bananas in Philip's collection\n    bananas = c0\n\n    #number of oranges in Philip's collection\n    oranges = c1\n\n    #number of groups the bananas are organized into\n    banana_groups = c2\n\n    #number of groups the oranges are organized into\n    orange_groups = c3\n\n    #size of each group of oranges can be calculated by dividing the total number of oranges by the number of orange groups\n    orange_group_size = oranges/orange_groups\n\n    return orange_group_size", "mapping": {"c0": 142.0, "c1": 356.0, "c2": 47.0, "c3": 178.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the movies and watched c3 of the booksHow many more movies than books have you read?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of movies read\n    movies_read = c2\n\n    #number of books read\n    books_read = c3\n\n    #difference between number of movies and books read\n    diff = movies_read - books_read\n\n    return diff", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 19.0, "c3": 16.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flourHow many cups of flour did she put in?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs c0 cups of flour and c1 cups of sugar for the recipe\n    flour_needed = c0\n\n    #Mary already put in some cups of flour\n    flour_used = c0 - c2\n\n    #The number of cups of flour Mary put in can be calculated by subtracting the amount of flour she used from the amount needed\n    flour_added = flour_needed - flour_used\n\n    return flour_added", "mapping": {"c0": 12.0, "c1": 5.0, "c2": 2.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers did danny find at the park?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    bottle_caps_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    wrappers_now = c3\n    bottle_caps_now = c2\n\n    #The difference between the number of bottle caps and the number of wrappers Danny found can be calculated by subtracting the number of wrappers found from the number of bottle caps found\n    difference = bottle_caps_found - wrappers_found\n\n    #The number of additional bottle caps Danny has in his collection can be calculated by subtracting the number of bottle caps he found from the number of bottle caps he has now\n    additional_bottle_caps = bottle_caps_now - bottle_caps_found\n\n    #The number of additional wrappers Danny has in his collection can be calculated by subtracting the number of wrappers he found from the number of wrappers he has now\n    additional_wrappers = wrappers_now - wrappers_found\n\n    #The difference between the number of additional bottle caps and the number of additional wrappers can be calculated by subtracting the number of additional wrappers from the number of additional bottle caps\n    final_difference = additional_bottle_caps - additional_wrappers\n\n    return final_difference", "mapping": {"c0": 46.0, "c1": 50.0, "c2": 21.0, "c3": 52.0}}
{"question": "Luke played c0 rounds of a trivia game. If he gained c1 points in each roundHow many points did he score in the game?", "answer": [8142.0], "response": "def trivia_score(c0, c1):\n    #Luke played c0 rounds of the game\n    rounds = c0\n\n    #He gained c1 points in each round\n    points_per_round = c1\n\n    #The total points he scored in the game can be calculated by multiplying the number of rounds he played by the points he gained in each round\n    total_score = rounds * points_per_round\n\n    return total_score", "mapping": {"c0": 177.0, "c1": 46.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many more birds than storks are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of birds and storks before more birds arrived\n    total_before = c0 + c1\n\n    #add the number of birds that arrived to the total number of birds\n    total_now = total_before + c2\n\n    #calculate the number of storks now\n    storks_now = c1\n\n    #calculate the number of birds now\n    birds_now = total_now - storks_now\n\n    #calculate the difference between the number of birds and storks now\n    difference = birds_now - storks_now\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The mouse jumped c1 inches lesser than the frog who jumped c2 inches farther than the grasshopper.How far did the mouse jump?", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The mouse jumped c1 inches lesser than the frog\n    mouse = c2 - c1\n\n    return mouse", "mapping": {"c0": 9.0, "c1": 3.0, "c2": 33.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many more push-ups than crunches did Zachary do?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    #David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = c0 + c2\n    david_crunches = c1 - c3\n\n    #The difference between the number of push-ups and crunches Zachary did can be calculated by subtracting the number of crunches from the number of push-ups\n    difference = zachary_pushups - zachary_crunches\n\n    #The difference between the number of push-ups and crunches David did can be calculated by subtracting the number of crunches from the number of push-ups\n    david_difference = david_pushups - david_crunches\n\n    #The number of more push-ups than crunches Zachary did can be calculated by subtracting the difference between the number of push-ups and crunches David did from the difference between the number of push-ups and crunches Zachary did\n    more_pushups = difference - david_difference\n\n    return more_pushups", "mapping": {"c0": 35.0, "c1": 3.0, "c2": 58.0, "c3": 87.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the afternoon and evening?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c1 emails in the afternoon and c2 emails in the evening\n    afternoon = c1\n    evening = c2\n\n    #The total number of emails Jack received in the afternoon and evening can be calculated by adding the number of emails he received in the afternoon and evening\n    total = afternoon + evening\n\n    return total", "mapping": {"c0": 4.0, "c1": 5.0, "c2": 8.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added some more action figures to the shelf and removed c1 of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he add to the shelf?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures on the shelf\n    original = c0\n\n    #Jerry added some more action figures to the shelf\n    added = c2 - original + c1\n\n    return added", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 8.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday. She spent a total of c2 hours to play tag on both days.How many kids did she play with altogether?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday\n    monday_kids = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday_kids = c1\n\n    #Julia spent a total of c2 hours to play tag on both days\n    total_hours = c2\n\n    #The average number of kids Julia played with per hour can be calculated by dividing the total number of kids by the total number of hours\n    average_kids_per_hour = (monday_kids + tuesday_kids) / total_hours\n\n    #The total number of kids Julia played with can be calculated by multiplying the average number of kids per hour by the total number of hours\n    total_kids = average_kids_per_hour * (c0 + c1)\n\n    return total_kids", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 34.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 baseball cards and Ace cards left.How many more baseball cards than Ace cards does Nell have?", "answer": [266.0], "response": "def Problem(c0, c1, c2):\n    #Nell originally had c0 baseball cards\n    baseball_before = c0\n\n    #Nell originally had c1 Ace cards\n    ace_before = c1\n\n    #Nell now has c2 baseball cards and Ace cards left\n    baseball_now = c2\n\n    #The number of Ace cards Nell has now can be calculated by subtracting the number of baseball cards Nell has now from the total number of cards Nell has now\n    ace_now = (baseball_before + ace_before) - baseball_now\n\n    #The number of baseball cards Nell has now minus the number of Ace cards Nell has now is the difference between the two\n    difference = baseball_now - ace_now\n\n    return difference", "mapping": {"c0": 309.0, "c1": 356.0, "c2": 415.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 alligators were hidingHow many alligators were not hiding?", "answer": [57.0], "response": "def Problem(c0, c1, c2):\n    #The cage originally had c0 snakes and c1 alligators\n    snakes = c0\n    alligators_before = c1\n\n    #c2 alligators were hiding\n    hiding = c2\n\n    #The number of alligators not hiding can be calculated by subtracting the number of hiding alligators from the original number of alligators\n    alligators_now = alligators_before - hiding\n\n    return alligators_now", "mapping": {"c0": 93.0, "c1": 97.0, "c2": 40.0}}
{"question": "You have read c0 books from the ' crazy silly school ' series. If there are a total of c1 different books in the ' crazy silly school ' seriesHow many more do you still have to read?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #you have read c0 books from the 'crazy silly school' series\n    books_read = c0\n\n    #there are a total of c1 different books in the 'crazy silly school' series\n    total_books = c1\n\n    #the number of books you still have to read can be calculated by subtracting the number of books you have read from the total number of books in the series\n    books_left = total_books - books_read\n\n    return books_left", "mapping": {"c0": 8.0, "c1": 14.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She had c1 beads and she was able to make c2 necklaces.How many beads did each necklace need?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Emily had c1 beads and made c2 necklaces\n    beads = c1\n    necklaces = c2\n\n    #Each necklace needs the same number of beads, so we can divide the total number of beads by the number of necklaces to find out how many beads each necklace needs\n    beads_per_necklace = beads // necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 43.0, "c1": 20.0, "c2": 5.0}}
{"question": "Frank put c0 pieces of candy in each bag. If he had c1 pieces of candyHow many bags would he have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Frank put c0 pieces of candy in each bag\n    candy_per_bag = c0\n\n    #Frank had c1 pieces of candy\n    total_candy = c1\n\n    #The number of bags Frank would have can be calculated by dividing the total number of candies by the number of candies in each bag\n    bags = total_candy // candy_per_bag\n\n    return bags", "mapping": {"c0": 11.0, "c1": 22.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers. Then he got c2 new customersHow many customers does he have now?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #After some customers left, he still had c1 customers\n    remaining_customers = c1\n\n    #He then got c2 new customers\n    new_customers = c2\n\n    #The total number of customers he has now can be calculated by adding the remaining customers and the new customers to the original number of customers\n    total_customers = original_customers + remaining_customers + new_customers\n\n    return total_customers", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 10.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many tomatoes did he pick in all?", "answer": [204.0], "response": "def pickTomatoes(c0, c1, c2):\n    #The farmer originally had c0 tomatoes\n    original = c0\n\n    #The farmer picked c1 tomatoes yesterday\n    yesterday = c1\n\n    #The farmer picked c2 tomatoes today\n    today = c2\n\n    #The total number of tomatoes the farmer picked can be calculated by adding the number of tomatoes he picked yesterday and today to the original number of tomatoes he had\n    total = original + yesterday + today\n\n    return total", "mapping": {"c0": 90.0, "c1": 154.0, "c2": 50.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many green and yellow peaches are in the basket?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 red peaches, c1 yellow peaches and c2 green peaches in the basket\n    red = c0\n    yellow = c1\n    green = c2\n\n    #The number of green and yellow peaches in the basket can be calculated by adding the number of yellow and green peaches\n    green_and_yellow = yellow + green\n\n    return green_and_yellow", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 6.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There were c0 bird families living near the mountain. If c1 bird families flew away for winterHow many more bird families flew away for the winter than those that stayed behind?", "answer": [31.0], "response": "def bird_migration(c0, c1):\n    # c0 bird families were living near the mountain\n    stayed_behind = c0\n\n    # c1 bird families flew away for winter\n    flew_away = c1\n\n    # calculate how many more bird families flew away for winter than those that stayed behind\n    difference = flew_away - stayed_behind\n\n    return difference", "mapping": {"c0": 89.0, "c1": 60.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many more orchids than roses are there in the vase now?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c3 - roses_before\n    orchids_cut = c2 - orchids_before\n\n    #There are now c2 orchids and c3 roses in the vase\n    roses_now = c3\n    orchids_now = c2\n\n    #calculate the difference between the number of orchids and roses now\n    diff = orchids_now - roses_now\n\n    #subtract the number of orchids and roses cut from the difference\n    result = diff - (orchids_cut - roses_cut)\n\n    return result", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 13.0, "c3": 3.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There were c0 paintings in the Buckingham palace. There, Rachel learned that c1 visitors came to the Buckingham palace that day. If there were c2 visitors the previous dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [61.0], "response": "def visitors_increase(c0, c1, c2):\n    #number of paintings in the Buckingham palace\n    paintings = c0\n\n    #number of visitors on the current day\n    visitors_today = c1\n\n    #number of visitors on the previous day\n    visitors_yesterday = c2\n\n    #calculate the increase in visitors\n    increase = visitors_today - visitors_yesterday\n\n    return increase", "mapping": {"c0": 39.0, "c1": 661.0, "c2": 600.0}}
{"question": "A waiter had c0 customers. While c1 customers left he got c2 new customers.How many customers does he still have?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 new customers arrived\n    new_customers = c2\n\n    #The number of customers the waiter still has can be calculated by subtracting the number of customers who left from the original number of customers and then adding the number of new customers who arrived\n    customers_now = original_customers - customers_left + new_customers\n\n    return customers_now", "mapping": {"c0": 12.0, "c1": 15.0, "c2": 14.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She has c1 beads and each necklace takes c2 beads.How many necklaces can Emily make?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Emily has c1 beads\n    beads = c1\n\n    #Each necklace takes c2 beads\n    per_necklace = c2\n\n    #Emily can make as many necklaces as the number of beads divided by the number of beads per necklace\n    necklaces = beads // per_necklace\n\n    return necklaces", "mapping": {"c0": 72.0, "c1": 6.0, "c2": 3.0}}
{"question": "He also had c0 aquariums for saltwater animals. The aquarium had c1 saltwater animals in total and every aquarium had the same number of animals.How many saltwater animals does each aquarium have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jason had c0 aquariums for saltwater animals\n    aquariums = c0\n\n    #The aquarium had c1 saltwater animals in total\n    total_animals = c1\n\n    #Each aquarium has the same number of animals, so we can divide the total number of animals by the number of aquariums to get the number of animals per aquarium\n    animals_per_aquarium = total_animals / aquariums\n\n    return animals_per_aquarium", "mapping": {"c0": 26.0, "c1": 52.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many cups of flour did she put in?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of flour and c1 cups of sugar\n    flour = c0\n    sugar = c1\n\n    #Mary still needs c2 more cups of flour than sugar\n    difference = c2\n\n    #Let's assume Mary put in x cups of flour\n    x = 0\n\n    #We know that Mary needs c2 more cups of flour than sugar, so we can set up an equation:\n    #flour - x = sugar + c2\n    #Solving for x:\n    x = flour - sugar - difference\n\n    return x\n\n#The function will return the number of cups of flour Mary put in.", "mapping": {"c0": 11.0, "c1": 7.0, "c2": 2.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many cakes would baker still have?", "answer": [139.0], "response": "def cakes_left(c0, c1, c2, c3):\n    #Baker made c0 cakes\n    cakes = c0\n\n    #Baker made c1 pastries\n    pastries = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of cakes Baker has left can be calculated by subtracting the number of cakes sold from the original number of cakes\n    cakes_left = cakes - sold_cakes\n\n    return cakes_left", "mapping": {"c0": 149.0, "c1": 91.0, "c2": 10.0, "c3": 90.0}}
{"question": "Dave had c0 files and c1 apps on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many files did he delete?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 files and c1 apps on his phone\n    files_before = c0\n    apps_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of files Dave deleted can be calculated by subtracting the number of files he has now from the original number of files he had\n    files_deleted = files_before - files_after\n\n    return files_deleted", "mapping": {"c0": 24.0, "c1": 13.0, "c2": 17.0, "c3": 21.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work today?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The machine made c0 shirts yesterday\n    yesterday = c0\n\n    #The machine made c1 shirts today\n    today = c1\n\n    #The machine can make c2 shirts a minute\n    per_minute = c2\n\n    #The total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = yesterday + today\n\n    #The number of minutes the machine worked today can be calculated by dividing the total number of shirts made by the number of shirts the machine can make per minute\n    minutes_worked = total_shirts / per_minute\n\n    return minutes_worked", "mapping": {"c0": 9.0, "c1": 8.0, "c2": 2.0}}
{"question": "Rebecca wants to split a collection of eggs into c0 groups. Rebecca has c1 marbles and c2 eggs.How many eggs will each group have?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca has c2 eggs\n    eggs = c2\n\n    #Rebecca wants to split the eggs into c0 groups\n    groups = c0\n\n    #Rebecca also has c1 marbles, which we don't need for this problem\n\n    #The number of eggs each group will have can be calculated by dividing the total number of eggs by the number of groups\n    eggs_per_group = eggs / groups\n\n    return eggs_per_group", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 15.0}}
{"question": "Matthew had some crackers. If Matthew gave c0 crackers to each of his c1 friendsHow many crackers did Matthew have?", "answer": [22.0], "response": "def Problem(c0, c1, crackers_given):\n    #Matthew had some crackers\n    crackers_before = crackers_given * c1\n\n    #Matthew gave c0 crackers to each of his c1 friends\n    crackers_given_each = c0\n\n    #The number of crackers Matthew has left can be calculated by subtracting the total number of crackers given to his friends from the original number of crackers he had\n    crackers_now = crackers_before - (crackers_given_each * c1)\n\n    return crackers_now", "mapping": {"c0": 2.0, "c1": 11.0}}
{"question": "Olivia spent c0 dollars at a supermarket. If she has c1 dollars left with herHow much money did she have initially?", "answer": [111.0], "response": "def initial_money(c0, c1):\n    #Olivia spent c0 dollars at the supermarket\n    spent = c0\n\n    #Olivia has c1 dollars left with her\n    left = c1\n\n    #The initial amount of money Olivia had can be calculated by adding the amount she spent to the amount she has left\n    initial = spent + left\n\n    return initial", "mapping": {"c0": 78.0, "c1": 33.0}}
{"question": "If Lewis earns $ c0 every week during the c1 weeks of a harvest season.How much money will he earn if he works for c2 harvest seasons?", "answer": [22090603.0], "response": "def harvest_earnings(c0, c1, c2):\n    #Lewis earns c0 dollars every week during the harvest season\n    weekly_earnings = c0\n\n    #The harvest season lasts for c1 weeks\n    weeks_per_season = c1\n\n    #Lewis will work for c2 harvest seasons\n    num_seasons = c2\n\n    #The total amount of money Lewis will earn can be calculated by multiplying his weekly earnings by the number of weeks per season and the number of seasons he will work\n    total_earnings = weekly_earnings * weeks_per_season * num_seasons\n\n    return total_earnings", "mapping": {"c0": 1357.0, "c1": 223.0, "c2": 73.0}}
{"question": "Because of the decision Sofia asked c0 students to suggest specific types of food. c1 students suggested adding mashed potatoes while others suggested adding bacon to the menu.How many students suggested bacon?", "answer": [125.0], "response": "def Problem(c0, c1):\n    #c0 students were asked to suggest specific types of food\n    total_students = c0\n\n    #c1 students suggested adding mashed potatoes\n    mashed_potatoes = c1\n\n    #The remaining students suggested adding bacon\n    bacon = total_students - mashed_potatoes\n\n    return bacon", "mapping": {"c0": 310.0, "c1": 185.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many emails did jack receive in the day?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    emails = c0 + c2\n\n    return emails", "mapping": {"c0": 3.0, "c1": 64.0, "c2": 5.0, "c3": 54.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many cookies did Paco have left?", "answer": [75.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_now = paco_original - c1\n\n    #Paco bought c2 more cookies\n    paco_final = paco_now + c2\n\n    return paco_final", "mapping": {"c0": 40.0, "c1": 2.0, "c2": 37.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes as well as bacon while c1 suggested adding only bacon to the menuHow many students suggested adding bacon?", "answer": [569.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes as well as bacon\n    #c1 students suggested adding only bacon\n\n    #The total number of students who suggested adding bacon can be calculated by adding the number of students who suggested adding mashed potatoes and bacon to the number of students who suggested adding only bacon\n    bacon_suggested = c0 + c1\n\n    return bacon_suggested", "mapping": {"c0": 218.0, "c1": 351.0}}
{"question": "If each bag has c0 cookies and you had c1 bags of cookiesHow many cookies would you have?", "answer": [2173.0], "response": "def Problem(c0, c1):\n    #each bag has c0 cookies\n    cookies_per_bag = c0\n\n    #you have c1 bags of cookies\n    num_bags = c1\n\n    #The total number of cookies you have can be calculated by multiplying the number of cookies per bag by the number of bags you have\n    total_cookies = cookies_per_bag * num_bags\n\n    return total_cookies", "mapping": {"c0": 41.0, "c1": 53.0}}
{"question": "Rachel had to complete c0 pages of reading homework and c1 pages of math homework.How many more pages of math homework than reading homework did she have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel had c0 pages of reading homework\n    reading = c0\n\n    #Rachel had c1 pages of math homework\n    math = c1\n\n    #The difference between the number of pages of math homework and reading homework can be calculated by subtracting the number of pages of reading homework from the number of pages of math homework\n    difference = math - reading\n\n    return difference", "mapping": {"c0": 2.0, "c1": 4.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many balloons did Allan bring to the park?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Allan bought c2 more balloons at the park\n    bought = c2\n\n    #The total number of balloons Allan brought to the park can be calculated by adding the number of balloons he originally brought and the number he bought at the park\n    total = allan + bought\n\n    return total", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 3.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on tuesday than on wednesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The difference between the number of kids Julia played with on Tuesday and Wednesday can be calculated by subtracting the number of kids she played with on Wednesday from the number of kids she played with on Tuesday\n    difference = tuesday - wednesday\n\n    return difference", "mapping": {"c0": 8.0, "c1": 11.0, "c2": 9.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the t-shirts?", "answer": [4300.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Razorback shop made c0 dollars off each jersey and c1 dollars off each t-shirt\n    tshirt_price = c1\n\n    #During the game, they sold c2 t-shirts\n    tshirt_sold = c2\n\n    #The total money they made from selling t-shirts can be calculated by multiplying the price of each t-shirt by the number of t-shirts sold\n    tshirt_money = tshirt_price * tshirt_sold\n\n    return tshirt_money", "mapping": {"c0": 5.0, "c1": 215.0, "c2": 20.0, "c3": 64.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many more children got off the bus than those that got on?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got off the bus\n    off = c1\n\n    #c2 children were left on the bus after some more got on\n    now = c2\n\n    #The number of children that got on the bus can be calculated by subtracting the number of children that got off and the original number of children from the number of children on the bus now\n    on = now - off - original\n\n    #The number of children that got off the bus than those that got on can be calculated by subtracting the number of children that got on from the number of children that got off\n    more_off = off - on\n\n    return more_off", "mapping": {"c0": 36.0, "c1": 68.0, "c2": 12.0}}
{"question": "Brenda's mother made c0 cookies for c1 guests. If each of them had the same number of cookiesHow many did each of them have?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Brenda's mother made c0 cookies\n    cookies = c0\n\n    #There are c1 guests\n    guests = c1\n\n    #Each guest will have the same number of cookies, so we can divide the total number of cookies by the number of guests to find out how many cookies each guest will have\n    cookies_per_guest = cookies / guests\n\n    return cookies_per_guest", "mapping": {"c0": 14.0, "c1": 2.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found some more bags worth of cans. If she had a total of c1 bags altogetherHow many bags did she find on the next day?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Tiffany originally had c0 bags of cans\n    bags_before = c0\n\n    #After finding some more bags, she now has c1 bags altogether\n    bags_after = c1\n\n    #The number of bags she found on the next day can be calculated by subtracting the original number of bags from the total number of bags she has now\n    found = bags_after - bags_before\n\n    return found", "mapping": {"c0": 4.0, "c1": 6.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many more girls than boys does the school have?", "answer": [687.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 girls in the school\n    girls_before = c0\n\n    #there are originally c1 boys in the school\n    boys_before = c1\n\n    #c2 more girls joined the school\n    girls_joined = c2\n\n    #The number of girls in the school after the new girls joined can be calculated by adding the original number of girls and the number of girls who joined\n    girls_after = girls_before + girls_joined\n\n    #The number of boys in the school remains the same\n    boys_after = boys_before\n\n    #The difference between the number of girls and boys in the school can be calculated by subtracting the number of boys from the number of girls\n    difference = girls_after - boys_after\n\n    #The number of more girls than boys in the school can be calculated by subtracting the original number of girls from the difference\n    more_girls = difference - girls_before\n\n    return more_girls", "mapping": {"c0": 632.0, "c1": 410.0, "c2": 465.0}}
{"question": "Emily is making bead necklaces for her friends where each necklace takes c0 beads. She made c1 necklaces.How many beads did Emily have?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #each necklace takes c0 beads\n    beads_per_necklace = c0\n\n    #Emily made c1 necklaces\n    num_necklaces = c1\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces by the number of beads per necklace\n    total_beads = beads_per_necklace * num_necklaces\n\n    return total_beads", "mapping": {"c0": 5.0, "c1": 4.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a house and c2 blocks to build a tower.How many more blocks did he use to build the tower than he did to build the house?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    randy_blocks = c0\n\n    #Randy uses c1 blocks to build a house\n    house_blocks = c1\n\n    #Randy uses c2 blocks to build a tower\n    tower_blocks = c2\n\n    #The difference between the number of blocks used to build the tower and the number of blocks used to build the house can be calculated by subtracting the number of house blocks from the number of tower blocks\n    difference = tower_blocks - house_blocks\n\n    return difference", "mapping": {"c0": 95.0, "c1": 20.0, "c2": 50.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of birds and storks before new birds arrived\n    total_before = c0 + c1\n\n    #add the number of new birds to the total number of birds\n    total_now = total_before + c2\n\n    #calculate the number of storks after new birds arrived\n    storks_now = total_now - c0\n\n    #calculate the number of birds after new birds arrived\n    birds_now = c0\n\n    #calculate the difference between the number of storks and birds\n    difference = storks_now - birds_now\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 3.0}}
{"question": "The Razorback t-shirt shop made $ c0 dollars from selling c1 t-shirt during the Arkansas and Texas tech game they.What is the cost of each t-shirt?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #The Razorback t-shirt shop made c0 dollars from selling c1 t-shirts\n    revenue = c0\n    num_shirts = c1\n\n    #The cost of each t-shirt can be calculated by dividing the total revenue by the number of t-shirts sold\n    cost_per_shirt = revenue / num_shirts\n\n    return cost_per_shirt", "mapping": {"c0": 51.0, "c1": 3.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many more cookies did he give to his friend than those he ate?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_ate = c1\n\n    #Paco gave c2 cookies to his friend\n    paco_gave = c2\n\n    #The number of cookies Paco gave to his friend more than those he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he gave to his friend\n    more_gave = paco_gave - paco_ate\n\n    return more_gave", "mapping": {"c0": 12.0, "c1": 16.0, "c2": 21.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [22.0], "response": "def visitors_increase(c0, c1):\n    #calculate the difference between the number of visitors on the current day and the previous day\n    increase = c0 - c1\n    return increase", "mapping": {"c0": 317.0, "c1": 295.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles while he lost c2 marbles.How many more marbles did he find than those he lost?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh found c1 marbles\n    found = c1\n\n    #Josh lost c2 marbles\n    lost = c2\n\n    #The difference between the number of marbles Josh found and lost can be calculated by subtracting the number of lost marbles from the number of found marbles\n    difference = found - lost\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 5.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes while c1 suggested adding bacon to the menuHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [366.0], "response": "def Problem(c0, c1):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested bacon\n    bacon = c1\n\n    #calculate the difference between the number of students who suggested mashed potatoes and bacon\n    difference = mashed_potatoes - bacon\n\n    return difference", "mapping": {"c0": 408.0, "c1": 42.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many cookies did paco have left?", "answer": [22.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_now = paco_original - c1\n\n    #Paco gave c2 cookies to his friend\n    paco_now = paco_now - c2\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies he ate and gave away from the original number of cookies he had\n    cookies_left = paco_now\n\n    return cookies_left", "mapping": {"c0": 40.0, "c1": 5.0, "c2": 13.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many more cookies did he eat than those he gave to his friend?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_ate = c1\n\n    #Paco gave c2 cookies to his friend\n    paco_gave = c2\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies he ate and gave away from the original number of cookies he had\n    paco_left = paco_original - paco_ate - paco_gave\n\n    #The number of cookies Paco ate more than he gave to his friend can be calculated by subtracting the number of cookies he gave to his friend from the number of cookies he ate\n    ate_more = paco_ate - paco_gave\n\n    return ate_more", "mapping": {"c0": 17.0, "c1": 14.0, "c2": 13.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday. She spent a total of c2 hours to play tag on both days.How many more kids did she play with on monday than on tuesday?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday\n    monday_kids = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday_kids = c1\n\n    #Julia spent a total of c2 hours to play tag on both days\n    total_hours = c2\n\n    #The average number of kids Julia played with per hour can be calculated by dividing the total number of kids by the total number of hours\n    avg_kids_per_hour = (monday_kids + tuesday_kids) / total_hours\n\n    #The number of kids Julia played with on monday can be calculated by multiplying the average number of kids per hour by the number of hours she played on monday\n    monday_kids_played = avg_kids_per_hour * c0\n\n    #The number of kids Julia played with on tuesday can be calculated by multiplying the average number of kids per hour by the number of hours she played on tuesday\n    tuesday_kids_played = avg_kids_per_hour * c1\n\n    #The difference between the number of kids Julia played with on monday and tuesday can be calculated by subtracting the number of kids she played with on tuesday from the number of kids she played with on monday\n    difference = monday_kids_played - tuesday_kids_played\n\n    return difference", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 38.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money did he spend to buy chocolate than he did to buy candy bar?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_cost = c1\n\n    #Dan bought a chocolate for 3 dollars\n    chocolate_cost = 3\n\n    #The difference in cost between the chocolate and candy bar can be calculated by subtracting the cost of the candy bar from the cost of the chocolate\n    difference = chocolate_cost - candy_cost\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground.How many more marbles did Ed have than Doug then?", "answer": [12.0], "response": "def Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Ed lost c1 of his marbles at the playground\n    ed_now = ed - c1\n\n    #The number of marbles Ed had more than Doug after losing c1 marbles can be calculated by subtracting Doug's number of marbles from Ed's number of marbles now\n    more_than_doug = ed_now - doug\n\n    return more_than_doug", "mapping": {"c0": 29.0, "c1": 17.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How much farther did the mouse jump than the grasshopper?", "answer": [30.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The frog jumped c1 inches farther than the grasshopper\n    frog = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse = c0 + c1 + c2\n\n    #The distance the mouse jumped farther than the grasshopper can be calculated by subtracting the distance the grasshopper jumped from the distance the mouse jumped\n    distance = mouse - grasshopper\n\n    return distance", "mapping": {"c0": 19.0, "c1": 10.0, "c2": 20.0}}
{"question": "Frank was reading through his favorite book. It took him c0 days to finish the book. If the book had c1 pagesHow many pages did he read per day?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Frank finished the book in c0 days\n    days = c0\n\n    #The book had c1 pages\n    pages = c1\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = pages / days\n\n    return pages_per_day", "mapping": {"c0": 16.0, "c1": 112.0}}
{"question": "There are c0 different books in the ' crazy silly school ' series. If you are yet to read c1 of the booksHow many books have you already read?", "answer": [15.0], "response": "def Problem(c0, c1):\n    #there are c0 books in the series\n    total_books = c0\n\n    #you have read c1 books\n    read_books = c1\n\n    #The number of books you have not read can be calculated by subtracting the number of books you have read from the total number of books in the series\n    not_read = total_books - read_books\n\n    #The number of books you have already read can be calculated by subtracting the number of books you have not read from the total number of books in the series\n    read = total_books - not_read\n\n    return read", "mapping": {"c0": 20.0, "c1": 5.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many balloons did Allan and Jake have in the park?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Allan bought c2 more balloons at the park\n    bought = c2\n\n    #The total number of balloons they have in the park can be calculated by adding the number of balloons Allan and Jake brought to the number of balloons Allan bought at the park\n    total = allan + jake + bought\n\n    return total", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 2.0}}
{"question": "Josh lost c0 marbles. If he had c1 marbles in his collection earlierHow many marbles does he have now?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Josh had c1 marbles earlier\n    marbles_before = c1\n\n    #Josh lost c0 marbles\n    lost = c0\n\n    #The number of marbles Josh has now can be calculated by subtracting the number of marbles he lost from the original number of marbles he had\n    marbles_now = marbles_before - lost\n\n    return marbles_now", "mapping": {"c0": 11.0, "c1": 19.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Jake bought c2 more balloons at the park\n    jake_park = jake + c2\n\n    #The difference between the number of balloons Jake has in the park and Allan has is the answer\n    difference = jake_park - allan\n\n    return difference", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into c0 rows with c1 pencils in each row.How many pencils does she have?", "answer": [154.0], "response": "def Problem(c0, c1):\n    #Faye has c0 rows of pencils\n    rows = c0\n\n    #Each row has c1 pencils\n    pencils_per_row = c1\n\n    #The total number of pencils can be calculated by multiplying the number of rows by the number of pencils in each row\n    total_pencils = rows * pencils_per_row\n\n    return total_pencils", "mapping": {"c0": 14.0, "c1": 11.0}}
{"question": "A grocery store had c0 bottles of regular soda and c1 bottles of diet soda.How many more bottles of diet soda than regular soda did they have?", "answer": [39.0], "response": "def Problem(c0, c1):\n    #The grocery store had c0 bottles of regular soda\n    regular_soda = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet_soda = c1\n\n    #The difference between the number of diet soda and regular soda can be calculated by subtracting the number of regular soda from the number of diet soda\n    difference = diet_soda - regular_soda\n\n    return difference", "mapping": {"c0": 22.0, "c1": 61.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many red peaches are in the baskets altogether?", "answer": [96.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #each basket has c1 red peaches and c2 green peaches\n    red_per_basket = c1\n\n    #the total number of red peaches can be calculated by multiplying the number of baskets by the number of red peaches per basket\n    total_red = baskets * red_per_basket\n\n    return total_red", "mapping": {"c0": 6.0, "c1": 16.0, "c2": 18.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the rest stay home. Lawrence county has c1 kids in all.About how many kids stayed home?", "answer": [28462.0], "response": "def Problem(c0, c1):\n    #c0 kids went to camp\n    went_to_camp = c0\n\n    #c1 kids are in Lawrence county in total\n    total_kids = c1\n\n    #The number of kids who stayed home can be estimated by subtracting the number of kids who went to camp from the total number of kids in Lawrence county\n    stayed_home = total_kids - went_to_camp\n\n    return stayed_home", "mapping": {"c0": 800059.0, "c1": 828521.0}}
{"question": "There are c0 pots. Each pot has c1 flowers and c2 sticks in it.How many flowers are there in all?", "answer": [10011.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pots\n    pots = c0\n\n    #each pot has c1 flowers and c2 sticks\n    flowers_per_pot = c1\n\n    #The total number of flowers can be calculated by multiplying the number of pots by the number of flowers per pot\n    total_flowers = pots * flowers_per_pot\n\n    return total_flowers", "mapping": {"c0": 141.0, "c1": 71.0, "c2": 91.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many more balloons did Allan have than Jake in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Allan bought c2 more balloons at the park\n    bought = c2\n\n    #The total number of balloons Allan has in the park is the sum of the balloons he brought and the balloons he bought\n    allan_total = allan + bought\n\n    #The difference between the total number of balloons Allan has and the number of balloons Jake brought is the number of balloons Allan has more than Jake in the park\n    more_balloons = allan_total - jake\n\n    return more_balloons", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": "A chef had c0 apples. After making some pies, he had used 35.How many apples remained?", "answer": [23.0], "response": "def Problem(c0):\n    #The chef originally had c0 apples\n    apples_before = c0\n\n    #After making pies, the chef used 35 apples\n    used = 35\n\n    #The number of apples remaining can be calculated by subtracting the number of apples used from the original number of apples\n    apples_after = apples_before - used\n\n    return apples_after", "mapping": {"c0": 58.0}}
{"question": "You had c0 bags with equal number of cookies. If you had c1 candies and c2 cookies in totalHow many cookies does each bag have?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #You had c0 bags with equal number of cookies\n    bags = c0\n\n    #You had c1 candies and c2 cookies in total\n    candies = c1\n    cookies_total = c2\n\n    #The total number of cookies can be calculated by multiplying the number of bags by the number of cookies in each bag\n    cookies_before = bags * (cookies_total / (c0 + c1))\n\n    #The number of cookies in each bag can be calculated by dividing the total number of cookies by the number of bags\n    cookies_per_bag = cookies_before / bags\n\n    return cookies_per_bag", "mapping": {"c0": 26.0, "c1": 15.0, "c2": 52.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many sacks of oranges will they have after c2 days of harvest?", "answer": [1862.0], "response": "def Problem(c0, c1, c2):\n    #each day they harvest c0 sacks of oranges\n    sacks_per_day = c0\n\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #the total number of sacks harvested can be calculated by multiplying the number of sacks per day by the number of days\n    total_sacks = sacks_per_day * days\n\n    #the total number of oranges can be calculated by multiplying the number of sacks by the number of oranges per sack\n    total_oranges = total_sacks * oranges_per_sack\n\n    return total_sacks", "mapping": {"c0": 38.0, "c1": 42.0, "c2": 49.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many orchids did she cut?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #there are now c2 orchids and c3 roses in the vase\n    roses_now = c3\n    orchids_now = c2\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = roses_before - roses_now\n    orchids_cut = orchids_before - orchids_now\n\n    #return the number of orchids Jessica cut\n    return orchids_cut", "mapping": {"c0": 16.0, "c1": 3.0, "c2": 7.0, "c3": 13.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the afternoon than in the evening?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon = c1\n\n    #Jack received c2 emails in the evening\n    evening = c2\n\n    #The difference between the number of emails Jack received in the afternoon and in the evening can be calculated by subtracting the number of emails received in the evening from the number of emails received in the afternoon\n    difference = afternoon - evening\n\n    return difference", "mapping": {"c0": 10.0, "c1": 5.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. She had c1 packs of pencils each one having c2 pencils.How many pencils does she have?", "answer": [84.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 packs of pencils\n    packs = c1\n\n    #Each pack has c2 pencils\n    per_pack = c2\n\n    #Faye placed her pencils into rows with c0 pencils in each row\n    per_row = c0\n\n    #The total number of pencils Faye has can be calculated by multiplying the number of packs by the number of pencils per pack and adding the number of pencils in each row\n    total_pencils = (packs * per_pack) + per_row\n\n    return total_pencils", "mapping": {"c0": 22.0, "c1": 6.0, "c2": 14.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many did he have left after yesterday's picking?", "answer": [104.0], "response": "def tomatoes_left(c0, c1, c2):\n    #The farmer originally had c0 tomatoes\n    original = c0\n\n    #The farmer picked c1 tomatoes yesterday\n    yesterday = c1\n\n    #The farmer picked c2 tomatoes today\n    today = c2\n\n    #The number of tomatoes the farmer has left after yesterday's picking can be calculated by subtracting the number of tomatoes picked yesterday from the original number of tomatoes\n    left = original - yesterday\n\n    return left", "mapping": {"c0": 160.0, "c1": 56.0, "c2": 41.0}}
{"question": "Each pot has c0 flowers in it. There are c1 flowers in total.How many pots are there in all?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #each pot has c0 flowers in it\n    flowers_per_pot = c0\n\n    #there are c1 flowers in total\n    total_flowers = c1\n\n    #the number of pots can be calculated by dividing the total number of flowers by the number of flowers per pot\n    pots = total_flowers // flowers_per_pot\n\n    return pots", "mapping": {"c0": 40.0, "c1": 400.0}}
{"question": "c0 campers went rowing in the morning. Some more campers went rowing in the afternoon. If a total of c1 campers went rowing that dayHow many campers went rowing in the afternoon?", "answer": [17.0], "response": "def afternoon_campers(c0, c1):\n    #c0 campers went rowing in the morning\n    morning_campers = c0\n\n    #a total of c1 campers went rowing that day\n    total_campers = c1\n\n    #the number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing that day\n    afternoon_campers = total_campers - morning_campers\n\n    return afternoon_campers", "mapping": {"c0": 15.0, "c1": 32.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes while c1 suggested adding bacon to the menuHow many more students suggested bacon than those that suggested mashed potatoes?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 students suggested adding bacon\n    bacon = c1\n\n    #The difference between the number of students who suggested bacon and mashed potatoes can be calculated by subtracting the number of students who suggested mashed potatoes from the number of students who suggested bacon\n    difference = bacon - mashed_potatoes\n\n    return difference", "mapping": {"c0": 479.0, "c1": 489.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles did Doug have initially?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Doug lost c1 of his marbles at the playground\n    doug_now = doug - c1\n\n    #Ed had c2 marbles\n    ed_now = c2\n\n    #We can use algebra to solve for doug's initial number of marbles\n    #ed = doug + c0\n    #doug = ed - c0\n    doug_initial = ed_now - c0\n\n    return doug_initial", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 27.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of math homework than reading homeworkHow many pages of reading homework did she have to complete?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #Rachel had to complete c1 more pages of math homework than reading homework\n    math_more = c1\n\n    #Let's assume Rachel had to complete r pages of reading homework\n    reading_homework = r\n\n    #The total number of pages Rachel had to complete is the sum of math and reading homework\n    total_homework = math_homework + reading_homework\n\n    #According to the problem, math homework is c1 more than reading homework\n    #So we can write an equation: math_homework = reading_homework + c1\n    #Substituting this equation into the total_homework equation, we get:\n    total_homework = reading_homework + c1 + reading_homework\n\n    #Simplifying the equation, we get:\n    total_homework = 2 * reading_homework + c1\n\n    #Solving for reading_homework, we get:\n    reading_homework = (total_homework - c1) / 2\n\n    return reading_homework", "mapping": {"c0": 7.0, "c1": 4.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies yesterday and c1 raisin cookies and c2 chocolate chip cookies this morning.How many more chocolate chip cookies than raisin cakes did Helen bake?", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #Helen baked c0 chocolate chip cookies yesterday\n    choco_yesterday = c0\n\n    #Helen baked c1 raisin cookies this morning\n    raisin_today = c1\n\n    #Helen baked c2 chocolate chip cookies this morning\n    choco_today = c2\n\n    #The total number of chocolate chip cookies Helen baked can be calculated by adding the number of chocolate chip cookies she baked yesterday and today\n    total_choco = choco_yesterday + choco_today\n\n    #The number of more chocolate chip cookies than raisin cookies Helen baked can be calculated by subtracting the number of raisin cookies from the total number of chocolate chip cookies\n    more_choco = total_choco - raisin_today\n\n    return more_choco", "mapping": {"c0": 19.0, "c1": 231.0, "c2": 237.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had some bags of cans. The next day she found c0 more bags worth of cans. If she had a total of c1 bags altogetherHow many bags did she have on monday?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Tiffany had some bags of cans on Monday\n    monday_bags = c1 - c0\n\n    return monday_bags", "mapping": {"c0": 4.0, "c1": 8.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny throw away than those he found at the park?", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #Danny threw away c1 old bottle caps\n    thrown_away = c1\n\n    #Danny now has c2 bottle caps in his collection\n    now = c2\n\n    #The number of bottle caps Danny threw away more than those he found at the park can be calculated by adding the number of bottle caps he threw away to the original number of bottle caps he found at the park, and then subtracting the number of bottle caps he has now in his collection.\n    more_thrown_away = found + thrown_away - now\n\n    return more_thrown_away", "mapping": {"c0": 30.0, "c1": 63.0, "c2": 42.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of sugar.How many more cups of flour than cups of sugar does she need to add now?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs to add c0 cups of sugar and c1 cups of flour in total\n    total = c0 + c1\n\n    #Mary already put in c2 cups of sugar\n    sugar_added = c2\n\n    #Mary needs to add (total - sugar_added) cups of flour to complete the recipe\n    flour_needed = total - sugar_added - c0\n\n    #The difference between the cups of flour and cups of sugar needed can be calculated by subtracting c0 from flour_needed\n    difference = flour_needed - c0\n\n    return difference", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 10.0}}
{"question": "Kelly has c0 nintendo games.How many does she need to buy so that she will have c1 games left?", "answer": [118.0], "response": "def Problem(c0, c1):\n    #Kelly originally has c0 nintendo games\n    games_before = c0\n\n    #Kelly wants to have c1 nintendo games left\n    games_after = c1\n\n    #The number of nintendo games Kelly needs to buy can be calculated by subtracting the number of games she has now from the number of games she wants to have\n    buy = games_after - games_before\n\n    return buy", "mapping": {"c0": 22.0, "c1": 140.0}}
{"question": "Mom buys c0 white t - shirts in total. If white t - shirts can be purchased in packages and mom buys c1 packagesHow many white t - shirts does each package have?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Mom buys c0 white t-shirts in total\n    total_shirts = c0\n\n    #Mom buys c1 packages of white t-shirts\n    packages = c1\n\n    #Each package has the same number of white t-shirts, so we can divide the total number of shirts by the number of packages to find out how many shirts are in each package\n    shirts_per_package = total_shirts / packages\n\n    return shirts_per_package", "mapping": {"c0": 70.0, "c1": 14.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many will he have left after today?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The farmer originally had c0 tomatoes\n    tomatoes_before = c0\n\n    #The farmer picked c1 tomatoes yesterday\n    picked_yesterday = c1\n\n    #The farmer picked c2 tomatoes today\n    picked_today = c2\n\n    #The number of tomatoes the farmer has left after today can be calculated by subtracting the number of tomatoes picked yesterday and today from the original number of tomatoes\n    tomatoes_now = tomatoes_before - picked_yesterday - picked_today\n\n    return tomatoes_now", "mapping": {"c0": 171.0, "c1": 134.0, "c2": 30.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Over the weekend Fred delivered newspapers earning c2 dollars and washed cars earning c3 dollars.How much money does Fred have now?", "answer": [192.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred originally had c0 dollars\n    fred_original = c0\n\n    #Jason originally had c1 dollars\n    jason_original = c1\n\n    #Fred earned c2 dollars from delivering newspapers\n    fred_newspapers = c2\n\n    #Fred earned c3 dollars from washing cars\n    fred_cars = c3\n\n    #The total amount of money Fred has now can be calculated by adding his original amount of money with the money he earned from delivering newspapers and washing cars\n    fred_now = fred_original + fred_newspapers + fred_cars\n\n    return fred_now", "mapping": {"c0": 47.0, "c1": 99.0, "c2": 111.0, "c3": 34.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of flour does she need to add?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs c1 cups of flour in total\n    flour_needed = c1\n\n    #Mary already put in c2 cups of flour\n    flour_used = c2\n\n    #Mary needs to add the difference between the total flour needed and the flour already used\n    flour_to_add = flour_needed - flour_used\n\n    return flour_to_add", "mapping": {"c0": 6.0, "c1": 14.0, "c2": 7.0, "c3": 60.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many more orchids than roses are there in the vase now?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c2 - c0\n    orchids_cut = c3 - c1\n\n    #there are now c2 roses and c3 orchids in the vase\n    roses_now = c2\n    orchids_now = c3\n\n    #calculate the difference between the number of orchids and roses now\n    diff = orchids_now - roses_now\n\n    #subtract the number of orchids and roses cut from the difference\n    diff -= (orchids_cut - roses_cut)\n\n    return diff", "mapping": {"c0": 7.0, "c1": 12.0, "c2": 11.0, "c3": 20.0}}
{"question": "After Jessie started to go jogging everyday she lost c0 kilograms. She weighed c1 kilograms before beginning jogging.How much does she weigh now?", "answer": [34.0], "response": "def Problem(c0, c1):\n    #Jessie weighed c1 kilograms before beginning jogging\n    weight_before = c1\n\n    #After jogging everyday, she lost c0 kilograms\n    lost_weight = c0\n\n    #The weight she weighs now can be calculated by subtracting the lost weight from the original weight\n    weight_now = weight_before - lost_weight\n\n    return weight_now", "mapping": {"c0": 35.0, "c1": 69.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many children got off the bus at the bus stop?", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got on the bus at the stop\n    got_on = c1\n\n    #c2 children were on the bus after some got off\n    now = c2\n\n    #The number of children who got off the bus can be calculated by subtracting the number of children who got on the bus from the difference between the original number of children and the current number of children on the bus\n    got_off = original - now + got_on\n\n    return got_off", "mapping": {"c0": 22.0, "c1": 40.0, "c2": 2.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies have you read?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of books read\n    books_read = c2\n\n    #number of movies watched\n    movies_watched = c3\n\n    #difference between number of books and movies\n    difference = c0 - c1\n\n    #number of books more than movies read\n    books_more = books_read - (movies_watched * difference)\n\n    return books_more", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 13.0, "c3": 12.0}}
{"question": "Emily is making bead necklaces for her friends. She made c0 necklaces and each necklace takes c1 beads.How many beads did Emily have?", "answer": [308.0], "response": "def Problem(c0, c1):\n    #Emily made c0 necklaces\n    necklaces = c0\n\n    #Each necklace takes c1 beads\n    beads_per_necklace = c1\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces by the number of beads per necklace\n    total_beads = necklaces * beads_per_necklace\n\n    return total_beads", "mapping": {"c0": 11.0, "c1": 28.0}}
{"question": "A farmer had c0 tomatoes and c1 potatoes in his garden. If he picked c2 potatoesHow many tomatoes and potatoes does he have left?", "answer": [80.0], "response": "def Problem(c0, c1, c2):\n    #The farmer had c0 tomatoes and c1 potatoes\n    tomatoes = c0\n    potatoes = c1\n\n    #The farmer picked c2 potatoes\n    picked_potatoes = c2\n\n    #The number of tomatoes and potatoes left can be calculated by subtracting the number of picked potatoes from the original number of potatoes and tomatoes\n    tomatoes_left = tomatoes\n    potatoes_left = potatoes - picked_potatoes\n\n    return tomatoes_left, potatoes_left", "mapping": {"c0": 175.0, "c1": 77.0, "c2": 172.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars. Jason delivered newspapers and now has c3 dollars.How much money did they earn by washing cars?", "answer": [4.0], "response": "def money_earned(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Fred now has c2 dollars after washing cars\n    fred_now = c2\n\n    #Jason now has c3 dollars after delivering newspapers\n    jason_now = c3\n\n    #The amount of money Fred earned by washing cars can be calculated by subtracting his original amount of money from his current amount of money\n    fred_earned = fred_now - fred_before\n\n    return fred_earned", "mapping": {"c0": 111.0, "c1": 40.0, "c2": 115.0, "c3": 44.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each block. If there are c1 houses on a blockHow many pieces of junk mail should he give in each block?", "answer": [180.0], "response": "def Problem(c0, c1):\n    #The mailman has to give c0 pieces of junk mail to each house\n    pieces_per_house = c0\n\n    #There are c1 houses on a block\n    num_houses = c1\n\n    #The total number of pieces of junk mail the mailman should give in each block can be calculated by multiplying the number of houses by the number of pieces per house\n    total_pieces = pieces_per_house * num_houses\n\n    return total_pieces", "mapping": {"c0": 9.0, "c1": 20.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many cakes did each person eat?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    num_friends = c0\n\n    #Matthew had c1 crackers initially\n    crackers = c1\n\n    #Matthew had c2 cakes initially\n    cakes = c2\n\n    #The total number of cakes and crackers Matthew gave to his friends is c0 times 2\n    total = num_friends * 2\n\n    #The number of cakes each person ate can be calculated by dividing the total number of cakes by the number of friends\n    cakes_per_person = cakes / num_friends\n\n    return cakes_per_person", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 8.0}}
{"question": "Jessica cut some roses from her flower garden to put in her vase. There are now c0 roses in the vase. If there were c1 roses in the vase initiallyHow many roses did she cut?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #there are c1 roses in the vase initially\n    initial = c1\n\n    #there are now c0 roses in the vase\n    now = c0\n\n    #The number of roses Jessica cut can be calculated by subtracting the number of roses in the vase now from the initial number of roses in the vase\n    cut = initial - now\n\n    return cut", "mapping": {"c0": 19.0, "c1": 3.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many more children got off the bus than those that got on?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got on the bus\n    got_on = c1\n\n    #c2 children were on the bus after some got off\n    now = c2\n\n    #The number of children that got off the bus can be calculated by subtracting the number of children on the bus now from the sum of the original number of children and the number of children that got on the bus\n    got_off = original + got_on - now\n\n    #The number of children that got on the bus can be calculated by subtracting the original number of children from the sum of the number of children on the bus now and the number of children that got off the bus\n    got_on = now + got_off - original\n\n    #The difference between the number of children that got off the bus and the number of children that got on the bus is the answer to the problem\n    answer = got_off - got_on\n\n    return answer", "mapping": {"c0": 23.0, "c1": 24.0, "c2": 8.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many pages does the book have altogether?", "answer": [125.0], "response": "def Problem(c0, c1, c2, c3):\n    #there are c0 chapters in the book\n    chapters = c0\n\n    #the first chapter is c1 pages long\n    first_chapter = c1\n\n    #the second chapter is c2 pages long\n    second_chapter = c2\n\n    #the third chapter is c3 pages long\n    third_chapter = c3\n\n    #the total number of pages in the book can be calculated by adding the number of pages in each chapter\n    total_pages = first_chapter + second_chapter + third_chapter\n\n    #multiply the total number of pages by the number of chapters to get the total number of pages in the book\n    total_pages_in_book = total_pages * chapters\n\n    return total_pages_in_book", "mapping": {"c0": 3.0, "c1": 66.0, "c2": 35.0, "c3": 24.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many peaches are in the basket?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #The total number of peaches in the basket can be calculated by adding the number of red, yellow, and green peaches\n    total_peaches = c0 + c1 + c2\n\n    return total_peaches", "mapping": {"c0": 7.0, "c1": 15.0, "c2": 8.0}}
{"question": "Paige was helping her mom plant flowers and they put c0 seeds in each flower bed. If they planted c1 seeds altogtherHow many flower beds did they have?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #They put c0 seeds in each flower bed\n    seeds_per_bed = c0\n\n    #They planted c1 seeds altogether\n    total_seeds = c1\n\n    #The number of flower beds they have can be calculated by dividing the total number of seeds by the number of seeds per bed\n    flower_beds = total_seeds // seeds_per_bed\n\n    return flower_beds", "mapping": {"c0": 10.0, "c1": 60.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [137.0], "response": "def Problem(c0, c1, c2):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 students suggested adding bacon\n    bacon = c1\n\n    #The difference between the number of students who suggested mashed potatoes and those who suggested bacon can be calculated by subtracting the number of students who suggested bacon from the number of students who suggested mashed potatoes\n    difference = mashed_potatoes - bacon\n\n    return difference", "mapping": {"c0": 257.0, "c1": 120.0, "c2": 97.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls and c3 more boys joined the school.How many boys are there in the school now?", "answer": [1124.0], "response": "def boys_in_school(c0, c1, c2, c3):\n    #total number of girls in the school after new admissions\n    girls_now = c0 + c2\n    #total number of boys in the school after new admissions\n    boys_now = c1 + c3\n    return boys_now", "mapping": {"c0": 135.0, "c1": 214.0, "c2": 496.0, "c3": 910.0}}
{"question": "After resting they decided to go for a swim. If the depth of the water is c0 times Dean's height and he stands at c1 feetHow much deeper is the water than Dean's height?", "answer": [81.0], "response": "def Problem(c0, c1):\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * c1\n\n    #Dean stands at c1 feet\n    dean_height = c1\n\n    #The difference between the depth of the water and Dean's height can be calculated by subtracting Dean's height from the depth of the water\n    difference = water_depth - dean_height\n\n    return difference", "mapping": {"c0": 10.0, "c1": 9.0}}
{"question": "Next on his checklist is wax to stick the feathers together. He needs c0 g of wax more. If the feathers require a total of c1 g of waxHow many grams of wax does he already have?", "answer": [469.0], "response": "def Problem(c0, c1):\n    #He needs c0 g of wax more\n    wax_needed = c0\n\n    #The feathers require a total of c1 g of wax\n    total_wax = c1\n\n    #The grams of wax he already has can be calculated by subtracting the needed wax from the total wax\n    wax_have = total_wax - wax_needed\n\n    return wax_have", "mapping": {"c0": 159.0, "c1": 628.0}}
{"question": "Frank was reading through his favorite book. He read c0 pages per day. If the book had c1 pagesHow many days did he take to finish the book?", "answer": [72.0], "response": "def Problem(c0, c1):\n    #Frank reads c0 pages per day\n    pages_per_day = c0\n\n    #The book has c1 pages\n    total_pages = c1\n\n    #The number of days it took Frank to finish the book can be calculated by dividing the total number of pages by the number of pages he reads per day\n    days = total_pages // pages_per_day\n\n    return days", "mapping": {"c0": 8.0, "c1": 576.0}}
{"question": "There are a total of c0 peaches in a basket. If there are c1 red peaches and some more green peaches in the basket.How many green peaches are in the basket?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #total number of peaches in the basket\n    total = c0\n\n    #number of red peaches in the basket\n    red = c1\n\n    #number of green peaches can be calculated by subtracting the number of red peaches from the total number of peaches\n    green = total - red\n\n    return green", "mapping": {"c0": 16.0, "c1": 13.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. Dean is c1 feet shorter than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Ron's height is c1 feet taller than Dean's height\n    ron_height = c1 + c2\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * (ron_height - c1)\n\n    return water_depth", "mapping": {"c0": 2.0, "c1": 8.0, "c2": 14.0}}
{"question": "There are c0 pots in each of the c1 gardens. Each pot has c2 flowers in it.How many flowers are there in all?", "answer": [174080.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pots in each garden\n    pots_per_garden = c0\n\n    #there are c1 gardens\n    num_gardens = c1\n\n    #each pot has c2 flowers in it\n    flowers_per_pot = c2\n\n    #total number of flowers can be calculated by multiplying the number of pots per garden, the number of gardens, and the number of flowers per pot\n    total_flowers = pots_per_garden * num_gardens * flowers_per_pot\n\n    return total_flowers", "mapping": {"c0": 544.0, "c1": 10.0, "c2": 32.0}}
{"question": "Paige was helping her mom plant flowers and together they planted some seeds. They put c0 seeds in each flower bed. If there are c1 flowerbedsHow many seeds did they plant?", "answer": [450.0], "response": "def Problem(c0, c1):\n    #each flower bed has c0 seeds\n    seeds_per_bed = c0\n\n    #there are c1 flower beds\n    flower_beds = c1\n\n    #The total number of seeds they planted can be calculated by multiplying the number of seeds per bed by the number of flower beds\n    total_seeds = seeds_per_bed * flower_beds\n\n    return total_seeds", "mapping": {"c0": 10.0, "c1": 45.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. Marco's strawberries weighed c1 pounds.How much more did his strawberries weigh than his dad's?", "answer": [34.0], "response": "def Problem(c0, c1):\n    #The total weight of strawberries they picked is c0 pounds\n    total_weight = c0\n\n    #Marco's strawberries weighed c1 pounds\n    marco_weight = c1\n\n    #His dad's strawberries weighed the difference between the total weight and Marco's strawberries\n    dad_weight = total_weight - marco_weight\n\n    #The difference between Marco's strawberries and his dad's strawberries can be calculated by subtracting his dad's weight from his own weight\n    difference = marco_weight - dad_weight\n\n    return difference", "mapping": {"c0": 4.0, "c1": 19.0}}
{"question": "Julia played tag with c0 kids on wednesday. She had played with c1 kids on monday and c2 kids on tuesday.How many more kids did she play with on monday than on wednesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Wednesday\n    wednesday = c0\n\n    #Julia played with c1 kids on Monday\n    monday = c1\n\n    #Julia played with c2 kids on Tuesday\n    tuesday = c2\n\n    #The difference between the number of kids Julia played with on Monday and Wednesday can be calculated by subtracting the number of kids she played with on Wednesday from the number of kids she played with on Monday\n    difference = monday - wednesday\n\n    return difference", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 17.0}}
{"question": "Carol was sending out birthday invitations to c0 friends. If each package of invitations she bought had c1 invitations in itHow many packs does she need so that no friend gets left out?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #each package of invitations has c1 invitations\n    per_pack = c1\n\n    #to make sure no friend gets left out, Carol needs to buy enough packs to have at least c0 invitations\n    packs_needed = (c0 + per_pack - 1) // per_pack\n\n    return packs_needed", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "A grocery store had c0 apples, c1 bottles of regular soda and c2 bottles of diet soda.How many more bottles than apple did they have?", "answer": [98.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 apples\n    apples = c0\n\n    #The grocery store had c1 bottles of regular soda\n    regular_soda = c1\n\n    #The grocery store had c2 bottles of diet soda\n    diet_soda = c2\n\n    #The total number of bottles the grocery store had is the sum of regular and diet soda\n    total_bottles = regular_soda + diet_soda\n\n    #The number of bottles more than apples can be calculated by subtracting the number of apples from the total number of bottles\n    more_bottles = total_bottles - apples\n\n    return more_bottles", "mapping": {"c0": 36.0, "c1": 80.0, "c2": 54.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The mouse jumped c1 inches lesser than the frog who jumped c2 inches farther than the grasshopper.How much farther did the mouse jump than the grasshopper?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The mouse jumped c1 inches lesser than the frog\n    mouse = c2 - c1\n\n    #The frog jumped c2 inches farther than the grasshopper\n    frog = c2\n\n    #The distance the mouse jumped farther than the grasshopper can be calculated by subtracting the distance the grasshopper jumped from the distance the mouse jumped\n    distance = mouse - grasshopper\n\n    return distance", "mapping": {"c0": 14.0, "c1": 16.0, "c2": 37.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many pencils and crayons does she have altogether?", "answer": [638.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c0 rows of pencils and crayons\n    rows = c0\n\n    #Each row has c1 pencils and c2 crayons\n    pencils_per_row = c1\n    crayons_per_row = c2\n\n    #The total number of pencils and crayons can be calculated by multiplying the number of rows by the number of pencils and crayons per row and adding them together\n    total_pencils = rows * pencils_per_row\n    total_crayons = rows * crayons_per_row\n    total = total_pencils + total_crayons\n\n    return total", "mapping": {"c0": 11.0, "c1": 31.0, "c2": 27.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school with each classroom having the same number of students. If there are c2 seats on each school bus.How many buses are needed to take the trip?", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 students in the school\n    students = c1\n\n    #Each classroom has the same number of students\n    students_per_classroom = students // classrooms\n\n    #There are c2 seats on each school bus\n    seats_per_bus = c2\n\n    #The number of buses needed can be calculated by dividing the total number of students by the number of seats per bus, rounded up to the nearest integer\n    buses_needed = (students_per_classroom + seats_per_bus - 1) // seats_per_bus\n\n    return buses_needed", "mapping": {"c0": 87.0, "c1": 58.0, "c2": 2.0}}
{"question": "Emily is making bead necklaces for her friends. She had c0 beads and she was able to make c1 necklaces.How many beads did each necklace need?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #Emily had c0 beads\n    beads = c0\n\n    #Emily made c1 necklaces\n    necklaces = c1\n\n    #The number of beads each necklace needed can be calculated by dividing the total number of beads by the number of necklaces made\n    beads_per_necklace = beads // necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 2.0, "c1": 32.0}}
{"question": "Paige raised c0 goldfish and c1 catfish in the pond but stray cats loved eating them. Now she has c2 left.How many fishes disappeared?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 goldfish and c1 catfish in the pond\n    original_fish = c0 + c1\n\n    #Now she has c2 fish left\n    remaining_fish = c2\n\n    #The number of fish that disappeared can be calculated by subtracting the number of remaining fish from the original number of fish\n    disappeared_fish = original_fish - remaining_fish\n\n    return disappeared_fish", "mapping": {"c0": 7.0, "c1": 12.0, "c2": 15.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 salty cookies and c3 sweet cookies.How many more salty cookies than sweet cookies did he eat?", "answer": [13.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco originally had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #Paco ate c2 salty cookies and c3 sweet cookies\n    ate_salty = c2\n    ate_sweet = c3\n\n    #Calculate how many salty and sweet cookies Paco has left\n    salty_left = salty_cookies - ate_salty\n    sweet_left = sweet_cookies - ate_sweet\n\n    #Calculate how many more salty cookies than sweet cookies Paco ate\n    more_salty = ate_salty - ate_sweet\n\n    return more_salty", "mapping": {"c0": 40.0, "c1": 25.0, "c2": 28.0, "c3": 15.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven and c2 more peaches than Jill.How many peaches does Jill have?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake = steven - c1\n\n    #Jake has c2 more peaches than Jill\n    jill = jake - c2\n\n    return jill", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 3.0}}
{"question": "Paul had c0 books. He sold c1 books in a garage sale.How many books does he have left with him?", "answer": [37.0], "response": "def books_left(c0, c1):\n    #Paul originally had c0 books\n    original_books = c0\n\n    #Paul sold c1 books in a garage sale\n    sold_books = c1\n\n    #The number of books Paul has left can be calculated by subtracting the number of books he sold from the original number of books he had\n    books_left = original_books - sold_books\n\n    return books_left", "mapping": {"c0": 115.0, "c1": 78.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work in all?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The machine made c0 shirts yesterday\n    yesterday = c0\n\n    #The machine made c1 shirts today\n    today = c1\n\n    #The machine can make c2 shirts a minute\n    per_minute = c2\n\n    #The total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = yesterday + today\n\n    #The time the machine worked in minutes can be calculated by dividing the total number of shirts made by the number of shirts made per minute\n    time_in_minutes = total_shirts / per_minute\n\n    return time_in_minutes", "mapping": {"c0": 13.0, "c1": 3.0, "c2": 8.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. Then she bought c2 extra invitations.How many friends can she invite?", "answer": [95.0], "response": "def Problem(c0, c1, c2):\n    #Each package of invitations has c0 invitations\n    per_pack = c0\n\n    #Carol bought c1 packs of invitations\n    packs = c1\n\n    #Carol also bought c2 extra invitations\n    extra = c2\n\n    #The total number of invitations Carol has is the product of the number of packs and the number of invitations per pack, plus the number of extra invitations\n    total_invitations = (per_pack * packs) + extra\n\n    return total_invitations", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 11.0}}
{"question": "An industrial machine can make c0 shirts per minute. It made c1 shirts in all.How many minutes was the machine working?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #The machine can make c0 shirts per minute\n    shirts_per_minute = c0\n\n    #The machine made c1 shirts in total\n    total_shirts = c1\n\n    #The number of minutes the machine was working can be calculated by dividing the total number of shirts by the number of shirts the machine can make per minute\n    minutes_worked = total_shirts / shirts_per_minute\n\n    return minutes_worked", "mapping": {"c0": 3.0, "c1": 6.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #Danny threw away c1 old bottle caps\n    thrown_away = c1\n\n    #Danny now has c2 bottle caps in his collection\n    now = c2\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of bottle caps he found to the number of bottle caps he threw away, and then subtracting that from the number of bottle caps he has now.\n    had_at_first = now + thrown_away - found\n\n    return had_at_first", "mapping": {"c0": 63.0, "c1": 51.0, "c2": 33.0}}
{"question": "A grocery store had c0 bottles of regular soda and c1 bottles of diet soda.How many more bottles of regular soda than diet soda did they have?", "answer": [58.0], "response": "def Problem(c0, c1):\n    #The grocery store had c0 bottles of regular soda\n    regular = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet = c1\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular - diet\n\n    return difference", "mapping": {"c0": 67.0, "c1": 9.0}}
{"question": "During summer break c0 kids from Lawrence county stayed home and the other c1 kids went to camp. An additional c2 kids from outside the county attended the camp.How many kids are in Lawrence county?", "answer": [1538832.0], "response": "def Problem(c0, c1, c2):\n    #c0 kids stayed home during summer break\n    stayed_home = c0\n\n    #c1 kids went to camp during summer break\n    went_to_camp = c1\n\n    #c2 kids from outside the county attended the camp\n    outside_county = c2\n\n    #The total number of kids in Lawrence county can be calculated by adding the number of kids who stayed home and the number of kids who went to camp, plus the number of kids from outside the county who attended the camp\n    total_kids = stayed_home + went_to_camp + outside_county\n\n    return total_kids", "mapping": {"c0": 644997.0, "c1": 893835.0, "c2": 78.0}}
{"question": "Faye was placing c0 pencils into rows with c1 pencils in each row.How many rows could she make?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Faye has c0 pencils\n    pencils = c0\n\n    #She wants to place c1 pencils in each row\n    per_row = c1\n\n    #The number of rows she can make can be calculated by dividing the total number of pencils by the number of pencils per row\n    rows = pencils // per_row\n\n    return rows", "mapping": {"c0": 30.0, "c1": 5.0}}
{"question": "Frank had some pieces of candy. If he put them into c0 bags with c1 pieces in each bagHow many pieces of candy did he have?", "answer": [858.0], "response": "def Problem(c0, c1):\n    #Frank had some pieces of candy\n    candy = c0 * c1\n\n    return candy", "mapping": {"c0": 26.0, "c1": 33.0}}
{"question": "A grocery store had a total of c0 bottles of which c1 were bottles of regular soda and the rest were bottles of diet soda. They also had c2 apple.How many bottles of diet soda did they have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles in total\n    total_bottles = c0\n\n    #c1 bottles were regular soda, so the rest of the bottles were diet soda\n    regular_soda = c1\n    diet_soda = total_bottles - regular_soda\n\n    #The grocery store also had c2 apples\n\n    return diet_soda", "mapping": {"c0": 17.0, "c1": 9.0, "c2": 29.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Jake have than Jill?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven = c2\n\n    #Jill has c1 fewer peaches than Steven\n    jill = steven - c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake = steven - c0\n\n    #The difference between the number of peaches Jake has and Jill has can be calculated by subtracting the number of peaches Jill has from the number of peaches Jake has\n    difference = jake - jill\n\n    return difference", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 5.0}}
{"question": "Josh had c0 marbles in his collection. He gave c1 marbles to Jack.How many marbles does Josh have now?", "answer": [18.0], "response": "def Problem(c0, c1):\n    #Josh originally had c0 marbles\n    josh_original = c0\n\n    #After Josh gave c1 marbles to Jack, he now has c0-c1 marbles left\n    josh_now = josh_original - c1\n\n    return josh_now", "mapping": {"c0": 20.0, "c1": 2.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven who has c2 more peaches than Jill.How many peaches does Jake have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake = steven - c1\n\n    #Steven has c2 more peaches than Jill\n    jill = steven - c2\n\n    #Jake has the same number of peaches as Jill\n    jake = jill\n\n    return jake", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 67.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts during the arkansas game?", "answer": [8722.0], "response": "def Problem(c0, c1, c2):\n    #The Razorback t-shirt shop makes c0 dollars off each t-shirt sold\n    price_per_tshirt = c0\n\n    #They sold a total of c1 t-shirts during both games\n    total_tshirts_sold = c1\n\n    #They sold c2 t-shirts during the Arkansas game\n    arkansas_tshirts_sold = c2\n\n    #The amount of money they made from selling t-shirts during the Arkansas game can be calculated by multiplying the number of t-shirts sold during the Arkansas game by the price per t-shirt\n    money_made = arkansas_tshirts_sold * price_per_tshirt\n\n    return money_made", "mapping": {"c0": 98.0, "c1": 163.0, "c2": 89.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the day?", "answer": [14.0], "response": "def total_emails(c0, c1, c2):\n    #Add up the number of emails received in the morning, afternoon, and evening\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 5.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If Jill has c2 peachesHow many more peaches does Jake have than Jill?", "answer": [13.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jill has c2 peaches\n    jill = c2\n\n    #Steven has c1 more peaches than Jill\n    steven = jill + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake = steven - c0\n\n    #The number of peaches Jake has more than Jill can be calculated by subtracting the number of peaches Jill has from the number of peaches Jake has\n    more_than_jill = jake - jill\n\n    return more_than_jill", "mapping": {"c0": 5.0, "c1": 18.0, "c2": 87.0}}
{"question": "For the walls of the house he would use c0 large planks of wood. If each plank of wood needs c1 pieces of nails to be secured and in addition c2 nails are needed for some smaller planks.How many nails does John need for the house wall?", "answer": [229.0], "response": "def Problem(c0, c1, c2):\n    #Each large plank of wood needs c1 pieces of nails to be secured\n    nails_per_plank = c1\n\n    #In addition, c2 nails are needed for some smaller planks\n    extra_nails = c2\n\n    #John will use c0 large planks of wood\n    num_planks = c0\n\n    #The total number of nails needed can be calculated by multiplying the number of planks by the number of nails needed per plank and adding the extra nails needed for smaller planks\n    total_nails = (num_planks * nails_per_plank) + extra_nails\n\n    return total_nails", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 8.0}}
{"question": "A grocery store had c0 bottles of diet soda, c1 bottles of regular soda and c2 apples.How many more bottles of regular soda than diet soda did they have?", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of diet soda\n    diet_soda = c0\n\n    #The grocery store had c1 bottles of regular soda\n    regular_soda = c1\n\n    #The grocery store had c2 apples\n    apples = c2\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 54.0, "c1": 83.0, "c2": 12.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding bacon c1 suggested adding mashed potatoes to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [61.0], "response": "def Problem(c0, c1, c2):\n    #c0 students suggested adding bacon\n    bacon = c0\n\n    #c1 students suggested adding mashed potatoes\n    mashed_potatoes = c1\n\n    #c2 students suggested adding tomatoes\n    tomatoes = c2\n\n    #The difference between the number of students who suggested mashed potatoes and those who suggested bacon can be calculated by subtracting the number of students who suggested bacon from the number of students who suggested mashed potatoes\n    difference = mashed_potatoes - bacon\n\n    return difference", "mapping": {"c0": 269.0, "c1": 330.0, "c2": 76.0}}
{"question": "Brenda's mother made cookies for c0. If each of them had c1 cookiesHow many cookies did she prepare?", "answer": [420.0], "response": "def Problem(c0, c1):\n    #Brenda's mother made c0 cookies\n    cookies_made = c0\n\n    #If each of them had c1 cookies, then the total number of cookies prepared can be calculated by multiplying the number of people with the number of cookies each person had\n    total_cookies = c0 * c1\n\n    return total_cookies", "mapping": {"c0": 14.0, "c1": 30.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many more apps did he delete than he added?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Dave originally had c0 apps on his phone\n    original_apps = c0\n\n    #Dave added c1 new apps\n    added_apps = c1\n\n    #After deleting some apps, Dave has c2 apps left\n    remaining_apps = c2\n\n    #The number of apps Dave deleted can be calculated by subtracting the number of remaining apps from the total number of apps he had after adding new apps\n    deleted_apps = (original_apps + added_apps) - remaining_apps\n\n    #The number of apps he added can be calculated by subtracting the original number of apps from the total number of apps he had after deleting some\n    added_apps = (original_apps + added_apps) - remaining_apps - deleted_apps\n\n    #The difference between the number of apps he deleted and added is the answer to the problem\n    difference = deleted_apps - added_apps\n\n    return difference", "mapping": {"c0": 15.0, "c1": 71.0, "c2": 14.0}}
{"question": "Kelly has c0 nintendo games.How many will she have left if she gives away c1 games?", "answer": [42.0], "response": "def games_left(c0, c1):\n    # Kelly originally had c0 nintendo games\n    original_games = c0\n    \n    # Kelly gave away c1 games\n    gave_away = c1\n    \n    # The number of games Kelly has left can be calculated by subtracting the number of games she gave away from the original number of games she had\n    games_left = original_games - gave_away\n    \n    return games_left", "mapping": {"c0": 106.0, "c1": 64.0}}
{"question": "Matthew had c0 crackers. If Matthew gave equal numbers of crackers to his c1 friends and still had c2 crackers leftHow many crackers did each friend eat?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef crackers_per_friend(c0, c1, c2):\n    #Matthew originally had c0 crackers\n    original_crackers = c0\n\n    #Matthew gave crackers to c1 friends\n    num_friends = c1\n\n    #Matthew still has c2 crackers left\n    crackers_left = c2\n\n    #The total number of crackers given to friends can be calculated by subtracting the number of crackers left from the original number of crackers\n    crackers_given = original_crackers - crackers_left\n\n    #The number of crackers each friend ate can be calculated by dividing the total number of crackers given by the number of friends\n    crackers_per_friend = crackers_given / num_friends\n\n    return crackers_per_friend", "mapping": {"c0": 15.0, "c1": 5.0, "c2": 10.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. They washed cars over the weekend and now Fred has c2 dollars and Jason has c3 dollars.How much money did Jason make over the weekend?", "answer": [56.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_last_week = c0\n\n    #Jason had c1 dollars last week\n    jason_last_week = c1\n\n    #Fred has c2 dollars now\n    fred_now = c2\n\n    #Jason has c3 dollars now\n    jason_now = c3\n\n    #The amount of money Jason made over the weekend can be calculated by subtracting the amount of money he had last week from the amount of money he has now\n    jason_made = jason_now - jason_last_week\n\n    return jason_made", "mapping": {"c0": 114.0, "c1": 22.0, "c2": 21.0, "c3": 78.0}}
{"question": "Frank had c0 pieces of candy. If he put them equally into c1 bagsHow many pieces of candy are in each bag?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #Frank had c0 pieces of candy\n    candy = c0\n\n    #Frank put them equally into c1 bags\n    bags = c1\n\n    #The number of pieces of candy in each bag can be calculated by dividing the total number of candies by the number of bags\n    candy_per_bag = candy // bags\n\n    return candy_per_bag", "mapping": {"c0": 42.0, "c1": 2.0}}
{"question": "Jack received c0 emails in the morning and c1 emails in the afternoon.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #The difference between the number of morning emails and afternoon emails can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning_emails - afternoon_emails\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 pastries and c3 cakesHow many more pastries than cakes did baker sell?", "answer": [76.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes = c3\n    pastries = c2\n\n    #Baker sold c2 pastries and c3 cakes\n    sold_cakes = c3\n    sold_pastries = c2\n\n    #The difference between the number of pastries sold and the number of cakes sold can be calculated by subtracting the number of cakes sold from the number of pastries sold\n    difference = sold_pastries - sold_cakes\n\n    return difference", "mapping": {"c0": 43.0, "c1": 114.0, "c2": 154.0, "c3": 78.0}}
{"question": "Haley has c0 marbles. In her class c1 boys love to play marbles. If she distributes her marbles equallyHow many will each of the boys receive?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Haley has c0 marbles\n    haley_marbles = c0\n\n    #There are c1 boys in her class\n    boys = c1\n\n    #If Haley distributes her marbles equally, each boy will receive the same number of marbles\n    marbles_per_boy = haley_marbles // boys\n\n    return marbles_per_boy", "mapping": {"c0": 20.0, "c1": 2.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. If a total of c2 people will attend the partyHow many more chairs will they have to buy?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #they have c0 sets of tables\n    sets_of_tables = c0\n\n    #total number of chairs they have before buying more\n    total_chairs = chairs_per_table * sets_of_tables\n\n    #total number of people attending the party\n    total_people = c2\n\n    #number of chairs they need to buy\n    chairs_to_buy = total_people - total_chairs\n\n    return chairs_to_buy", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 14.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. They washed cars over the weekend and now Fred has c2 dollars and Jason has c3 dollars.How much money did Fred earn over the weekend?", "answer": [21.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_last_week = c0\n\n    #Jason had c1 dollars last week\n    jason_last_week = c1\n\n    #Fred has c2 dollars now\n    fred_now = c2\n\n    #Jason has c3 dollars now\n    jason_now = c3\n\n    #Fred earned c2 - c0 dollars over the weekend\n    fred_earned = fred_now - fred_last_week\n\n    return fred_earned", "mapping": {"c0": 19.0, "c1": 16.0, "c2": 40.0, "c3": 69.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many more cookies did he eat than those he bought?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_ate = c1\n\n    #Paco bought c2 more cookies\n    paco_bought = c2\n\n    #The number of cookies Paco has now can be calculated by subtracting the number of cookies he ate from the original number of cookies he had and then adding the number of cookies he bought\n    paco_now = paco_original - paco_ate + paco_bought\n\n    #The number of cookies Paco ate more than he bought can be calculated by subtracting the number of cookies he bought from the number of cookies he ate\n    ate_more = paco_ate - paco_bought\n\n    return ate_more", "mapping": {"c0": 25.0, "c1": 5.0, "c2": 3.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from each of her trees. Now the trees have a total c2 apples still on them.How many apples did Rachel pick in all?", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #Rachel has c0 apple trees\n    trees = c0\n\n    #She picked c1 apples from each tree\n    picked_per_tree = c1\n\n    #The total number of apples she picked can be calculated by multiplying the number of trees by the number of apples picked per tree\n    total_picked = trees * picked_per_tree\n\n    #Now the trees have c2 apples still on them\n    remaining = c2\n\n    #The number of apples Rachel picked in all can be calculated by subtracting the number of remaining apples from the total number of apples she picked\n    picked_in_all = total_picked - remaining\n\n    return picked_in_all", "mapping": {"c0": 4.0, "c1": 7.0, "c2": 29.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 apples and c3 peaches.How many more peaches than apples does Steven have?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c3 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c2 + c1\n\n    #Steven has c2 apples and c3 peaches\n    steven_apples = c2\n    steven_peaches = c3\n\n    #Steven has more peaches than apples if the difference between the number of peaches and apples is positive\n    difference = steven_peaches - steven_apples\n    if difference > 0:\n        more_peaches = difference\n    else:\n        more_peaches = 0\n\n    return more_peaches", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 11.0, "c3": 18.0}}
{"question": "A grocery store had a total of c0 bottles of which c1 were bottles of regular soda and the rest were bottles of diet soda.How many bottles of diet soda did they have?", "answer": [2.0], "response": "def diet_soda(c0, c1):\n    #c1 bottles are regular soda, so the rest of the bottles must be diet soda\n    diet = c0 - c1\n    return diet", "mapping": {"c0": 30.0, "c1": 28.0}}
{"question": "The Ferris wheel in paradise park has c0 small seats and c1 large seats. Each small seat can hold c2 people and large seat can hold c3 people.How many people can ride the Ferris wheel on small seats?", "answer": [28.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Ferris wheel has c0 small seats and c1 large seats\n    small_seats = c0\n\n    #Each small seat can hold c2 people\n    small_capacity = c2\n\n    #The number of people that can ride on small seats can be calculated by multiplying the number of small seats by the capacity of each small seat\n    small_riders = small_seats * small_capacity\n\n    return small_riders", "mapping": {"c0": 2.0, "c1": 23.0, "c2": 14.0, "c3": 54.0}}
{"question": "Debby bought c0 soda bottles and c1 water bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the soda bottles last?", "answer": [40.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Debby bought c0 soda bottles and c1 water bottles\n    soda_bottles = c0\n    water_bottles = c1\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_per_day = c2\n    soda_per_day = c3\n\n    #Calculate how many days the soda bottles would last\n    days = soda_bottles // soda_per_day\n\n    return days\n\n#Note: We assume that Debby only drinks soda and water, and does not buy any more bottles during the time period. Also, we assume that the soda bottles are consumed before the water bottles.", "mapping": {"c0": 360.0, "c1": 162.0, "c2": 122.0, "c3": 9.0}}
{"question": "A grocery store had c0 bottles of diet soda. If they had c1 more bottles of regular soda than diet sodaHow many bottles of regular soda did they have?", "answer": [83.0], "response": "def Problem(c0, c1):\n    #The grocery store had c0 bottles of diet soda\n    diet_soda = c0\n\n    #They had c1 more bottles of regular soda than diet soda\n    regular_soda = diet_soda + c1\n\n    return regular_soda", "mapping": {"c0": 4.0, "c1": 79.0}}
{"question": "During the Arkansas and Texas tech game the Razorback t-shirt shop made $ c0 by selling t-shirts. If they make $ c1 dollars off each t-shirt soldHow many t-shirts did they sell?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #The Razorback t-shirt shop made c0 dollars by selling t-shirts\n    revenue = c0\n\n    #They make c1 dollars off each t-shirt sold\n    price_per_tshirt = c1\n\n    #The number of t-shirts they sold can be calculated by dividing the revenue by the price per t-shirt\n    num_tshirts = revenue // price_per_tshirt\n\n    return num_tshirts", "mapping": {"c0": 60.0, "c1": 10.0}}
{"question": "Frank was reading through his favorite book. He read c0 pages per day and it took him c1 days to finish the book.How many pages are there in the book?", "answer": [12518.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Frank read c0 pages per day\n    pages_per_day = c0\n\n    #It took him c1 days to finish the book\n    days_to_finish = c1\n\n    #The total number of pages in the book can be calculated by multiplying the number of pages Frank read per day by the number of days it took him to finish the book\n    total_pages = pages_per_day * days_to_finish\n\n    return total_pages", "mapping": {"c0": 22.0, "c1": 569.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. c0 bird families flew away for the winter from near a mountain. If there were c1 bird families living near the mountain initiallyHow many more bird families flew away for the winter than those that stayed behind?", "answer": [127.0], "response": "def bird_migration(c0, c1):\n    #c0 bird families flew away for the winter\n    flew_away = c0\n\n    #c1 bird families were living near the mountain initially\n    initial = c1\n\n    #The number of bird families that stayed behind can be calculated by subtracting the number of bird families that flew away from the initial number of bird families\n    stayed_behind = initial - flew_away\n\n    #The number of bird families that flew away for the winter than those that stayed behind can be calculated by subtracting the number of bird families that stayed behind from the number of bird families that flew away\n    more_flew_away = flew_away - stayed_behind\n\n    return more_flew_away", "mapping": {"c0": 86.0, "c1": 45.0}}
{"question": "Allan brought c0 balloons to the park and then bought c1 more balloons there. If Jake brought c2 balloons to the parkHow many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons to the park\n    allan = c0\n\n    #Allan bought c1 more balloons at the park\n    allan_now = allan + c1\n\n    #Jake brought c2 balloons to the park\n    jake = c2\n\n    #The difference between the number of balloons Jake has and Allan has can be calculated by subtracting Allan's current number of balloons from Jake's number of balloons\n    difference = jake - allan_now\n\n    return difference", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 6.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many magazines does he have in total?", "answer": [460.0], "response": "def total_magazines(c0, c1, c2):\n    #Bryan has c0 books in each bookshelf\n    books_per_shelf = c0\n\n    #Bryan has c1 magazines in each bookshelf\n    magazines_per_shelf = c1\n\n    #Bryan has c2 bookshelves in total\n    total_shelves = c2\n\n    #The total number of magazines Bryan has can be calculated by multiplying the number of magazines per shelf by the total number of shelves\n    total_magazines = magazines_per_shelf * total_shelves\n\n    return total_magazines", "mapping": {"c0": 9.0, "c1": 46.0, "c2": 10.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of math and biology homework did she have to complete?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology = c2\n\n    #The number of pages of math and biology homework Rachel had to complete can be calculated by adding the number of pages of math homework to the number of pages of biology homework\n    math_and_bio = math + biology\n\n    return math_and_bio", "mapping": {"c0": 8.0, "c1": 7.0, "c2": 3.0}}
{"question": "Every day Ryan spends c0 hours on learning english, c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning chinese than he does on learning spanish?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese = c1\n\n    #Ryan spends c2 hours on learning spanish\n    spanish = c2\n\n    #The difference between the hours Ryan spends on learning chinese and spanish can be calculated by subtracting the number of hours spent on spanish from the number of hours spent on chinese\n    difference = chinese - spanish\n\n    return difference", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 4.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many more birds than storks are sitting on the fence?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds were originally sitting on the fence\n    birds_before = c0\n\n    #c1 more birds came to join them\n    birds_now = birds_before + c1\n\n    #c2 more storks came to join them\n    storks_now = c2\n\n    #The number of more birds than storks sitting on the fence can be calculated by subtracting the number of storks from the number of birds\n    more_birds = birds_now - storks_now\n\n    return more_birds", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 4.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many more cookies did he give to his friend than those he ate?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco gave c1 cookies to his friend\n    gave = c1\n\n    #Paco ate c2 cookies\n    ate = c2\n\n    #The difference between the number of cookies Paco gave to his friend and the number of cookies he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he gave to his friend\n    difference = gave - ate\n\n    return difference", "mapping": {"c0": 6.0, "c1": 30.0, "c2": 23.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many more cakes did baker sell than those he bought?", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    made = c0\n\n    #Baker sold c1 cakes\n    sold = c1\n\n    #Baker bought c2 new cakes\n    bought = c2\n\n    #The net number of cakes sold can be calculated by subtracting the number of cakes bought from the number of cakes sold\n    net_sold = sold - bought\n\n    #The number of cakes sold more than bought can be calculated by taking the absolute value of the net number of cakes sold\n    more_sold = abs(net_sold)\n\n    return more_sold", "mapping": {"c0": 170.0, "c1": 78.0, "c2": 31.0}}
{"question": "Shirley sold c0 cases of boxes of trefoils.How many boxes of trefoils does she need to deliver if each case has c1 boxes?", "answer": [350.0], "response": "def Problem(c0, c1):\n    #each case has c1 boxes\n    boxes_per_case = c1\n\n    #Shirley sold c0 cases of boxes\n    cases_sold = c0\n\n    #The total number of boxes Shirley needs to deliver can be calculated by multiplying the number of cases sold by the number of boxes per case\n    boxes_to_deliver = cases_sold * boxes_per_case\n\n    return boxes_to_deliver", "mapping": {"c0": 25.0, "c1": 14.0}}
{"question": "We ordered c0 pizzas. Each pizza has c1 slices. If there are c2 of usHow many slices of pizza are there altogether?", "answer": [68.0], "response": "def total_slices(c0, c1, c2):\n    #calculate the total number of slices by multiplying the number of pizzas by the number of slices per pizza\n    total_slices = c0 * c1\n    #calculate the total number of slices per person by dividing the total number of slices by the number of people\n    slices_per_person = total_slices / c2\n    return slices_per_person", "mapping": {"c0": 17.0, "c1": 4.0, "c2": 25.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many orchids did she cut?", "answer": [19.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c2 - c0\n    orchids_cut = c3 - c1\n\n    #There are now c2 roses and c3 orchids in the vase\n    roses_now = c2\n    orchids_now = c3\n\n    #The number of orchids Jessica cut can be calculated by subtracting the original number of orchids from the number of orchids now in the vase\n    orchids_cut_total = orchids_now - orchids_before\n\n    return orchids_cut_total", "mapping": {"c0": 12.0, "c1": 2.0, "c2": 10.0, "c3": 21.0}}
{"question": "White t - shirts can be purchased in packages. If mom buys c0 white t - shirts where each package has c1 white t - shirts.How many packages will she have?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #mom bought c0 white t-shirts\n    total_tshirts = c0\n\n    #each package has c1 white t-shirts\n    per_package = c1\n\n    #the number of packages mom will have can be calculated by dividing the total number of t-shirts by the number of t-shirts per package\n    packages = total_tshirts // per_package\n\n    return packages", "mapping": {"c0": 66.0, "c1": 3.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of sugar does she need to add?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs c1 cups of sugar in total\n    sugar_needed = c1\n\n    #Mary already put in c3 cups of sugar\n    sugar_added = c3\n\n    #Mary still needs to add c1 - c3 cups of sugar\n    sugar_remaining = sugar_needed - sugar_added\n\n    return sugar_remaining", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 10.0, "c3": 2.0}}
{"question": "Mom buys c0 white t - shirts. If white t - shirts can be purchased in packages of c1 How many packages will she have?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #Mom buys c0 white t-shirts\n    t_shirts = c0\n\n    #White t-shirts can be purchased in packages of c1\n    package_size = c1\n\n    #The number of packages Mom will have can be calculated by dividing the number of t-shirts by the package size and rounding up to the nearest integer\n    packages = math.ceil(t_shirts/package_size)\n\n    return packages", "mapping": {"c0": 51.0, "c1": 3.0}}
{"question": "Adam could fit c0 action figures and c1 cabinets on each shelf in his room. His room has c2 shelves.How many total items could his shelves hold?", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Adam can fit c0 action figures and c1 cabinets on each shelf\n    items_per_shelf = c0 + c1\n\n    #Adam's room has c2 shelves\n    num_shelves = c2\n\n    #The total number of items Adam's shelves can hold can be calculated by multiplying the number of items per shelf by the number of shelves\n    total_items = items_per_shelf * num_shelves\n\n    return total_items", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 4.0}}
{"question": "We ordered c0 pizzas. Each pizza has the same number of slices. If there were a total of c1 slicesHow many slices are there in each pizza?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #We ordered c0 pizzas\n    pizzas = c0\n\n    #There were a total of c1 slices\n    total_slices = c1\n\n    #The number of slices in each pizza can be calculated by dividing the total number of slices by the number of pizzas\n    slices_per_pizza = total_slices / pizzas\n\n    return slices_per_pizza", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Baker made c0 cakes. He sold c1 of them. Then he made c2 more cakes.How many more cakes did baker make than those he sold?", "answer": [184.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    made = c0\n\n    #Baker sold c1 cakes\n    sold = c1\n\n    #Baker made c2 more cakes\n    more_made = c2\n\n    #The total number of cakes Baker made after selling some and making more can be calculated by adding the number of cakes he made and the number of cakes he made more after selling some\n    total_made = made + more_made\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of cakes he sold from the total number of cakes he made\n    more_than_sold = total_made - sold\n\n    return more_than_sold", "mapping": {"c0": 144.0, "c1": 71.0, "c2": 111.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour does she need to add?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs c0 cups of flour for the recipe\n    flour_needed = c0\n\n    #Mary already put in c3 cups of flour\n    flour_added = c3\n\n    #The number of cups of flour Mary still needs to add can be calculated by subtracting the amount of flour she already added from the amount of flour needed for the recipe\n    flour_remaining = flour_needed - flour_added\n\n    return flour_remaining", "mapping": {"c0": 12.0, "c1": 5.0, "c2": 49.0, "c3": 11.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts during the Texas tech game?", "answer": [1092.0], "response": "def Problem(c0, c1, c2):\n    #The Razorback t-shirt shop makes c0 dollars off each t-shirt sold\n    price_per_tshirt = c0\n\n    #They sold a total of c1 t-shirts during both games\n    total_tshirts_sold = c1\n\n    #They sold c2 t-shirts during the Arkansas game\n    tshirts_sold_at_arkansas_game = c2\n\n    #The number of t-shirts sold during the Texas tech game can be calculated by subtracting the number of t-shirts sold during the Arkansas game from the total number of t-shirts sold\n    tshirts_sold_at_texas_tech_game = total_tshirts_sold - tshirts_sold_at_arkansas_game\n\n    #The amount of money made from selling t-shirts during the Texas tech game can be calculated by multiplying the number of t-shirts sold during the Texas tech game by the price per t-shirt\n    money_made_at_texas_tech_game = tshirts_sold_at_texas_tech_game * price_per_tshirt\n\n    return money_made_at_texas_tech_game", "mapping": {"c0": 78.0, "c1": 186.0, "c2": 172.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books do you still have to read?", "answer": [15.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left to read by subtracting the number of books read from the total number of books\n    books_left = c1 - c2\n    \n    return books_left", "mapping": {"c0": 62.0, "c1": 19.0, "c2": 4.0, "c3": 34.0}}
{"question": "We ordered some pizzas. Each pizza has c0 slices. If there were a total of c1 slicesHow many pizzas did we order?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #each pizza has c0 slices\n    slices_per_pizza = c0\n\n    #there were a total of c1 slices\n    total_slices = c1\n\n    #the number of pizzas can be calculated by dividing the total number of slices by the number of slices per pizza\n    pizzas_ordered = total_slices // slices_per_pizza\n\n    return pizzas_ordered", "mapping": {"c0": 2.0, "c1": 28.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 bananas c2 eggs and c3 marbles.How many groups will be created?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Rebecca wants to split the eggs into groups of c0\n    group_size = c0\n\n    #Rebecca has c2 eggs\n    eggs = c2\n\n    #The number of groups that can be created can be calculated by dividing the number of eggs by the group size\n    groups = eggs // group_size\n\n    return groups", "mapping": {"c0": 3.0, "c1": 99.0, "c2": 9.0, "c3": 27.0}}
{"question": "c0 children were riding on the bus. At the bus stop some children got off the bus. Then there were c1 children left on the bus.How many more children were on the bus before the bus stop than there are now?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children are left on the bus after some got off at the bus stop\n    now = c1\n\n    #The number of children who got off the bus can be calculated by subtracting the number of children now from the original number of children\n    got_off = original - now\n\n    #The number of children who were on the bus before the bus stop than there are now can be calculated by subtracting the number of children now from the original number of children who were on the bus before the bus stop\n    more_children = original - now\n\n    return more_children", "mapping": {"c0": 41.0, "c1": 18.0}}
{"question": "In Haley's class some boys love to play marbles. Haley gives c0 marbles to each boy. If she had c1 marblesHow many boys did she give the marbles to?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Haley gives c0 marbles to each boy\n    marbles_per_boy = c0\n\n    #Haley had c1 marbles in total\n    total_marbles = c1\n\n    #The number of boys Haley gave marbles to can be calculated by dividing the total number of marbles by the number of marbles each boy received\n    num_boys = total_marbles // marbles_per_boy\n\n    return num_boys", "mapping": {"c0": 2.0, "c1": 28.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many crackers and cakes did each person eat?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Matthew had c0 crackers and c1 cakes\n    crackers = c0\n    cakes = c1\n\n    #Matthew gave equal numbers of crackers and cakes to his c2 friends\n    friends = c2\n\n    #The total number of crackers and cakes that Matthew gave to his friends is equal to the sum of crackers and cakes\n    total = crackers + cakes\n\n    #Each person ate an equal number of crackers and cakes, so we divide the total by the number of friends to get the amount each person ate\n    each = total / friends\n\n    return each", "mapping": {"c0": 14.0, "c1": 21.0, "c2": 7.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 cookies yesterday c1 cookies this morning and c2 cookies the day before yesterday.How many cookies did Helen bake till last night?", "answer": [450.0], "response": "def total_cookies_baked(c0, c1, c2):\n    #Helen baked c0 cookies yesterday\n    yesterday_cookies = c0\n\n    #Helen baked c1 cookies this morning\n    morning_cookies = c1\n\n    #Helen baked c2 cookies the day before yesterday\n    day_before_yesterday_cookies = c2\n\n    #The total number of cookies Helen baked till last night can be calculated by adding the number of cookies she baked yesterday, this morning and the day before yesterday\n    total_cookies = yesterday_cookies + morning_cookies + day_before_yesterday_cookies\n\n    return total_cookies", "mapping": {"c0": 31.0, "c1": 270.0, "c2": 419.0}}
{"question": "For the walls of the house he would use c0 nails in all to secure large planks of wood. If each plank of wood needs c1 pieces of nails to be securedHow many planks does John need for the house wall?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #calculate the total number of nails needed for all planks\n    total_nails = c0\n\n    #calculate the number of planks needed by dividing the total number of nails by the number of nails needed for each plank\n    planks_needed = total_nails // c1\n\n    return planks_needed", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers did danny find at the park?", "answer": [16.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    bottle_caps_found = c0\n    wrappers_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    bottle_caps_now = c2\n    wrappers_now = c3\n\n    #The difference between the number of bottle caps and wrappers Danny found at the park can be calculated by subtracting the number of wrappers from the number of bottle caps\n    difference = bottle_caps_found - wrappers_found\n\n    #The number of extra bottle caps Danny has in his collection can be calculated by subtracting the number of wrappers from the number of bottle caps in his collection\n    extra_bottle_caps = bottle_caps_now - wrappers_now\n\n    #The total number of more bottle caps than wrappers that Danny found at the park can be calculated by adding the difference to the extra bottle caps\n    total = difference + extra_bottle_caps\n\n    return total", "mapping": {"c0": 30.0, "c1": 14.0, "c2": 7.0, "c3": 86.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges do they harvest per day?", "answer": [280.0], "response": "def oranges_harvested(c0, c1):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #the total number of oranges harvested per day can be calculated by multiplying the number of sacks by the number of oranges per sack\n    oranges_per_day = oranges_per_sack * sacks_per_day\n\n    return oranges_per_day", "mapping": {"c0": 8.0, "c1": 35.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 19.How much more did Edward spend on books than pens?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 dollars on books and c1 dollars on pens\n    spent_on_books = c0\n    spent_on_pens = c1\n\n    #Edward has 19 dollars now\n    total_money = 19\n\n    #The difference between the amount spent on books and pens can be calculated by subtracting the amount spent on pens from the amount spent on books\n    difference = spent_on_books - spent_on_pens\n\n    #The amount Edward spent more on books than pens can be calculated by subtracting the total difference from the total money he has now\n    more_on_books = total_money - difference\n\n    return more_on_books", "mapping": {"c0": 16.0, "c1": 8.0}}
{"question": "Emily is making bead necklaces for her friends. Each necklace takes c0 beads and she has c1 beads.How many necklaces can Emily make?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each necklace takes c0 beads\n    beads_per_necklace = c0\n\n    #Emily has c1 beads\n    total_beads = c1\n\n    #The number of necklaces Emily can make can be calculated by dividing the total number of beads by the number of beads per necklace\n    necklaces = total_beads // beads_per_necklace\n\n    return necklaces", "mapping": {"c0": 8.0, "c1": 16.0}}
{"question": "Dan has $ c0. He had $ c1 left with him after he bought a candy bar.How much did the candy bar cost?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dan originally had c0 dollars\n    dan_original = c0\n\n    #After buying a candy bar, Dan has c1 dollars left\n    dan_now = c1\n\n    #The cost of the candy bar can be calculated by subtracting the amount of money Dan has now from the original amount of money he had\n    cost = dan_original - dan_now\n\n    return cost", "mapping": {"c0": 4.0, "c1": 3.0}}
{"question": "Paul got a box of c0 crayons for his birthday. By the end of the school year he had either lost or given away c1 of them.How many crayons did he have left by the end of the school year?", "answer": [183.0], "response": "def Problem(c0, c1):\n    #Paul originally had c0 crayons\n    original = c0\n\n    #By the end of the school year, he had either lost or given away c1 of them\n    lost_or_given = c1\n\n    #The number of crayons Paul has left by the end of the school year can be calculated by subtracting the number of crayons he lost or gave away from the original number of crayons he had\n    left = original - lost_or_given\n\n    return left", "mapping": {"c0": 253.0, "c1": 70.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many raisin cookies did Helen bake?", "answer": [482.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #She baked c2 raisin cookies and c3 chocolate chip cookies this morning\n    raisin_today = c2\n\n    #The total number of raisin cookies Helen baked can be calculated by adding the number of raisin cookies she baked yesterday and today\n    total_raisin = raisin_yesterday + raisin_today\n\n    return total_raisin", "mapping": {"c0": 144.0, "c1": 397.0, "c2": 85.0, "c3": 403.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 apples still on it. If c2 of those are ripe and the rest are unripeHow many ripe apples did the tree have to begin with?", "answer": [8.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #Now the tree has c1 apples still on it\n    remaining = c1\n\n    #Out of the remaining apples, c2 are ripe and the rest are unripe\n    unripe = remaining - c2\n\n    #The total number of ripe apples the tree had to begin with can be calculated by adding the number of apples Rachel picked to the number of ripe apples still on the tree\n    ripe_before = picked + c2\n\n    return ripe_before", "mapping": {"c0": 2.0, "c1": 7.0, "c2": 6.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work yesterday?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The machine made c0 shirts yesterday\n    shirts_yesterday = c0\n\n    #The machine made c1 shirts today\n    shirts_today = c1\n\n    #The machine can make c2 shirts a minute\n    shirts_per_minute = c2\n\n    #The total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = shirts_yesterday + shirts_today\n\n    #The number of minutes the machine worked yesterday can be calculated by dividing the total number of shirts made by the number of shirts the machine can make per minute\n    minutes_worked = total_shirts / shirts_per_minute\n\n    return minutes_worked", "mapping": {"c0": 9.0, "c1": 44.0, "c2": 3.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than David.How many push-ups did John do?", "answer": [69.0], "response": "def Problem(c0, c1, c2):\n    #Zachary did c0 push-ups\n    zachary = c0\n\n    #David did c1 more push-ups than Zachary\n    david = zachary + c1\n\n    #John did c2 push-ups less than David\n    john = david - c2\n\n    return john", "mapping": {"c0": 51.0, "c1": 22.0, "c2": 4.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many more raisin cookies did Helen bake yesterday compared to today?", "answer": [20.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #She baked c2 raisin cookies and c3 chocolate chip cookies this morning\n    raisin_today = c2\n\n    #The number of raisin cookies she baked yesterday compared to today can be calculated by subtracting the number of raisin cookies she baked today from the number of raisin cookies she baked yesterday\n    difference = raisin_yesterday - raisin_today\n\n    return difference", "mapping": {"c0": 519.0, "c1": 300.0, "c2": 280.0, "c3": 359.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many more bottles of regular soda did they have than diet soda?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of regular soda\n    regular = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet = c1\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular - diet\n\n    return difference", "mapping": {"c0": 81.0, "c1": 60.0, "c2": 60.0}}
{"question": "Randy has some blocks. He uses c0 blocks to build a tower. If there are c1 blocks leftHow many blocks did he have at the start?", "answer": [90.0], "response": "def Problem(c0, c1):\n    #Randy used c0 blocks to build a tower\n    used_blocks = c0\n\n    #There are c1 blocks left after building the tower\n    left_blocks = c1\n\n    #The number of blocks Randy had at the start can be calculated by adding the number of used blocks and the number of left blocks\n    start_blocks = used_blocks + left_blocks\n\n    return start_blocks", "mapping": {"c0": 52.0, "c1": 38.0}}
{"question": "Edward had $ c0. He spent some money. Now he has $ 3.How much money did Edward spend?", "answer": [10.0], "response": "def Problem(c0):\n    #Edward originally had c0 dollars\n    edward_original = c0\n\n    #After Edward spent some money, he now has 3 dollars\n    edward_now = 3\n\n    #The amount of money Edward spent can be calculated by subtracting the amount of money he has now from the original amount of money he had\n    spent = edward_original - edward_now\n\n    return spent", "mapping": {"c0": 13.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost some of his marbles at the playground. Now Ed has c1 more marbles than doug.How many marbles did Ed lose?", "answer": [11.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ed originally had c0 more marbles than Doug\n    ed_original = c0 + doug\n\n    #Now Ed has c1 more marbles than Doug\n    ed_now = c1 + doug\n\n    #The number of marbles Ed lost can be calculated by subtracting the number of marbles he has now from the original number of marbles he had\n    lost = ed_original - ed_now\n\n    return lost\n\n#Note: We need to know the number of marbles Doug has in order to calculate the answer, but it is not given in the problem statement.", "mapping": {"c0": 19.0, "c1": 8.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. There are also c2 chairs extra.How many chairs do they have for the guests?", "answer": [174.0], "response": "def Problem(c0, c1, c2):\n    #Each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #They have c0 sets of tables\n    num_tables = c0\n\n    #They also have c2 extra chairs\n    extra_chairs = c2\n\n    #The total number of chairs they have for the guests can be calculated by multiplying the number of tables by the number of chairs per table and adding the extra chairs\n    total_chairs = (num_tables * chairs_per_table) + extra_chairs\n\n    return total_chairs", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 6.0}}
{"question": "The Ferris wheel in paradise park has c0 small seats and c1 large seats. Each small seat can hold c2 people and large seat can hold c3 people.How many people can ride the Ferris wheel on large seats?", "answer": [84.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Ferris wheel has c0 small seats and c1 large seats\n    small_seats = c0\n    large_seats = c1\n\n    #Each small seat can hold c2 people and large seat can hold c3 people\n    small_capacity = c2\n    large_capacity = c3\n\n    #The total number of people that can ride on large seats can be calculated by multiplying the number of large seats by the capacity of each large seat\n    total_capacity = large_seats * large_capacity\n\n    return total_capacity", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 16.0, "c3": 12.0}}
{"question": "There are c0 houses in a block. If a mailman has to give c1 pieces of junk mail to each house in each blockHow many pieces of junk mail should he give each block?", "answer": [640.0], "response": "def Problem(c0, c1):\n    #there are c0 houses in a block\n    houses = c0\n\n    #the mailman has to give c1 pieces of junk mail to each house\n    mail_per_house = c1\n\n    #the total number of pieces of junk mail the mailman should give each block can be calculated by multiplying the number of houses by the number of pieces of junk mail per house\n    total_mail = houses * mail_per_house\n\n    return total_mail", "mapping": {"c0": 20.0, "c1": 32.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many more bottles than apple did they have?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of regular soda\n    regular_soda = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet_soda = c1\n\n    #The grocery store had c2 apples\n    apples = c2\n\n    #The total number of bottles is the sum of regular soda and diet soda\n    total_bottles = regular_soda + diet_soda\n\n    #The difference between the total number of bottles and the number of apples is the number of bottles more than apples\n    more_bottles = total_bottles - apples\n\n    return more_bottles", "mapping": {"c0": 72.0, "c1": 32.0, "c2": 78.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many green peaches are in the baskets altogether?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #each basket has c1 red peaches and c2 green peaches\n    green_per_basket = c2\n\n    #The total number of green peaches can be calculated by multiplying the number of baskets by the number of green peaches per basket\n    total_green = baskets * green_per_basket\n\n    return total_green", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 2.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. c1 new bird families came to live near the mountain from the arctic while c2 bird families flew away further south for winter.How many bird families were left near the mountain?", "answer": [27.0], "response": "def bird_families(c0, c1, c2):\n    #number of bird families before migration\n    before = c0\n\n    #number of new bird families that came to live near the mountain\n    new = c1\n\n    #number of bird families that flew away further south for winter\n    flew_away = c2\n\n    #total number of bird families left near the mountain after migration\n    left = before + new - flew_away\n\n    return left", "mapping": {"c0": 3.0, "c1": 26.0, "c2": 2.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested tomatoes?", "answer": [65.0], "response": "def Problem(c0, c1, c2):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested tomatoes\n    tomatoes = c2\n\n    #difference between the number of students who suggested mashed potatoes and tomatoes\n    difference = mashed_potatoes - tomatoes\n\n    return difference", "mapping": {"c0": 144.0, "c1": 467.0, "c2": 79.0}}
{"question": "Jesse's rooms are c0 feet long and c1 feet wide. If she has c2 rooms in allHow much carpet does she need to cover the floors of all rooms?", "answer": [6840.0], "response": "def Problem(c0, c1, c2):\n    #Jesse's rooms are c0 feet long and c1 feet wide\n    room_length = c0\n    room_width = c1\n\n    #Jesse has c2 rooms in all\n    total_rooms = c2\n\n    #The total area of all rooms can be calculated by multiplying the length and width of each room and then adding them up\n    total_area = room_length * room_width * total_rooms\n\n    return total_area", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 20.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of reading homework than math homeworkHow many pages did she have to complete in all?", "answer": [23.0], "response": "def total_homework_pages(c0, c1):\n    # Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    # Rachel had to complete c1 more pages of reading homework than math homework\n    reading_pages = c0 + c1\n\n    # The total number of pages Rachel had to complete is the sum of math and reading pages\n    total_pages = math_pages + reading_pages\n\n    return total_pages", "mapping": {"c0": 10.0, "c1": 3.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more boys than girlsHow many pupils are there in that school?", "answer": [1542.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more boys than girls in the school\n    boys = girls + c1\n\n    #The total number of pupils in the school can be calculated by adding the number of girls and boys\n    total_pupils = girls + boys\n\n    return total_pupils", "mapping": {"c0": 700.0, "c1": 142.0}}
{"question": "A waiter had c0 customers. c1 customers left.How many customers does he still have?", "answer": [9.0], "response": "def remaining_customers(c0, c1):\n    # The waiter originally had c0 customers\n    original_customers = c0\n    \n    # c1 customers left\n    customers_left = c1\n    \n    # The number of customers the waiter still has can be calculated by subtracting the number of customers who left from the original number of customers\n    remaining = original_customers - customers_left\n    \n    return remaining", "mapping": {"c0": 14.0, "c1": 5.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and c1 packs of cake. In the end she had c2 amount of change remaining.How many packs of groceries did she buy in all?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Lucy bought c0 packs of cookie\n    cookies = c0\n\n    #Lucy bought c1 packs of cake\n    cakes = c1\n\n    #The total amount spent on groceries can be calculated by adding the cost of cookies and cakes\n    total_spent = cookies + cakes\n\n    #Lucy had c2 amount of change remaining\n    change = c2\n\n    #The total number of packs of groceries Lucy bought can be calculated by adding the total amount spent on groceries to the change she had remaining\n    total_packs = total_spent + change\n\n    return total_packs", "mapping": {"c0": 2.0, "c1": 12.0, "c2": 56.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of sugar does she need to add?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs c0 cups of sugar for the recipe\n    sugar_needed = c0\n\n    #Mary already put in c3 cups of sugar\n    sugar_added = c3\n\n    #Mary needs to add sugar_needed - sugar_added cups of sugar\n    sugar_to_add = sugar_needed - sugar_added\n\n    return sugar_to_add", "mapping": {"c0": 11.0, "c1": 9.0, "c2": 12.0, "c3": 10.0}}
{"question": "Marco and his dad went strawberry picking. His strawberries weighed c0 pounds while his dad's strawberries weighed c1 pounds.Together how much did their strawberries weigh?", "answer": [40.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco = c0\n\n    #Marco's dad's strawberries weighed c1 pounds\n    dad = c1\n\n    #The total weight of their strawberries can be calculated by adding Marco's strawberries weight and his dad's strawberries weight\n    total_weight = marco + dad\n\n    return total_weight", "mapping": {"c0": 8.0, "c1": 32.0}}
{"question": "Kelly gives away c0 nintendo games.How many did she have initially if she still has c1 games left?", "answer": [183.0], "response": "def initial_games(c0, c1):\n    # Kelly gives away c0 nintendo games\n    given_away = c0\n    \n    # She still has c1 games left\n    remaining = c1\n    \n    # The initial number of games Kelly had can be calculated by adding the number of games she gave away to the number of games she still has\n    initial = given_away + remaining\n    \n    return initial", "mapping": {"c0": 91.0, "c1": 92.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow many t-shirts did they sell during the Texas tech game?", "answer": [127.0], "response": "def Problem(c0, c1, c2):\n    #The Razorback t-shirt shop makes c0 dollars off each t-shirt sold\n    profit_per_shirt = c0\n\n    #They sold a total of c1 t-shirts during both games\n    total_sold = c1\n\n    #They sold c2 t-shirts during the Arkansas game\n    sold_at_arkansas_game = c2\n\n    #The number of t-shirts sold during the Texas tech game can be calculated by subtracting the number of t-shirts sold during the Arkansas game from the total number of t-shirts sold\n    sold_at_texas_tech_game = total_sold - sold_at_arkansas_game\n\n    return sold_at_texas_tech_game", "mapping": {"c0": 106.0, "c1": 242.0, "c2": 115.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas and Texas tech game they made $ c1 by selling t-shirts.How many t-shirts did they sell?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #The Razorback t-shirt shop makes c0 dollars off each t-shirt sold\n    profit_per_shirt = c0\n\n    #During the Arkansas and Texas tech game they made c1 by selling t-shirts\n    total_profit = c1\n\n    #The number of t-shirts they sold can be calculated by dividing the total profit by the profit per shirt\n    shirts_sold = total_profit / profit_per_shirt\n\n    return shirts_sold", "mapping": {"c0": 23.0, "c1": 230.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a house and c2 blocks to build a tower.How many more blocks did he use to build the house than he did to build the tower?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    randy_blocks = c0\n\n    #Randy uses c1 blocks to build a house\n    house_blocks = c1\n\n    #Randy uses c2 blocks to build a tower\n    tower_blocks = c2\n\n    #The difference between the number of blocks used to build the house and the number of blocks used to build the tower can be calculated by subtracting the number of tower blocks from the number of house blocks\n    difference = house_blocks - tower_blocks\n\n    return difference", "mapping": {"c0": 90.0, "c1": 89.0, "c2": 63.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #The difference between the number of balloons Jake brought and the number of balloons Allan brought is the number of more balloons Jake had than Allan\n    more_balloons = jake - allan\n\n    return more_balloons", "mapping": {"c0": 2.0, "c1": 3.0}}
{"question": "Every day Ryan spends c0 hours on learning english, c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning english than he does on learning spanish?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english = c0\n\n    #Ryan spends c2 hours on learning spanish\n    spanish = c2\n\n    #The difference between the hours Ryan spends on learning english and spanish can be calculated by subtracting the number of hours spent on spanish from the number of hours spent on english\n    difference = english - spanish\n\n    return difference", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 4.0}}
{"question": "Robin has c0 packages of gum. There are c1 pieces in each package. Robin has c2 extra pieces of gum.How many pieces of gum does Robin have?", "answer": [997.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum\n    packages = c0\n\n    #There are c1 pieces in each package\n    pieces_per_package = c1\n\n    #Robin has c2 extra pieces of gum\n    extra_pieces = c2\n\n    #The total number of pieces of gum Robin has can be calculated by multiplying the number of packages by the number of pieces per package and adding the extra pieces\n    total_pieces = (packages * pieces_per_package) + extra_pieces\n\n    return total_pieces", "mapping": {"c0": 43.0, "c1": 23.0, "c2": 8.0}}
{"question": "Paul had c0 books. After selling some books in a garage sale and giving c1 books to his friend he had c2 books left.How many books did he sell in the garage sale?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 books\n    paul_original = c0\n\n    #After selling some books in a garage sale and giving some to his friend, he now has c2 books\n    paul_now = c2\n\n    #The number of books Paul sold in the garage sale can be calculated by subtracting the number of books he gave to his friend and the number of books he has now from the original number of books he had.\n    sold = paul_original - paul_now - c1\n\n    return sold", "mapping": {"c0": 108.0, "c1": 35.0, "c2": 62.0}}
{"question": "For the walls of the house he would use c0 large planks of wood and c1 small planks. If each large plank of wood needs c2 pieces of nails to be secured and each small plank needs c3 nails.How many planks does John need for the house wall?", "answer": [29.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #John has c0 large planks of wood and c1 small planks of wood\n    large_planks = c0\n    small_planks = c1\n\n    #Each large plank needs c2 nails and each small plank needs c3 nails\n    nails_per_large_plank = c2\n    nails_per_small_plank = c3\n\n    #The total number of nails needed for the large planks can be calculated by multiplying the number of large planks by the number of nails per large plank\n    total_nails_for_large_planks = large_planks * nails_per_large_plank\n\n    #The total number of nails needed for the small planks can be calculated by multiplying the number of small planks by the number of nails per small plank\n    total_nails_for_small_planks = small_planks * nails_per_small_plank\n\n    #The total number of planks needed for the house wall can be calculated by adding the number of large planks and the number of small planks\n    total_planks = large_planks + small_planks\n\n    #Return the total number of planks and nails needed for the house wall\n    return total_planks, total_nails_for_large_planks + total_nails_for_small_planks", "mapping": {"c0": 12.0, "c1": 17.0, "c2": 14.0, "c3": 25.0}}
{"question": "Melissa played c0 games and scored a total of c1 points scoring the same for each game.How many points did she score in each game?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa played c0 games\n    games_played = c0\n\n    #Melissa scored a total of c1 points\n    total_points = c1\n\n    #To find out how many points Melissa scored in each game, we can divide the total points by the number of games played\n    points_per_game = total_points / games_played\n\n    return points_per_game", "mapping": {"c0": 3.0, "c1": 81.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 baseball cards and c3 Ace cards left.How many more Ace cards than baseball cards does Nell have?", "answer": [91.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell originally had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some cards to Jeff and now has c2 baseball cards and c3 Ace cards left\n    baseball_now = c2\n    ace_now = c3\n\n    #Calculate how many baseball and Ace cards Nell gave to Jeff\n    baseball_gave = baseball_before - baseball_now\n    ace_gave = ace_before - ace_now\n\n    #Calculate how many more Ace cards than baseball cards Nell has now\n    difference = ace_now - baseball_now\n\n    return difference", "mapping": {"c0": 246.0, "c1": 214.0, "c2": 404.0, "c3": 495.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf and removed c2 old ones.How many action figures were on his shelf in all?", "answer": [7.0], "response": "def total_action_figures(c0, c1, c2):\n    # Jerry originally had c0 action figures on the shelf\n    original_figures = c0\n\n    # Jerry added c1 more action figures to the shelf\n    added_figures = c1\n\n    # Jerry removed c2 old action figures from the shelf\n    removed_figures = c2\n\n    # The total number of action figures on the shelf can be calculated by adding the original figures and the added figures, and then subtracting the removed figures\n    total_figures = original_figures + added_figures - removed_figures\n\n    return total_figures", "mapping": {"c0": 8.0, "c1": 4.0, "c2": 5.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds in c1 flowerbeds. If they put same number of seeds in each flower bedHow many seeds did they plant in each flowerbed?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Paige and her mom planted c0 seeds in c1 flowerbeds\n    seeds_planted = c0\n    flowerbeds = c1\n\n    #If they put the same number of seeds in each flowerbed, we can divide the total number of seeds by the number of flowerbeds to get the number of seeds planted in each flowerbed\n    seeds_per_flowerbed = seeds_planted / flowerbeds\n\n    return seeds_per_flowerbed", "mapping": {"c0": 45.0, "c1": 9.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each of the c1 blocks. If there are c2 houses in each blockHow many pieces of junk mail should he give in each block?", "answer": [48.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The mailman has to give c0 pieces of junk mail to each house\n    mail_per_house = c0\n\n    #There are c1 blocks\n    blocks = c1\n\n    #There are c2 houses in each block\n    houses_per_block = c2\n\n    #The total number of pieces of junk mail the mailman should give in each block can be calculated by multiplying the number of houses per block by the number of pieces of junk mail per house\n    total_mail_per_block = mail_per_house * houses_per_block\n\n    return total_mail_per_block", "mapping": {"c0": 4.0, "c1": 81.0, "c2": 12.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make per day in the remaining c4 days at the carnival?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3, c4):\n    #The total amount made in the first c1 days is c0\n    total_first = c0\n\n    #The total amount made in the remaining c3 days is c2\n    total_remaining = c2\n\n    #The total number of days at the carnival is c1 + c3 = c4\n    total_days = c4\n\n    #The number of days in the remaining period is c3\n    remaining_days = c3\n\n    #The amount made per day in the remaining period can be calculated by dividing the total amount made in the remaining period by the number of days in the remaining period\n    per_day_remaining = total_remaining / remaining_days\n\n    return per_day_remaining", "mapping": {"c0": 325.0, "c1": 154.0, "c2": 114.0, "c3": 57.0, "c4": 57.0}}
{"question": "Brenda's mother made cookies for c0 guests but c1 guests did not come. If she prepared c2 cookies and each guest had the same number of cookiesHow many did each of them have?", "answer": [18.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Brenda's mother made cookies for c0 guests\n    guests = c0\n\n    #c1 guests did not come\n    absent = c1\n\n    #Brenda's mother prepared c2 cookies\n    cookies = c2\n\n    #The number of guests who actually came can be calculated by subtracting the number of absent guests from the original number of guests\n    present = guests - absent\n\n    #The number of cookies each guest had can be calculated by dividing the total number of cookies by the number of present guests\n    per_guest = cookies / present\n\n    return per_guest", "mapping": {"c0": 10.0, "c1": 9.0, "c2": 18.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of salt does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #The recipe calls for c0 cups of sugar, c1 cups of flour, and c2 cups of salt\n    sugar = c0\n    flour = c1\n    salt = c2\n\n    #Mary already put in c3 cups of flour\n    flour_before = c3\n\n    #Mary needs to add the difference between the amount of flour and salt needed\n    difference = flour - salt\n\n    #The number of cups of flour Mary needs to add now is the difference between the amount of flour and salt needed minus the amount of flour she already put in\n    flour_now = difference - flour_before\n\n    return flour_now", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 4.0, "c3": 2.0}}
{"question": "Baker made some cakes. He sold c0 of them. If he still has c1 cakes leftHow many cakes did baker make?", "answer": [217.0], "response": "def Problem(c0, c1):\n    #Baker sold c0 cakes\n    sold = c0\n\n    #Baker still has c1 cakes left\n    left = c1\n\n    #The number of cakes Baker made can be calculated by adding the number of cakes he sold to the number of cakes he still has left\n    made = sold + left\n\n    return made", "mapping": {"c0": 145.0, "c1": 72.0}}
{"question": "Jesse needs a carpet of size c0 square feet to cover her room. If her room is c1 feet wideWhat is the length of her room?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Jesse's room needs a carpet of size c0 square feet\n    room_size = c0\n\n    #Jesse's room is c1 feet wide\n    room_width = c1\n\n    #The length of Jesse's room can be calculated by dividing the room size by the room width\n    room_length = room_size / room_width\n\n    return room_length", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "There are some bananas in Philip's banana collection. If the bananas are organized into c0 groups of size c1 How many bananas does he have in his collection?", "answer": [26180.0], "response": "def Problem(c0, c1):\n    #Philip has c0 groups of bananas\n    groups = c0\n\n    #Each group has c1 bananas\n    size = c1\n\n    #The total number of bananas in Philip's collection can be calculated by multiplying the number of groups by the size of each group\n    total = groups * size\n\n    return total", "mapping": {"c0": 140.0, "c1": 187.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 eggs c2 bananas and c3 marbles.How many groups will be created?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Rebecca has c1 eggs\n    eggs = c1\n\n    #The number of groups that can be created can be calculated by dividing the number of eggs by the number of eggs in each group\n    groups = eggs // c0\n\n    return groups", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 72.0, "c3": 66.0}}
{"question": "Jessie currently weighs c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much did she weigh before starting to jog?", "answer": [211.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jessie currently weighs c0 kilograms\n    current_weight = c0\n\n    #After the first week of jogging, she lost c1 kilograms\n    first_week_loss = c1\n\n    #After the second week of jogging, she lost c2 kilograms\n    second_week_loss = c2\n\n    #The total weight loss after two weeks of jogging can be calculated by adding the weight loss in the first and second week\n    total_loss = first_week_loss + second_week_loss\n\n    #The weight Jessie had before starting to jog can be calculated by adding the total weight loss to her current weight\n    original_weight = current_weight + total_loss\n\n    return original_weight", "mapping": {"c0": 9.0, "c1": 62.0, "c2": 140.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 seats on each school bus. If there are a total of c2 students in the schoolHow many buses are needed to take the trip?", "answer": [37.0], "response": "def buses_needed(c0, c1, c2):\n    #calculate the total number of seats available on all buses\n    total_seats = c0 * c1\n    \n    #calculate the number of buses needed to transport all students\n    buses_needed = c2 // total_seats\n    \n    #if there are any remaining students, add an extra bus\n    if c2 % total_seats != 0:\n        buses_needed += 1\n    \n    return buses_needed", "mapping": {"c0": 72.0, "c1": 3.0, "c2": 111.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many campers went rowing in all?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The total number of campers who went rowing can be calculated by adding the number of campers who went rowing in the morning and the number of campers who went rowing in the afternoon\n    total_rowing = rowing_morning + rowing_afternoon\n\n    return total_rowing", "mapping": {"c0": 13.0, "c1": 59.0, "c2": 21.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf. If he also has c2 books on the shelfHow many more action figures than books were on his shelf?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures on the shelf\n    action_figures_before = c0\n\n    #Jerry added c1 more action figures to the shelf\n    added_action_figures = c1\n\n    #Jerry also has c2 books on the shelf\n    books = c2\n\n    #The number of action figures on the shelf after Jerry added more can be calculated by adding the original number of action figures and the number of added action figures\n    action_figures_after = action_figures_before + added_action_figures\n\n    #The difference between the number of action figures and the number of books on the shelf can be calculated by subtracting the number of books from the number of action figures\n    difference = action_figures_after - books\n\n    return difference", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 10.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles ones while he lost c2 marbles.How many marbles does he have now?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh found c1 marbles\n    found = c1\n\n    #Josh lost c2 marbles\n    lost = c2\n\n    #The number of marbles Josh has now can be calculated by adding the number of marbles he found and subtracting the number of marbles he lost from the original number of marbles he had\n    now = original + found - lost\n\n    return now", "mapping": {"c0": 22.0, "c1": 13.0, "c2": 5.0}}
{"question": "For the walls of the house he would use c0 large planks of wood and c1 small planks. If large planks together need c2 pieces of nails to be secured and small planks together need c3 nails.How many nails does John need for the house wall?", "answer": [20.0], "response": "def Problem(c0, c1, c2, c3):\n    #John will use c0 large planks and c1 small planks\n    large_planks = c0\n    small_planks = c1\n\n    #Large planks need c2 nails and small planks need c3 nails\n    nails_for_large_planks = c2\n    nails_for_small_planks = c3\n\n    #The total number of nails needed can be calculated by multiplying the number of large planks by the number of nails needed for each large plank and adding it to the number of small planks multiplied by the number of nails needed for each small plank\n    total_nails_needed = (large_planks * nails_for_large_planks) + (small_planks * nails_for_small_planks)\n\n    return total_nails_needed", "mapping": {"c0": 12.0, "c1": 10.0, "c2": 15.0, "c3": 5.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many more crayons did he give to his friends than those he lost?", "answer": [410.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    paul_crayons = c0\n\n    #Paul gave c1 crayons to his friends\n    gave_friends = c1\n\n    #Paul lost c2 crayons\n    lost_crayons = c2\n\n    #The difference between the number of crayons Paul gave to his friends and the number of crayons he lost can be calculated by subtracting the number of lost crayons from the number of crayons he gave to his friends\n    difference = gave_friends - lost_crayons\n\n    return difference", "mapping": {"c0": 589.0, "c1": 571.0, "c2": 161.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the morning than in the evening?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning = c0\n\n    #Jack received c2 emails in the evening\n    evening = c2\n\n    #The difference in the number of emails Jack received in the morning and evening can be calculated by subtracting the number of emails received in the evening from the number of emails received in the morning\n    difference = morning - evening\n\n    return difference", "mapping": {"c0": 9.0, "c1": 10.0, "c2": 7.0}}
{"question": "Jack received c0 emails in the morning and c1 emails in the afternoon.How many more emails did Jack receive in the afternoon than in the morning?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #The difference between the number of emails Jack received in the afternoon and in the morning can be calculated by subtracting the number of morning emails from the number of afternoon emails\n    difference = afternoon_emails - morning_emails\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There were c0 paintings in the Buckingham palace. There, Rachel learned that c1 visitors came to the Buckingham palace that day. If there were c2 visitors the previous dayHow many visited the Buckingham palace within c3 days?", "answer": [745.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 paintings in the Buckingham palace\n    paintings = c0\n\n    #c1 visitors came to the Buckingham palace that day\n    visitors_today = c1\n\n    #there were c2 visitors the previous day\n    visitors_yesterday = c2\n\n    #we want to find out how many visitors came to the Buckingham palace within c3 days\n    total_visitors = visitors_today + visitors_yesterday\n\n    #since we know the number of visitors for two days, we can use a loop to calculate the total number of visitors for c3 days\n    for i in range(2, c3):\n        total_visitors += visitors_today\n\n    return total_visitors", "mapping": {"c0": 71.0, "c1": 557.0, "c2": 188.0, "c3": 57.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many more chocolate chip cookies did Helen bake yesterday compared to today?", "answer": [131.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies yesterday\n    choco_yesterday = c0\n\n    #Helen baked c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #Helen baked c2 raisin cookies this morning\n    raisin_today = c2\n\n    #Helen baked c3 chocolate chip cookies this morning\n    choco_today = c3\n\n    #The number of chocolate chip cookies Helen baked yesterday compared to today can be calculated by subtracting the number of chocolate chip cookies she baked today from the number she baked yesterday\n    choco_difference = choco_yesterday - choco_today\n\n    return choco_difference", "mapping": {"c0": 197.0, "c1": 46.0, "c2": 75.0, "c3": 66.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jill have?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven = c2\n\n    #Jill has c1 fewer peaches than Steven\n    jill = steven - c1\n\n    #Jake has c0 fewer peaches than Steven, so he has (Steven - c0) peaches\n    jake = steven - c0\n\n    #We know that Jake has c0 fewer peaches than Steven, so we can set up an equation:\n    #jake = steven - c0\n    #We can substitute steven with (jill + c1) since we know that Steven has c1 more peaches than Jill:\n    #jake = (jill + c1) - c0\n    #We can simplify this equation to solve for Jill:\n    #jill = jake - c1 + c0\n    jill = jake - c1 + c0\n\n    return jill", "mapping": {"c0": 18.0, "c1": 13.0, "c2": 19.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and some packs of cake. In total she had c1 packs of groceryHow many packs of cake did she buy in all?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Lucy bought c0 packs of cookie\n    cookie = c0\n\n    #In total she had c1 packs of grocery\n    total = c1\n\n    #The number of packs of cake Lucy bought can be calculated by subtracting the number of packs of cookie from the total number of packs of grocery\n    cake = total - cookie\n\n    return cake", "mapping": {"c0": 23.0, "c1": 27.0}}
{"question": "Every day Ryan spends c0 hours on learning english c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning english than he does on learning chinese?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese = c1\n\n    #The difference between the hours Ryan spends on learning english and chinese can be calculated by subtracting the number of hours spent on chinese from the number of hours spent on english\n    difference = english - chinese\n\n    return difference", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 58.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. The second chapter is c2 pages long.How many more pages does the first chapter have than the second chapter?", "answer": [37.0], "response": "def Problem(c0, c1, c2):\n    #The first chapter is c1 pages long\n    first_chapter = c1\n\n    #The second chapter is c2 pages long\n    second_chapter = c2\n\n    #The difference in pages between the first and second chapter can be calculated by subtracting the number of pages in the second chapter from the number of pages in the first chapter\n    difference = first_chapter - second_chapter\n\n    return difference", "mapping": {"c0": 2.0, "c1": 48.0, "c2": 11.0}}
{"question": "c0 green peaches, c1 yellow peaches and c2 red peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #number of green peaches in the basket\n    green = c0\n\n    #number of red peaches in the basket\n    red = c2\n\n    #calculate the difference between the number of green and red peaches\n    difference = green - red\n\n    return difference", "mapping": {"c0": 6.0, "c1": 60.0, "c2": 2.0}}
{"question": "Debby drinks c0 bottles a day. If she bought a total of c1 water bottlesHow many days would they last her?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Debby drinks c0 bottles a day\n    daily_consumption = c0\n\n    #Debby bought a total of c1 water bottles\n    total_bottles = c1\n\n    #The number of days the water bottles would last Debby can be calculated by dividing the total number of bottles by the daily consumption\n    days_last = total_bottles / daily_consumption\n\n    return days_last", "mapping": {"c0": 6.0, "c1": 12.0}}
{"question": "There were c0 parents in the program and c1 people in total.How many pupils were present in the program?", "answer": [654.0], "response": "def calculate_pupils(c0, c1):\n    # calculate the number of pupils by subtracting the number of parents from the total number of people\n    pupils = c1 - c0\n    return pupils", "mapping": {"c0": 22.0, "c1": 676.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with altogether?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The total number of kids Julia played with can be calculated by adding the number of kids she played with on each day\n    total = monday + tuesday + wednesday\n\n    return total", "mapping": {"c0": 17.0, "c1": 15.0, "c2": 2.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How far did the mouse jump?", "answer": [45.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse_jump = frog_jump + c2\n\n    return mouse_jump", "mapping": {"c0": 25.0, "c1": 18.0, "c2": 2.0}}
{"question": "Next on his checklist is wax to stick the feathers together and colors to paint them. He needs a total of c0 g of colors to paint them. If the feathers require c1 g of wax and right now he just needs c2 gHow many grams of wax does he already have?", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #The total amount of colors needed is c0 g\n    colors_needed = c0\n\n    #The amount of wax needed for the feathers is c1 g\n    wax_needed = c1\n\n    #The amount of wax he already has is c2 g\n    wax_have = c2\n\n    #The amount of wax he still needs to get is the difference between the amount of wax needed and the amount of wax he already has\n    wax_needed_now = wax_needed - wax_have\n\n    return wax_needed_now", "mapping": {"c0": 49.0, "c1": 288.0, "c2": 260.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs to add c0 - c2 more cups of flour\n    flour_needed = c0 - c2\n\n    #Mary needs to add c1 cups of sugar\n    sugar_needed = c1\n\n    #The difference between the amount of flour needed and the amount of sugar needed is the answer\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 5.0}}
{"question": "Jake has c0 more apples and c1 fewer peaches than Steven. Steven has c2 peaches and c3 apples.How many apples does Jake have?", "answer": [25.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Jake has c0 more apples and c1 fewer peaches than Steven\n    jake_apples = steven_apples + c0\n    jake_peaches = steven_peaches - c1\n\n    #The number of apples Jake has can be calculated by adding the number of apples he has to the number of apples Steven has\n    total_apples = jake_apples\n\n    return total_apples", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 8.0, "c3": 12.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Jill have than Jake?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven = c2\n\n    #Jill has c1 more peaches than Steven\n    jill = steven - c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake = steven - c0\n\n    #The difference between the number of peaches Jill has and the number of peaches Jake has can be calculated by subtracting the number of peaches Jake has from the number of peaches Jill has\n    difference = jill - jake\n\n    return difference", "mapping": {"c0": 12.0, "c1": 11.0, "c2": 4.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars and Jason did not work.How much money do they have together now?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Fred had c0 dollars last week\n    fred_last_week = c0\n\n    #Jason had c1 dollars last week\n    jason_last_week = c1\n\n    #Fred now has c2 dollars after washing cars\n    fred_now = c2\n\n    #The total amount of money they have together now can be calculated by adding Fred's current money and Jason's last week money\n    total_now = fred_now + jason_last_week\n\n    return total_now", "mapping": {"c0": 86.0, "c1": 5.0, "c2": 9.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many peaches does Jake have?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Steven has c3 apples\n    steven_apples = c3\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = steven_apples + c1\n\n    return jake_peaches\n\n#The function returns the number of peaches Jake has.", "mapping": {"c0": 12.0, "c1": 79.0, "c2": 19.0, "c3": 14.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the movies and watched c3 of the booksHow many more books than movies have you read?", "answer": [5.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of books read\n    books_read = c3\n\n    #number of movies watched\n    movies_watched = c2\n\n    #number of books in the series\n    books_total = c0\n\n    #number of movies in the series\n    movies_total = c1\n\n    #calculate the difference between the number of books read and movies watched\n    difference = books_read - movies_watched\n\n    #calculate the difference between the total number of books and movies\n    total_difference = books_total - movies_total\n\n    #calculate the difference between the number of books read and movies watched minus the difference between the total number of books and movies\n    result = difference - total_difference\n\n    return result", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 14.0, "c3": 19.0}}
{"question": "Debby bought c0 water bottles when they were on sale. If she drank c1 bottles a day for some days. If she has c2 bottles leftHow many days did she drink for?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Debby bought c0 water bottles\n    bought = c0\n\n    #Debby drank c1 bottles a day for some days\n    drank_per_day = c1\n\n    #Debby has c2 bottles left\n    left = c2\n\n    #The number of days Debby drank for can be calculated by subtracting the number of bottles she has left from the original number of bottles she bought, and then dividing by the number of bottles she drank per day\n    days = (bought - left) / drank_per_day\n\n    return days", "mapping": {"c0": 301.0, "c1": 144.0, "c2": 157.0}}
{"question": "He also had c0 aquariums for saltwater animals and c1 aquariums for freshwater animals. Each aquarium has c2 animals in it.How many saltwater animals does Tyler have?", "answer": [2184.0], "response": "def Problem(c0, c1, c2):\n    #Tyler has c0 aquariums for saltwater animals\n    saltwater_aquariums = c0\n\n    #Tyler has c1 aquariums for freshwater animals\n    freshwater_aquariums = c1\n\n    #Each aquarium has c2 animals in it\n    animals_per_aquarium = c2\n\n    #The total number of saltwater animals Tyler has can be calculated by multiplying the number of saltwater aquariums by the number of animals per aquarium\n    saltwater_animals = saltwater_aquariums * animals_per_aquarium\n\n    return saltwater_animals", "mapping": {"c0": 56.0, "c1": 10.0, "c2": 39.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. She found c1 bags of cans on the next day and c2 bags of cans the day after that.How many bags did she have altogether?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    monday = c0\n\n    #She found c1 bags of cans on the next day\n    tuesday = c1\n\n    #She found c2 bags of cans the day after that\n    wednesday = c2\n\n    #The total number of bags she has altogether can be calculated by adding the number of bags she had on Monday, Tuesday, and Wednesday\n    total = monday + tuesday + wednesday\n\n    return total", "mapping": {"c0": 10.0, "c1": 3.0, "c2": 7.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches and the frog jumped c1 inches.How much did they jump altogether?", "answer": [66.0], "response": "def jumping_contest(c0, c1):\n    #The grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #The frog jumped c1 inches\n    frog_jump = c1\n\n    #The total distance they jumped can be calculated by adding the distance the grasshopper jumped to the distance the frog jumped\n    total_jump = grasshopper_jump + frog_jump\n\n    return total_jump", "mapping": {"c0": 31.0, "c1": 35.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much did she spend?", "answer": [89.0], "response": "def Problem(c0, c1, c2):\n    #Olivia originally had c0 dollars in her wallet\n    original_wallet = c0\n\n    #Olivia collected c1 more dollars from an atm\n    collected = c1\n\n    #After visiting the supermarket, Olivia had c2 dollars left\n    remaining = c2\n\n    #The amount Olivia spent can be calculated by subtracting the amount she has left from the total amount she had before visiting the supermarket\n    spent = original_wallet + collected - remaining\n\n    return spent", "mapping": {"c0": 100.0, "c1": 148.0, "c2": 159.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers.How many more customers left than those that stayed behind?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #After some customers left, the waiter now has c1 customers\n    current_customers = c1\n\n    #The number of customers that left can be calculated by subtracting the current number of customers from the original number of customers\n    customers_left = original_customers - current_customers\n\n    #The number of customers that stayed behind can be calculated by subtracting the number of customers that left from the original number of customers\n    customers_stayed = original_customers - customers_left\n\n    #The difference between the number of customers that left and the number of customers that stayed behind is the number of customers that left more than those that stayed behind\n    customers_difference = customers_left - customers_stayed\n\n    return customers_difference", "mapping": {"c0": 11.0, "c1": 3.0}}
{"question": "Katie had c0 ds games and her friends had c1 games.How many more games does Katie have than her friends?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Katie had c0 games\n    katie = c0\n\n    #Katie's friends had c1 games\n    friends = c1\n\n    #The difference between the number of games Katie has and her friends have can be calculated by subtracting the number of games her friends have from the number of games Katie has\n    difference = katie - friends\n\n    return difference", "mapping": {"c0": 81.0, "c1": 59.0}}
{"question": "Frank put some pieces of candy equally into c0 bags. If he had c1 pieces of candyHow many pieces of candy are in each bag?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Frank put some pieces of candy equally into c0 bags\n    bags = c0\n\n    #Frank had c1 pieces of candy\n    candy = c1\n\n    #The number of pieces of candy in each bag can be calculated by dividing the total number of candy by the number of bags\n    candy_per_bag = candy // bags\n\n    return candy_per_bag", "mapping": {"c0": 2.0, "c1": 16.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes in c2 days.How many drums of grapes would be filled in each day?", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #c0 pickers fill c1 drums of grapes in c2 days\n    drums_filled = c1\n    days = c2\n\n    #The number of drums of grapes filled in each day can be calculated by dividing the total number of drums filled by the number of days it took to fill them\n    drums_per_day = drums_filled / days\n\n    return drums_per_day", "mapping": {"c0": 266.0, "c1": 90.0, "c2": 5.0}}
{"question": "Julia played tag with c0 kids on tuesday. She had played tag with c1 kids on monday.How many more kids did she play with on monday than on tuesday?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on tuesday\n    tuesday = c0\n\n    #Julia played tag with c1 kids on monday\n    monday = c1\n\n    #The difference between the number of kids Julia played with on monday and tuesday can be calculated by subtracting the number of kids she played with on tuesday from the number of kids she played with on monday\n    difference = monday - tuesday\n\n    return difference", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "Julia played tag with a total of c0 kids. She played with c1 kids on monday and yet with some more kids on tuesday.How many kids did she play with on tuesday?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Julia played tag with a total of c0 kids\n    total_kids = c0\n\n    #Julia played with c1 kids on monday\n    monday_kids = c1\n\n    #Julia played with some more kids on tuesday\n    tuesday_kids = total_kids - monday_kids\n\n    return tuesday_kids", "mapping": {"c0": 18.0, "c1": 4.0}}
{"question": "Jerry had c0 books and c1 action figures on a shelf in his room. Later he added c2 more action figures to the shelf.How many more action figures than books were on his shelf?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 books and c1 action figures on a shelf in his room\n    books = c0\n    action_figures_before = c1\n\n    #Later he added c2 more action figures to the shelf\n    added = c2\n\n    #The total number of action figures on the shelf now can be calculated by adding the original number of action figures and the number of added action figures\n    action_figures_now = action_figures_before + added\n\n    #The number of more action figures than books on the shelf can be calculated by subtracting the number of books from the number of action figures now on the shelf\n    more_action_figures = action_figures_now - books\n\n    return more_action_figures", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "There are c0 houses on a block. If a mailman has to give c1 pieces of junk mail to each blockHow many pieces of junk mail should he give in each house?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #there are c0 houses on the block\n    houses = c0\n\n    #the mailman has to give c1 pieces of junk mail to each block\n    mail_per_block = c1\n\n    #to find out how many pieces of junk mail the mailman should give in each house, we need to divide the total number of pieces of junk mail by the number of houses\n    mail_per_house = mail_per_block / houses\n\n    return mail_per_house", "mapping": {"c0": 6.0, "c1": 24.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many more files than apps does he have left on the phone?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files\n    apps_now = c2\n    files_now = c3\n\n    #The number of files more than apps that Dave has left on his phone can be calculated by subtracting the number of apps now from the number of files now\n    more_files = files_now - apps_now\n\n    return more_files", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 6.0, "c3": 15.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many more cakes did baker buy than those he sold?", "answer": [78.0], "response": "def Problem(c0, c1, c2):\n    #Baker originally made c0 cakes\n    original_cakes = c0\n\n    #Baker bought c1 new cakes\n    bought_cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #The number of cakes Baker has now can be calculated by adding the number of original cakes and the number of bought cakes, then subtracting the number of sold cakes\n    current_cakes = original_cakes + bought_cakes - sold_cakes\n\n    #The number of cakes Baker bought more than he sold can be calculated by subtracting the number of original cakes from the current number of cakes\n    more_bought = current_cakes - original_cakes\n\n    return more_bought", "mapping": {"c0": 99.0, "c1": 167.0, "c2": 89.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many birds and storks are sitting on the fence?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds and c1 storks were sitting on the fence\n    birds = c0\n    storks = c1\n\n    #c2 more storks came to join them\n    new_storks = c2\n\n    #The total number of birds and storks sitting on the fence can be calculated by adding the original number of birds and storks with the new storks that joined\n    total_birds_storks = birds + storks + new_storks\n\n    return total_birds_storks", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 6.0}}
{"question": "David did c0 push-ups in gym class today. David did c1 more push-ups than Zachary.How many push-ups did Zachary do?", "answer": [35.0], "response": "def zachary_pushups(c0, c1):\n    #David did c0 push-ups\n    david_pushups = c0\n\n    #David did c1 more push-ups than Zachary\n    zachary_pushups = david_pushups - c1\n\n    return zachary_pushups", "mapping": {"c0": 44.0, "c1": 9.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 19.How much did Edward have before he spent his money?", "answer": [41.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 on books and c1 on pens\n    spent = c0 + c1\n\n    #Now Edward has $19 left\n    remaining = 19\n\n    #The amount Edward had before he spent his money can be calculated by adding the amount he spent to the amount he has left now\n    total = spent + remaining\n\n    return total", "mapping": {"c0": 6.0, "c1": 16.0}}
{"question": "Bryan took a look at his books as well. Each bookshelf contains c0 books. If he has a total of c1 booksHow many bookshelves does he have?", "answer": [19.0], "response": "def Problem(c0, c1):\n    #each bookshelf contains c0 books\n    books_per_shelf = c0\n\n    #Bryan has a total of c1 books\n    total_books = c1\n\n    #The number of bookshelves Bryan has can be calculated by dividing the total number of books by the number of books per shelf\n    num_shelves = total_books // books_per_shelf\n\n    return num_shelves", "mapping": {"c0": 2.0, "c1": 38.0}}
{"question": "There were c0 roses in the vase. Jessica cut some more roses from her flower garden which had a total of c1 roses. There are now c2 roses in the vase.How many roses did she cut?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica cut some more roses from her flower garden which had a total of c1 roses\n    roses_cut = c1\n\n    #there are now c2 roses in the vase\n    roses_after = c2\n\n    #The number of roses Jessica cut can be calculated by subtracting the original number of roses in the vase from the sum of roses in the vase and the roses she cut\n    cut = roses_after - (roses_before + roses_cut)\n\n    return cut", "mapping": {"c0": 7.0, "c1": 59.0, "c2": 20.0}}
{"question": "Luke played a trivia game and gained c0 points in each round of a game. If he scored c1 points in the trivia gameHow many rounds did he play?", "answer": [26.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Luke gained c0 points in each round of the game\n    points_per_round = c0\n\n    #Luke scored c1 points in the trivia game\n    total_points = c1\n\n    #The number of rounds Luke played can be calculated by dividing the total points he scored by the points he gained in each round\n    rounds_played = total_points // points_per_round\n\n    return rounds_played", "mapping": {"c0": 3.0, "c1": 78.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many more cakes did baker buy than those he sold?", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    made = c0\n\n    #Baker sold c1 cakes\n    sold = c1\n\n    #Baker bought c2 new cakes\n    bought = c2\n\n    #The net change in the number of cakes can be calculated by subtracting the number of cakes sold from the number of cakes made and then adding the number of cakes bought\n    net_change = made - sold + bought\n\n    #The number of cakes bought more than those sold can be calculated by subtracting the number of cakes sold from the number of cakes bought\n    more_bought = bought - sold\n\n    return more_bought", "mapping": {"c0": 13.0, "c1": 91.0, "c2": 154.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many more sacks of unripe oranges than ripe oranges are harvested per day?", "answer": [11.0], "response": "def Problem(c0, c1):\n    #number of sacks of unripe oranges harvested per day\n    unripe = c0\n\n    #number of sacks of ripe oranges harvested per day\n    ripe = c1\n\n    #calculate the difference between the number of unripe and ripe oranges harvested per day\n    difference = unripe - ripe\n\n    return difference", "mapping": {"c0": 71.0, "c1": 60.0}}
{"question": "At the zoo, a cage had snakes and alligators. The total number of animals in the cage was c0. If c1 snakes and c2 alligators were hidingHow many animals were not hiding in all?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The total number of animals in the cage was c0\n    total_animals = c0\n\n    #c1 snakes were hiding\n    snakes_hiding = c1\n\n    #c2 alligators were hiding\n    alligators_hiding = c2\n\n    #The number of animals not hiding can be calculated by subtracting the number of hiding snakes and alligators from the total number of animals\n    not_hiding = total_animals - snakes_hiding - alligators_hiding\n\n    return not_hiding", "mapping": {"c0": 79.0, "c1": 24.0, "c2": 51.0}}
{"question": "Danny has c0 bottle caps in his collection. He found some more bottle caps at the park. If he has c1 bottle caps nowHow many bottle caps did he find at the park?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #Danny originally had c0 bottle caps\n    original_caps = c0\n\n    #Danny now has c1 bottle caps\n    now_caps = c1\n\n    #The number of bottle caps Danny found at the park can be calculated by subtracting the original number of bottle caps from the current number of bottle caps\n    found_caps = now_caps - original_caps\n\n    return found_caps", "mapping": {"c0": 21.0, "c1": 53.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters each with c1 pages. It took frank c2 days to finish the book.How many chapters did he read per day?", "answer": [332.0], "response": "def Problem(c0, c1, c2):\n    #The book had c0 chapters\n    chapters = c0\n\n    #Each chapter had c1 pages\n    pages_per_chapter = c1\n\n    #It took Frank c2 days to finish the book\n    days = c2\n\n    #The total number of pages in the book can be calculated by multiplying the number of chapters by the number of pages per chapter\n    total_pages = chapters * pages_per_chapter\n\n    #The number of chapters Frank read per day can be calculated by dividing the total number of chapters by the number of days it took him to finish the book\n    chapters_per_day = chapters / days\n\n    return chapters_per_day", "mapping": {"c0": 2.0, "c1": 405.0, "c2": 664.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many roses did she cut?", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    roses_thrown = c1\n\n    #there are now c2 roses in the vase\n    roses_now = c2\n\n    #The number of roses Jessica cut can be calculated by subtracting the number of roses now from the sum of the original number of roses and the number of roses thrown away\n    roses_cut = roses_before + roses_thrown - roses_now\n\n    return roses_cut", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 23.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of reading and biology homework did she have to complete?", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading = c1\n\n    #Rachel had to complete c2 more pages of biology homework than she originally planned\n    biology_extra = c2\n\n    #The total number of pages of biology homework Rachel had to complete can be calculated by adding the original number of pages with the extra pages\n    biology_total = math + reading + biology_extra\n\n    #The number of pages of reading and biology homework Rachel had to complete can be calculated by subtracting the number of pages of math homework from the total number of pages of biology homework\n    reading_biology = biology_total - math\n\n    return reading_biology", "mapping": {"c0": 5.0, "c1": 10.0, "c2": 6.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many more action figures than books were on his shelf?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on the shelf\n    action_figures = c0\n    books_before = c1\n\n    #Jerry added c2 more books to the shelf\n    books_after = books_before + c2\n\n    #The difference between the number of action figures and books on the shelf can be calculated by subtracting the number of books from the number of action figures\n    difference = action_figures - books_after\n\n    return difference", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 4.0}}
{"question": "In a school there are c0 girls and c1 boys.How many more boys than girls does the school have?", "answer": [807.0], "response": "def Problem(c0, c1):\n    #number of girls in the school\n    girls = c0\n\n    #number of boys in the school\n    boys = c1\n\n    #calculate the difference between the number of boys and girls\n    difference = boys - girls\n\n    return difference", "mapping": {"c0": 34.0, "c1": 841.0}}
{"question": "Bobby ate some pieces of candy. Then he ate c0 more. If he ate a total of c1 pieces of candyHow many pieces of candy had he eaten at the start?", "answer": [18.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Bobby ate some pieces of candy, let's call it x\n    x = c1 - c0\n\n    #The total number of pieces of candy he ate at the start can be calculated by adding the number of pieces he ate after eating c0 more\n    start = x + c0\n\n    return start", "mapping": {"c0": 25.0, "c1": 43.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day.How many days will it take to harvest c1 sacks of oranges?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #they need to harvest c1 sacks in total\n    total_sacks = c1\n\n    #the number of days it will take to harvest c1 sacks can be calculated by dividing c1 by c0 and rounding up to the nearest integer\n    days = math.ceil(total_sacks/sacks_per_day)\n\n    return days", "mapping": {"c0": 8.0, "c1": 24.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the morning than in the evening?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #c1 campers went rowing in the afternoon\n    afternoon = c1\n\n    #c2 campers went rowing in the evening\n    evening = c2\n\n    #The difference between the number of campers rowing in the morning and evening can be calculated by subtracting the number of campers rowing in the evening from the number of campers rowing in the morning\n    difference = morning - evening\n\n    return difference", "mapping": {"c0": 53.0, "c1": 48.0, "c2": 49.0}}
{"question": "Jack received c0 emails in the afternoon, c1 emails in the morning and c2 emails in the evening.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the afternoon\n    afternoon = c0\n\n    #Jack received c1 emails in the morning\n    morning = c1\n\n    #Jack received c2 emails in the evening\n    evening = c2\n\n    #The difference between the number of emails Jack received in the morning and afternoon can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning - afternoon\n\n    return difference", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 16.0}}
{"question": "Dan has $ c0. For a total of $ c1 he bought c2 candy bar each one costing the same amount of money.How much did each candy bar cost?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan spent c1 dollars on c2 candy bars\n    candy_bars = c2\n    total_spent = c1\n\n    #The cost of each candy bar can be calculated by dividing the total amount spent by the number of candy bars bought\n    cost_per_bar = total_spent / candy_bars\n\n    return cost_per_bar", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "Rachel had to complete c0 pages of math homework and c1 pages of reading homework.How many more pages of reading homework than math homework did she have?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #The difference between the number of pages of reading homework and math homework can be calculated by subtracting the number of math homework pages from the number of reading homework pages\n    difference = reading_hw - math_hw\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. The second chapter is c2 pages long.How many more pages does the second chapter have than the first chapter?", "answer": [43.0], "response": "def Problem(c0, c1, c2):\n    #The first chapter is c1 pages long\n    first_chapter = c1\n\n    #The second chapter is c2 pages long\n    second_chapter = c2\n\n    #The difference in pages between the second chapter and the first chapter can be calculated by subtracting the number of pages in the first chapter from the number of pages in the second chapter\n    difference = second_chapter - first_chapter\n\n    return difference", "mapping": {"c0": 2.0, "c1": 37.0, "c2": 80.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies do you still have to watch?", "answer": [4.0], "response": "def remaining_movies(c0, c1, c2, c3):\n    #calculate the total number of movies in the series\n    total_movies = c0\n\n    #calculate the total number of books in the series\n    total_books = c1\n\n    #calculate the number of movies watched\n    watched_movies = c3\n\n    #calculate the number of books read\n    read_books = c2\n\n    #calculate the remaining movies to watch\n    remaining_movies = total_movies - watched_movies\n\n    return remaining_movies", "mapping": {"c0": 8.0, "c1": 21.0, "c2": 7.0, "c3": 4.0}}
{"question": "Haley grew some trees in her backyard. After a typhoon c0 died. If c1 trees were leftHow many trees did she grow?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #Haley originally grew some trees\n    original = c0 + c1\n\n    #After the typhoon, c0 trees died and c1 trees were left\n    now = c1\n\n    #The number of trees Haley grew can be calculated by subtracting the number of trees left after the typhoon from the original number of trees\n    grew = original - now\n\n    return grew", "mapping": {"c0": 5.0, "c1": 12.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a t-shirt cost than a jersey?", "answer": [158.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts and jerseys\n    revenue_tshirt = c0 * c2\n    revenue_jersey = c1 * c3\n\n    #calculate the difference in revenue per item\n    difference = c0 - c1\n\n    #calculate the difference in cost between a t-shirt and a jersey\n    cost_difference = difference * (c2 - c3)\n\n    return cost_difference", "mapping": {"c0": 192.0, "c1": 34.0, "c2": 157.0, "c3": 19.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many chocolate chip cookies did Helen bake?", "answer": [1081.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies yesterday and c3 chocolate chip cookies this morning\n    chocolate_chip = c0 + c3\n\n    return chocolate_chip", "mapping": {"c0": 527.0, "c1": 86.0, "c2": 86.0, "c3": 554.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco ' dad found c1 more pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh now?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The total weight of strawberries they collected together is c0 pounds\n    total_weight = c0\n\n    #Marco's dad found c1 more pounds of strawberries on the way back\n    dad_found = c1\n\n    #The total weight of strawberries after Marco's dad found more strawberries is c2 pounds\n    total_weight_now = c2\n\n    #The weight of Marco's strawberries can be calculated by subtracting the weight of his dad's strawberries from the total weight now\n    marco_weight = total_weight_now - (total_weight - dad_found)\n\n    #The weight of his dad's strawberries can be calculated by subtracting the weight of Marco's strawberries from the total weight now\n    dad_weight = total_weight_now - marco_weight\n\n    return dad_weight", "mapping": {"c0": 22.0, "c1": 30.0, "c2": 36.0}}
{"question": "c0 red peaches, and some more green peaches are in the basket. If there are c1 more green peaches than red peaches in the basketHow many green peaches are in the basket?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #there are originally c0 red peaches in the basket\n    red_peaches = c0\n\n    #there are c1 more green peaches than red peaches in the basket\n    green_peaches = red_peaches + c1\n\n    return green_peaches", "mapping": {"c0": 3.0, "c1": 10.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many more trees died in the typhoon than those that survived?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #Haley initially had c1 trees\n    initial_trees = c1\n\n    #After the typhoon, c0 trees died\n    dead_trees = c0\n\n    #The number of trees that survived can be calculated by subtracting the number of dead trees from the initial number of trees\n    survived_trees = initial_trees - dead_trees\n\n    #The number of trees that died more than those that survived can be calculated by subtracting the number of survived trees from the number of dead trees\n    more_died = dead_trees - survived_trees\n\n    return more_died", "mapping": {"c0": 13.0, "c1": 3.0}}
{"question": "Josh had c0 marbles in his collection. He lost some marbles. If he has c1 marbles nowHow many marbles did he lose?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh now has c1 marbles\n    now = c1\n\n    #The number of marbles Josh lost can be calculated by subtracting the number of marbles he has now from the original number of marbles he had.\n    lost = original - now\n\n    return lost", "mapping": {"c0": 9.0, "c1": 4.0}}
{"question": "They decided to hold the party in their backyard. They have c0 chairs for each set of table. If they have c1 sets of tablesHow many more chairs than tables do they have?", "answer": [117.0], "response": "def Problem(c0, c1):\n    #they have c0 chairs for each set of table\n    chairs_per_table = c0\n\n    #they have c1 sets of tables\n    num_tables = c1\n\n    #the total number of chairs they have is the product of chairs per table and number of tables\n    total_chairs = chairs_per_table * num_tables\n\n    #the number of tables they have is simply c1\n    num_chairs_more = total_chairs - c1\n\n    return num_chairs_more", "mapping": {"c0": 14.0, "c1": 9.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day.How many oranges do they harvest per day if each sack contains c1 oranges?", "answer": [1848.0], "response": "def oranges_per_day(c0, c1):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #the total number of oranges harvested per day can be calculated by multiplying the number of sacks by the number of oranges per sack\n    oranges_per_day = oranges_per_sack * sacks_per_day\n\n    return oranges_per_day", "mapping": {"c0": 66.0, "c1": 28.0}}
{"question": "At the arcade Dave had won some tickets. He used c0 tickets to buy some toys. If he still has c1 tickets leftHow many tickets did Dave win at the arcade?", "answer": [26.0], "response": "def Problem(c0, c1):\n    #Dave won some tickets at the arcade\n    tickets_won = c0 + c1\n\n    #Dave used c0 tickets to buy some toys\n    tickets_used = c0\n\n    #The number of tickets Dave has left can be calculated by subtracting the number of tickets he used from the total number of tickets he won\n    tickets_left = tickets_won - tickets_used\n\n    return tickets_left", "mapping": {"c0": 12.0, "c1": 14.0}}
{"question": "Adam could fit c0 action figures on each shelf in his room. His room has could hold c1 action figures.How many total shelves did his room have?", "answer": [80.0], "response": "def Problem(c0, c1):\n    #Adam could fit c0 action figures on each shelf\n    per_shelf = c0\n\n    #Adam's room could hold c1 action figures\n    total_figures = c1\n\n    #The number of shelves Adam's room has can be calculated by dividing the total number of action figures by the number of action figures that can fit on each shelf\n    shelves = total_figures // per_shelf\n\n    return shelves", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco lost c1 pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh?", "answer": [12.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The total weight of strawberries collected by Marco and his dad is c0 pounds\n    total_weight = c0\n\n    #Marco lost c1 pounds of strawberries on the way back\n    lost_weight = c1\n\n    #The weight of strawberries Marco has now is c2 pounds\n    marco_weight = c2\n\n    #The weight of strawberries Marco's dad has can be calculated by subtracting the weight of strawberries Marco has now from the total weight of strawberries collected, and then adding back the weight of strawberries Marco lost\n    dad_weight = total_weight - marco_weight + lost_weight\n\n    return dad_weight", "mapping": {"c0": 24.0, "c1": 9.0, "c2": 3.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of sugar.How many more cups of sugar does she need to add?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of flour and c1 cups of sugar\n    sugar_needed = c1\n\n    #Mary already put in c2 cups of sugar\n    sugar_added = c2\n\n    #The number of cups of sugar Mary still needs to add can be calculated by subtracting the amount of sugar she already added from the amount of sugar needed\n    sugar_remaining = sugar_needed - sugar_added\n\n    return sugar_remaining", "mapping": {"c0": 12.0, "c1": 13.0, "c2": 2.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many more bird families flew away to asia than those that flew away to africa?", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families\n    original = c0\n\n    #c1 bird families flew away to africa\n    africa = c1\n\n    #c2 bird families flew away to asia\n    asia = c2\n\n    #The difference between the number of bird families that flew away to asia and those that flew away to africa can be calculated by subtracting the number of bird families that flew away to africa from the number of bird families that flew away to asia\n    difference = asia - africa\n\n    return difference", "mapping": {"c0": 38.0, "c1": 47.0, "c2": 94.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Steven have than Jill?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    jake = c2 - c0\n\n    #Jake also has c1 more peaches than Jill\n    jill = jake - c1\n\n    #The difference between Steven's peaches and Jill's peaches can be calculated by subtracting Jill's peaches from Steven's peaches\n    difference = c2 - jill\n\n    return difference\n\n#The function takes in three arguments: c0, c1, and c2. c0 represents the number of peaches Jake has fewer than Steven, c1 represents the number of peaches Jake has more than Jill, and c2 represents the number of peaches Steven has.\n\n#First, we calculate the number of peaches Jake has by subtracting c0 from c2. Then, we calculate the number of peaches Jill has by subtracting c1 from Jake's number of peaches. Finally, we calculate the difference between Steven's peaches and Jill's peaches by subtracting Jill's peaches from c2. This gives us the answer to the problem.", "mapping": {"c0": 9.0, "c1": 18.0, "c2": 16.0}}
{"question": "Zachary did c0 push-ups and David did c1 push-ups in gym class today.How many more push-ups did Zachary do than David?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Zachary did c0 push-ups\n    zachary = c0\n\n    #David did c1 push-ups\n    david = c1\n\n    #The difference in the number of push-ups can be calculated by subtracting the number of push-ups David did from the number of push-ups Zachary did\n    difference = zachary - david\n\n    return difference", "mapping": {"c0": 51.0, "c1": 44.0}}
{"question": "c0 people can ride the Ferris wheel in paradise park at the same time. If the Ferris wheel has c1 seatsHow many people can each seat hold?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #c0 people can ride the Ferris wheel at the same time\n    num_riders = c0\n\n    #The Ferris wheel has c1 seats\n    num_seats = c1\n\n    #Each seat can hold the number of people equal to the total number of riders divided by the number of seats\n    num_per_seat = num_riders / num_seats\n\n    return num_per_seat", "mapping": {"c0": 16.0, "c1": 4.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of sugar than cups of salt does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c0 - c3 cups of flour\n    flour_needed = c0 - c3\n\n    #Mary needs to add c1 cups of sugar\n    sugar_needed = c1\n\n    #Mary needs to add c2 cups of salt\n    salt_needed = c2\n\n    #Mary needs to add more cups of sugar than cups of salt, so we need to calculate the difference between sugar_needed and salt_needed\n    difference = sugar_needed - salt_needed\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 7.0, "c3": 5.0}}
{"question": "Paige raised c0 goldfish and c1 catfish in the pond but stray cats loved eating them. Now she has c2 left.How many goldfish disappeared?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 goldfish and c1 catfish in the pond\n    goldfish_before = c0\n\n    #The number of goldfish that disappeared can be calculated by subtracting the number of goldfish left now from the original number of goldfish\n    goldfish_disappeared = goldfish_before - (c2 - c1)\n\n    return goldfish_disappeared", "mapping": {"c0": 16.0, "c1": 71.0, "c2": 2.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 apples still on it. If c2 of those are ripe and the rest are unripeHow many unripe apples does the tree have now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #The tree now has c1 apples still on it\n    remaining = c1\n\n    #Out of the remaining apples, c2 are ripe\n    ripe = c2\n\n    #The number of unripe apples can be calculated by subtracting the number of picked and ripe apples from the remaining apples\n    unripe = remaining - picked - ripe\n\n    return unripe", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 3.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than zachary.How many push-ups did Zachary and David do altogether?", "answer": [146.0], "response": "def total_pushups(c0, c1):\n    # Zachary did c0 push-ups\n    zachary = c0\n\n    # David did c1 more push-ups than Zachary\n    david = c1 + zachary\n\n    # Total push-ups done by both can be calculated by adding Zachary's and David's push-ups\n    total = zachary + david\n\n    return total", "mapping": {"c0": 44.0, "c1": 58.0}}
{"question": "If Lewis earns a total of $ c0 during c1 weeks of harvestHow much money does he earn each week?", "answer": [92.0], "response": "def Problem(c0, c1):\n    #Lewis earns a total of c0 dollars during c1 weeks of harvest\n    total_earnings = c0\n    weeks = c1\n\n    #The amount of money Lewis earns each week can be calculated by dividing the total earnings by the number of weeks\n    earnings_per_week = total_earnings / weeks\n\n    return earnings_per_week", "mapping": {"c0": 460.0, "c1": 5.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested bacon than those that suggested tomatoes?", "answer": [314.0], "response": "def Problem(c0, c1, c2):\n    #c0 students suggested adding mashed potatoes\n    potatoes = c0\n\n    #c1 students suggested adding bacon to the menu\n    bacon = c1\n\n    #c2 students suggested adding tomatoes\n    tomatoes = c2\n\n    #The difference between the number of students who suggested bacon and the number of students who suggested tomatoes can be calculated by subtracting the number of students who suggested tomatoes from the number of students who suggested bacon\n    difference = bacon - tomatoes\n\n    return difference", "mapping": {"c0": 228.0, "c1": 337.0, "c2": 23.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 12.How much did Edward spend on books and pens?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 on books and c1 on pens\n    spent_on_books = c0\n    spent_on_pens = c1\n\n    #Edward has $12 now\n    total_money = 12\n\n    #The total amount Edward spent on books and pens can be calculated by adding the amount he spent on books and pens\n    total_spent = spent_on_books + spent_on_pens\n\n    #The amount Edward has left can be calculated by subtracting the total amount he spent from the total amount he had initially\n    left_money = total_money - total_spent\n\n    #The amount Edward spent on books and pens can be calculated by subtracting the amount he has left from the amount he spent initially\n    spent = total_spent - left_money\n\n    return spent", "mapping": {"c0": 4.0, "c1": 3.0}}
{"question": "Edward spent $ c0. Then he received $ c1 from his friend. Now he has $ 7.How much did Edward have before he spent his money?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 dollars\n    spent = c0\n\n    #Edward received c1 dollars from his friend\n    received = c1\n\n    #Edward now has 7 dollars\n    total_now = 7\n\n    #The amount of money Edward had before he spent his money can be calculated by adding the amount he spent and the amount he received to the amount he has now\n    total_before = spent + received + total_now\n\n    return total_before", "mapping": {"c0": 17.0, "c1": 10.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday than on tuesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #The difference between the number of kids Julia played with on Monday and Tuesday can be calculated by subtracting the number of kids she played with on Tuesday from the number of kids she played with on Monday\n    difference = monday - tuesday\n\n    return difference", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 96.0}}
{"question": "In a school there are c0 more girls than boys. If there are c1 girlsHow many boys are there in that school?", "answer": [337.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are c0 more girls than boys\n    girls_more = c0\n\n    #there are c1 girls in the school\n    girls_total = c1\n\n    #The number of boys in the school can be calculated by subtracting the number of girls from the total number of students and then dividing by 2 (since there are equal numbers of boys and girls in the school)\n    boys_total = (girls_total - girls_more) / 2\n\n    return boys_total", "mapping": {"c0": 402.0, "c1": 739.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much money did she still have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her mom\n    mom = c0\n\n    #Gwen's dad gave her c1 more dollars\n    dad = c1\n\n    #The total amount of money Gwen had before spending any money\n    total_before = mom + dad\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The amount of money Gwen has left can be calculated by subtracting the amount she spent from the total amount she had before spending any money\n    total_now = total_before - spent\n\n    return total_now", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many red and green peaches are in the basket?", "answer": [22.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 red peaches in the basket\n    red = c0\n\n    #there are c1 yellow peaches in the basket\n    yellow = c1\n\n    #there are c2 green peaches in the basket\n    green = c2\n\n    #The number of red and green peaches in the basket can be calculated by adding the number of red peaches and green peaches\n    red_and_green = red + green\n\n    return red_and_green", "mapping": {"c0": 6.0, "c1": 90.0, "c2": 16.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many more blocks did he use to build the tower than he did to build the house?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    randy_blocks = c0\n\n    #Randy uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #Randy uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The difference between the number of blocks used to build the tower and the number of blocks used to build the house can be calculated by subtracting the number of blocks used to build the house from the number of blocks used to build the tower\n    difference = tower_blocks - house_blocks\n\n    return difference", "mapping": {"c0": 37.0, "c1": 33.0, "c2": 13.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the jerseys?", "answer": [152.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Razorback shop made c0 dollars off each jersey\n    jersey_price = c0\n\n    #The Razorback shop made c1 dollars off each t-shirt\n    tshirt_price = c1\n\n    #They sold c2 t-shirts\n    tshirts_sold = c2\n\n    #They sold c3 jerseys\n    jerseys_sold = c3\n\n    #The total money they made from selling jerseys can be calculated by multiplying the number of jerseys sold by the price of each jersey\n    jersey_money = jerseys_sold * jersey_price\n\n    return jersey_money", "mapping": {"c0": 76.0, "c1": 204.0, "c2": 158.0, "c3": 2.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many more cakes did baker sell than those he bought?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Baker originally made c0 cakes\n    original_cakes = c0\n\n    #Baker bought c1 new cakes\n    bought_cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #The number of cakes Baker has now can be calculated by adding the number of original cakes and the number of bought cakes, then subtracting the number of sold cakes\n    current_cakes = original_cakes + bought_cakes - sold_cakes\n\n    #The number of cakes Baker sold more than those he bought can be calculated by subtracting the number of bought cakes from the number of sold cakes\n    sold_more = sold_cakes - bought_cakes\n\n    return sold_more", "mapping": {"c0": 8.0, "c1": 139.0, "c2": 145.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many more letters did Jack receive in the morning than in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails and c1 letters in the morning\n    morning_emails = c0\n    morning_letters = c1\n\n    #Jack then received c2 emails and c3 letters in the afternoon\n    afternoon_emails = c2\n    afternoon_letters = c3\n\n    #The difference in the number of letters received in the morning and afternoon can be calculated by subtracting the number of afternoon letters from the number of morning letters\n    difference = morning_letters - afternoon_letters\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 2.0, "c3": 7.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many more apples than peaches does Steven have?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c3 + c1\n\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Steven has more apples than peaches\n    more_apples = steven_apples - steven_peaches\n\n    return more_apples", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 12.0, "c3": 15.0}}
{"question": "Rachel had to complete c0 pages of math homework and c1 pages of reading homework.How many more pages of math homework than reading homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #The difference between the number of pages of math homework and reading homework can be calculated by subtracting the number of pages of reading homework from the number of pages of math homework\n    diff = math_hw - reading_hw\n\n    return diff", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters, each with the same number of pages. It has a total of c1 pages. It took Frank c2 days to finish the book.How many pages did he read per day?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #The book has c0 chapters, each with the same number of pages\n    pages_per_chapter = c1/c0\n\n    #It took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = c1/c2\n\n    return pages_per_day", "mapping": {"c0": 41.0, "c1": 450.0, "c2": 30.0}}
{"question": "Jesse's room is c0 feet wide and c1 feet long.How much longer is her room than it is wide?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet wide\n    width = c0\n\n    #Jesse's room is c1 feet long\n    length = c1\n\n    #The difference between the length and width of Jesse's room is how much longer her room is than it is wide\n    difference = length - width\n\n    return difference", "mapping": {"c0": 19.0, "c1": 20.0}}
{"question": "Frank was reading through some books. Each book had c0 pages and it took Frank c1 days to finish each book.How many pages did he read per day?", "answer": [83.0], "response": "def Problem(c0, c1):\n    #each book has c0 pages\n    pages_per_book = c0\n\n    #it took Frank c1 days to finish each book\n    days_per_book = c1\n\n    #The number of pages Frank read per day can be calculated by dividing the number of pages per book by the number of days it took him to finish the book\n    pages_per_day = pages_per_book / days_per_book\n\n    return pages_per_day", "mapping": {"c0": 249.0, "c1": 3.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 crayons left while not having lost a single eraser.How many more erasers than crayons did he have left?", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons and c1 erasers for his birthday\n    crayons = c0\n    erasers = c1\n\n    #At the end of the school year, he had c2 crayons left\n    crayons_left = c2\n\n    #He did not lose any erasers, so he still has c1 erasers left\n    erasers_left = c1\n\n    #The difference between the number of erasers left and crayons left is how many more erasers he has left than crayons\n    difference = erasers_left - crayons_left\n\n    return difference", "mapping": {"c0": 601.0, "c1": 406.0, "c2": 336.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make per day in the first c4 days at the carnival?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3, c4):\n    #The carnival made c0 dollars in the first c1 days\n    first_days = c1\n    first_money = c0\n\n    #The carnival made c2 dollars in the remaining c3 days\n    remaining_days = c3\n    remaining_money = c2\n\n    #The total number of days at the carnival is c4\n    total_days = c4\n\n    #The average amount of money made per day in the first c4 days can be calculated by dividing the total amount of money made in the first c1 days by the number of days in the first c1 days\n    average_first = first_money / first_days\n\n    #The average amount of money made per day in the remaining c4-c1 days can be calculated by dividing the total amount of money made in the remaining c3 days by the number of days in the remaining c3 days\n    average_remaining = remaining_money / remaining_days\n\n    #The average amount of money made per day in the first c4 days can be calculated by dividing the total amount of money made in the first c4 days by the number of days in the first c4 days\n    average_total = (first_money + remaining_money) / total_days\n\n    #Return the average amount of money made per day in the first c1 days\n    return average_first", "mapping": {"c0": 120.0, "c1": 20.0, "c2": 66.0, "c3": 16.0, "c4": 20.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour.How many more cups of sugar than cups of flour does she need to add now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of sugar and c1 cups of flour\n    sugar_needed = c0\n    flour_needed = c1\n\n    #Mary already put in c2 cups of flour\n    flour_added = c2\n\n    #Mary needs to add sugar_needed - (flour_added + flour_needed) cups of sugar to maintain the recipe ratio\n    sugar_to_add = sugar_needed - (flour_added + flour_needed)\n\n    #Calculate the difference between the amount of sugar and flour needed to add\n    difference = abs(sugar_to_add) - abs(flour_needed - flour_added)\n\n    return difference", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 11.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She made c1 necklaces and each necklace takes c2 beads.How many beads did Emily have?", "answer": [52.0], "response": "def Problem(c0, c1, c2):\n    #Emily is making bead necklaces for c0 friends\n    friends = c0\n\n    #Emily made c1 necklaces\n    necklaces = c1\n\n    #Each necklace takes c2 beads\n    beads_per_necklace = c2\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces by the number of beads per necklace\n    total_beads = necklaces * beads_per_necklace\n\n    return total_beads", "mapping": {"c0": 44.0, "c1": 26.0, "c2": 2.0}}
{"question": "Melissa scored a total of c0 points playing some games. Is she scored c1 points in each game.How many games did she play?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa scored a total of c0 points\n    total_points = c0\n\n    #Melissa scored c1 points in each game\n    points_per_game = c1\n\n    #The number of games Melissa played can be calculated by dividing the total points by the points per game\n    games_played = total_points // points_per_game\n\n    return games_played", "mapping": {"c0": 21.0, "c1": 7.0}}
{"question": "Adam has c0 apples. Jackie has c1 apples.How many more apples does Adam have than Jackie?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Adam has c0 apples\n    adam = c0\n\n    #Jackie has c1 apples\n    jackie = c1\n\n    #The difference in the number of apples Adam and Jackie have can be calculated by subtracting the number of apples Jackie has from the number of apples Adam has\n    difference = adam - jackie\n\n    return difference", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "Debby bought c0 water bottles and c1 soda bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the soda bottles last?", "answer": [64.0], "response": "def Problem(c0, c1, c2, c3):\n    #Debby bought c0 water bottles and c1 soda bottles\n    water_bottles = c0\n    soda_bottles = c1\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_drinks = c2\n    soda_drinks = c3\n\n    #Calculate how many days the soda bottles would last\n    days = soda_bottles // soda_drinks\n\n    return days", "mapping": {"c0": 200.0, "c1": 256.0, "c2": 312.0, "c3": 4.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many more books than action figures were on his shelf?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures = c0\n    books_before = c1\n\n    #Later he added c2 more books to the shelf\n    added_books = c2\n\n    #The total number of books on the shelf after adding c2 more books\n    books_after = books_before + added_books\n\n    #The difference between the number of books and the number of action figures on the shelf\n    difference = books_after - action_figures\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 9.0}}
{"question": "Robin's hair was c0 inches long. If he grew c1 more inchesHow long is his hair now?", "answer": [37.0], "response": "def Problem(c0, c1):\n    #Robin's hair was originally c0 inches long\n    hair_before = c0\n\n    #Robin grew c1 more inches\n    grew = c1\n\n    #The length of Robin's hair now can be calculated by adding the number of inches he grew to the original length of his hair\n    hair_now = hair_before + grew\n\n    return hair_now", "mapping": {"c0": 19.0, "c1": 18.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many bottle caps did danny have at first?", "answer": [13.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    caps_found = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers in his collection\n    caps_now = c2\n    wrappers_now = c3\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of bottle caps he found at the park to the number of bottle caps he has now, and then subtracting the total number of wrappers he has now\n    caps_before = caps_found + caps_now - wrappers_now\n\n    return caps_before", "mapping": {"c0": 82.0, "c1": 29.0, "c2": 42.0, "c3": 61.0}}
{"question": "If you had c0 bags with equal number of cookies and c1 cookies in totalHow many cookies does each bag have?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #each bag has an equal number of cookies, so we can divide the total number of cookies by the number of bags to get the number of cookies per bag\n    cookies_per_bag = c1 / c0\n\n    return cookies_per_bag", "mapping": {"c0": 4.0, "c1": 36.0}}
{"question": "White t - shirts can be purchased in packages of c0. If mom buys c1 white t - shirtsHow many packages will she have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #calculate the number of packages by dividing the total number of t-shirts by the number of t-shirts in each package\n    packages = c1 // c0\n    return packages", "mapping": {"c0": 13.0, "c1": 39.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many pupils are there in the school now?", "answer": [1346.0], "response": "def total_pupils(c0, c1, c2):\n    #number of girls in the school before c2 joined\n    girls_before = c0\n    #number of boys in the school\n    boys = c1\n    #number of girls who joined the school\n    girls_joined = c2\n\n    #total number of girls in the school now\n    girls_now = girls_before + girls_joined\n\n    #total number of pupils in the school now\n    pupils_now = girls_now + boys\n\n    return pupils_now", "mapping": {"c0": 706.0, "c1": 222.0, "c2": 418.0}}
{"question": "For the walls of the house John would use large planks of wood. Each plank needs c0 pieces of nails to be secured and he would use c1 planks.How many nails does John need for the house wall?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #each plank needs c0 pieces of nails\n    nails_per_plank = c0\n\n    #John would use c1 planks\n    num_planks = c1\n\n    #The total number of nails John needs can be calculated by multiplying the number of nails per plank by the number of planks\n    total_nails = nails_per_plank * num_planks\n\n    return total_nails", "mapping": {"c0": 2.0, "c1": 16.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many more tickets did Dave use to buy clothes than he did to buy toys?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 tickets\n    dave_original = c0\n\n    #Dave used c1 tickets to buy toys\n    toys = c1\n\n    #Dave used c2 more tickets to buy clothes\n    clothes = c2\n\n    #The difference between the number of tickets used to buy clothes and toys can be calculated by subtracting the number of tickets used to buy toys from the number of tickets used to buy clothes\n    difference = clothes - toys\n\n    return difference", "mapping": {"c0": 13.0, "c1": 8.0, "c2": 18.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. Marco's strawberries weighed c1 pounds.How much more did his dad's strawberries weigh than his?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #total weight of strawberries picked by Marco and his dad\n    total_weight = c0\n\n    #weight of strawberries picked by Marco\n    marco_weight = c1\n\n    #weight of strawberries picked by Marco's dad can be calculated by subtracting Marco's weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    #the difference in weight between Marco's strawberries and his dad's strawberries can be calculated by subtracting Marco's weight from his dad's weight\n    difference = dad_weight - marco_weight\n\n    return difference", "mapping": {"c0": 35.0, "c1": 13.0}}
{"question": "An industrial machine can make c0 shirts a minute. It made c1 shirts yesterday and c2 shirts today.How many minutes did the machine work in all?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #The machine made c1 shirts yesterday and c2 shirts today\n    shirts_yesterday = c1\n    shirts_today = c2\n\n    #The total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = shirts_yesterday + shirts_today\n\n    #The number of minutes the machine worked can be calculated by dividing the total number of shirts made by the number of shirts the machine can make per minute\n    minutes_worked = total_shirts / shirts_per_minute\n\n    return minutes_worked", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 8.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more red peaches than yellow peaches are in the basket?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #number of red peaches in the basket\n    red = c0\n\n    #number of yellow peaches in the basket\n    yellow = c1\n\n    #calculate the difference between the number of red and yellow peaches\n    difference = red - yellow\n\n    return difference", "mapping": {"c0": 19.0, "c1": 11.0, "c2": 12.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her mom than she did from her dad?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her mom\n    mom = c0\n\n    #Gwen's dad gave her c1 more dollars\n    dad = c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The total amount of money Gwen has now can be calculated by adding the amount she received from her mom and dad, and then subtracting the amount she spent\n    total_now = mom + dad - spent\n\n    #The difference between the amount Gwen received from her mom and dad can be calculated by subtracting the amount she received from her dad from the amount she received from her mom\n    difference = mom - dad\n\n    return difference", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 4.0}}
{"question": "The ring toss game at the carnival made the same amount of money each day. In total in c0 days they earned c1 dollars. Together with game they earned c2 dollars.How much did ring toss game make per day?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The ring toss game made the same amount of money each day\n    game_daily = c1/c0\n\n    #Together with the game they earned c2 dollars\n    total_earned = c2\n\n    #The amount earned by the ring toss game can be calculated by subtracting the total earned from the amount earned by other games\n    game_earned = total_earned - c1\n\n    #The number of days the ring toss game was played can be calculated by dividing the amount earned by the game per day\n    game_days = game_earned/game_daily\n\n    #The amount made per day by the ring toss game can be calculated by dividing the amount earned by the game by the number of days it was played\n    game_daily_earned = game_earned/game_days\n\n    return game_daily_earned", "mapping": {"c0": 30.0, "c1": 420.0, "c2": 22.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many apps did he delete?", "answer": [11.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files\n    apps_after = c2\n    files_after = c3\n\n    #The number of apps Dave deleted can be calculated by subtracting the number of apps he has now from the original number of apps he had\n    deleted_apps = apps_before - apps_after\n\n    return deleted_apps", "mapping": {"c0": 16.0, "c1": 77.0, "c2": 5.0, "c3": 23.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 salty cookies and c3 sweet cookies.How many more sweet cookies than salty cookies did he eat?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco originally had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #Paco ate c2 salty cookies and c3 sweet cookies\n    ate_salty = c2\n    ate_sweet = c3\n\n    #Calculate how many sweet and salty cookies Paco has left\n    sweet_left = sweet_cookies - ate_sweet\n    salty_left = salty_cookies - ate_salty\n\n    #Calculate how many more sweet cookies than salty cookies Paco ate\n    more_sweet = ate_sweet - ate_salty\n\n    return more_sweet", "mapping": {"c0": 39.0, "c1": 6.0, "c2": 23.0, "c3": 32.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died.How many more trees survived the typhoon than those that died?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Haley originally grew c0 trees\n    trees_before = c0\n\n    #After the typhoon, c1 trees died\n    trees_died = c1\n\n    #The number of trees that survived the typhoon can be calculated by subtracting the number of trees that died from the original number of trees\n    trees_survived = trees_before - trees_died\n\n    #The number of trees that survived the typhoon more than those that died can be calculated by subtracting the number of trees that died from the number of trees that survived\n    more_survived = trees_survived - trees_died\n\n    return more_survived", "mapping": {"c0": 13.0, "c1": 6.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday.How many more kids did she play with on monday than on tuesday?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday = c1\n\n    #The difference between the number of kids she played with on monday and tuesday can be calculated by subtracting the number of kids she played with on tuesday from the number of kids she played with on monday\n    difference = monday - tuesday\n\n    return difference", "mapping": {"c0": 18.0, "c1": 10.0}}
{"question": "Kelly has c0 nintendo games and c1 sony games.How many sony games does she need to give away so that she will have c2 sony games left?", "answer": [101.0], "response": "def Problem(c0, c1, c2):\n    #Kelly has c0 nintendo games and c1 sony games\n    sony_before = c1\n\n    #She wants to have c2 sony games left\n    sony_after = c2\n\n    #The number of sony games she needs to give away can be calculated by subtracting the desired number of sony games from the original number of sony games she had\n    sony_to_give = sony_before - sony_after\n\n    return sony_to_give", "mapping": {"c0": 46.0, "c1": 132.0, "c2": 31.0}}
{"question": "c0 red peaches and c1 green peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #number of red peaches in the basket\n    red_peaches = c0\n\n    #number of green peaches in the basket\n    green_peaches = c1\n\n    #calculate the difference between the number of green and red peaches\n    difference = green_peaches - red_peaches\n\n    return difference", "mapping": {"c0": 5.0, "c1": 11.0}}
{"question": "Nell collects baseball cards. She gave c0 of her cards to Jeff and now has c1 cards left..How many cards did Nell have initially?", "answer": [455.0], "response": "def initial_cards(c0, c1):\n    #Nell gave c0 cards to Jeff\n    gave = c0\n\n    #Nell now has c1 cards left\n    now = c1\n\n    #The number of cards Nell had initially can be calculated by adding the number of cards she gave to Jeff to the number of cards she has now\n    initial = gave + now\n\n    return initial", "mapping": {"c0": 301.0, "c1": 154.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on monday and tuesday?", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #The total number of kids Julia played with on Monday and Tuesday can be calculated by adding the number of kids she played with on each day\n    total = monday + tuesday\n\n    return total", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 97.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of math homework than reading homework did she have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework than math homework\n    bio_hw = c2\n\n    #The difference between the number of math homework pages and reading homework pages can be calculated by subtracting the number of reading homework pages from the number of math homework pages\n    diff = math_hw - reading_hw\n\n    return diff", "mapping": {"c0": 9.0, "c1": 2.0, "c2": 96.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many campers went rowing in all?", "answer": [98.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #c1 campers went rowing in the afternoon\n    afternoon = c1\n\n    #c2 campers went rowing in the evening\n    evening = c2\n\n    #The total number of campers who went rowing can be calculated by adding the number of campers who went rowing in the morning, afternoon, and evening\n    total = morning + afternoon + evening\n\n    return total", "mapping": {"c0": 36.0, "c1": 13.0, "c2": 49.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many more marbles did he lose than those he found?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh lost c1 marbles\n    lost = c1\n\n    #Josh found c2 new marbles\n    found = c2\n\n    #The difference between the number of marbles Josh lost and the number of marbles he found can be calculated by subtracting the number of found marbles from the number of lost marbles\n    difference = lost - found\n\n    return difference", "mapping": {"c0": 4.0, "c1": 16.0, "c2": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps did danny find at the park?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    bottle_caps_found = c0\n    wrappers_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    bottle_caps_now = c2\n    wrappers_now = c3\n\n    #Danny found x more wrappers than bottle caps at the park\n    wrappers_more = wrappers_found - bottle_caps_found\n\n    return wrappers_more", "mapping": {"c0": 11.0, "c1": 28.0, "c2": 68.0, "c3": 51.0}}
{"question": "Dave had c0 files and c1 apps on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many apps did he delete?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 files and c1 apps on his phone\n    files_before = c0\n    apps_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of apps he deleted can be calculated by subtracting the number of apps he has now from the original number of apps he had\n    apps_deleted = apps_before - apps_after\n\n    return apps_deleted", "mapping": {"c0": 59.0, "c1": 15.0, "c2": 12.0, "c3": 30.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many more books did he buy than he sold?", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 books\n    original_books = c0\n\n    #After selling some books and buying new ones, he now has c2 books\n    current_books = c2\n\n    #The number of books he sold can be calculated by subtracting the current number of books from the original number of books plus the number of new books he bought\n    sold = original_books + c1 - current_books\n\n    #The number of books he bought can be calculated by subtracting the number of books he sold from the number of new books he bought\n    bought = c1 - sold\n\n    return bought", "mapping": {"c0": 71.0, "c1": 38.0, "c2": 116.0}}
{"question": "Allan brought c0 balloons and c1 balls while Jake brought c2 balloons and c3 balls to the park.How many balls did Allan and Jake have in the park?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Allan brought c0 balloons and c1 balls\n    allan_balloons = c0\n    allan_balls = c1\n\n    #Jake brought c2 balloons and c3 balls\n    jake_balloons = c2\n    jake_balls = c3\n\n    #The total number of balls they have in the park can be calculated by adding the number of balls Allan and Jake brought\n    total_balls = allan_balls + jake_balls\n\n    return total_balls", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 6.0, "c3": 4.0}}
{"question": "You have c0 dollars.How many packs of dvds can you buy if each pack costs c1 dollars?", "answer": [4.0], "response": "def buy_dvds(c0, c1):\n    #calculate how many packs of dvds can be bought by dividing the total amount of money by the cost of each pack\n    packs = c0 // c1\n    return packs", "mapping": {"c0": 104.0, "c1": 26.0}}
{"question": "Kelly has c0 nintendo games and c1 sony games.How many nintendo games does she need to give away so that she will have c2 nintendo games left?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Kelly originally has c0 nintendo games\n    nintendo_before = c0\n\n    #Kelly originally has c1 sony games\n    sony_before = c1\n\n    #Kelly wants to have c2 nintendo games left\n    nintendo_after = c2\n\n    #The number of nintendo games Kelly needs to give away can be calculated by subtracting the desired number of nintendo games from the original number of nintendo games\n    nintendo_needed = nintendo_before - nintendo_after\n\n    return nintendo_needed", "mapping": {"c0": 20.0, "c1": 70.0, "c2": 12.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday.How many more kids did she play with on tuesday than on monday?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday = c1\n\n    #The difference between the number of kids she played with on tuesday and monday can be calculated by subtracting the number of kids she played with on monday from the number of kids she played with on tuesday\n    difference = tuesday - monday\n\n    return difference", "mapping": {"c0": 11.0, "c1": 12.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags worth of cans.How many more bags did she have on monday than she found on the next day?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Tiffany had c0 bags of cans on Monday\n    monday = c0\n\n    #The next day she found c1 more bags worth of cans\n    tuesday = c0 + c1\n\n    #The difference between the number of bags on Monday and Tuesday can be calculated by subtracting the number of bags on Tuesday from the number of bags on Monday\n    difference = monday - tuesday\n\n    return difference", "mapping": {"c0": 8.0, "c1": 7.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers. If the erasers are organized into c2 groupsHow big is each group?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Steven has c0 skittles and c1 erasers\n    skittles = c0\n    erasers = c1\n\n    #The erasers are organized into c2 groups\n    groups = c2\n\n    #The size of each group can be calculated by dividing the number of erasers by the number of groups\n    size = erasers / groups\n\n    return size", "mapping": {"c0": 3941.0, "c1": 4950.0, "c2": 495.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. c0 students suggested adding mashed potatoes while others suggested adding bacon to the menu. If c1 more students suggested adding mashed potatoes than those that suggested baconHow many students suggested bacon?", "answer": [394.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 more students suggested adding mashed potatoes than those that suggested bacon\n    difference = c1\n\n    #The number of students who suggested bacon can be calculated by subtracting the difference from the number of students who suggested mashed potatoes\n    bacon = mashed_potatoes - difference\n\n    return bacon", "mapping": {"c0": 457.0, "c1": 63.0}}
{"question": "The Razorback t-shirt shop sells each t-shirt for $ c0 dollars. During the Arkansas and Texas tech game they offered a discount of $ c1 per t-shirt and sold c2 t-shirts.How much money did they make from selling the t-shirts?", "answer": [5590.0], "response": "def Problem(c0, c1, c2):\n    #each t-shirt is sold for c0 dollars\n    price = c0\n\n    #there is a discount of c1 dollars per t-shirt\n    discount = c1\n\n    #they sold c2 t-shirts\n    sold = c2\n\n    #the total revenue can be calculated by multiplying the number of t-shirts sold by the discounted price\n    revenue = (price - discount) * sold\n\n    return revenue", "mapping": {"c0": 51.0, "c1": 8.0, "c2": 130.0}}
{"question": "c0 storks and c1 birds were sitting on the fence. c2 more birds came to join them.How many more birds than storks are sitting on the fence?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total = c0 + c1\n\n    #number of birds after c2 more birds joined\n    birds_now = c1 + c2\n\n    #number of storks remains the same\n    storks_now = c0\n\n    #difference between number of birds and storks now\n    diff = birds_now - storks_now\n\n    #difference between number of birds and storks before\n    diff_before = c1 - c0\n\n    #difference between the two differences gives the answer\n    answer = diff - diff_before\n\n    return answer", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 4.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many cakes did each person eat?", "answer": [15.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Matthew had c0 crackers\n    crackers = c0\n\n    #Matthew had c1 cakes\n    cakes = c1\n\n    #Matthew gave equal numbers of crackers and cakes to his c2 friends\n    friends = c2\n\n    #The total number of crackers and cakes that Matthew gave to his friends is equal to the sum of crackers and cakes\n    total = crackers + cakes\n\n    #Each person ate an equal number of crackers and cakes, so the total number of crackers and cakes divided by the number of friends is the number of crackers and cakes each person ate\n    each = total / friends\n\n    #Since we only want to know the number of cakes each person ate, we can simply subtract the number of crackers each person ate from the total number of cakes and return that value\n    return cakes - each", "mapping": {"c0": 29.0, "c1": 30.0, "c2": 2.0}}
{"question": "There were c0 roses in the vase. Jessica cut c1 more roses from her flower garden and put them in the vase.How many roses are there in the vase now?", "answer": [18.0], "response": "def Problem(c0, c1):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica cut c1 more roses from her flower garden and put them in the vase\n    cut = c1\n\n    #The number of roses in the vase now can be calculated by adding the number of roses before and the number of roses cut\n    roses_now = roses_before + cut\n\n    return roses_now", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many pages are in each chapter?", "answer": [111.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The book had c0 pages\n    total_pages = c0\n\n    #The pages were equally distributed over c1 chapters\n    total_chapters = c1\n\n    #It took Frank c2 days to finish the book\n    days_taken = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days taken to finish the book\n    pages_per_day = total_pages / days_taken\n\n    #The number of pages in each chapter can be calculated by dividing the total number of pages by the total number of chapters\n    pages_per_chapter = total_pages / total_chapters\n\n    #Return the number of pages in each chapter\n    return pages_per_chapter", "mapping": {"c0": 555.0, "c1": 5.0, "c2": 220.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many sweet cookies did Paco have left?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies\n    sweet_cookies = c0\n\n    #Paco had c1 salty cookies\n    salty_cookies = c1\n\n    #Paco ate c2 sweet cookies\n    ate_sweet = c2\n\n    #Paco ate c3 salty cookies\n    ate_salty = c3\n\n    #The number of sweet cookies Paco has left can be calculated by subtracting the number of sweet cookies he ate from the original number of sweet cookies he had\n    sweet_left = sweet_cookies - ate_sweet\n\n    return sweet_left", "mapping": {"c0": 22.0, "c1": 75.0, "c2": 15.0, "c3": 54.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of flour does she need to add?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs c0 cups of flour in total\n    flour_total = c0\n\n    #Mary already put in c2 cups of flour\n    flour_now = c2\n\n    #Mary needs to add c0 - c2 cups of flour\n    flour_needed = flour_total - flour_now\n\n    return flour_needed", "mapping": {"c0": 9.0, "c1": 5.0, "c2": 3.0, "c3": 62.0}}
{"question": "Each pack of dvds costs c0 dollars. If there is a discount of c1 dollars on each packHow many packs of dvds can you buy with c2 dollars?", "answer": [93.0], "response": "def Problem(c0, c1, c2):\n    #calculate the discounted price of each pack of dvds\n    discounted_price = c0 - c1\n\n    #calculate the maximum number of packs that can be bought with c2 dollars\n    max_packs = c2 // discounted_price\n\n    return max_packs", "mapping": {"c0": 107.0, "c1": 106.0, "c2": 93.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books are there in the ' crazy silly school ' series?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left after reading c2 of them\n    books_left = c0 - c2\n\n    #calculate the number of movies left after watching c3 of them\n    movies_left = c1 - c3\n\n    #calculate the difference between the number of movies and books left\n    difference = movies_left - books_left\n\n    return difference", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 19.0, "c3": 61.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many pieces of candy and chocolate did Bobby eat altogether?", "answer": [51.0], "response": "def Problem(c0, c1, c2):\n    #Bobby ate c0 pieces of candy\n    candy_before = c0\n\n    #Bobby ate c1 more pieces of candy\n    candy_after = candy_before + c1\n\n    #Bobby also ate c2 pieces of chocolate\n    chocolate = c2\n\n    #The total number of pieces of candy and chocolate Bobby ate can be calculated by adding the number of pieces of candy and chocolate he ate\n    total = candy_after + chocolate\n\n    return total", "mapping": {"c0": 33.0, "c1": 4.0, "c2": 14.0}}
{"question": "Bryan took a look at his books as well. He has c0 bookshelves with each having the same number of books. If he has a total of c1 booksHow many books are there in each bookshelf?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Bryan has c0 bookshelves\n    bookshelves = c0\n\n    #Bryan has c1 books in total\n    total_books = c1\n\n    #The number of books in each bookshelf can be calculated by dividing the total number of books by the number of bookshelves\n    books_per_shelf = total_books / bookshelves\n\n    return books_per_shelf", "mapping": {"c0": 7.0, "c1": 28.0}}
{"question": "Melissa scored c0 points in each game. If she scored a total of c1 pointsHow many games did she play?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa scored c0 points in each game\n    points_per_game = c0\n\n    #Melissa scored a total of c1 points\n    total_points = c1\n\n    #The number of games Melissa played can be calculated by dividing the total points by the points per game\n    games_played = total_points // points_per_game\n\n    return games_played", "mapping": {"c0": 12.0, "c1": 36.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of reading homework than math homeworkHow many pages of reading homework did she have to complete?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #Rachel had to complete c1 more pages of reading homework than math homework\n    reading_homework = math_homework + c1\n\n    #The number of pages of reading homework Rachel had to complete can be calculated by adding the number of pages of math homework to the additional pages of reading homework she had to complete\n    pages_to_complete = reading_homework - math_homework\n\n    return pages_to_complete", "mapping": {"c0": 8.0, "c1": 6.0}}
{"question": "Jack received c0 emails and sent c1 letters in the morning. He then received c2 emails and sent c3 letters in the afternoon.How many emails did Jack receive in the day?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    received = c0 + c2\n\n    return received", "mapping": {"c0": 6.0, "c1": 91.0, "c2": 2.0, "c3": 74.0}}
{"question": "At the arcade Dave had won c0 tickets. He used some tickets to buy toys. If he still has c1 tickets leftHow many tickets did Dave use to buy toys?", "answer": [5.0], "response": "def tickets_used(c0, c1):\n    # Dave originally had c0 tickets\n    original_tickets = c0\n\n    # Dave still has c1 tickets left after buying toys\n    remaining_tickets = c1\n\n    # The number of tickets Dave used to buy toys can be calculated by subtracting the remaining tickets from the original tickets\n    used_tickets = original_tickets - remaining_tickets\n\n    return used_tickets", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "Every day Ryan spends c0 hours on learning english and some more hours on learning chinese. If he spends c1 hours more on learning english than on learning chineseHow many hours does he spend on learning chinese?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours more on learning english than on learning chinese\n    chinese_hours = english_hours - c1\n\n    return chinese_hours\n\n#The number of hours Ryan spends on learning chinese can be calculated by subtracting the additional hours he spends on learning english from the total hours he spends on both languages.", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "Katie had c0 ds games and her new friends had c1 games and old friends had c2 games.How many games do her friends have in all?", "answer": [141.0], "response": "def total_games(c0, c1, c2):\n    #Katie had c0 games\n    katie = c0\n\n    #Her new friends had c1 games\n    new_friends = c1\n\n    #Her old friends had c2 games\n    old_friends = c2\n\n    #The total number of games her friends have can be calculated by adding the number of games her new friends have and the number of games her old friends have to the number of games Katie has\n    total = katie + new_friends + old_friends\n\n    return total", "mapping": {"c0": 91.0, "c1": 88.0, "c2": 53.0}}
{"question": "Paul got a box of some crayons for his birthday. During the school year he gave c0 crayons to his friends while he lost c1 crayons. If he only had c2 crayons leftHow many crayons had been lost or given away?", "answer": [587.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul originally had a box of crayons with c0 crayons\n    original = c0\n\n    #He gave c0 crayons to his friends\n    given = c0\n\n    #He also lost c1 crayons\n    lost = c1\n\n    #Now he only has c2 crayons left\n    now = c2\n\n    #The number of crayons he lost or gave away can be calculated by subtracting the number of crayons he has now from the original number of crayons he had, and then adding the number of crayons he gave away and lost.\n    lost_or_given = original - now + given + lost\n\n    return lost_or_given", "mapping": {"c0": 52.0, "c1": 535.0, "c2": 492.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes per day and c2 drums of raspberries per day.How many drums of grapes would be filled in c3 days?", "answer": [35624.0], "response": "def grapevine_drums(c0, c1, c2, c3):\n    #c0 pickers fill c1 drums of grapes per day\n    grapes_per_day = c0 * c1\n\n    #c0 pickers fill c2 drums of raspberries per day\n    raspberries_per_day = c0 * c2\n\n    #total drums of grapes filled in c3 days\n    total_grapes = grapes_per_day * c3\n\n    return total_grapes", "mapping": {"c0": 294.0, "c1": 244.0, "c2": 47.0, "c3": 146.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jill have?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    jake = c2 - c0\n\n    #Jake also has c1 more peaches than Jill\n    jill = jake - c1\n\n    return jill\n\n#Explanation: We first calculate how many peaches Jake has by subtracting c0 from Steven's peaches (c2). Then, we subtract c1 from Jake's peaches to get Jill's peaches. Finally, we return the number of peaches Jill has.", "mapping": {"c0": 7.0, "c1": 8.0, "c2": 17.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more green peaches than yellow peaches are in the basket?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #number of yellow peaches\n    yellow = c1\n\n    #number of green peaches\n    green = c2\n\n    #the difference between the number of green and yellow peaches can be calculated by subtracting the number of yellow peaches from the number of green peaches\n    difference = green - yellow\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 14.0}}
{"question": "A book has c0 chapters. Each chapter is c1 pages long.How many pages does the book have altogether?", "answer": [1891.0], "response": "def total_pages(c0, c1):\n    #calculate the total number of pages by multiplying the number of chapters by the number of pages per chapter\n    total = c0 * c1\n    return total", "mapping": {"c0": 31.0, "c1": 61.0}}
{"question": "Brenda's mother made cookies for guests. Each guest had c0 cookies. If she prepared a total of c1 cookiesHow many guests did she prepare cookies for?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Each guest had c0 cookies\n    cookies_per_guest = c0\n\n    #She prepared a total of c1 cookies\n    total_cookies = c1\n\n    #The number of guests she prepared cookies for can be calculated by dividing the total number of cookies by the number of cookies per guest\n    guests = total_cookies // cookies_per_guest\n\n    return guests", "mapping": {"c0": 2.0, "c1": 10.0}}
{"question": "Every day Ryan spends a total of c0 hours on learning english and chinese. If he spends c1 hours on learning english everydayHow many hours does he spend on learning chinese?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends a total of c0 hours on learning english and chinese\n    total_hours = c0\n\n    #Ryan spends c1 hours on learning english everyday\n    english_hours = c1\n\n    #The number of hours Ryan spends on learning chinese can be calculated by subtracting the number of hours he spends on learning english from the total number of hours he spends on both languages\n    chinese_hours = total_hours - english_hours\n\n    return chinese_hours", "mapping": {"c0": 3.0, "c1": 2.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of raspberries per day and c2 drums of grapes per day.How many drums of grapes would be filled in c3 days?", "answer": [17017.0], "response": "def Problem(c0, c1, c2, c3):\n    #c1 drums of raspberries are filled per day\n    raspberries_per_day = c1\n\n    #c2 drums of grapes are filled per day\n    grapes_per_day = c2\n\n    #The total number of drums of grapes filled in c3 days can be calculated by multiplying the number of days by the number of drums of grapes filled per day\n    total_grapes_filled = c3 * grapes_per_day\n\n    return total_grapes_filled", "mapping": {"c0": 235.0, "c1": 100.0, "c2": 221.0, "c3": 77.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many more pieces of candy than chocolate did Bobby eat?", "answer": [58.0], "response": "def candy_vs_chocolate(c0, c1, c2):\n    #Bobby ate c0 pieces of candy\n    candy_before = c0\n\n    #Bobby ate c1 more pieces of candy\n    candy_after = candy_before + c1\n\n    #Bobby ate c2 pieces of chocolate\n    chocolate = c2\n\n    #The difference between the number of candy and chocolate Bobby ate can be calculated by subtracting the number of chocolate from the number of candy\n    difference = candy_after - chocolate\n\n    return difference", "mapping": {"c0": 38.0, "c1": 36.0, "c2": 16.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvested c0 sacks of oranges.How many days did it take to harvest them if they harvested c1 sacks of oranges per day?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #they harvested c0 sacks of oranges in total\n    total_oranges = c0\n\n    #they harvested c1 sacks of oranges per day\n    oranges_per_day = c1\n\n    #The number of days it took to harvest all the oranges can be calculated by dividing the total number of oranges by the number of oranges harvested per day\n    days = total_oranges / oranges_per_day\n\n    return days", "mapping": {"c0": 54.0, "c1": 18.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each block. If he gives c1 mails to each house in a blockHow many houses are there in a block?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #The mailman has to give c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #The mailman gives c1 mails to each house in a block\n    mail_per_house = c1\n\n    #The number of houses in a block can be calculated by dividing the number of mails per block by the number of mails per house\n    houses_per_block = mail_per_block // mail_per_house\n\n    return houses_per_block", "mapping": {"c0": 25.0, "c1": 5.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers. Then he got c2 new customersHow many customers left?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #After some customers left, he still had c1 customers\n    remaining_customers = c1\n\n    #Then he got c2 new customers\n    new_customers = c2\n\n    #The number of customers who left can be calculated by subtracting the remaining customers and new customers from the original number of customers\n    customers_left = original_customers - remaining_customers - new_customers\n\n    return customers_left", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 99.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 apples and c3 peaches.How many more apples than peaches does Steven have?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c1\n\n    #Steven has c2 apples and c3 peaches\n    steven_apples = c2\n    steven_peaches = c3\n\n    #Calculate the total number of apples and peaches Steven has\n    total_apples = steven_apples + jake_apples\n    total_peaches = steven_peaches - jake_peaches\n\n    #Calculate the difference between the number of apples and peaches Steven has\n    difference = total_apples - total_peaches\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 19.0, "c3": 15.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese.How many more hours does he spend on learning chinese than he does on learning english?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #The difference between the hours Ryan spends on learning chinese and english can be calculated by subtracting the number of hours spent on learning english from the number of hours spent on learning chinese\n    difference = chinese_hours - english_hours\n\n    return difference", "mapping": {"c0": 6.0, "c1": 7.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many birds are sitting on the fence?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds and c1 storks were sitting on the fence\n    birds_before = c0 + c1\n\n    #c2 more birds came to join them\n    birds_joined = c2\n\n    #The total number of birds sitting on the fence now can be calculated by adding the number of birds before and the number of birds joined\n    birds_now = birds_before + birds_joined\n\n    return birds_now", "mapping": {"c0": 4.0, "c1": 46.0, "c2": 6.0}}
{"question": "Paco had c0 cookies. He ate some of them and had c1 cookies left.How many cookies did Paco eat?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #After eating some cookies, Paco now has c1 cookies\n    paco_now = c1\n\n    #The number of cookies Paco ate can be calculated by subtracting the number of cookies he has now from the original number of cookies he had.\n    ate = paco_original - paco_now\n\n    return ate", "mapping": {"c0": 28.0, "c1": 7.0}}
{"question": "Matthew had c0 crackers to give to friends. If Matthew gave c1 crackers to each his friendsHow many friends did he give crackers to?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Matthew had c0 crackers to give to friends\n    crackers = c0\n\n    #Matthew gave c1 crackers to each of his friends\n    per_friend = c1\n\n    #The number of friends Matthew gave crackers to can be calculated by dividing the total number of crackers by the number of crackers given to each friend\n    friends = crackers // per_friend\n\n    return friends", "mapping": {"c0": 8.0, "c1": 2.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many campers went rowing and hiking in all?", "answer": [71.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The total number of campers who went rowing is the sum of those who went rowing in the morning and those who went rowing in the afternoon\n    rowing_total = rowing_morning + rowing_afternoon\n\n    #The total number of campers who went hiking and rowing is the sum of those who went hiking in the morning and those who went rowing in the morning and afternoon\n    total = hiking_morning + rowing_total\n\n    return total", "mapping": {"c0": 41.0, "c1": 4.0, "c2": 26.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many more cookies did he buy than those he ate?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco ate c1 cookies\n    paco_ate = c1\n\n    #Paco bought c2 more cookies\n    paco_bought = c2\n\n    #The number of cookies Paco has now can be calculated by subtracting the number of cookies he ate from the original number of cookies he had and then adding the number of cookies he bought\n    paco_now = paco_original - paco_ate + paco_bought\n\n    #The number of cookies Paco bought more than those he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he bought\n    bought_more = paco_bought - paco_ate\n\n    return bought_more", "mapping": {"c0": 13.0, "c1": 2.0, "c2": 36.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than david.How many push-ups did David do?", "answer": [58.0], "response": "def david_pushups(c0, c1, c2):\n    # Zachary did c0 push-ups\n    zachary = c0\n\n    # David did c1 more push-ups than Zachary\n    david = zachary + c1\n\n    # John did c2 push-ups less than David\n    john = david - c2\n\n    return david", "mapping": {"c0": 19.0, "c1": 39.0, "c2": 13.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of salt does she need to add now?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c0 - c3 cups of flour to the recipe\n    flour_needed = c0 - c3\n\n    #Mary needs to add c2 cups of salt to the recipe\n    salt_needed = c2\n\n    #The difference between the amount of flour needed and the amount of salt needed is the answer\n    difference = flour_needed - salt_needed\n\n    return difference", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 7.0, "c3": 2.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many more roses did she cut than those she threw away?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    threw_away = c1\n\n    #there are now c2 roses in the vase\n    roses_now = c2\n\n    #The number of new roses Jessica cut can be calculated by subtracting the number of roses before from the number of roses now and adding the number of roses she threw away\n    cut = roses_now - roses_before + threw_away\n\n    #The number of roses she threw away can be calculated by subtracting the number of roses now from the number of roses before\n    threw_away = roses_before - roses_now\n\n    #The difference between the number of roses she cut and the number of roses she threw away is the answer to the problem\n    answer = cut - threw_away\n\n    return answer", "mapping": {"c0": 15.0, "c1": 33.0, "c2": 17.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars. Jason delivered newspapers and now has c3 dollars.How much money did Jason earn by delivering newspapers?", "answer": [60.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_last_week = c0\n\n    #Jason had c1 dollars last week\n    jason_last_week = c1\n\n    #Fred now has c2 dollars after washing cars\n    fred_now = c2\n\n    #Jason now has c3 dollars after delivering newspapers\n    jason_now = c3\n\n    #Fred earned c2 - c0 dollars by washing cars\n    fred_earned = fred_now - fred_last_week\n\n    #Jason earned c3 - c1 dollars by delivering newspapers\n    jason_earned = jason_now - jason_last_week\n\n    return jason_earned", "mapping": {"c0": 49.0, "c1": 3.0, "c2": 112.0, "c3": 63.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jake have?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    steven = c2\n    jake = steven - c0\n\n    #Jake also has c1 more peaches than Jill\n    jill = jake - c1\n\n    return jake\n\n#The number of peaches Jake has can be calculated by subtracting the number of peaches he has fewer than Steven from Steven's total number of peaches. Then, we subtract the number of peaches Jake has more than Jill to get the final answer.", "mapping": {"c0": 7.0, "c1": 9.0, "c2": 16.0}}
{"question": "c0 campers went rowing on a day. c1 campers went rowing in the morning and some more campers went rowing in the afternoon.How many campers went rowing in the afternoon?", "answer": [3.0], "response": "def afternoon_campers(c0, c1):\n    #c0 campers went rowing on a day\n    total_campers = c0\n\n    #c1 campers went rowing in the morning\n    morning_campers = c1\n\n    #The number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing on that day\n    afternoon_campers = total_campers - morning_campers\n\n    return afternoon_campers", "mapping": {"c0": 46.0, "c1": 43.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make in all?", "answer": [756.0], "response": "def carnival_income(c0, c1, c2, c3):\n    #calculate the income from the first c1 days\n    income_first = c0 * c1\n\n    #calculate the income from the remaining c3 days\n    income_remaining = c2 * c3\n\n    #calculate the total income\n    total_income = income_first + income_remaining\n\n    return total_income", "mapping": {"c0": 382.0, "c1": 44.0, "c2": 374.0, "c3": 10.0}}
{"question": "A book has c0 chapters. The second chapter is c1 pages long. If there are a total of c2 pages in the bookHow many pages are in the first chapter?", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #The second chapter is c1 pages long\n    second_chapter = c1\n\n    #The book has c2 pages in total\n    total_pages = c2\n\n    #The number of pages in the first chapter can be calculated by subtracting the number of pages in the second chapter from the total number of pages and then dividing by the number of chapters minus one\n    first_chapter = (total_pages - second_chapter) / (c0 - 1)\n\n    return first_chapter", "mapping": {"c0": 2.0, "c1": 36.0, "c2": 67.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. If she wants to invite c2 friendsHow many extra invitations will she need to buy?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Each package of invitations has c0 invitations\n    invitations_per_pack = c0\n\n    #Carol bought c1 packs of invitations\n    packs_bought = c1\n\n    #Carol wants to invite c2 friends\n    friends_invited = c2\n\n    #The total number of invitations Carol has is the number of packs she bought multiplied by the number of invitations per pack\n    total_invitations = invitations_per_pack * packs_bought\n\n    #The number of extra invitations Carol needs to buy is the difference between the total number of invitations she has and the number of friends she wants to invite\n    extra_invitations_needed = friends_invited - total_invitations\n\n    return extra_invitations_needed", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 9.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than David.How many more push-ups did Zachary do than John?", "answer": [30.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Zachary did c0 push-ups\n    zachary = c0\n\n    #David did c1 more push-ups than Zachary\n    david = zachary + c1\n\n    #John did c2 push-ups less than David\n    john = david - c2\n\n    #The difference between the number of push-ups Zachary did and the number of push-ups John did can be calculated by subtracting John's push-ups from Zachary's push-ups\n    difference = zachary - john\n\n    return difference", "mapping": {"c0": 15.0, "c1": 39.0, "c2": 9.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost some of his marbles at the playground. Now Ed has c1 more marbles than doug.How many marbles did Doug lose?", "answer": [17.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Now Ed has c1 more marbles than Doug\n    doug_now = ed - c1\n\n    #The number of marbles Doug lost can be calculated by subtracting the number of marbles he has now from the original number of marbles he had\n    lost = doug - doug_now\n\n    return lost", "mapping": {"c0": 2.0, "c1": 19.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers and c2 scales. If the skittles are organized into c3 groupsHow big is each group?", "answer": [112.0], "response": "def Problem(c0, c1, c2, c3):\n    #Steven has c0 skittles, c1 erasers, and c2 scales\n    skittles = c0\n    erasers = c1\n    scales = c2\n\n    #The skittles are organized into c3 groups\n    groups = c3\n\n    #The size of each group can be calculated by dividing the number of skittles by the number of groups\n    size = skittles / groups\n\n    return size", "mapping": {"c0": 896.0, "c1": 517.0, "c2": 90.0, "c3": 8.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 marbles and c2 eggs.How many groups will be created?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca wants to split the eggs into groups of c0\n    group_size = c0\n\n    #Rebecca has c2 eggs\n    eggs = c2\n\n    #The number of groups that can be created can be calculated by dividing the number of eggs by the group size\n    groups = eggs // group_size\n\n    return groups", "mapping": {"c0": 5.0, "c1": 10.0, "c2": 15.0}}
{"question": "Paul had c0 pens and c1 books. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many books did he sell in the garage sale?", "answer": [140.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul originally had c0 pens and c1 books\n    pens_before = c0\n    books_before = c1\n\n    #After selling some books and pens, he had c2 books and c3 pens left\n    books_after = c2\n    pens_after = c3\n\n    #The number of books he sold can be calculated by subtracting the number of books he has now from the original number of books he had\n    books_sold = books_before - books_after\n\n    return books_sold", "mapping": {"c0": 95.0, "c1": 153.0, "c2": 13.0, "c3": 23.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many pages did he read per day?", "answer": [102.0], "response": "def Problem(c0, c1, c2):\n    #The book had c0 pages\n    pages = c0\n\n    #The book had c1 chapters\n    chapters = c1\n\n    #It took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days he took to finish the book\n    pages_per_day = pages / days\n\n    return pages_per_day", "mapping": {"c0": 612.0, "c1": 24.0, "c2": 6.0}}
{"question": "There are c0 peaches distributed equally in some baskets. If each basket has c1 red peaches and c2 green peachesHow many baskets of peaches are there?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c1 red peaches and c2 green peaches\n    red_peaches = c1\n    green_peaches = c2\n\n    #total number of peaches in each basket is the sum of red and green peaches\n    total_peaches = red_peaches + green_peaches\n\n    #number of baskets can be calculated by dividing the total number of peaches by the number of peaches in each basket\n    baskets = c0 // total_peaches\n\n    return baskets", "mapping": {"c0": 10.0, "c1": 4.0, "c2": 6.0}}
{"question": "Lewis earns $ c0 every week during the harvest. If he earns a total of $ c1 How many weeks did the harvest last?", "answer": [89.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Lewis earns c0 every week during the harvest\n    weekly_earnings = c0\n\n    #Lewis earned a total of c1\n    total_earnings = c1\n\n    #The number of weeks the harvest lasted can be calculated by dividing the total earnings by the weekly earnings\n    weeks = total_earnings / weekly_earnings\n\n    return weeks", "mapping": {"c0": 2.0, "c1": 178.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny throw away than those he found at the park?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Danny threw away c0 bottle caps\n    threw_away = c0\n\n    #Danny found c1 new bottle caps\n    found = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total_now = c2\n\n    #The difference between the number of bottle caps Danny threw away and the number he found can be calculated by subtracting the number he found from the number he threw away\n    difference = threw_away - found\n\n    #The number of bottle caps Danny threw away more than he found can be calculated by subtracting the total number of bottle caps he has now from the sum of the number he found and the difference between the number he threw away and the number he found\n    more_threw_away = (found + difference) - total_now\n\n    return more_threw_away", "mapping": {"c0": 54.0, "c1": 48.0, "c2": 52.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of unripe oranges will they have after c2 days of harvest?", "answer": [1080.0], "response": "def Problem(c0, c1, c2):\n    #They harvest c0 sacks of ripe oranges per day\n    ripe_per_day = c0\n\n    #They harvest c1 sacks of unripe oranges per day\n    unripe_per_day = c1\n\n    #They have harvested for c2 days\n    days = c2\n\n    #The total number of unripe oranges they will have after c2 days of harvest can be calculated by multiplying the number of unripe oranges harvested per day by the number of days and adding it to the original number of unripe oranges they had\n    total_unripe = (unripe_per_day * days) + unripe_per_day\n\n    return total_unripe", "mapping": {"c0": 31.0, "c1": 24.0, "c2": 45.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog.How much did they jump altogether?", "answer": [66.0], "response": "def jumping_contest(c0, c1):\n    #The grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #The grasshopper jumped c1 inches farther than the frog\n    frog_jump = grasshopper_jump - c1\n\n    #The total distance they jumped altogether can be calculated by adding the grasshopper's jump and the frog's jump\n    total_jump = grasshopper_jump + frog_jump\n\n    return total_jump", "mapping": {"c0": 35.0, "c1": 4.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the jerseys?", "answer": [25740.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Razorback shop makes c1 dollars off each jersey\n    jersey_price = c1\n\n    #During the game, they sold c3 jerseys\n    jerseys_sold = c3\n\n    #The total money they made from selling jerseys can be calculated by multiplying the price of each jersey by the number of jerseys sold\n    total_jersey_money = jersey_price * jerseys_sold\n\n    return total_jersey_money", "mapping": {"c0": 67.0, "c1": 165.0, "c2": 74.0, "c3": 156.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Ron's height. Dean is c1 feet shorter than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Ron's height is c2 feet\n    ron_height = c2\n\n    #Dean is c1 feet shorter than Ron\n    dean_height = ron_height - c1\n\n    #The depth of the water is c0 times Ron's height\n    water_depth = c0 * ron_height\n\n    return water_depth", "mapping": {"c0": 5.0, "c1": 11.0, "c2": 12.0}}
{"question": "There are c0 pots. Each pot has c1 flowers and c2 sticks in it.How many flowers and sticks are there in all?", "answer": [109044.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pots\n    pots = c0\n\n    #each pot has c1 flowers\n    flowers_per_pot = c1\n\n    #each pot has c2 sticks\n    sticks_per_pot = c2\n\n    #total number of flowers can be calculated by multiplying the number of pots by the number of flowers per pot\n    total_flowers = pots * flowers_per_pot\n\n    #total number of sticks can be calculated by multiplying the number of pots by the number of sticks per pot\n    total_sticks = pots * sticks_per_pot\n\n    return total_flowers, total_sticks", "mapping": {"c0": 466.0, "c1": 53.0, "c2": 181.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many more crayons did he lose than those he gave to his friends?", "answer": [322.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    paul_crayons = c0\n\n    #During the school year, he gave c1 crayons to his friends\n    gave_friends = c1\n\n    #He also lost c2 crayons\n    lost_crayons = c2\n\n    #The difference between the number of crayons he lost and the number he gave to his friends can be calculated by subtracting the number he gave from the number he lost\n    difference = lost_crayons - gave_friends\n\n    return difference", "mapping": {"c0": 110.0, "c1": 90.0, "c2": 412.0}}
{"question": "In a school there are c0 girls and c1 boys.How many more girls than boys does the school have?", "answer": [333.0], "response": "def Problem(c0, c1):\n    #number of girls in the school\n    girls = c0\n\n    #number of boys in the school\n    boys = c1\n\n    #calculate the difference between the number of girls and boys\n    diff = girls - boys\n\n    return diff", "mapping": {"c0": 569.0, "c1": 236.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many sacks of unripe oranges will they have after c2 days of harvest?", "answer": [390.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of unripe oranges per day\n    unripe_per_day = c0\n\n    #they harvest c1 sacks of ripe oranges per day\n    ripe_per_day = c1\n\n    #they have been harvesting for c2 days\n    days = c2\n\n    #the number of unripe oranges they will have after c2 days of harvest can be calculated by multiplying the number of unripe oranges harvested per day by the number of days and adding it to the original number of unripe oranges\n    unripe_now = (unripe_per_day * days) + c0\n\n    return unripe_now", "mapping": {"c0": 65.0, "c1": 46.0, "c2": 6.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. Each seat can hold c1 people. If there are c2 people on the wheel right nowHow many more people can join the wheel?", "answer": [68.0], "response": "def Problem(c0, c1, c2):\n    #The Ferris wheel has c0 seats\n    seats = c0\n\n    #Each seat can hold c1 people\n    capacity = c1\n\n    #There are c2 people on the wheel right now\n    current = c2\n\n    #The number of people that can still join the wheel can be calculated by subtracting the number of people currently on the wheel from the total capacity of the wheel\n    remaining = (seats * capacity) - current\n\n    return remaining", "mapping": {"c0": 6.0, "c1": 14.0, "c2": 16.0}}
{"question": "Debby bought c0 water bottles when they were on sale. She drank the same number of bottles each day. If the bottles lasted for c1 daysHow many bottles did she drink each day?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Debby bought c0 water bottles\n    bottles = c0\n\n    #The bottles lasted for c1 days\n    days = c1\n\n    #Debby drank the same number of bottles each day\n    drank_per_day = bottles // days\n\n    return drank_per_day\n\n#We use integer division (//) to get the whole number of bottles Debby drank each day.", "mapping": {"c0": 153.0, "c1": 17.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces of candies does Robin have?", "answer": [405.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum and c1 packages of candy\n    candy_packages = c1\n\n    #There are c2 pieces in each package\n    pieces_per_package = c2\n\n    #The total number of candy pieces Robin has can be calculated by multiplying the number of candy packages by the number of pieces in each package\n    total_candy_pieces = candy_packages * pieces_per_package\n\n    return total_candy_pieces", "mapping": {"c0": 21.0, "c1": 45.0, "c2": 9.0}}
{"question": "After Olivia visited a supermarket there were c0 dollars left. If there were c1 dollars in her wallet initiallyHow much did she spend?", "answer": [25.0], "response": "def Problem(c0, c1):\n    #Olivia had c1 dollars initially\n    initial = c1\n\n    #After visiting the supermarket, she has c0 dollars left\n    left = c0\n\n    #The amount she spent can be calculated by subtracting the amount she has left from the initial amount she had\n    spent = initial - left\n\n    return spent", "mapping": {"c0": 29.0, "c1": 54.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 trees were left.How many trees died in the typhoon?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #Haley grew c0 trees in her backyard\n    trees_before = c0\n\n    #After the typhoon, c1 trees were left\n    trees_after = c1\n\n    #The number of trees that died in the typhoon can be calculated by subtracting the number of trees left after the typhoon from the original number of trees\n    died = trees_before - trees_after\n\n    return died", "mapping": {"c0": 20.0, "c1": 4.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jake have?", "answer": [8.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven = c2\n\n    #Steven has c1 more peaches than Jill\n    jill = steven - c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake = jill - c0\n\n    return jake", "mapping": {"c0": 7.0, "c1": 14.0, "c2": 15.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money will have at the end of the harvest season?", "answer": [324775.0], "response": "Let's think about it step by step:\n\ndef harvest_money(c0, c1, c2):\n    #Lewis earns c0 every week during the harvest season\n    weekly_earnings = c0\n\n    #The harvest season lasts for c1 weeks\n    weeks = c1\n\n    #Lewis has to pay c2 rent every week\n    weekly_rent = c2\n\n    #The total amount of money Lewis earns during the harvest season can be calculated by multiplying his weekly earnings by the number of weeks\n    total_earnings = weekly_earnings * weeks\n\n    #The total amount of money Lewis spends on rent during the harvest season can be calculated by multiplying his weekly rent by the number of weeks\n    total_rent = weekly_rent * weeks\n\n    #The amount of money Lewis will have at the end of the harvest season can be calculated by subtracting his total rent from his total earnings\n    final_money = total_earnings - total_rent\n\n    return final_money", "mapping": {"c0": 491.0, "c1": 1181.0, "c2": 216.0}}
{"question": "Paul had c0 books and c1 pens. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many pens did he sell in the garage sale?", "answer": [92.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul originally had c1 pens\n    pens_before = c1\n\n    #After selling some pens, he now has c3 pens left\n    pens_after = c3\n\n    #The number of pens Paul sold can be calculated by subtracting the number of pens he has now from the original number of pens he had\n    pens_sold = pens_before - pens_after\n\n    return pens_sold", "mapping": {"c0": 51.0, "c1": 106.0, "c2": 82.0, "c3": 14.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many crunches did David do?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    #David did c2 more push-ups than Zachary\n    david_pushups = c2 + zachary_pushups\n\n    #David did c3 less crunches than Zachary\n    david_crunches = zachary_crunches - c3\n\n    return david_crunches", "mapping": {"c0": 44.0, "c1": 17.0, "c2": 29.0, "c3": 13.0}}
{"question": "Paul had c0 pens and c1 books. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many pens did he sell in the garage sale?", "answer": [23.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul originally had c0 pens and c1 books\n    pens_before = c0\n    books_before = c1\n\n    #After selling some books and pens, he had c2 books and c3 pens left\n    books_after = c2\n    pens_after = c3\n\n    #The number of pens he sold can be calculated by subtracting the number of pens he has now from the original number of pens he had\n    pens_sold = pens_before - pens_after\n\n    return pens_sold", "mapping": {"c0": 42.0, "c1": 143.0, "c2": 113.0, "c3": 19.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers does danny have now?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers\n    bottle_caps_now = c2\n    wrappers_now = c3\n\n    #The difference between the number of bottle caps and wrappers Danny has now can be calculated by subtracting the number of wrappers from the number of bottle caps\n    difference = bottle_caps_now - wrappers_now\n\n    return difference", "mapping": {"c0": 71.0, "c1": 24.0, "c2": 28.0, "c3": 16.0}}
{"question": "Dan has $ c0. He bought c1 candy bar for $ c2 each one costing the same amount of money.How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought c1 candy bars\n    candy_bars = c1\n\n    #Each candy bar costs c2 dollars\n    candy_bar_cost = c2\n\n    #The total cost of the candy bars can be calculated by multiplying the number of candy bars by the cost of each candy bar\n    total_cost = candy_bars * candy_bar_cost\n\n    #The amount of money left can be calculated by subtracting the total cost from the original amount of money Dan had\n    money_left = dan_money - total_cost\n\n    return money_left", "mapping": {"c0": 4.0, "c1": 99.0, "c2": 3.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many more children got on the bus than those that got off?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got off the bus\n    off = c1\n\n    #c2 children were left on the bus after some more got on\n    now = c2\n\n    #The number of children that got on the bus can be calculated by subtracting the original number of children from the number of children on the bus now, and then adding the number of children that got off the bus\n    on = now - original + off\n\n    #The number of children that got on the bus more than those that got off can be calculated by subtracting the number of children that got off from the number of children that got on\n    more_on = on - off\n\n    return more_on", "mapping": {"c0": 5.0, "c1": 63.0, "c2": 14.0}}
{"question": "Debby bought c0 soda bottles and c1 water bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the water bottles last?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Debby bought c0 soda bottles and c1 water bottles\n    soda_bottles = c0\n    water_bottles = c1\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_per_day = c2\n    soda_per_day = c3\n\n    #Calculate how many days the water bottles would last\n    days = water_bottles // water_per_day\n\n    return days", "mapping": {"c0": 95.0, "c1": 180.0, "c2": 15.0, "c3": 54.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many cups of flour did she put in?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of sugar and c1 cups of flour\n    sugar = c0\n    flour = c1\n\n    #Mary already put in some cups of flour\n    flour_before = flour - c2\n\n    #She still needs c2 more cups of flour than sugar\n    sugar_flour_diff = c2\n\n    #The number of cups of flour Mary put in can be calculated by adding the difference between sugar and flour to the amount of flour she put in before\n    flour_now = flour_before + sugar_flour_diff\n\n    return flour_now", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 5.0}}
{"question": "Faye had c0 packs of pencils each one having c1 pencils. She was placing her pencils into rows with c2 pencils in each row.How many rows could she make?", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #Faye had c0 packs of pencils, each pack having c1 pencils\n    total_pencils = c0 * c1\n\n    #Faye was placing her pencils into rows with c2 pencils in each row\n    pencils_per_row = c2\n\n    #The number of rows Faye can make can be calculated by dividing the total number of pencils by the number of pencils per row\n    rows = total_pencils // pencils_per_row\n\n    return rows", "mapping": {"c0": 35.0, "c1": 4.0, "c2": 2.0}}
{"question": "Each Ferris wheel in paradise park has c0 seats. Each seat in a Ferris wheel can hold c1 people.How many people can ride c2 Ferris wheels at the same time?", "answer": [5700.0], "response": "def Problem(c0, c1, c2):\n    #Each Ferris wheel has c0 seats\n    seats_per_wheel = c0\n\n    #Each seat can hold c1 people\n    people_per_seat = c1\n\n    #We want to know how many people can ride c2 Ferris wheels at the same time\n    num_wheels = c2\n\n    #The total number of people that can ride c2 Ferris wheels at the same time can be calculated by multiplying the number of seats per wheel by the number of people per seat and then multiplying that by the number of wheels\n    total_people = seats_per_wheel * people_per_seat * num_wheels\n\n    return total_people", "mapping": {"c0": 19.0, "c1": 15.0, "c2": 20.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy.How many pieces of candy does he still have left?", "answer": [17.0], "response": "def candy_left(c0, c1):\n    # Bobby originally had c0 pieces of candy\n    original = c0\n    \n    # Bobby ate c1 pieces of candy\n    ate = c1\n    \n    # The number of pieces of candy Bobby has left can be calculated by subtracting the number of pieces he ate from the original number\n    left = original - ate\n    \n    return left", "mapping": {"c0": 19.0, "c1": 2.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy. Then he ate c2 more.How many pieces of candy did Bobby eat?", "answer": [52.0], "response": "def Problem(c0, c1, c2):\n    #Bobby originally had c0 pieces of candy\n    bobby_original = c0\n\n    #Bobby ate c1 pieces of candy\n    bobby_first = c1\n\n    #Bobby then ate c2 more pieces of candy\n    bobby_second = c2\n\n    #The total number of pieces of candy Bobby ate can be calculated by adding the number of pieces he ate initially and the number he ate later\n    total_eaten = bobby_first + bobby_second\n\n    return total_eaten", "mapping": {"c0": 20.0, "c1": 34.0, "c2": 18.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many more visitors visited the Buckingham palace on that day than on the previous c3 days?", "answer": [57.0], "response": "def visitors_increase(c0, c1, c2, c3):\n    #total visitors in the previous c3 days\n    total_previous = c1 + c2 + c3\n\n    #visitors on the current day\n    current_day = c0\n\n    #difference between current day visitors and visitors in the previous c3 days\n    increase = current_day - total_previous\n\n    return increase", "mapping": {"c0": 705.0, "c1": 191.0, "c2": 457.0, "c3": 245.0}}
{"question": "Paul had c0 books and c1 pens. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many books did he sell in the garage sale?", "answer": [42.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul originally had c0 books and c1 pens\n    books_before = c0\n    pens_before = c1\n\n    #After selling some books and pens, he now has c2 books and c3 pens\n    books_after = c2\n    pens_after = c3\n\n    #The number of books he sold can be calculated by subtracting the number of books he has now from the original number of books he had\n    books_sold = books_before - books_after\n\n    return books_sold", "mapping": {"c0": 108.0, "c1": 55.0, "c2": 66.0, "c3": 59.0}}
{"question": "Marco and his dad went strawberry picking. Marco's dad's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much did Marco's strawberries weigh?", "answer": [19.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Marco's dad's strawberries weighed c0 pounds\n    dad_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #The weight of Marco's strawberries can be calculated by subtracting his dad's strawberries weight from the total weight\n    marco_weight = total_weight - dad_weight\n\n    return marco_weight", "mapping": {"c0": 11.0, "c1": 30.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on monday and wednesday?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The total number of kids Julia played with on Monday and Wednesday can be calculated by adding the number of kids she played with on those days\n    total = monday + wednesday\n\n    return total", "mapping": {"c0": 5.0, "c1": 9.0, "c2": 15.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much did his dad's strawberries weigh?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco = c0\n\n    #Together their strawberries weighed c1 pounds\n    total = c1\n\n    #His dad's strawberries weigh can be calculated by subtracting Marco's strawberries weigh from the total weigh\n    dad = total - marco\n\n    return dad", "mapping": {"c0": 15.0, "c1": 37.0}}
{"question": "Shirley sold c0 boxes of trefoils.How many boxes are in each case if she needs to deliver c1 cases of boxes?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Shirley sold c0 boxes of trefoils\n    boxes_sold = c0\n\n    #Shirley needs to deliver c1 cases of boxes\n    cases_needed = c1\n\n    #The number of boxes in each case can be calculated by dividing the total number of boxes sold by the number of cases needed to be delivered\n    boxes_per_case = boxes_sold / cases_needed\n\n    return boxes_per_case", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 left while not having lost a single erasers.How many crayons had been lost or given away?", "answer": [367.0], "response": "def Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons and c1 erasers for his birthday\n    crayons = c0\n\n    #At the end of the school year he only had c2 left while not having lost a single eraser\n    left = c2\n\n    #The number of crayons lost or given away can be calculated by subtracting the number of crayons left from the original number of crayons\n    lost_or_given = crayons - left\n\n    return lost_or_given", "mapping": {"c0": 521.0, "c1": 66.0, "c2": 154.0}}
{"question": "David did c0 more push-ups than Zachary in gym class today. If David did c1 push-upsHow many push-ups did Zachary and David do altogether?", "answer": [20.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #David did c0 more push-ups than Zachary\n    david_pushups = c0 + c1\n\n    #Zachary did c1 push-ups\n    zachary_pushups = c1\n\n    #The total number of push-ups they did altogether can be calculated by adding David's push-ups to Zachary's push-ups\n    total_pushups = david_pushups + zachary_pushups\n\n    return total_pushups", "mapping": {"c0": 56.0, "c1": 38.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps does danny have now?", "answer": [16.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers\n    bottle_caps_now = c2\n    wrappers_now = c3\n\n    #Danny has more wrappers than bottle caps, so we need to subtract the number of bottle caps from the number of wrappers\n    more_wrappers = wrappers_now - bottle_caps_now\n\n    return more_wrappers", "mapping": {"c0": 10.0, "c1": 62.0, "c2": 27.0, "c3": 43.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. She found c1 bags of cans on the next day and c2 bags of cans the day after that.How many bags did she find after monday?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    monday = c0\n\n    #She found c1 bags of cans on the next day\n    tuesday = c1\n\n    #She found c2 bags of cans the day after that\n    wednesday = c2\n\n    #The total number of bags she found after Monday can be calculated by adding the number of bags she found on Tuesday and Wednesday to the number of bags she had on Monday\n    total_found = monday + tuesday + wednesday\n\n    return total_found", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. She had c1 packs of pencils each one having c2 pencils.How many rows could she make?", "answer": [42.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 packs of pencils, each with c2 pencils\n    total_pencils = c1 * c2\n\n    #Faye wants to place the pencils into rows with c0 pencils in each row\n    rows = total_pencils // c0\n\n    return rows", "mapping": {"c0": 16.0, "c1": 28.0, "c2": 24.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many more storks than birds are sitting on the fence?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds and c1 storks were sitting on the fence\n    birds = c0\n    storks = c1\n\n    #c2 more storks came to join them\n    new_storks = c2\n\n    #total number of birds and storks after new storks arrived\n    total = birds + storks + new_storks\n\n    #number of storks more than birds\n    more_storks = total - birds - storks\n\n    return more_storks", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 6.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much does she weigh now?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Jessie originally weighed c0 kilograms\n    weight_before = c0\n\n    #After the first week of jogging, she lost c1 kilograms\n    weight_after_week1 = weight_before - c1\n\n    #After the second week of jogging, she lost c2 kilograms\n    weight_after_week2 = weight_after_week1 - c2\n\n    #The weight Jessie has now can be calculated by subtracting the total weight she lost from her original weight\n    weight_now = weight_before - (c1 + c2)\n\n    return weight_now", "mapping": {"c0": 114.0, "c1": 50.0, "c2": 60.0}}
{"question": "c0 packs of dvds can be bought with c1 dollars.How much does each pack cost?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #The cost of each pack can be calculated by dividing the total amount of money by the number of packs\n    cost_per_pack = c1 / c0\n\n    return cost_per_pack", "mapping": {"c0": 6.0, "c1": 120.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday than on wednesday?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The difference between the number of kids Julia played with on Monday and Wednesday can be calculated by subtracting the number of kids on Wednesday from the number of kids on Monday\n    difference = monday - wednesday\n\n    return difference", "mapping": {"c0": 14.0, "c1": 2.0, "c2": 8.0}}
{"question": "There were c0 parents, c1 pupils and c2 teachers in the program.How many people were present in the program?", "answer": [1541.0], "response": "def Problem(c0, c1, c2):\n    #there were c0 parents\n    parents = c0\n\n    #there were c1 pupils\n    pupils = c1\n\n    #there were c2 teachers\n    teachers = c2\n\n    #The total number of people present in the program can be calculated by adding the number of parents, pupils and teachers\n    total = parents + pupils + teachers\n\n    return total", "mapping": {"c0": 73.0, "c1": 724.0, "c2": 744.0}}
{"question": "At the stop c0 more people got on the train. Initially there were c1 people on the train.How many people are there on the train now?", "answer": [19.0], "response": "def train_people(c0, c1):\n    #initially there were c1 people on the train\n    initial_people = c1\n\n    #c0 more people got on the train\n    new_people = c0\n\n    #total number of people on the train now can be calculated by adding the initial number of people and the new people who got on the train\n    total_people = initial_people + new_people\n\n    return total_people", "mapping": {"c0": 8.0, "c1": 11.0}}
{"question": "Frank had c0 pieces of candy. He lost c1 of them. If he put the remaining pieces into bags with c2 pieces in each bagHow many bags would he have?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Frank originally had c0 pieces of candy\n    original = c0\n\n    #Frank lost c1 pieces of candy\n    lost = c1\n\n    #The number of pieces of candy Frank has left can be calculated by subtracting the number of pieces he lost from the original number of pieces\n    remaining = original - lost\n\n    #The number of bags Frank would have can be calculated by dividing the number of remaining pieces by the number of pieces in each bag\n    bags = remaining // c2\n\n    return bags", "mapping": {"c0": 33.0, "c1": 24.0, "c2": 9.0}}
{"question": "Bryan took a look at his books as well. If he has c0 books distributed equally in c1 bookshelvesHow many books are there in each bookshelf?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #Bryan has c0 books\n    books = c0\n\n    #The books are distributed equally in c1 bookshelves\n    shelves = c1\n\n    #The number of books in each bookshelf can be calculated by dividing the total number of books by the number of bookshelves\n    books_per_shelf = books // shelves\n\n    return books_per_shelf", "mapping": {"c0": 34.0, "c1": 2.0}}
{"question": "A waiter had c0 customers. After some more arrived he had c1 customers.How many new customers arrived?", "answer": [5.0], "response": "def new_customers(c0, c1):\n    # The waiter originally had c0 customers\n    original_customers = c0\n\n    # After some more customers arrived, the waiter had c1 customers\n    new_customers = c1\n\n    # The number of new customers can be calculated by subtracting the original number of customers from the current number of customers\n    arrived_customers = new_customers - original_customers\n\n    return arrived_customers", "mapping": {"c0": 3.0, "c1": 8.0}}
{"question": "Brenda's mother made cookies for guests. If she prepared c0 cookies and each of them had c1 cookiesHow many guests did she prepare cookies for?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Brenda's mother prepared c0 cookies\n    cookies_prepared = c0\n\n    #Each guest had c1 cookies\n    cookies_per_guest = c1\n\n    #The number of guests can be calculated by dividing the total number of cookies prepared by the number of cookies each guest had\n    guests = cookies_prepared // cookies_per_guest\n\n    return guests", "mapping": {"c0": 38.0, "c1": 19.0}}
{"question": "They decided to hold the party in their backyard. They have some sets of tables, each having the c0 chairs. If there are a total of c1 chairs in the backyardHow many sets of tables do they have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #each set of tables has c0 chairs\n    chairs_per_table = c0\n\n    #there are c1 chairs in total\n    total_chairs = c1\n\n    #the number of sets of tables can be calculated by dividing the total number of chairs by the number of chairs per table\n    num_tables = total_chairs // chairs_per_table\n\n    return num_tables", "mapping": {"c0": 3.0, "c1": 9.0}}
{"question": "Luke played a trivia game and scored c0 points. If he gained the c1 points in each roundHow many rounds did he play?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Luke scored c0 points in the trivia game\n    score = c0\n\n    #Luke gained c1 points in each round\n    points_per_round = c1\n\n    #The number of rounds Luke played can be calculated by dividing the total score by the points gained per round\n    rounds_played = score // points_per_round\n\n    return rounds_played", "mapping": {"c0": 154.0, "c1": 11.0}}
{"question": "Jack received c0 emails in the afternoon, c1 emails in the morning and some more in the evening. If he received a total of c2 emails in the dayHow many emails did jack receive in the evening?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the afternoon\n    afternoon = c0\n\n    #Jack received c1 emails in the morning\n    morning = c1\n\n    #Jack received a total of c2 emails in the day\n    total = c2\n\n    #The number of emails Jack received in the evening can be calculated by subtracting the sum of emails he received in the morning and afternoon from the total number of emails he received in the day\n    evening = total - (afternoon + morning)\n\n    return evening", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 10.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many peaches are in each basket?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #each basket has c1 red peaches and c2 green peaches\n    red_peaches = c1\n    green_peaches = c2\n\n    #the total number of peaches in each basket can be calculated by adding the number of red peaches and green peaches\n    total_peaches = red_peaches + green_peaches\n\n    #the number of peaches in each basket can be calculated by dividing the total number of peaches by the number of baskets\n    peaches_per_basket = total_peaches / c0\n\n    return peaches_per_basket", "mapping": {"c0": 65.0, "c1": 7.0, "c2": 3.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 seats on each school bus. If c3 students do n't want to go for the tripHow many students are going on the trip?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef field_trip(c0, c1, c2, c3):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 students in the school\n    students = c1\n\n    #There are c2 seats on each school bus\n    bus_seats = c2\n\n    #c3 students don't want to go for the trip\n    not_going = c3\n\n    #The total number of seats on all the buses can be calculated by multiplying the number of classrooms by the number of seats on each bus\n    total_seats = classrooms * bus_seats\n\n    #The number of students going on the trip can be calculated by subtracting the number of students who are not going from the total number of seats on all the buses\n    going = total_seats - not_going\n\n    #If there are more students than seats, only the number of seats will be counted\n    if going > students:\n        going = students\n\n    return going", "mapping": {"c0": 102.0, "c1": 11.0, "c2": 99.0, "c3": 8.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide. If she already has c2 square feet of carpetHow much more carpet does she need to cover the whole floor?", "answer": [149.0], "response": "def Problem(c0, c1, c2):\n    #Jesse's room is c0 feet long and c1 feet wide\n    length = c0\n    width = c1\n\n    #Jesse already has c2 square feet of carpet\n    carpet_now = c2\n\n    #The total area of Jesse's room can be calculated by multiplying the length and width\n    total_area = length * width\n\n    #The amount of carpet Jesse still needs can be calculated by subtracting the amount of carpet she already has from the total area of her room\n    carpet_needed = total_area - carpet_now\n\n    return carpet_needed", "mapping": {"c0": 11.0, "c1": 15.0, "c2": 16.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many more peaches than apples does Steven have?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c3 + c1\n\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Steven has c3 apples\n    steven_apples = c3\n\n    #Steven has more peaches than apples\n    if steven_peaches > steven_apples:\n        more_peaches = steven_peaches - steven_apples\n        return more_peaches\n    #Steven has more apples than peaches\n    else:\n        more_apples = steven_apples - steven_peaches\n        return -more_apples #returning negative value as Steven has more apples than peaches\n\n#Example usage\nprint(Problem(2, 3, 5, 7)) #Output: 2 (Steven has 5 peaches and 3 apples, so he has 2 more peaches than apples)", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 17.0, "c3": 16.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [69.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Danny threw away c0 old bottle caps\n    old_caps = c0\n\n    #Danny found c1 new bottle caps\n    new_caps = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total_caps = c2\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of old bottle caps he had before throwing some away to the number of new bottle caps he found\n    initial_caps = old_caps + new_caps\n\n    #The number of bottle caps Danny had at first can also be calculated by subtracting the number of bottle caps he threw away and the number of bottle caps he found from the total number of bottle caps he has now\n    initial_caps = total_caps - old_caps - new_caps\n\n    return initial_caps", "mapping": {"c0": 60.0, "c1": 58.0, "c2": 67.0}}
{"question": "Nell collects baseball cards. She had c0 cards. She gave c1 cards to John and yet some more to Jeff. Now she has c2 cards left.How many cards did Nell give to Jeff?", "answer": [168.0], "response": "def Problem(c0, c1, c2):\n    #Nell originally had c0 baseball cards\n    nell_original = c0\n\n    #Nell gave c1 cards to John\n    john = c1\n\n    #Nell gave some more cards to Jeff\n    #The number of cards Nell gave to Jeff can be calculated by subtracting the number of cards she gave to John and the number of cards she has now from the original number of cards she had\n    jeff = nell_original - john - c2\n\n    return jeff", "mapping": {"c0": 573.0, "c1": 195.0, "c2": 210.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If he currently has c0 g of wax and the feathers require a total of c1 g of waxHow many more grams of wax does he need?", "answer": [481.0], "response": "def Problem(c0, c1):\n    #current amount of wax\n    wax_now = c0\n\n    #total amount of wax required for feathers\n    wax_required = c1\n\n    #calculate the additional amount of wax needed by subtracting the current amount of wax from the total amount of wax required\n    wax_needed = wax_required - wax_now\n\n    return wax_needed", "mapping": {"c0": 11.0, "c1": 492.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. c1 bird families flew away for winter and c2 new bird families came to live near the mountain from the arctic.How many bird families were left near the mountain?", "answer": [14.0], "response": "def bird_families_left(c0, c1, c2):\n    #calculate the number of bird families that left\n    left = c1\n\n    #calculate the number of bird families that came\n    came = c2\n\n    #calculate the number of bird families left near the mountain\n    left_near_mountain = c0 - left + came\n\n    return left_near_mountain", "mapping": {"c0": 49.0, "c1": 59.0, "c2": 24.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven and c2 more peaches than Jill.How many peaches does Jake have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Jake has c1 fewer peaches than Steven\n    jake = c0 - c1\n\n    #Jake has c2 more peaches than Jill\n    jill = jake - c2\n\n    #The number of peaches Jake has can be calculated by adding the number of peaches Jill has to the number of peaches Jake has fewer than Steven\n    jake_total = jake + jill\n\n    return jake_total", "mapping": {"c0": 19.0, "c1": 12.0, "c2": 72.0}}
{"question": "Josh had some marbles in his collection. He lost c0 marbles. If he has c1 marbles nowHow many marbles did he have in his collection?", "answer": [33.0], "response": "def Problem(c0, c1):\n    #Josh had some marbles in his collection\n    #Let's call the original number of marbles x\n    x = 0\n\n    #He lost c0 marbles\n    x -= c0\n\n    #Now he has c1 marbles\n    x = c1\n\n    #The number of marbles he had in his collection can be calculated by adding the number of marbles he lost to the number of marbles he has now\n    original = x + c0\n\n    return original", "mapping": {"c0": 21.0, "c1": 12.0}}
{"question": "He had c0 aquariums for saltwater animals and c1 aquariums for freshwater animals. Each aquarium has c2 animals in it.How many animals does he have in total?", "answer": [1463.0], "response": "def total_animals(c0, c1, c2):\n    #calculate the total number of animals in saltwater aquariums\n    saltwater_animals = c0 * c2\n\n    #calculate the total number of animals in freshwater aquariums\n    freshwater_animals = c1 * c2\n\n    #calculate the total number of animals\n    total_animals = saltwater_animals + freshwater_animals\n\n    return total_animals", "mapping": {"c0": 15.0, "c1": 62.0, "c2": 19.0}}
{"question": "Jessie currently weighs c0 kilograms. After she started to go jogging everyday she lost c1 kilograms.How much did she weigh before starting to jog?", "answer": [128.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Jessie currently weighs c0 kilograms\n    current_weight = c0\n\n    #After she started to go jogging everyday she lost c1 kilograms\n    lost_weight = c1\n\n    #Her weight before starting to jog can be calculated by adding the weight she lost to her current weight\n    original_weight = current_weight + lost_weight\n\n    return original_weight", "mapping": {"c0": 27.0, "c1": 101.0}}
{"question": "Dan has $ c0 left with him after he bought a candy bar for $ 2.How much money did he have initially?", "answer": [5.0], "response": "def initial_money(c0):\n    # Dan has $2 less than his initial amount after buying a candy bar\n    initial_amount = c0 + 2\n    return initial_amount", "mapping": {"c0": 3.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many push-ups and crunches did Zachary do?", "answer": [67.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    #David did c2 more push-ups than Zachary\n    david_pushups = c0 + c2\n\n    #David did c3 less crunches than Zachary\n    david_crunches = c1 - c3\n\n    #Total push-ups and crunches done by Zachary\n    total_pushups = zachary_pushups + david_pushups\n    total_crunches = zachary_crunches + david_crunches\n\n    return total_pushups, total_crunches", "mapping": {"c0": 53.0, "c1": 14.0, "c2": 17.0, "c3": 10.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the first chapter have than the second chapter?", "answer": [68.0], "response": "def Problem(c0, c1, c2, c3):\n    #The first chapter is c1 pages long\n    first_chapter = c1\n\n    #The second chapter is c2 pages long\n    second_chapter = c2\n\n    #The number of pages the first chapter has more than the second chapter can be calculated by subtracting the number of pages in the second chapter from the number of pages in the first chapter\n    difference = first_chapter - second_chapter\n\n    return difference", "mapping": {"c0": 3.0, "c1": 91.0, "c2": 23.0, "c3": 25.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny find at the park than those he threw away?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #Danny threw away c1 old bottle caps\n    thrown_away = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total_now = c2\n\n    #The number of bottle caps Danny found at the park more than those he threw away can be calculated by subtracting the number of bottle caps he threw away from the number of bottle caps he found at the park\n    difference = found - thrown_away\n\n    return difference", "mapping": {"c0": 36.0, "c1": 35.0, "c2": 22.0}}
{"question": "Dan has $ c0. For a total of $ c1 he bought c2 candy bar each one costing the same amount of money.How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought c2 candy bars for a total of c1 dollars\n    candy_bars = c2\n    total_cost = c1\n\n    #The cost of one candy bar can be calculated by dividing the total cost by the number of candy bars\n    cost_per_bar = total_cost / candy_bars\n\n    #The amount of money Dan has left can be calculated by subtracting the total cost from the original amount of money Dan had\n    money_left = dan_money - total_cost\n\n    return money_left", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 10.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of sugar and c1 cups of flour\n    sugar = c0\n    flour = c1\n\n    #Mary already put in c2 cups of flour\n    flour_now = c2\n\n    #The number of cups of flour Mary needs to add now can be calculated by subtracting the amount of flour she has now from the total amount of flour needed\n    flour_needed = flour - flour_now\n    sugar_needed = sugar\n\n    #The difference between the needed cups of flour and sugar can be calculated by subtracting the amount of sugar needed from the amount of flour needed\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 6.0, "c1": 9.0, "c2": 2.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 snakes were hidingHow many snakes were not hiding?", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #The cage originally had c0 snakes\n    snakes_before = c0\n\n    #The cage originally had c1 alligators\n    alligators_before = c1\n\n    #c2 snakes were hiding\n    snakes_hiding = c2\n\n    #The number of snakes not hiding can be calculated by subtracting the number of snakes hiding from the original number of snakes\n    snakes_not_hiding = snakes_before - snakes_hiding\n\n    return snakes_not_hiding", "mapping": {"c0": 95.0, "c1": 61.0, "c2": 64.0}}
{"question": "Emily is making bead necklaces for her friends. She was able to make c0 necklaces and she had c1 beads.How many beads did each necklace need?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Emily was able to make c0 necklaces\n    necklaces = c0\n\n    #Emily had c1 beads\n    beads = c1\n\n    #Each necklace needs to have the same number of beads, so we can divide the total number of beads by the number of necklaces to find out how many beads each necklace needs\n    beads_per_necklace = beads / necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 6.0, "c1": 18.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags of cans and c2 bags of bottles.How many bags of cans did she have altogether?", "answer": [10.0], "response": "def total_bags(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    monday_bags = c0\n\n    #The next day she found c1 more bags of cans\n    tuesday_cans = c1\n\n    #She also found c2 bags of bottles\n    tuesday_bottles = c2\n\n    #The total number of bags of cans she has now can be calculated by adding the number of bags she had on Monday with the number of bags she found the next day\n    total_cans = monday_bags + tuesday_cans\n\n    return total_cans", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 44.0}}
{"question": "Robin has some packages of gum. There are c0 pieces in each package. Robin has c1 extra pieces of gum. In all the number of pieces of gums robin has is 41.How many packages does Robin have?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Robin has c0 pieces of gum in each package\n    pieces_per_package = c0\n\n    #Robin has c1 extra pieces of gum\n    extra_pieces = c1\n\n    #In total, Robin has 41 pieces of gum\n    total_pieces = 41\n\n    #The number of packages Robin has can be calculated by dividing the total number of pieces by the number of pieces per package, and rounding up to the nearest integer\n    packages = math.ceil((total_pieces - extra_pieces) / pieces_per_package)\n\n    return packages\n\n#We need to import the math module to use the ceil function for rounding up to the nearest integer.", "mapping": {"c0": 7.0, "c1": 6.0}}
{"question": "Baker made c0 cakes. If his friend bought c1 cakes from himHow many cakes would baker still have?", "answer": [15.0], "response": "def cakes_left(c0, c1):\n    # Baker made c0 cakes\n    original_cakes = c0\n\n    # His friend bought c1 cakes from him\n    bought_cakes = c1\n\n    # The number of cakes baker still has can be calculated by subtracting the number of cakes his friend bought from the original number of cakes he made\n    cakes_left = original_cakes - bought_cakes\n\n    return cakes_left", "mapping": {"c0": 155.0, "c1": 140.0}}
{"question": "c0 children were riding on the bus. At the bus stop some more children got on the bus. Then there were c1 children altogether on the bus.How many more children are on the bus now than there were before the bus stop?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #c0 children were originally on the bus\n    original_children = c0\n\n    #After some more children got on the bus, there are now c1 children on the bus\n    total_children = c1\n\n    #The number of additional children on the bus can be calculated by subtracting the original number of children from the total number of children\n    additional_children = total_children - original_children\n\n    return additional_children", "mapping": {"c0": 2.0, "c1": 10.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many bottle caps did danny have at first?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    found_caps = c0\n    found_wrappers = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers in his collection\n    total_caps = c2\n    total_wrappers = c3\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of bottle caps he found to the difference between the total number of bottle caps and the number of bottle caps he found\n    initial_caps = found_caps + (total_caps - found_caps - found_wrappers)\n\n    return initial_caps", "mapping": {"c0": 22.0, "c1": 8.0, "c2": 28.0, "c3": 63.0}}
{"question": "For the walls of the house he would use c0 large planks of wood. If each plank of wood needs c1 pieces of nails to be securedHow many planks does John need for the house wall?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #each plank of wood needs c1 pieces of nails to be secured\n    nails_per_plank = c1\n\n    #John needs c0 large planks of wood for the house wall\n    planks_needed = c0\n\n    #The total number of nails needed can be calculated by multiplying the number of nails per plank by the number of planks needed\n    total_nails_needed = nails_per_plank * planks_needed\n\n    return planks_needed", "mapping": {"c0": 8.0, "c1": 74.0}}
{"question": "Paco ate c0 cookies. If he had c1 cookies initiallyHow many cookies did Paco have left?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Paco initially had c1 cookies\n    initial_cookies = c1\n\n    #Paco ate c0 cookies\n    ate_cookies = c0\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies he ate from the initial number of cookies he had\n    cookies_left = initial_cookies - ate_cookies\n\n    return cookies_left", "mapping": {"c0": 36.0, "c1": 37.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy. Then he ate c2 more.How many pieces of candy does he still have left?", "answer": [7.0], "response": "def candy_left(c0, c1, c2):\n    # Bobby originally had c0 pieces of candy\n    original = c0\n\n    # Bobby ate c1 pieces of candy\n    ate1 = c1\n\n    # Bobby ate c2 more pieces of candy\n    ate2 = c2\n\n    # The number of pieces of candy Bobby has left can be calculated by subtracting the total number of pieces he ate from the original number of pieces he had\n    left = original - ate1 - ate2\n\n    return left", "mapping": {"c0": 21.0, "c1": 5.0, "c2": 9.0}}
{"question": "Baker made c0 cakes. He sold some of them. If he still has c1 cakes leftHow many cakes did baker sell?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker still has c1 cakes left\n    cakes_left = c1\n\n    #The number of cakes sold can be calculated by subtracting the number of cakes left from the original number of cakes made\n    cakes_sold = cakes_made - cakes_left\n\n    return cakes_sold", "mapping": {"c0": 54.0, "c1": 13.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home.How many more kids spent their summer break at the camp compared to those who stayed home?", "answer": [150780.0], "response": "def summer_camp(c0, c1):\n    #calculate the difference between the number of kids who went to camp and those who stayed home\n    diff = c0 - c1\n    return diff", "mapping": {"c0": 819058.0, "c1": 668278.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many blocks are left?", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Randy originally had c0 blocks\n    blocks_before = c0\n\n    #Randy used c1 blocks to build a tower\n    tower = c1\n\n    #Randy used c2 blocks to build a house\n    house = c2\n\n    #The number of blocks Randy has left can be calculated by subtracting the number of blocks used to build the tower and the house from the original number of blocks Randy had\n    blocks_left = blocks_before - tower - house\n\n    return blocks_left", "mapping": {"c0": 79.0, "c1": 14.0, "c2": 11.0}}
{"question": "Every day Ryan spends c0 hours on learning english c1 hours on learning chinese and c2 hours on learning spanish.How many hours does he spend on learning english, chinese and spanish in all?", "answer": [16.0], "response": "def total_hours(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #Ryan spends c2 hours on learning spanish\n    spanish_hours = c2\n\n    #The total number of hours Ryan spends on learning all three languages can be calculated by adding the number of hours he spends on each language\n    total = english_hours + chinese_hours + spanish_hours\n\n    return total", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 3.0}}
{"question": "c0 birds were sitting on the fence. Some more birds came to join them. If there are a total of c1 birds on the fence nowHow many more birds had come to sit on the fence?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #c0 birds were originally sitting on the fence\n    original_birds = c0\n\n    #c1 birds are now sitting on the fence\n    total_birds = c1\n\n    #The number of birds that came to join can be calculated by subtracting the original number of birds from the total number of birds now\n    new_birds = total_birds - original_birds\n\n    return new_birds", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more boys than girlsHow many boys are there in that school?", "answer": [1145.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more boys than girls in the school\n    boys_more = c1\n\n    #The number of boys in the school can be calculated by adding the number of girls to the number of boys more than girls\n    boys = girls + boys_more\n\n    return boys", "mapping": {"c0": 635.0, "c1": 510.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide.How much longer is her room than it is wide?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet long\n    length = c0\n\n    #Jesse's room is c1 feet wide\n    width = c1\n\n    #The difference between the length and width of Jesse's room is how much longer it is than it is wide\n    difference = length - width\n\n    return difference", "mapping": {"c0": 12.0, "c1": 11.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies are there in the ' crazy silly school ' series?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left after reading c2 books\n    books_left = c0 - c2\n\n    #calculate the number of movies left after watching c3 movies\n    movies_left = c1 - c3\n\n    #calculate the difference between the number of books and movies left\n    difference = books_left - movies_left\n\n    return difference", "mapping": {"c0": 16.0, "c1": 14.0, "c2": 19.0, "c3": 13.0}}
{"question": "You had c0 bags with equal number of cookies. If you had c1 cookies and c2 candies in totalHow many bags of cookies do you have?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Each bag has an equal number of cookies\n    cookies_per_bag = c1 // c0\n\n    #The total number of cookies and candies is c1 + c2\n    total = c1 + c2\n\n    #The number of bags of cookies can be calculated by dividing the total number of cookies and candies by the number of cookies per bag\n    bags_of_cookies = total // cookies_per_bag\n\n    return bags_of_cookies", "mapping": {"c0": 14.0, "c1": 28.0, "c2": 86.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many more books than action figures were on his shelf?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures and c1 books on the shelf\n    action_figures = c0\n    books = c1\n\n    #Jerry added c2 more action figures to the shelf\n    added_figures = c2\n\n    #The total number of action figures on the shelf now is the sum of the original number and the added number\n    total_figures = action_figures + added_figures\n\n    #The difference between the number of books and the number of action figures can be calculated by subtracting the total number of action figures from the number of books\n    difference = books - total_figures\n\n    return difference", "mapping": {"c0": 2.0, "c1": 10.0, "c2": 4.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in some cups of flour. If she still needs c2 more cups of flourHow many cups of flour did she put in?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs c0 cups of sugar and c1 cups of flour for the recipe\n    sugar = c0\n    flour = c1\n\n    #Mary already put in some cups of flour, let's call it x\n    x = flour - c2\n\n    #The number of cups of flour Mary put in can be calculated by subtracting x from the original number of cups of flour needed\n    cups_of_flour_put_in = flour - x\n\n    return cups_of_flour_put_in", "mapping": {"c0": 5.0, "c1": 13.0, "c2": 12.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of math and reading homework did she have to complete?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology = c2\n\n    #The number of pages of math and reading homework Rachel had to complete can be calculated by adding the number of pages of math and reading homework she had to complete originally\n    math_reading = math + reading\n\n    return math_reading", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 29.0}}
{"question": "Paige was helping her mom plant flowers in c0 flowerbeds. They planted c1 seeds altogether. If they put same number of seeds in each flower bedHow many seeds did they plant in each flowerbed?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Paige and her mom planted c1 seeds altogether\n    seeds_planted = c1\n\n    #They planted the seeds in c0 flowerbeds\n    flowerbeds = c0\n\n    #The number of seeds planted in each flowerbed can be calculated by dividing the total number of seeds by the number of flowerbeds\n    seeds_per_flowerbed = seeds_planted / flowerbeds\n\n    return seeds_per_flowerbed", "mapping": {"c0": 8.0, "c1": 32.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many sacks of ripe oranges will they have after c2 days of harvest?", "answer": [365.0], "response": "def Problem(c0, c1, c2):\n    #They harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day\n    unripe_per_day = c0\n    ripe_per_day = c1\n\n    #They harvest for c2 days\n    days = c2\n\n    #The number of ripe oranges they will have after c2 days of harvest can be calculated by multiplying the number of days by the number of ripe oranges harvested per day\n    ripe_now = ripe_per_day * days\n\n    return ripe_now", "mapping": {"c0": 25.0, "c1": 5.0, "c2": 73.0}}
{"question": "Paul had c0 books. After giving c1 books to his friend and selling some books in a garage sale he had c2 books left.How many books did he sell in the garage sale?", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 books\n    paul_original = c0\n\n    #After giving c1 books to his friend, Paul had c0 - c1 books left\n    paul_after_giving = paul_original - c1\n\n    #The number of books Paul sold in the garage sale can be calculated by subtracting the number of books he has now from the number of books he had after giving some to his friend\n    sold = paul_after_giving - c2\n\n    return sold", "mapping": {"c0": 134.0, "c1": 39.0, "c2": 68.0}}
{"question": "Paco had c0 salty cookies and c1 sweet cookies. He ate c2 sweet cookies and c3 salty cookies.How many sweet cookies did Paco have left?", "answer": [19.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 salty cookies\n    salty_cookies = c0\n\n    #Paco had c1 sweet cookies\n    sweet_cookies = c1\n\n    #Paco ate c2 sweet cookies\n    ate_sweet = c2\n\n    #Paco ate c3 salty cookies\n    ate_salty = c3\n\n    #The number of sweet cookies Paco has left can be calculated by subtracting the number of sweet cookies he ate from the original number of sweet cookies he had\n    sweet_left = sweet_cookies - ate_sweet\n\n    return sweet_left", "mapping": {"c0": 97.0, "c1": 34.0, "c2": 15.0, "c3": 56.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. c1 school buses are fully filled with c2 seats on each school bus.How many students are in the school?", "answer": [11210.0], "response": "def Problem(c0, c1, c2):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #c1 school buses are fully filled with c2 seats on each school bus\n    buses = c1\n    seats_per_bus = c2\n\n    #The total number of students that can fit in all the buses can be calculated by multiplying the number of buses by the number of seats per bus\n    total_seats = buses * seats_per_bus\n\n    #The total number of students in the school can be calculated by multiplying the number of classrooms by the average number of students per classroom\n    total_students = classrooms * 30 #assuming an average of 30 students per classroom\n\n    #The actual number of students that can go on the field trip is the minimum of the total number of students and the total number of seats available on the buses\n    actual_students = min(total_students, total_seats)\n\n    return actual_students", "mapping": {"c0": 84.0, "c1": 95.0, "c2": 118.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 crayons and c2 pencils in each row.How many pencils does she have?", "answer": [720.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 crayons and c2 pencils in each row\n    crayons_per_row = c1\n    pencils_per_row = c2\n\n    #Faye has c0 rows in total\n    total_rows = c0\n\n    #The total number of pencils Faye has can be calculated by multiplying the number of pencils per row by the total number of rows\n    total_pencils = pencils_per_row * total_rows\n\n    return total_pencils", "mapping": {"c0": 30.0, "c1": 71.0, "c2": 24.0}}
{"question": "Faye was placing c0 pencils equally into c1 rows.How many pencils did she place in each row?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Faye was placing c0 pencils equally into c1 rows\n    pencils = c0\n    rows = c1\n\n    #The number of pencils in each row can be calculated by dividing the total number of pencils by the number of rows\n    pencils_per_row = pencils // rows\n\n    return pencils_per_row", "mapping": {"c0": 12.0, "c1": 3.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday and tuesday than on wednesday?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The total number of kids Julia played with on Monday and Tuesday can be calculated by adding the number of kids she played with on each day\n    total_mon_tue = monday + tuesday\n\n    #The difference between the total number of kids Julia played with on Monday and Tuesday and the number of kids she played with on Wednesday can be calculated by subtracting the number of kids she played with on Wednesday from the total number of kids she played with on Monday and Tuesday\n    difference = total_mon_tue - wednesday\n\n    return difference", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 7.0}}
{"question": "Baker made c0 cakes. If he sold c1 of themHow many more cakes did baker make than those he sold?", "answer": [82.0], "response": "def Problem(c0, c1):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of cakes sold from the number of cakes made\n    more_cakes = cakes_made - cakes_sold\n\n    return more_cakes", "mapping": {"c0": 133.0, "c1": 51.0}}
{"question": "There are c0 bananas in Philip's banana collection. If the bananas are organized into groups of size c1 How many groups are there?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #number of bananas in Philip's collection\n    bananas = c0\n\n    #size of each group\n    group_size = c1\n\n    #number of groups can be calculated by dividing the total number of bananas by the size of each group\n    groups = bananas // group_size\n\n    return groups", "mapping": {"c0": 18.0, "c1": 2.0}}
{"question": "Olivia spent c0 dollars at a supermarket. If there were c1 dollars in her wallet initiallyHow much money does she have left?", "answer": [90.0], "response": "def money_left(c0, c1):\n    #Olivia spent c0 dollars at the supermarket\n    spent = c0\n\n    #Olivia had c1 dollars in her wallet initially\n    initial = c1\n\n    #The amount of money Olivia has left can be calculated by subtracting the amount she spent from her initial amount\n    left = initial - spent\n\n    return left", "mapping": {"c0": 38.0, "c1": 128.0}}
{"question": "Baker sold c0 cakes. If he had made c1 cakes initiallyHow many cakes would baker still have?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Baker initially made c1 cakes\n    initial_cakes = c1\n\n    #Baker sold c0 cakes\n    sold_cakes = c0\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes sold from the initial number of cakes\n    remaining_cakes = initial_cakes - sold_cakes\n\n    return remaining_cakes", "mapping": {"c0": 44.0, "c1": 48.0}}
{"question": "Every day Ryan spends c0 hours on learning chinese and some more hours on learning english. If he spends c1 hours more on learning english than on learning chineseHow many hours does he spend on learning english?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ryan spends c0 hours on learning chinese\n    chinese_hours = c0\n\n    #Ryan spends c1 hours more on learning english than on learning chinese\n    english_hours = chinese_hours + c1\n\n    #The number of hours Ryan spends on learning english can be calculated by subtracting the number of hours he spends on learning chinese from the total number of hours he spends on learning both languages\n    english_hours = english_hours - chinese_hours\n\n    return english_hours", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of math homework than reading homeworkHow many pages did she have to complete in all?", "answer": [13.0], "response": "def total_pages(c0, c1):\n    # Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    # Rachel had to complete c1 more pages of math homework than reading homework\n    reading_pages = c1\n\n    # Total pages Rachel had to complete can be calculated by adding math pages and reading pages\n    total = math_pages + reading_pages\n\n    return total", "mapping": {"c0": 8.0, "c1": 3.0}}
{"question": "Dan has $ c0. He bought a chocolate for $ c1 and a candy bar for $ 7.How much money did he spend to buy candy bar than he did to buy chocolate?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought a chocolate for c1 dollars\n    chocolate_cost = c1\n\n    #Dan bought a candy bar for 7 dollars\n    candy_bar_cost = 7\n\n    #The difference in cost between the candy bar and the chocolate can be calculated by subtracting the cost of the chocolate from the cost of the candy bar\n    difference = candy_bar_cost - chocolate_cost\n\n    return difference", "mapping": {"c0": 5.0, "c1": 3.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much did she weigh after the first week of jogging?", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Jessie originally weighed c0 kilograms\n    weight_before = c0\n\n    #After the first week of jogging, she lost c1 kilograms\n    weight_after_week1 = weight_before - c1\n\n    return weight_after_week1", "mapping": {"c0": 92.0, "c1": 56.0, "c2": 99.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on tuesday and wednesday?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The number of kids Julia played with on Tuesday and Wednesday can be calculated by adding the number of kids she played with on Tuesday and Wednesday\n    tuesday_and_wednesday = tuesday + wednesday\n\n    return tuesday_and_wednesday", "mapping": {"c0": 2.0, "c1": 14.0, "c2": 16.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many children got on the bus at the bus stop?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got off the bus\n    off = c1\n\n    #c2 children were left on the bus after some more got on\n    left = c2\n\n    #The number of children who got on the bus can be calculated by subtracting the number of children who got off from the original number of children and then subtracting that result from the number of children left on the bus\n    on = left - (original - off)\n\n    return on", "mapping": {"c0": 21.0, "c1": 10.0, "c2": 16.0}}
{"question": "Baker made c0 cakes. Then he made c1 more cakes. He sold c2 of them.How many cakes would baker still have?", "answer": [67.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker made c1 more cakes\n    cakes_made = c1\n\n    #Baker sold c2 cakes\n    cakes_sold = c2\n\n    #The number of cakes Baker would still have can be calculated by adding the number of cakes he made to the original number of cakes he had, and then subtracting the number of cakes he sold\n    cakes_now = cakes_before + cakes_made - cakes_sold\n\n    return cakes_now", "mapping": {"c0": 62.0, "c1": 149.0, "c2": 144.0}}
{"question": "Paul got a box of some crayons for his birthday. By the end of the school year he only had c0 crayons left since he had either lost or given away c1 of them.How many crayons did he get for his birthday?", "answer": [606.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Paul had c0 crayons left by the end of the school year\n    crayons_left = c0\n\n    #Paul either lost or gave away c1 crayons\n    lost_or_given = c1\n\n    #The number of crayons Paul got for his birthday can be calculated by adding the number of crayons he had left by the end of the school year to the number of crayons he lost or gave away\n    crayons_received = crayons_left + lost_or_given\n\n    return crayons_received", "mapping": {"c0": 291.0, "c1": 315.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many letters did jack receive in the day?", "answer": [13.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c1 letters in the morning and c3 letters in the afternoon\n    letters = c1 + c3\n\n    return letters", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 9.0, "c3": 7.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money does he earn during harvest season?", "answer": [93899.0], "response": "def harvest_earnings(c0, c1, c2):\n    #Lewis earns c0 every week during harvest season\n    weekly_earnings = c0\n\n    #Harvest season lasts for c1 weeks\n    weeks = c1\n\n    #Lewis has to pay c2 rent every week\n    weekly_rent = c2\n\n    #The total earnings during harvest season can be calculated by multiplying the weekly earnings by the number of weeks and then subtracting the total rent paid\n    total_earnings = (weekly_earnings * weeks) - (weekly_rent * weeks)\n\n    return total_earnings", "mapping": {"c0": 403.0, "c1": 233.0, "c2": 49.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many days will it take to harvest c2 sacks of oranges?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each day they harvest c0 sacks of oranges\n    sacks_per_day = c0\n\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they need to harvest c2 sacks of oranges\n    total_sacks = c2\n\n    #the total number of oranges they need to harvest can be calculated by multiplying the number of sacks by the number of oranges per sack\n    total_oranges = total_sacks * oranges_per_sack\n\n    #the number of days it will take to harvest all the oranges can be calculated by dividing the total number of oranges by the number of oranges harvested per day\n    days = total_oranges // (sacks_per_day * oranges_per_sack)\n\n    return days", "mapping": {"c0": 16.0, "c1": 57.0, "c2": 80.0}}
{"question": "Robin has some packages of gum. There are c0 pieces in each package and a total of c1 pieces of gum.How many packages does Robin have?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #calculate the number of packages by dividing the total number of pieces by the number of pieces in each package\n    packages = c1 // c0\n\n    return packages", "mapping": {"c0": 3.0, "c1": 42.0}}
{"question": "During the Arkansas and Texas tech game the Razorback t-shirt shop made $ c0 by selling c1 t-shirts.What is the cost of each t-shirt?", "answer": [43.0], "response": "def Problem(c0, c1):\n    #The Razorback t-shirt shop made c0 dollars by selling c1 t-shirts\n    revenue = c0\n    tshirts_sold = c1\n\n    #The cost of each t-shirt can be calculated by dividing the revenue by the number of t-shirts sold\n    cost_per_tshirt = revenue / tshirts_sold\n\n    return cost_per_tshirt", "mapping": {"c0": 215.0, "c1": 5.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How far did the mouse jump?", "answer": [31.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The frog jumped c1 inches farther than the grasshopper\n    frog = c0 + c1\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse = frog - c2\n\n    return mouse", "mapping": {"c0": 25.0, "c1": 32.0, "c2": 26.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and discard c1 of them.How many oranges do they harvest per day if each sack contains c2 oranges?", "answer": [600.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #They harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #They discard c1 sacks per day\n    discarded_sacks = c1\n\n    #Each sack contains c2 oranges\n    oranges_per_sack = c2\n\n    #The total number of oranges harvested per day can be calculated by multiplying the number of sacks harvested per day by the number of oranges per sack, and then subtracting the number of discarded sacks multiplied by the number of oranges per sack\n    total_oranges = (sacks_per_day * oranges_per_sack) - (discarded_sacks * oranges_per_sack)\n\n    return total_oranges", "mapping": {"c0": 76.0, "c1": 64.0, "c2": 50.0}}
{"question": "Jesse's room is c0 feet wide. If she needs a carpet of size c1 square feetWhat is the length of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet wide\n    width = c0\n\n    #She needs a carpet of size c1 square feet\n    carpet_size = c1\n\n    #The length of her room can be calculated by dividing the carpet size by the width of the room\n    length = carpet_size / width\n\n    return length", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english in all?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english every day\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese every day\n    chinese_hours = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total number of hours Ryan spends on learning english can be calculated by multiplying the number of hours he spends on learning english every day by the number of days he learns\n    total_english_hours = english_hours * days\n\n    return total_english_hours", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 2.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many more marbles did Ed have than Doug then?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + c1\n\n    #Doug lost c1 of his marbles at the playground\n    doug = ed - c1\n\n    #Ed had c2 marbles\n    ed_now = c2\n\n    #The difference between the number of marbles Ed has now and Doug has now is the answer\n    difference = ed_now - doug\n\n    return difference", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 45.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. If she sends invitations to only c2 friendsHow many invitations will be left?", "answer": [68.0], "response": "def Problem(c0, c1, c2):\n    #Each package of invitations has c0 invitations\n    invitations_per_pack = c0\n\n    #Carol bought c1 packs of invitations\n    packs_bought = c1\n\n    #Carol sent invitations to c2 friends\n    friends_invited = c2\n\n    #The total number of invitations Carol had is the product of the number of invitations per pack and the number of packs bought\n    total_invitations = invitations_per_pack * packs_bought\n\n    #The number of invitations left can be calculated by subtracting the number of friends invited from the total number of invitations\n    invitations_left = total_invitations - friends_invited\n\n    return invitations_left", "mapping": {"c0": 10.0, "c1": 7.0, "c2": 2.0}}
{"question": "Rachel's tree had c0 apples initially. She picked some apples and now there are c1 apples left on the tree.How many apples did rachel pick?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel initially had c0 apples on the tree\n    initial_apples = c0\n\n    #Now there are c1 apples left on the tree\n    remaining_apples = c1\n\n    #The number of apples Rachel picked can be calculated by subtracting the number of remaining apples from the initial number of apples\n    picked_apples = initial_apples - remaining_apples\n\n    return picked_apples", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many pieces of candy did Bobby eat?", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #Bobby ate c0 pieces of candy\n    candy_before = c0\n\n    #Bobby ate c1 more pieces of candy\n    candy_more = c1\n\n    #Bobby also ate c2 pieces of chocolate\n    chocolate = c2\n\n    #The number of pieces of candy Bobby ate can be calculated by adding the original number of candy he ate and the additional candy he ate, then subtracting the number of chocolate he ate\n    candy_now = candy_before + candy_more - chocolate\n\n    return candy_now", "mapping": {"c0": 28.0, "c1": 42.0, "c2": 63.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a jersey cost than a t-shirt?", "answer": [90.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling jerseys and t-shirts\n    revenue_jerseys = c3 * c0\n    revenue_tshirts = c2 * c1\n\n    #calculate the difference in cost between a jersey and a t-shirt\n    cost_difference = c0 - c1\n\n    return cost_difference", "mapping": {"c0": 115.0, "c1": 25.0, "c2": 113.0, "c3": 78.0}}
{"question": "Bobby had c0 pieces of candy. He ate some pieces of candy. Then he ate c1 more. If he still has c2 pieces of candy leftHow many pieces of candy had he eaten at the start?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Bobby originally had c0 pieces of candy\n    original = c0\n\n    #Bobby ate some pieces of candy, so he now has less than the original amount\n    ate_before = original - c2\n\n    #Bobby then ate c1 more pieces of candy\n    ate_after = ate_before - c1\n\n    #The number of pieces of candy Bobby ate at the start can be calculated by subtracting the amount he has left now from the amount he ate after eating c1 more pieces\n    ate_start = ate_before - ate_after\n\n    return ate_start", "mapping": {"c0": 22.0, "c1": 5.0, "c2": 8.0}}
{"question": "If each pack costs c0 dollarsHow much will it cost to buy c1 packs of dvds?", "answer": [2673.0], "response": "def Problem(c0, c1):\n    #each pack costs c0 dollars\n    cost_per_pack = c0\n\n    #we want to buy c1 packs of dvds\n    num_packs = c1\n\n    #the total cost can be calculated by multiplying the cost per pack by the number of packs\n    total_cost = cost_per_pack * num_packs\n\n    return total_cost", "mapping": {"c0": 81.0, "c1": 33.0}}
{"question": "There were c0 parents in the program and c1 pupils too. The program could seat c2 peopleHow many people were present in the program?", "answer": [238.0], "response": "def Problem(c0, c1, c2):\n    #there were c0 parents and c1 pupils in the program\n    total_people = c0 + c1\n\n    #the program could seat c2 people\n    seating_capacity = c2\n\n    #the number of people present in the program is the minimum of the total number of people and the seating capacity\n    present_people = min(total_people, seating_capacity)\n\n    return present_people", "mapping": {"c0": 61.0, "c1": 177.0, "c2": 44.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english and chinese each day?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english and c1 hours on learning chinese every day\n    english_hours = c0\n    chinese_hours = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total number of hours Ryan spends on learning english and chinese can be calculated by multiplying the number of hours he spends on each language by the number of days he learns\n    total_english_hours = english_hours * days\n    total_chinese_hours = chinese_hours * days\n\n    #The number of hours Ryan spends on learning english and chinese each day can be calculated by dividing the total number of hours by the number of days he learns\n    daily_english_hours = total_english_hours / days\n    daily_chinese_hours = total_chinese_hours / days\n\n    return daily_english_hours, daily_chinese_hours", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 86.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker make?", "answer": [78.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes\n    cakes = c0\n\n    #Baker made c1 pastries\n    pastries = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of cakes left after selling can be calculated by subtracting the number of sold cakes from the original number of cakes\n    cakes_left = cakes - sold_cakes\n\n    #The number of pastries left after selling can be calculated by subtracting the number of sold pastries from the original number of pastries\n    pastries_left = pastries - sold_pastries\n\n    #The difference between the number of cakes left and pastries left is the number of more cakes than pastries\n    more_cakes = cakes_left - pastries_left\n\n    return more_cakes", "mapping": {"c0": 126.0, "c1": 48.0, "c2": 115.0, "c3": 81.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many more tickets did Dave use to buy toys than he did to buy clothes?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 tickets\n    dave_original = c0\n\n    #Dave used c1 tickets to buy toys\n    toys = c1\n\n    #Dave used c2 more tickets to buy clothes\n    clothes = c2\n\n    #The difference between the number of tickets Dave used to buy toys and the number of tickets he used to buy clothes can be calculated by subtracting the number of tickets used for clothes from the number of tickets used for toys\n    difference = toys - clothes\n\n    return difference", "mapping": {"c0": 19.0, "c1": 12.0, "c2": 7.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many bottles did they have total?", "answer": [38.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of regular soda\n    regular_soda = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet_soda = c1\n\n    #The grocery store had c2 apples\n    apples = c2\n\n    #The total number of bottles and apples can be calculated by adding the number of bottles of regular soda, diet soda, and apples\n    total = regular_soda + diet_soda + apples\n\n    return total", "mapping": {"c0": 30.0, "c1": 8.0, "c2": 41.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many peaches are in the baskets altogether?", "answer": [308.0], "response": "def Problem(c0, c1, c2):\n    #each basket has c1 red peaches and c2 green peaches\n    red_peaches = c1\n    green_peaches = c2\n\n    #the total number of peaches in each basket can be calculated by adding the number of red and green peaches\n    total_peaches_per_basket = red_peaches + green_peaches\n\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #the total number of peaches in all the baskets can be calculated by multiplying the number of baskets by the total number of peaches in each basket\n    total_peaches = baskets * total_peaches_per_basket\n\n    return total_peaches", "mapping": {"c0": 11.0, "c1": 10.0, "c2": 18.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many crayons did he have left?", "answer": [223.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 crayons\n    paul_original = c0\n\n    #During the school year, he gave c1 crayons to his friends\n    gave = c1\n\n    #He also lost c2 crayons\n    lost = c2\n\n    #The number of crayons Paul has left can be calculated by subtracting the number of crayons he gave away and lost from the original number of crayons he had\n    paul_now = paul_original - gave - lost\n\n    return paul_now", "mapping": {"c0": 440.0, "c1": 111.0, "c2": 106.0}}
{"question": "Some campers went rowing in the morning while c0 campers went rowing in the afternoon. If a total of c1 campers went rowing that dayHow many campers went rowing in the morning?", "answer": [53.0], "response": "def morning_campers(c0, c1):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #total number of campers who went rowing that day is c1\n    total = c1\n\n    #number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing that day\n    afternoon = total - morning\n\n    return morning", "mapping": {"c0": 7.0, "c1": 60.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and discard c1 of them.How many sacks of oranges will they have after c2 days of harvest?", "answer": [153.0], "response": "def Problem(c0, c1, c2):\n    #They harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #They discard c1 sacks per day\n    discarded_per_day = c1\n\n    #They harvest for c2 days\n    days = c2\n\n    #The total number of sacks harvested can be calculated by multiplying the number of sacks per day by the number of days\n    total_harvested = sacks_per_day * days\n\n    #The total number of sacks discarded can be calculated by multiplying the number of sacks discarded per day by the number of days\n    total_discarded = discarded_per_day * days\n\n    #The number of sacks they have left can be calculated by subtracting the total number of sacks discarded from the total number of sacks harvested\n    sacks_left = total_harvested - total_discarded\n\n    return sacks_left", "mapping": {"c0": 74.0, "c1": 71.0, "c2": 51.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If he has c0 g of wax and right now he just needs c1 gTotal how many grams of wax do the feathers require?", "answer": [574.0], "response": "def Problem(c0, c1):\n    #c0 is the amount of wax he has\n    wax_available = c0\n\n    #c1 is the amount of wax he needs\n    wax_needed = c1\n\n    #The amount of wax required can be calculated by subtracting the amount of wax he has from the amount of wax he needs\n    wax_required = wax_needed - wax_available\n\n    return wax_required", "mapping": {"c0": 557.0, "c1": 17.0}}
{"question": "Jerry had c0 books and c1 action figures on a shelf in his room. Later he added c2 more action figures to the shelf.How many more books than action figures were on his shelf?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 books and c1 action figures on a shelf in his room\n    books = c0\n    action_figures_before = c1\n\n    #Later he added c2 more action figures to the shelf\n    added = c2\n\n    #The number of action figures on the shelf now can be calculated by adding the original number of action figures and the number of action figures added\n    action_figures_now = action_figures_before + added\n\n    #The number of books more than action figures on the shelf can be calculated by subtracting the number of action figures on the shelf from the number of books on the shelf\n    more_books = books - action_figures_now\n\n    return more_books", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 2.0}}
{"question": "Matthew gave c0 crackers to each his friends. If he had c1 crackersHow many friends did he give crackers to?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Matthew gave c0 crackers to each of his friends\n    crackers_per_friend = c0\n\n    #Matthew had c1 crackers in total\n    total_crackers = c1\n\n    #The number of friends Matthew gave crackers to can be calculated by dividing the total number of crackers by the number of crackers he gave to each friend\n    num_friends = total_crackers // crackers_per_friend\n\n    return num_friends", "mapping": {"c0": 6.0, "c1": 36.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games.How many more games does Katie have than her friends?", "answer": [62.0], "response": "def Problem(c0, c1, c2):\n    #Katie had c0 new games and c1 old games\n    katie_new = c0\n    katie_old = c1\n\n    #Her friends had c2 new games\n    friends_new = c2\n\n    #Katie has c0 + c1 games in total\n    katie_total = katie_new + katie_old\n\n    #Her friends have c2 games in total\n    friends_total = friends_new\n\n    #The difference between the number of games Katie has and her friends have can be calculated by subtracting the number of games her friends have from the number of games Katie has\n    difference = katie_total - friends_total\n\n    return difference", "mapping": {"c0": 57.0, "c1": 39.0, "c2": 34.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 more children got on the bus.How many children are on the bus now?", "answer": [64.0], "response": "def children_on_bus(c0, c1):\n    #initially there were c0 children on the bus\n    initial_children = c0\n    \n    #c1 more children got on the bus\n    additional_children = c1\n    \n    #total number of children on the bus now is the sum of initial children and additional children\n    total_children = initial_children + additional_children\n    \n    return total_children", "mapping": {"c0": 26.0, "c1": 38.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles.How many marbles does he have now?", "answer": [28.0], "response": "def Problem(c0, c1):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh found c1 marbles\n    found = c1\n\n    #The number of marbles Josh has now can be calculated by adding the number of marbles he found to the original number of marbles he had\n    total_now = original + found\n\n    return total_now", "mapping": {"c0": 21.0, "c1": 7.0}}
{"question": "Jake brought c0 balloons to the park. If Jake brought c1 more balloons than the number of balloons that Allan broughtHow many balloons did Allan bring to the park?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jake brought c0 balloons to the park\n    jake = c0\n\n    #Jake brought c1 more balloons than Allan\n    jake_more = c1\n\n    #Let's assume Allan brought x balloons\n    allan = x\n\n    #The total number of balloons at the park is the sum of the balloons Jake and Allan brought\n    total = jake + allan\n\n    #We know that Jake brought c1 more balloons than Allan, so we can set up an equation:\n    #jake = allan + c1\n    #We can solve for allan:\n    allan = jake - c1\n\n    return allan", "mapping": {"c0": 6.0, "c1": 4.0}}
{"question": "At the arcade Dave had won c0 tickets and lost c1 tickets. If he used c2 to buy some toysHow many tickets did Dave have left?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 tickets\n    original_tickets = c0\n\n    #Dave lost c1 tickets\n    lost_tickets = c1\n\n    #Dave used c2 tickets to buy some toys\n    used_tickets = c2\n\n    #The number of tickets Dave has left can be calculated by subtracting the number of lost tickets and used tickets from the original number of tickets\n    tickets_left = original_tickets - lost_tickets - used_tickets\n\n    return tickets_left", "mapping": {"c0": 14.0, "c1": 2.0, "c2": 10.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home. An additional c2 kids from outside the county attended the camp.About how many kids are in Lawrence county?", "answer": [1201565.0], "response": "def Problem(c0, c1, c2):\n    #c0 kids from Lawrence county go to camp\n    campers = c0\n\n    #the other c1 kids stay home\n    stay_home = c1\n\n    #An additional c2 kids from outside the county attended the camp\n    outside_campers = c2\n\n    #The total number of kids in Lawrence county can be calculated by adding the number of campers, the number of kids who stayed home, and the number of outside campers\n    total_kids = campers + stay_home + outside_campers\n\n    return total_kids", "mapping": {"c0": 610769.0, "c1": 590796.0, "c2": 22.0}}
{"question": "Edward had $ c0. He spent $ 16.How much money does Edward have now?", "answer": [2.0], "response": "def Problem(c0):\n    #Edward originally had c0 dollars\n    edward_original = c0\n\n    #Edward spent 16 dollars\n    spent = 16\n\n    #The amount of money Edward has now can be calculated by subtracting the amount he spent from the original amount he had\n    edward_now = edward_original - spent\n\n    return edward_now", "mapping": {"c0": 18.0}}
{"question": "For Gwen's birthday she received c0 dollars from her dad. Her mom gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her dad than she did from her mom?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her dad\n    dad = c0\n\n    #Gwen's mom gave her c1 more dollars\n    mom = c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The total amount of money Gwen has now can be calculated by adding the amount she received from her dad and mom, and then subtracting the amount she spent\n    total_now = dad + mom - spent\n\n    #The difference between the amount Gwen received from her dad and mom can be calculated by subtracting the amount she received from her mom from the amount she received from her dad\n    difference = dad - mom\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 6.0}}
{"question": "Robin's hair was c0 inches long. It grew by c1 inches. Then he cut off c2 inches.How long is his hair now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Robin's hair was originally c0 inches long\n    original_length = c0\n\n    #Robin's hair grew by c1 inches\n    grew = c1\n\n    #Robin cut off c2 inches from his hair\n    cut = c2\n\n    #The length of Robin's hair now can be calculated by adding the amount it grew and subtracting the amount that was cut off from the original length\n    length_now = original_length + grew - cut\n\n    return length_now", "mapping": {"c0": 14.0, "c1": 8.0, "c2": 20.0}}
{"question": "Edward spent $ c0 to buy c1 books each book costing him the same amount of money. Now he has $ 6.How much did Edward have before he spent his money?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars to buy c1 books\n    spent = c0\n\n    #Each book costs the same amount of money, so the total cost of the books is c0\n    total_cost = c1 * spent\n\n    #Now Edward has $6, so we can calculate how much money he had before he spent his money by adding the total cost of the books to $6\n    before_spending = total_cost + 6\n\n    return before_spending", "mapping": {"c0": 16.0, "c1": 92.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home. An additional c2 kids from outside the county attended the camp.How many kids in total attended the camp?", "answer": [458988.0], "response": "def total_attendees(c0, c1, c2):\n    #c0 kids from Lawrence county go to camp\n    lawrence_county = c0\n\n    #c1 kids stay home\n    stay_home = c1\n\n    #c2 kids from outside the county attended the camp\n    outside_county = c2\n\n    #The total number of kids who attended the camp can be calculated by adding the number of kids from Lawrence county, the number of kids who stayed home, and the number of kids from outside the county\n    total = lawrence_county + stay_home + outside_county\n\n    return total", "mapping": {"c0": 34044.0, "c1": 134867.0, "c2": 424944.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 pastries and c3 cakesHow many more cakes than pastries did baker sell?", "answer": [89.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes = c0\n    pastries = c1\n\n    #Baker sold c2 pastries and c3 cakes\n    sold_pastries = c2\n    sold_cakes = c3\n\n    #The difference between the number of cakes sold and pastries sold can be calculated by subtracting the number of pastries sold from the number of cakes sold\n    difference = sold_cakes - sold_pastries\n\n    return difference", "mapping": {"c0": 14.0, "c1": 153.0, "c2": 8.0, "c3": 97.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many trees does she have left?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Haley initially had c1 trees\n    initial_trees = c1\n\n    #After the typhoon, c0 trees died\n    dead_trees = c0\n\n    #The number of trees Haley has left can be calculated by subtracting the number of dead trees from the initial number of trees\n    trees_left = initial_trees - dead_trees\n\n    return trees_left", "mapping": {"c0": 2.0, "c1": 12.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many more salty cookies than sweet cookies did he eat?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies\n    sweet_cookies = c0\n\n    #Paco had c1 salty cookies\n    salty_cookies = c1\n\n    #Paco ate c2 sweet cookies\n    sweet_cookies_eaten = c2\n\n    #Paco ate c3 salty cookies\n    salty_cookies_eaten = c3\n\n    #Paco has c0 - c2 sweet cookies left\n    sweet_cookies_left = sweet_cookies - sweet_cookies_eaten\n\n    #Paco has c1 - c3 salty cookies left\n    salty_cookies_left = salty_cookies - salty_cookies_eaten\n\n    #Paco ate c3 - c2 more salty cookies than sweet cookies\n    more_salty_cookies_eaten = salty_cookies_eaten - sweet_cookies_eaten\n\n    return more_salty_cookies_eaten", "mapping": {"c0": 8.0, "c1": 6.0, "c2": 20.0, "c3": 34.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many more bottles of regular soda than diet soda did they have?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #The grocery store had c0 bottles of regular soda\n    regular_soda = c0\n\n    #The grocery store had c1 bottles of diet soda\n    diet_soda = c1\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 79.0, "c1": 53.0, "c2": 42.0}}
{"question": "Carol was sending out birthday invitations to c0 friends. She bought c1 packs each one having the same number of invitations.How many invitations are in each pack?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Carol is sending out birthday invitations to c0 friends\n    friends = c0\n\n    #She bought c1 packs of invitations\n    packs = c1\n\n    #The number of invitations in each pack can be calculated by dividing the total number of invitations by the number of packs\n    invitations_per_pack = friends/packs\n\n    return invitations_per_pack", "mapping": {"c0": 12.0, "c1": 3.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many apples does Jake have?", "answer": [11.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Jake has c0 fewer peaches and c1 more apples than Steven\n    jake_peaches = steven_peaches - c0\n    jake_apples = steven_apples + c1\n\n    #The number of apples Jake has can be calculated by using the jake_apples variable\n    return jake_apples", "mapping": {"c0": 13.0, "c1": 3.0, "c2": 9.0, "c3": 8.0}}
{"question": "Josh had c0 marbles in his collection. Jack gave him c1 marbles.How many marbles does Josh have now?", "answer": [42.0], "response": "def Problem(c0, c1):\n    #Josh originally had c0 marbles\n    josh_original = c0\n\n    #Jack gave him c1 marbles\n    jack_gave = c1\n\n    #The number of marbles Josh has now can be calculated by adding the number of marbles Jack gave to the original number of marbles Josh had.\n    josh_now = josh_original + jack_gave\n\n    return josh_now", "mapping": {"c0": 22.0, "c1": 20.0}}
{"question": "Faye had c0 packs of pencils each one having c1 pencils. She was placing her pencils into rows with c2 pencils in each row.How many pencils does she have?", "answer": [186.0], "response": "def Problem(c0, c1, c2):\n    #Faye had c0 packs of pencils, each pack having c1 pencils\n    total_pencils = c0 * c1\n\n    #Faye is placing her pencils into rows with c2 pencils in each row\n    rows = total_pencils // c2\n\n    #The total number of pencils Faye has can be calculated by multiplying the number of rows by the number of pencils in each row\n    total_now = rows * c2\n\n    return total_now", "mapping": {"c0": 31.0, "c1": 6.0, "c2": 19.0}}
{"question": "Jake has c0 more apples and c1 fewer peaches than Steven. Steven has c2 peaches and c3 apples.How many peaches does Jake have?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Jake has c0 more apples than Steven\n    jake_apples = steven_apples + c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = steven_peaches - c1\n\n    #The number of peaches Jake has can be calculated by using the value of jake_peaches\n    return jake_peaches", "mapping": {"c0": 84.0, "c1": 10.0, "c2": 13.0, "c3": 52.0}}
{"question": "Rebecca wants to split a collection of eggs into c0 groups. Rebecca has c1 eggs and c2 marbles.How many eggs will each group have?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca has c1 eggs\n    eggs = c1\n\n    #Rebecca wants to split the eggs into c0 groups\n    groups = c0\n\n    #Rebecca also has c2 marbles, which we don't need for this problem\n\n    #The number of eggs each group will have can be calculated by dividing the total number of eggs by the number of groups\n    eggs_per_group = eggs // groups\n\n    return eggs_per_group", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 6.0}}
{"question": "Jack received c0 emails and sent c1 letters in the morning. He then received c2 emails and sent c3 letters in the afternoon.How many emails did Jack send in the day?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    received = c0 + c2\n\n    #Jack sent c1 letters in the morning and c3 letters in the afternoon\n    sent = c1 + c3\n\n    #The number of emails Jack sent in the day can be calculated by subtracting the number of letters he sent from the total number of emails he received\n    emails_sent = received - sent\n\n    return emails_sent", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 6.0, "c3": 8.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of reading homework than biology homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading = c1\n\n    #Rachel had to complete c2 more pages of biology homework than reading homework\n    biology = reading + c2\n\n    #The difference between the number of pages of reading homework and biology homework can be calculated by subtracting the number of pages of biology homework from the number of pages of reading homework\n    difference = reading - biology\n\n    return difference", "mapping": {"c0": 7.0, "c1": 11.0, "c2": 8.0}}
{"question": "Dan has $ c0. He bought some candy bar for $ c1 each one costing $ 3.How many candy bar did he buy?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Each candy bar costs c1 dollars\n    candy_bar_cost = 3\n\n    #The number of candy bars Dan bought can be calculated by dividing the amount of money he spent on candy bars by the cost of each candy bar\n    candy_bars_bought = (dan_money - c0) / candy_bar_cost\n\n    return candy_bars_bought", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie, c1 packs of cake and c2 packs of chocolate.How many packs of groceries did she buy in all?", "answer": [42.0], "response": "def total_packs(c0, c1, c2):\n    #Lucy bought c0 packs of cookie\n    cookies = c0\n\n    #Lucy bought c1 packs of cake\n    cakes = c1\n\n    #Lucy bought c2 packs of chocolate\n    chocolates = c2\n\n    #The total number of packs of groceries Lucy bought can be calculated by adding the number of packs of cookies, cakes, and chocolates\n    total = cookies + cakes + chocolates\n\n    return total", "mapping": {"c0": 4.0, "c1": 22.0, "c2": 16.0}}
{"question": "The school has c0 grades and each grade has c1 studentsHow many students were there in total?", "answer": [22800.0], "response": "def total_students(c0, c1):\n    #calculate the total number of students by multiplying the number of grades with the number of students in each grade\n    total = c0 * c1\n    return total", "mapping": {"c0": 304.0, "c1": 75.0}}
{"question": "The cave is c0 feet deep and they are already at c1 feet. If they are travelling at speed of c2 How much farther until they reach the end of the cave?", "answer": [369.0], "response": "def Problem(c0, c1, c2):\n    #The cave is c0 feet deep\n    cave_depth = c0\n\n    #They are already at c1 feet\n    current_depth = c1\n\n    #They are travelling at speed of c2\n    speed = c2\n\n    #The distance they still need to travel can be calculated by subtracting the current depth from the cave depth\n    distance_left = cave_depth - current_depth\n\n    #The time it will take to travel the remaining distance can be calculated by dividing the distance left by the speed\n    time_left = distance_left / speed\n\n    return time_left", "mapping": {"c0": 1218.0, "c1": 849.0, "c2": 17.0}}
{"question": "Bobby had c0 pieces of candy. He ate some pieces of candy. If he has c1 pieces of candy leftHow many pieces of candy did Bobby eat?", "answer": [12.0], "response": "def Problem(c0, c1):\n    #Bobby originally had c0 pieces of candy\n    bobby_original = c0\n\n    #After eating some pieces of candy, Bobby now has c1 pieces of candy left\n    bobby_now = c1\n\n    #The number of pieces of candy Bobby ate can be calculated by subtracting the number of pieces of candy he has now from the original number of pieces of candy he had.\n    ate = bobby_original - bobby_now\n\n    return ate", "mapping": {"c0": 32.0, "c1": 20.0}}
{"question": "Baker sold c0 cakes. If he had made c1 cakes initiallyHow many more cakes did baker make than those he sold?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #Baker made c1 cakes initially\n    initial = c1\n\n    #Baker sold c0 cakes\n    sold = c0\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of cakes sold from the initial number of cakes made\n    made_more = initial - sold\n\n    return made_more", "mapping": {"c0": 8.0, "c1": 40.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many visited the Buckingham palace before that day?", "answer": [522.0], "response": "def visitors_before(c0, c1, c2):\n    #The total number of visitors in the past three days is the sum of c0, c1, and c2\n    total_visitors = c0 + c1 + c2\n\n    #The number of visitors before that day can be calculated by subtracting c0 from the total number of visitors in the past three days\n    visitors_before = total_visitors - c0\n\n    return visitors_before", "mapping": {"c0": 92.0, "c1": 419.0, "c2": 103.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If there were c1 visitors on that dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [566.0], "response": "def visitors_difference(c0, c1):\n    # c0 visitors came to the Buckingham palace on the previous day\n    previous_day_visitors = c0\n\n    # c1 visitors came to the Buckingham palace on the current day\n    current_day_visitors = c1\n\n    # The difference in visitors can be calculated by subtracting the number of visitors on the previous day from the number of visitors on the current day\n    difference = current_day_visitors - previous_day_visitors\n\n    return difference", "mapping": {"c0": 100.0, "c1": 666.0}}
{"question": "In Haley's class c0 are boys who love to play marbles. If Haley has c1 marbles and wants to keep c2 marbles for herselfHow many will each of the boys receive?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Haley has c1 marbles and wants to keep c2 marbles for herself\n    haley_keeps = c2\n\n    #The number of marbles that will be distributed among the boys can be calculated by subtracting the number of marbles Haley wants to keep from the total number of marbles she has\n    marbles_to_distribute = c1 - haley_keeps\n\n    #The number of boys who love to play marbles is c0\n    boys = c0\n\n    #Each boy will receive an equal number of marbles, so we can divide the total number of marbles to distribute by the number of boys\n    marbles_per_boy = marbles_to_distribute / boys\n\n    return marbles_per_boy", "mapping": {"c0": 4.0, "c1": 23.0, "c2": 15.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many crackers did each person eat?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Matthew had c0 crackers\n    crackers = c0\n\n    #Matthew had c1 cakes\n    cakes = c1\n\n    #Matthew gave equal numbers of crackers and cakes to his c2 friends\n    friends = c2\n\n    #The total number of crackers and cakes that Matthew gave to his friends is equal to the sum of crackers and cakes\n    total = crackers + cakes\n\n    #Each person ate an equal number of crackers and cakes, so the total number of crackers and cakes divided by the number of friends is the number of crackers and cakes each person ate\n    each_person = total / friends\n\n    #Since we only want to know the number of crackers each person ate, we can just return that value\n    return each_person", "mapping": {"c0": 22.0, "c1": 34.0, "c2": 11.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from each of her trees. Now the trees have a total c2 apples still on them.How many apples were there on all trees initially?", "answer": [33.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Rachel has c0 apple trees\n    trees = c0\n\n    #She picked c1 apples from each tree\n    picked = c1\n\n    #The total number of apples she picked can be calculated by multiplying the number of trees by the number of apples picked from each tree\n    total_picked = trees * picked\n\n    #Now the trees have a total of c2 apples still on them\n    remaining = c2\n\n    #The number of apples there were on all trees initially can be calculated by adding the total number of apples picked to the number of remaining apples on the trees\n    initial = total_picked + remaining\n\n    return initial", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 9.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour.How many more cups of sugar than cups of flour does she need to add now?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs to add c0 - c2 more cups of flour\n    flour_needed = c0 - c2\n\n    #Mary needs to add c1 more cups of sugar\n    sugar_needed = c1\n\n    #The difference between the amount of sugar needed and the amount of flour needed is the answer\n    difference = sugar_needed - flour_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 4.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 school buses and a total of c2 students in the school. If all buses are fullHow many seats are in each bus?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 school buses\n    buses = c1\n\n    #There are c2 students in the school\n    students = c2\n\n    #If all buses are full, the total number of seats in all buses is equal to the number of buses multiplied by the number of seats in each bus\n    total_seats = buses * seats_per_bus\n\n    #The number of students that can fit in each bus can be calculated by dividing the total number of seats in all buses by the total number of students\n    seats_per_bus = total_seats / students\n\n    return seats_per_bus", "mapping": {"c0": 17.0, "c1": 46.0, "c2": 92.0}}
{"question": "For Gwen's birthday she received some dollars. She spent c0 dollars and has c1 dollars left with her.How much money did Gwen receive for her birthday?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Gwen received some dollars for her birthday\n    received = c0 + c1\n\n    return received", "mapping": {"c0": 8.0, "c1": 6.0}}
{"question": "Danny collects bottle caps. He lost c0 bottle caps at the park. Now he has c1 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [91.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Danny originally had some bottle caps\n    original = ?\n\n    #Danny lost c0 bottle caps at the park\n    lost = c0\n\n    #Now Danny has c1 bottle caps in his collection\n    now = c1\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of bottle caps he lost to the number of bottle caps he has now\n    original = lost + now\n\n    return original\n\n#To use the function, we need to provide the values for c0 and c1:\nprint(Problem(10, 25)) #output should be 35", "mapping": {"c0": 66.0, "c1": 25.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If jill has c2 peachesHow many peaches does Jake have?", "answer": [17.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jill has c2 peaches\n    jill = c2\n\n    #Steven has c1 more peaches than Jill\n    steven = jill + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake = steven - c0\n\n    return jake", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 5.0}}
{"question": "During summer break c0 kids from Lawrence county stay home and the other c1 kids go to camp.About how many kids are in Lawrence county?", "answer": [1363293.0], "response": "def Problem(c0, c1):\n    #The total number of kids in Lawrence county can be calculated by adding the number of kids who stay home and the number of kids who go to camp\n    total_kids = c0 + c1\n\n    #Return the total number of kids in Lawrence county\n    return total_kids", "mapping": {"c0": 907611.0, "c1": 455682.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many books were on his shelf in all?", "answer": [19.0], "response": "def total_books(c0, c1, c2):\n    # Jerry had c0 action figures and c1 books on a shelf in his room\n    initial_books = c1\n\n    # Later he added c2 more books to the shelf\n    added_books = c2\n\n    # Total number of books on the shelf can be calculated by adding initial books and added books\n    total = initial_books + added_books\n\n    return total", "mapping": {"c0": 8.0, "c1": 9.0, "c2": 10.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many storks are sitting on the fence?", "answer": [8.0], "response": "def storks_on_fence(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total_before = c0 + c1\n\n    #number of storks that came to join them\n    new_storks = c2\n\n    #total number of storks sitting on the fence now\n    storks_now = c1 + new_storks\n\n    return storks_now", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 2.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many more balloons did Allan have than Jake in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Jake bought c2 more balloons at the park\n    jake_now = jake + c2\n\n    #The difference in the number of balloons Allan and Jake have in the park can be calculated by subtracting the number of balloons Jake has now from the number of balloons Allan has\n    difference = allan - jake_now\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 3.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many pencils does she have?", "answer": [76.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c0 rows of pencils and crayons\n    rows = c0\n\n    #Each row has c1 pencils and c2 crayons\n    pencils_per_row = c1\n\n    #The total number of pencils Faye has can be calculated by multiplying the number of rows by the number of pencils per row\n    total_pencils = rows * pencils_per_row\n\n    return total_pencils", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 27.0}}
{"question": "The Razorback t-shirt shop sells each t-shirt for $ c0 dollars. During the Arkansas and Texas tech game they increased the prices by $ c1 per t-shirt and sold c2 t-shirts.How much money did they make from selling the t-shirts?", "answer": [5852.0], "response": "def Problem(c0, c1, c2):\n    #each t-shirt is sold for c0 dollars\n    price_per_tshirt = c0\n\n    #during the game, the price increased by c1 dollars per t-shirt\n    price_increase = c1\n\n    #they sold c2 t-shirts\n    num_tshirts_sold = c2\n\n    #the total amount of money made can be calculated by multiplying the price per t-shirt (after the increase) by the number of t-shirts sold\n    total_money = (price_per_tshirt + price_increase) * num_tshirts_sold\n\n    return total_money", "mapping": {"c0": 201.0, "c1": 217.0, "c2": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles does Doug have now?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Ed lost c1 of his marbles at the playground\n    ed_now = ed - c1\n\n    #If Ed had c2 marbles, Doug must have had c2 - c0 - c1 marbles\n    doug_now = c2 - c0 - c1\n\n    return doug_now", "mapping": {"c0": 12.0, "c1": 20.0, "c2": 17.0}}
{"question": "Lawrence county has c0 kids. During summer break c1 kids stay home and the rest go to camp.How many kids go to the camp during the break?", "answer": [38608.0], "response": "def kids_at_camp(c0, c1):\n    #calculate the number of kids staying home\n    staying_home = c1\n\n    #calculate the number of kids going to camp\n    going_to_camp = c0 - staying_home\n\n    return going_to_camp", "mapping": {"c0": 313473.0, "c1": 274865.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a t-shirt cost than a jersey?", "answer": [30.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling jerseys\n    jersey_revenue = c3 * c0\n\n    #calculate the total revenue from selling t-shirts\n    tshirt_revenue = c2 * c1\n\n    #calculate the difference in revenue between a t-shirt and a jersey\n    difference = tshirt_revenue - jersey_revenue\n\n    #calculate the difference in cost between a t-shirt and a jersey\n    cost_difference = c1 - c0\n\n    #calculate how many more times expensive a t-shirt is compared to a jersey\n    times_more_expensive = difference / cost_difference\n\n    return times_more_expensive", "mapping": {"c0": 210.0, "c1": 240.0, "c2": 177.0, "c3": 23.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 6.How much money did he spend buying the candy bar and chocolate?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 6 dollars\n    chocolate_price = 6\n\n    #The total amount of money Dan spent can be calculated by adding the price of the candy bar and the chocolate\n    total_spent = candy_price + chocolate_price\n\n    return total_spent", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many action figures were on his shelf in all?", "answer": [10.0], "response": "def total_action_figures(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures_before = c0\n\n    #Later he added c2 more action figures to the shelf\n    added_action_figures = c2\n\n    #The total number of action figures on the shelf can be calculated by adding the original number of action figures and the added action figures\n    total_action_figures = action_figures_before + added_action_figures\n\n    return total_action_figures", "mapping": {"c0": 4.0, "c1": 22.0, "c2": 6.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and some more cups of flour. She already put in c1 cups of flour. If she still needs to add c2 more cups of flourHow many cups of flour did the recipe require?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of sugar and some more cups of flour\n    sugar = c0\n\n    #Mary already put in c1 cups of flour\n    flour_before = c1\n\n    #Mary still needs to add c2 more cups of flour\n    flour_needed = c2\n\n    #The total amount of flour required by the recipe can be calculated by adding the amount of flour Mary already put in with the amount of flour she still needs to add\n    flour_total = flour_before + flour_needed\n\n    return flour_total", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 6.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker sell?", "answer": [24.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes = c0\n    pastries = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    sold_cakes = c2\n    sold_pastries = c3\n\n    #The difference between the number of pastries sold and the number of cakes sold can be calculated by subtracting the number of cakes sold from the number of pastries sold\n    pastry_cake_diff = sold_pastries - sold_cakes\n\n    return pastry_cake_diff", "mapping": {"c0": 54.0, "c1": 143.0, "c2": 68.0, "c3": 92.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many birds and storks are sitting on the fence?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds and c1 storks were sitting on the fence\n    birds = c0\n    storks = c1\n\n    #c2 more birds came to join them\n    new_birds = c2\n\n    #The total number of birds and storks sitting on the fence can be calculated by adding the original number of birds and storks with the new birds that joined them\n    total_birds = birds + new_birds\n    total_storks = storks\n\n    return total_birds, total_storks", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 5.0}}
{"question": "Julia played tag with c0 kids on monday and c1 kids on tuesday. She played cards wtih c2 kids on wednesday.How many kids did she play tag with altogether?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday\n    monday = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday = c1\n\n    #Julia played cards with c2 kids on wednesday\n    wednesday = c2\n\n    #The total number of kids Julia played tag with can be calculated by adding the number of kids she played tag with on Monday and Tuesday\n    total = monday + tuesday\n\n    return total", "mapping": {"c0": 7.0, "c1": 13.0, "c2": 20.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes per day.How many days will it take to fill c2 drums of grapes?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #each day, c0 pickers fill c1 drums of grapes\n    drums_per_day = c0 * c1\n\n    #to fill c2 drums of grapes, it will take c2 divided by the number of drums filled per day\n    days_needed = c2 / drums_per_day\n\n    return days_needed", "mapping": {"c0": 36.0, "c1": 8.0, "c2": 240.0}}
{"question": "Bobby ate c0 pieces of candy. If he initially had c1 pieces of candyHow many pieces of candy does he still have left?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Bobby initially had c1 pieces of candy\n    initial = c1\n\n    #Bobby ate c0 pieces of candy\n    ate = c0\n\n    #The number of pieces of candy Bobby still has left can be calculated by subtracting the number of pieces he ate from the initial number of pieces he had\n    left = initial - ate\n\n    return left", "mapping": {"c0": 23.0, "c1": 30.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. Each seat can hold c1 people. If c2 seats are brokenHow many people can ride the Ferris wheel at the same time?", "answer": [120.0], "response": "def ferris_wheel_capacity(c0, c1, c2):\n    #calculate the number of working seats\n    working_seats = c0 - c2\n    \n    #calculate the maximum number of people that can ride at the same time\n    max_riders = working_seats * c1\n    \n    return max_riders", "mapping": {"c0": 18.0, "c1": 15.0, "c2": 10.0}}
{"question": "Robin's hair was c0 inches long. He cut off c1 inches. Then it again grew by c2 inches.How long is his hair now?", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #Robin's hair was originally c0 inches long\n    original_length = c0\n\n    #Robin cut off c1 inches from his hair\n    cut_off = c1\n\n    #Robin's hair grew back by c2 inches\n    grew_back = c2\n\n    #The length of Robin's hair now can be calculated by subtracting the length he cut off and adding the length he grew back to the original length\n    length_now = original_length - cut_off + grew_back\n\n    return length_now", "mapping": {"c0": 16.0, "c1": 11.0, "c2": 12.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many chapters did he read per day?", "answer": [44.0], "response": "def Problem(c0, c1, c2):\n    #The book had c0 pages\n    pages = c0\n\n    #The book had c1 chapters\n    chapters = c1\n\n    #It took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = pages / days\n\n    #The number of chapters Frank read per day can be calculated by dividing the total number of chapters by the number of days it took him to finish the book\n    chapters_per_day = chapters / days\n\n    return chapters_per_day", "mapping": {"c0": 193.0, "c1": 15.0, "c2": 660.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How far did the frog jump?", "answer": [15.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The grasshopper jumped c1 inches farther than the frog\n    frog = (c0 - c1)\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse = (frog - c2)\n\n    #The distance the frog jumped can be calculated by subtracting the distance the mouse jumped from the distance the grasshopper jumped\n    frog_jump = grasshopper - mouse\n\n    return frog_jump", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 44.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many bird families flew away for the winter?", "answer": [118.0], "response": "def bird_migration(c0, c1, c2):\n    #The total number of bird families that flew away can be calculated by adding the number of bird families that flew to Africa and the number of bird families that flew to Asia\n    flew_away = c1 + c2\n\n    return flew_away", "mapping": {"c0": 18.0, "c1": 38.0, "c2": 80.0}}
{"question": "Matthew had c0 crackers. He has c1 crackers left after he gave equal numbers of crackers to his c2 friends.How many crackers did each friend eat?", "answer": [6.0], "response": "def crackers_per_friend(c0, c1, c2):\n    #Matthew originally had c0 crackers\n    original = c0\n\n    #Matthew now has c1 crackers after giving equal numbers to his c2 friends\n    now = c1\n\n    #Matthew gave away original-now crackers in total\n    gave_away = original - now\n\n    #Each friend got an equal number of crackers, so divide the total number of crackers given away by the number of friends\n    per_friend = gave_away / c2\n\n    return per_friend", "mapping": {"c0": 23.0, "c1": 11.0, "c2": 2.0}}
{"question": "Rachel's tree had c0 apples. She picked c1 apples from her tree. Thereafter c2 new apples grew on the tree.How many apples are there on the tree now?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Rachel originally had c0 apples on her tree\n    original_apples = c0\n\n    #Rachel picked c1 apples from her tree\n    picked_apples = c1\n\n    #c2 new apples grew on the tree\n    new_apples = c2\n\n    #The number of apples on the tree now can be calculated by subtracting the number of picked apples from the original number of apples and then adding the number of new apples\n    total_apples = original_apples - picked_apples + new_apples\n\n    return total_apples", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 3.0}}
{"question": "Summer is almost here and most animals are migrating back to cooler countries. There are c0 bird families living near a mountain. If c1 new bird families joined themHow many bird families live near the mountain now?", "answer": [105.0], "response": "def bird_families(c0, c1):\n    # The original number of bird families is c0\n    original_families = c0\n    \n    # c1 new bird families joined them\n    new_families = c1\n    \n    # The total number of bird families now is the sum of original and new families\n    total_families = original_families + new_families\n    \n    return total_families", "mapping": {"c0": 87.0, "c1": 18.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 wrappers and c3 bottle caps in his collection.How many more wrappers than bottle caps does danny have now?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 wrappers and c3 bottle caps\n    bottle_caps_now = c3\n    wrappers_now = c2\n\n    #The number of wrappers Danny has now minus the number of bottle caps Danny has now gives the difference between the number of wrappers and bottle caps Danny has\n    difference = wrappers_now - bottle_caps_now\n\n    return difference", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 67.0, "c3": 35.0}}
{"question": "Melissa scored a total of c0 points in c1 games scoring the same for each game.How many points did she score in each game?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa scored a total of c0 points\n    total_points = c0\n\n    #Melissa played c1 games\n    num_games = c1\n\n    #To find out how many points Melissa scored in each game, we can divide the total points by the number of games played\n    points_per_game = total_points / num_games\n\n    return points_per_game", "mapping": {"c0": 91.0, "c1": 13.0}}
{"question": "Robin's hair was c0 inches long. He cut off some inches of her hair. If his hair is now c1 inches longHow much of his hair did he cut?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Robin's hair was originally c0 inches long\n    original_length = c0\n\n    #Robin's hair is now c1 inches long\n    current_length = c1\n\n    #The amount of hair Robin cut can be calculated by subtracting the current length from the original length\n    cut_amount = original_length - current_length\n\n    return cut_amount", "mapping": {"c0": 17.0, "c1": 13.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many pastries would baker still have?", "answer": [27.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries\n    pastries = c0\n\n    #Baker made c1 cakes\n    cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of pastries Baker would still have can be calculated by subtracting the number of pastries sold from the original number of pastries\n    pastries_left = pastries - sold_pastries\n\n    return pastries_left", "mapping": {"c0": 56.0, "c1": 124.0, "c2": 104.0, "c3": 29.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in each classroom in the school. If there are c2 seats on each school busHow many buses are needed to take the trip?", "answer": [737.0], "response": "def buses_needed(c0, c1, c2):\n    #calculate the total number of students in the school\n    total_students = c0 * c1\n    \n    #calculate the number of buses needed by dividing the total number of students by the number of seats on each bus and rounding up to the nearest integer\n    buses = math.ceil(total_students/c2)\n    \n    return buses", "mapping": {"c0": 67.0, "c1": 66.0, "c2": 6.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts?", "answer": [8265.0], "response": "def Problem(c0, c1, c2):\n    #The Razorback t-shirt shop makes c0 dollars off each t-shirt sold\n    price_per_tshirt = c0\n\n    #They sold a total of c1 t-shirts during both games\n    total_tshirts_sold = c1\n\n    #They sold c2 t-shirts during the Arkansas game\n    tshirts_sold_at_arkansas_game = c2\n\n    #The number of t-shirts sold during the Texas Tech game can be calculated by subtracting the number of t-shirts sold during the Arkansas game from the total number of t-shirts sold\n    tshirts_sold_at_texas_tech_game = total_tshirts_sold - tshirts_sold_at_arkansas_game\n\n    #The total amount of money made from selling the t-shirts can be calculated by multiplying the number of t-shirts sold at each game by the price per t-shirt and adding them together\n    total_money_made = (tshirts_sold_at_arkansas_game * price_per_tshirt) + (tshirts_sold_at_texas_tech_game * price_per_tshirt)\n\n    return total_money_made", "mapping": {"c0": 87.0, "c1": 95.0, "c2": 47.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds were sitting on the fence\n    birds = c0\n\n    #c1 more birds came to join them\n    more_birds = c1\n\n    #c2 more storks came to join them\n    more_storks = c2\n\n    #The total number of birds on the fence now is the sum of the original number of birds and the additional birds\n    total_birds = birds + more_birds\n\n    #The total number of storks on the fence now is the sum of the additional storks\n    total_storks = more_storks\n\n    #The difference between the number of storks and the number of birds is the number of additional storks\n    more_storks_than_birds = total_storks - total_birds\n\n    return more_storks_than_birds", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 6.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 school buses. If all buses are fullHow many seats are in each bus?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 students in the school\n    students = c1\n\n    #There are c2 school buses\n    buses = c2\n\n    #If all buses are full, the total number of seats in all buses can be calculated by multiplying the number of buses by the number of seats in each bus\n    total_seats = buses * seats_per_bus\n\n    #The number of seats in each bus can be calculated by dividing the total number of seats by the number of students\n    seats_per_bus = total_seats // students\n\n    return seats_per_bus", "mapping": {"c0": 21.0, "c1": 98.0, "c2": 7.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many blocks did he use to build the tower and the house altogether?", "answer": [80.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    randy_blocks = c0\n\n    #Randy uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #Randy uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The total number of blocks Randy used to build the tower and the house can be calculated by adding the number of blocks used for the tower and the number of blocks used for the house\n    total_blocks = tower_blocks + house_blocks\n\n    return total_blocks", "mapping": {"c0": 58.0, "c1": 27.0, "c2": 53.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning chinese in all?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english every day\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese every day\n    chinese_hours = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total number of hours Ryan spends on learning chinese can be calculated by multiplying the number of hours he spends on learning chinese every day by the number of days he learns\n    total_chinese_hours = chinese_hours * days\n\n    return total_chinese_hours", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 6.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a jersey cost than a t-shirt?", "answer": [146.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts\n    tshirt_revenue = c0 * c2\n\n    #calculate the total revenue from selling jerseys\n    jersey_revenue = c1 * c3\n\n    #calculate the difference in revenue between a jersey and a t-shirt\n    difference = jersey_revenue - tshirt_revenue\n\n    return difference", "mapping": {"c0": 86.0, "c1": 232.0, "c2": 254.0, "c3": 43.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many wrappers did danny have at first?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    caps_found = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers in his collection\n    caps_now = c2\n    wrappers_now = c3\n\n    #Danny had some number of wrappers at first, which we'll call x\n    #He also had c1 bottle caps at first, but we don't need that information to solve the problem\n    x = wrappers_found + caps_found\n\n    #Now we can set up an equation to solve for x\n    #Danny now has c2 bottle caps and c3 wrappers, so the total number of caps and wrappers he has is c2 + c3\n    #We know that this total is equal to x plus the number of bottle caps he had at first (c1)\n    #So we can write: c2 + c3 = x + c1\n    #Solving for x, we get: x = c2 + c3 - c1\n    wrappers_first = c2 + c3 - c1\n\n    return wrappers_first", "mapping": {"c0": 66.0, "c1": 39.0, "c2": 16.0, "c3": 68.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died.How many more trees died in the typhoon than those that survived?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Haley originally grew c0 trees\n    trees_before = c0\n\n    #After the typhoon, c1 trees died\n    trees_died = c1\n\n    #The number of trees that survived can be calculated by subtracting the number of trees that died from the original number of trees\n    trees_survived = trees_before - trees_died\n\n    #The number of trees that died more than those that survived can be calculated by subtracting the number of trees that survived from the number of trees that died\n    more_died = trees_died - trees_survived\n\n    return more_died", "mapping": {"c0": 14.0, "c1": 9.0}}
{"question": "He has c0 apples more than Adam and Jackie together do. Adam and Jackie have c1 apples between them.How many apples does He have?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Adam and Jackie have c1 apples between them\n    aj = c1\n\n    #He has c0 apples more than Adam and Jackie together do\n    he_more = c0\n\n    #Let's assume He has x apples\n    x = 0\n\n    #We know that He has c0 more apples than Adam and Jackie together do\n    #So, x = aj + c0\n    x = aj + c0\n\n    return x", "mapping": {"c0": 9.0, "c1": 7.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 files and c3 apps left.How many more files than apps does he have left on the phone?", "answer": [22.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he now has c2 files and c3 apps left\n    apps_now = c3\n    files_now = c2\n\n    #The number of files more than apps that Dave has left on his phone can be calculated by subtracting the number of apps now from the number of files now\n    more_files = files_now - apps_now\n\n    return more_files", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 24.0, "c3": 2.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. If each group has c1 eggsHow many eggs does Rebecca have?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Rebecca wants to split a collection of eggs into groups of c0\n    groups = c0\n\n    #If each group has c1 eggs, then the total number of eggs can be calculated by multiplying the number of groups by the number of eggs in each group\n    total_eggs = groups * c1\n\n    return total_eggs", "mapping": {"c0": 11.0, "c1": 2.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon = c1\n\n    #The difference between the number of emails Jack received in the morning and afternoon can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning - afternoon\n\n    return difference", "mapping": {"c0": 10.0, "c1": 7.0, "c2": 17.0}}
{"question": "Adam could fit c0 action figures on each shelf in his room. His room has c1 shelves and c2 cabinets.How many total action figures could his shelves hold?", "answer": [44.0], "response": "def Problem(c0, c1, c2):\n    #Adam could fit c0 action figures on each shelf\n    per_shelf = c0\n\n    #Adam's room has c1 shelves\n    shelves = c1\n\n    #Adam's room has c2 cabinets\n    cabinets = c2\n\n    #The total number of action figures that Adam's shelves could hold can be calculated by multiplying the number of shelves by the number of action figures that can fit on each shelf\n    total_on_shelves = per_shelf * shelves\n\n    return total_on_shelves", "mapping": {"c0": 11.0, "c1": 4.0, "c2": 40.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and c1 packs of cake.How many more packs of cookie did she buy over cake?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Lucy bought c0 packs of cookie\n    cookie = c0\n\n    #Lucy bought c1 packs of cake\n    cake = c1\n\n    #The difference between the number of packs of cookie and cake can be calculated by subtracting the number of packs of cake from the number of packs of cookie\n    difference = cookie - cake\n\n    return difference", "mapping": {"c0": 10.0, "c1": 4.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese.How many more hours does he spend on learning english than he does on learning chinese?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #The difference between the hours Ryan spends on learning english and chinese can be calculated by subtracting the number of hours spent on learning chinese from the number of hours spent on learning english\n    difference = english_hours - chinese_hours\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many crunches did David do?", "answer": [45.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Zachary did c2 push-ups\n    zachary_pushups = c2\n\n    #Zachary did c3 crunches\n    zachary_crunches = c3\n\n    #David did c0 more push-ups than Zachary\n    david_pushups = zachary_pushups + c0\n\n    #David did c1 less crunches than Zachary\n    david_crunches = zachary_crunches - c1\n\n    #The number of crunches David did can be calculated by subtracting the number of crunches Zachary did from the number of crunches David did\n    crunches_david = david_crunches - zachary_crunches\n\n    return crunches_david", "mapping": {"c0": 40.0, "c1": 17.0, "c2": 34.0, "c3": 62.0}}
{"question": "The grasshopper and the frog had a jumping contest. The frog jumped c0 inches and the grasshopper jumped c1 inches.How much farther did the frog jump than the grasshopper?", "answer": [22.0], "response": "def jumping_contest(c0, c1):\n    #The frog jumped c0 inches\n    frog_jump = c0\n\n    #The grasshopper jumped c1 inches\n    grasshopper_jump = c1\n\n    #The difference between the frog's jump and the grasshopper's jump is the distance the frog jumped farther\n    distance_frog_jump_farther = frog_jump - grasshopper_jump\n\n    return distance_frog_jump_farther", "mapping": {"c0": 39.0, "c1": 17.0}}
{"question": "Paul had c0 books. After buying some in a garage sale he had c1 left.How many books did he buy?", "answer": [101.0], "response": "def Problem(c0, c1):\n    #Paul originally had c0 books\n    books_before = c0\n\n    #After buying some books in a garage sale, he now has c1 books\n    books_after = c1\n\n    #The number of books Paul bought can be calculated by subtracting the number of books he has now from the original number of books he had\n    bought = books_before - books_after\n\n    return bought", "mapping": {"c0": 50.0, "c1": 151.0}}
{"question": "If they are already at c0 feet and the cave is c1 feet deepHow much farther until they reach the end of the cave?", "answer": [103.0], "response": "def Problem(c0, c1):\n    #they are already at c0 feet\n    current_position = c0\n\n    #the cave is c1 feet deep\n    cave_depth = c1\n\n    #the distance they need to travel to reach the end of the cave can be calculated by subtracting their current position from the depth of the cave\n    distance_to_end = cave_depth - current_position\n\n    return distance_to_end", "mapping": {"c0": 659.0, "c1": 762.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games.How many new games do they have together?", "answer": [126.0], "response": "def Problem(c0, c1, c2):\n    #Katie had c0 new games\n    katie_new = c0\n\n    #Katie had c1 old games\n    katie_old = c1\n\n    #Katie and her friends have c0 plus c2 new games in total\n    total_new = katie_new + c2\n\n    return total_new", "mapping": {"c0": 78.0, "c1": 86.0, "c2": 48.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many marbles does he have now?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh lost c1 marbles\n    lost = c1\n\n    #Josh found c2 new marbles\n    found = c2\n\n    #The number of marbles Josh has now can be calculated by subtracting the number of marbles he lost and adding the number of marbles he found from the original number of marbles he had\n    now = original - lost + found\n\n    return now", "mapping": {"c0": 19.0, "c1": 11.0, "c2": 5.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added some more action figures to the shelf. If there are a total of c1 action figures on his shelf nowHow many action figures did he add to the shelf?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Jerry originally had c0 action figures on the shelf\n    original = c0\n\n    #Now there are c1 action figures on the shelf\n    now = c1\n\n    #The number of action figures Jerry added to the shelf can be calculated by subtracting the original number of action figures from the current number of action figures\n    added = now - original\n\n    return added", "mapping": {"c0": 4.0, "c1": 8.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from c2 of her trees. Now the tree has c3 apples still on it.How many apples did the tree have to begin with?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Rachel has c0 apple trees\n    apple_trees = c0\n\n    #Rachel picked c1 apples from c2 of her trees\n    picked_apples = c1\n    trees_picked_from = c2\n\n    #The total number of apples picked can be calculated by multiplying the number of trees picked from by the number of apples picked from each tree\n    total_picked = picked_apples * trees_picked_from\n\n    #The number of apples left on the tree can be calculated by subtracting the total number of picked apples from the original number of apples on the tree\n    apples_left = c3\n    original_apples = total_picked + apples_left\n\n    return original_apples", "mapping": {"c0": 52.0, "c1": 2.0, "c2": 1.0, "c3": 7.0}}
{"question": "We ordered c0 pizzas. Each pizza has c1 slices. If there are c2 of usHow many slices of pizza does each of us get if distributed equally?", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #We ordered c0 pizzas\n    pizzas = c0\n\n    #Each pizza has c1 slices\n    slices_per_pizza = c1\n\n    #There are c2 of us\n    people = c2\n\n    #The total number of slices of pizza is the number of pizzas multiplied by the number of slices per pizza\n    total_slices = pizzas * slices_per_pizza\n\n    #The number of slices each person gets is the total number of slices divided by the number of people\n    slices_per_person = total_slices / people\n\n    return slices_per_person", "mapping": {"c0": 9.0, "c1": 10.0, "c2": 2.0}}
{"question": "Jack received a total of c0 emails in the day. If he received c1 emails in the morning and some more in the afternoonHow many emails did Jack receive in the afternoon?", "answer": [2.0], "response": "def afternoon_emails(c0, c1):\n    # Jack received c0 emails in the day\n    total_emails = c0\n\n    # Jack received c1 emails in the morning\n    morning_emails = c1\n\n    # Jack received some more emails in the afternoon\n    afternoon_emails = total_emails - morning_emails\n\n    return afternoon_emails", "mapping": {"c0": 9.0, "c1": 7.0}}
{"question": "A grocery store had c0 bottles of diet soda and c1 bottles of regular soda.How many more bottles of regular soda than diet soda did they have?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #The grocery store had c0 bottles of diet soda\n    diet_soda = c0\n\n    #The grocery store had c1 bottles of regular soda\n    regular_soda = c1\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 19.0, "c1": 60.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the second chapter have than the third chapter?", "answer": [15.0], "response": "def Problem(c0, c1, c2, c3):\n    #The second chapter is c2 pages long\n    second_chapter = c2\n\n    #The third chapter is c3 pages long\n    third_chapter = c3\n\n    #The difference in pages between the second and third chapter can be calculated by subtracting the number of pages in the third chapter from the number of pages in the second chapter\n    difference = second_chapter - third_chapter\n\n    return difference", "mapping": {"c0": 3.0, "c1": 35.0, "c2": 18.0, "c3": 3.0}}
{"question": "Randy has c0 blocks. He uses some blocks to build a tower. If there are c1 blocks leftHow many blocks did he use to build the tower?", "answer": [25.0], "response": "def Problem(c0, c1):\n    #Randy originally had c0 blocks\n    blocks_before = c0\n\n    #After building the tower, there are c1 blocks left\n    blocks_after = c1\n\n    #The number of blocks Randy used to build the tower can be calculated by subtracting the number of blocks left from the original number of blocks\n    used = blocks_before - blocks_after\n\n    return used", "mapping": {"c0": 97.0, "c1": 72.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. c0 students suggested adding mashed potatoes while others suggested adding bacon to the menu. If c1 more students suggested adding bacon than those that suggested mashed potatoesHow many students suggested bacon?", "answer": [348.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 more students suggested adding bacon than those that suggested mashed potatoes\n    bacon_diff = c1\n\n    #The number of students who suggested bacon can be calculated by adding the number of students who suggested mashed potatoes with the difference in the number of students who suggested bacon and mashed potatoes\n    bacon = mashed_potatoes + bacon_diff\n\n    return bacon", "mapping": {"c0": 182.0, "c1": 166.0}}
{"question": "A waiter had c0 customers. After some left he got c1 new customers. If he still had c2 customersHow many customers left?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #After some customers left and some new customers arrived, the waiter now has c2 customers\n    current_customers = c2\n\n    #The number of customers who left can be calculated by subtracting the original number of customers from the current number of customers and then subtracting the number of new customers who arrived\n    left_customers = current_customers - original_customers - c1\n\n    return left_customers", "mapping": {"c0": 13.0, "c1": 4.0, "c2": 9.0}}
{"question": "Every day Ryan spends c0 hours on learning english and some more hours on learning chinese. If he spends a total of c1 hours on learning english and chinese everydayHow many hours does he spend on learning chinese?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends a total of c1 hours on learning english and chinese everyday\n    total_hours = c1\n\n    #The number of hours Ryan spends on learning chinese can be calculated by subtracting the number of hours he spends on learning english from the total number of hours he spends on learning both languages\n    chinese_hours = total_hours - english_hours\n\n    return chinese_hours", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "A book has c0 chapters across c1 pages. The second chapter is c2 pages long.How many pages are in the second chapter?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of pages per chapter\n    pages_per_chapter = c1 // c0\n\n    #calculate the starting page of the second chapter\n    second_chapter_start = pages_per_chapter + c2\n\n    #calculate the ending page of the second chapter\n    second_chapter_end = second_chapter_start + pages_per_chapter - 1\n\n    #calculate the number of pages in the second chapter\n    second_chapter_pages = second_chapter_end - second_chapter_start + 1\n\n    return second_chapter_pages", "mapping": {"c0": 2.0, "c1": 81.0, "c2": 68.0}}
{"question": "White t - shirts can be purchased in packages. If mom buys c0 packages which contain c1 white t - shirts in totalHow many white t - shirts does each package have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #mom bought c0 packages\n    packages = c0\n\n    #each package contains c1 white t-shirts\n    total_shirts = c1\n\n    #The number of white t-shirts in each package can be calculated by dividing the total number of white t-shirts by the number of packages\n    shirts_per_package = total_shirts / packages\n\n    return shirts_per_package", "mapping": {"c0": 28.0, "c1": 56.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker make?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries\n    pastries = c0\n\n    #Baker made c1 cakes\n    cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of cakes left after selling can be calculated by subtracting the number of cakes sold from the original number of cakes\n    cakes_left = cakes - sold_cakes\n\n    #The number of pastries left after selling can be calculated by subtracting the number of pastries sold from the original number of pastries\n    pastries_left = pastries - sold_pastries\n\n    #The difference between the number of cakes and pastries can be calculated by subtracting the number of pastries left from the number of cakes left\n    difference = cakes_left - pastries_left\n\n    return difference", "mapping": {"c0": 52.0, "c1": 84.0, "c2": 102.0, "c3": 94.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms.How much does she weigh now?", "answer": [51.0], "response": "def Problem(c0, c1):\n    #Jessie originally weighed c0 kilograms\n    weight_before = c0\n\n    #After jogging everyday, she lost c1 kilograms\n    weight_lost = c1\n\n    #Her current weight can be calculated by subtracting the weight she lost from her original weight\n    weight_now = weight_before - weight_lost\n\n    return weight_now", "mapping": {"c0": 71.0, "c1": 20.0}}
{"question": "Lawrence county has c0 kids. During summer break c1 kids go to camp and the rest stay home.How many kids stay home?", "answer": [268627.0], "response": "def kids_stay_home(c0, c1):\n    #c0 is the original number of kids in Lawrence county\n    #c1 is the number of kids who go to camp during summer break\n\n    #The number of kids who stay home can be calculated by subtracting the number of kids who go to camp from the original number of kids\n    stay_home = c0 - c1\n\n    return stay_home", "mapping": {"c0": 898051.0, "c1": 629424.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many files did he delete?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of apps and files he deleted can be calculated by subtracting the number of apps and files he has now from the original number of apps and files\n    apps_deleted = apps_before - apps_after\n    files_deleted = files_before - files_after\n\n    #The total number of files he deleted is the sum of the number of apps and files he deleted\n    total_deleted = apps_deleted + files_deleted\n\n    return total_deleted", "mapping": {"c0": 17.0, "c1": 21.0, "c2": 3.0, "c3": 7.0}}
{"question": "If you had c0 cookies and each bag has c1 cookiesHow many bags of cookies do you have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #calculate the number of bags needed to hold all the cookies\n    bags_needed = c0 // c1\n\n    #if there are any leftover cookies, add an extra bag\n    if c0 % c1 != 0:\n        bags_needed += 1\n\n    return bags_needed", "mapping": {"c0": 33.0, "c1": 11.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges will they have after c2 days of harvest?", "answer": [143550.0], "response": "def oranges_harvested(c0, c1, c2):\n    #each day they harvest c0 sacks of oranges\n    sacks_per_day = c0\n\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest for c2 days\n    days_harvested = c2\n\n    #total oranges harvested can be calculated by multiplying the number of sacks per day, the number of oranges per sack, and the number of days harvested\n    total_oranges = sacks_per_day * oranges_per_sack * days_harvested\n\n    return total_oranges", "mapping": {"c0": 66.0, "c1": 25.0, "c2": 87.0}}
{"question": "Nell collects baseball cards. She had c0 cards. She gave c1 of her cards to Jeff.How many cards does Nell have left?", "answer": [106.0], "response": "def remaining_cards(c0, c1):\n    # Nell originally had c0 cards\n    nell_cards = c0\n    \n    # Nell gave c1 cards to Jeff\n    nell_cards -= c1\n    \n    # Return the number of cards Nell has left\n    return nell_cards", "mapping": {"c0": 242.0, "c1": 136.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies yesterday and c1 raisin cookies and c2 chocolate chip cookies this morning.How many chocolate chip cookies did Helen bake?", "answer": [574.0], "response": "def Problem(c0, c1, c2):\n    #Helen baked c0 chocolate chip cookies yesterday\n    yesterday = c0\n\n    #Helen baked c1 raisin cookies and c2 chocolate chip cookies this morning\n    raisin = c1\n    today = c2\n\n    #The total number of chocolate chip cookies Helen baked can be calculated by adding the number of chocolate chip cookies she baked yesterday and today\n    chocolate_chip = yesterday + today\n\n    return chocolate_chip", "mapping": {"c0": 90.0, "c1": 51.0, "c2": 484.0}}
{"question": "There were c0 roses in the vase. Jessica cut some more roses from her flower garden which had a total of c1 roses. There are now c2 roses in the vase.How many roses are left in the garden?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_in_vase_before = c0\n\n    #Jessica cut some more roses from her flower garden which had a total of c1 roses\n    roses_cut = c1\n\n    #there are now c2 roses in the vase\n    roses_in_vase_now = c2\n\n    #The number of roses left in the garden can be calculated by subtracting the number of roses in the vase now from the sum of the original number of roses in the vase and the number of roses cut from the garden\n    roses_left_in_garden = roses_in_vase_before + roses_cut - roses_in_vase_now\n\n    return roses_left_in_garden", "mapping": {"c0": 13.0, "c1": 12.0, "c2": 21.0}}
{"question": "Jerry had some action figures on a shelf in his room. Later he added c0 more action figures to the shelf and removed c1 of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he have initially on the shelf?", "answer": [15.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jerry added c0 action figures to the shelf\n    added = c0\n\n    #Jerry removed c1 old action figures from the shelf\n    removed = c1\n\n    #The number of action figures on the shelf after the changes can be calculated by adding the number of added action figures and subtracting the number of removed action figures from the original number of action figures\n    now = c2\n    original = now - added + removed\n\n    return original", "mapping": {"c0": 2.0, "c1": 7.0, "c2": 10.0}}
{"question": "A book has c0 chapters across c1 pages. The first chapter is c2 pages long.How many pages are in the first chapter?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of pages per chapter\n    pages_per_chapter = c1 // c0\n\n    #calculate the number of pages in the first chapter\n    first_chapter_pages = c2 * pages_per_chapter\n\n    return first_chapter_pages", "mapping": {"c0": 2.0, "c1": 23.0, "c2": 10.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many more books did he sell than he bought?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 books\n    original_books = c0\n\n    #After selling some and buying new ones, he now has c2 books\n    current_books = c2\n\n    #He bought c1 new books\n    bought_books = c1\n\n    #The number of books he sold can be calculated by subtracting the current number of books from the original number of books, and then adding the number of books he bought\n    sold_books = original_books - current_books + bought_books\n\n    #The number of books he sold more than he bought can be calculated by subtracting the number of books he bought from the number of books he sold\n    more_sold = sold_books - bought_books\n\n    return more_sold", "mapping": {"c0": 21.0, "c1": 42.0, "c2": 15.0}}
{"question": "Allan and Jake brought c0 balloons to the park. If Allan brought c1 balloonsHow many balloons did Jake bring to the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan and Jake brought c0 balloons to the park\n    allan_jake = c0\n\n    #Allan brought c1 balloons\n    allan = c1\n\n    #The number of balloons Jake brought can be calculated by subtracting the number of balloons Allan brought from the total number of balloons Allan and Jake brought\n    jake = allan_jake - allan\n\n    return jake", "mapping": {"c0": 3.0, "c1": 2.0}}
{"question": "There are c0 students in a school. If the school has c1 students in each grades and each grade has the same number of studentsHow many grades are there in total?", "answer": [54.0], "response": "def Problem(c0, c1):\n    #calculate the number of grades by dividing the total number of students by the number of students in each grade\n    grades = c0 // c1\n    return grades", "mapping": {"c0": 270.0, "c1": 5.0}}
{"question": "After finding some bottle caps at the park danny has c0 bottle caps in his collection. If he had c1 bottle caps in his collection earlierHow many bottle caps did he find at the park?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Danny had c1 bottle caps earlier\n    earlier = c1\n\n    #Danny now has c0 bottle caps in his collection\n    now = c0\n\n    #The number of bottle caps Danny found at the park can be calculated by subtracting the number of bottle caps he had earlier from the number of bottle caps he has now\n    found = now - earlier\n\n    return found", "mapping": {"c0": 32.0, "c1": 25.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each of the c1 blocks. If he gives c2 mails to each house in a blockHow many houses are there in a block?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The mailman has to give c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #The mailman gives c2 mails to each house in a block\n    mail_per_house = c2\n\n    #The total number of houses in a block can be calculated by dividing the number of mails per block by the number of mails per house\n    houses_per_block = mail_per_block // mail_per_house\n\n    return houses_per_block", "mapping": {"c0": 32.0, "c1": 55.0, "c2": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to asia and c2 bird families flew away to africaHow many more bird families flew away to africa than those that flew away to asia?", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families\n    original = c0\n\n    #c1 bird families flew away to asia\n    asia = c1\n\n    #c2 bird families flew away to africa\n    africa = c2\n\n    #The difference between the number of bird families that flew away to africa and those that flew away to asia can be calculated by subtracting the number of bird families that flew away to asia from the number of bird families that flew away to africa\n    difference = africa - asia\n\n    return difference", "mapping": {"c0": 41.0, "c1": 35.0, "c2": 62.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many crayons had been lost or given away?", "answer": [229.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    paul_crayons = c0\n\n    #Paul gave c1 crayons to his friends\n    gave_away = c1\n\n    #Paul lost c2 crayons\n    lost = c2\n\n    #The total number of crayons lost or given away can be calculated by adding the number of crayons Paul gave away and the number of crayons he lost\n    total = gave_away + lost\n\n    return total", "mapping": {"c0": 65.0, "c1": 213.0, "c2": 16.0}}
{"question": "Rachel had to complete c0 pages of math homework and yet more pages of reading homework. If she had to complete a total of c1 pages of homeworkHow many pages of reading homework did she have to complete?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    #Rachel had to complete a total of c1 pages of homework\n    total_pages = c1\n\n    #The number of pages of reading homework Rachel had to complete can be calculated by subtracting the number of math pages from the total pages\n    reading_pages = total_pages - math_pages\n\n    return reading_pages", "mapping": {"c0": 5.0, "c1": 7.0}}
{"question": "Brenda's mother made cookies for c0. She prepared c1 cookies but had to throw away c2 cookies. If each of them had the same number of cookiesHow many did each of them have?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Brenda's mother made c0 cookies\n    total_cookies = c0\n\n    #She prepared c1 cookies\n    prepared_cookies = c1\n\n    #She had to throw away c2 cookies\n    thrown_away_cookies = c2\n\n    #The number of cookies they have left in total can be calculated by subtracting the number of cookies thrown away from the number of cookies prepared\n    remaining_cookies = prepared_cookies - thrown_away_cookies\n\n    #Since Brenda and her mother had the same number of cookies, we can divide the remaining cookies by 2 to get the number of cookies each of them had\n    each_has = remaining_cookies / 2\n\n    return each_has", "mapping": {"c0": 5.0, "c1": 22.0, "c2": 17.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many more roses than orchids are there in the vase now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c3 - roses_before\n    orchids_cut = c2 - orchids_before\n\n    #There are now c2 orchids and c3 roses in the vase\n    roses_now = c3\n    orchids_now = c2\n\n    #calculate the difference between the number of roses and orchids in the vase now\n    difference = roses_now - orchids_now\n\n    #calculate the difference between the number of roses and orchids cut from the garden\n    cut_difference = roses_cut - orchids_cut\n\n    #calculate the final difference between the number of roses and orchids in the vase\n    final_difference = difference - cut_difference\n\n    return final_difference", "mapping": {"c0": 6.0, "c1": 20.0, "c2": 21.0, "c3": 22.0}}
{"question": "He had a total of c0 saltwater animals in different aquariums. Each aquarium has c1 animals in it.How many aquariums did he have?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #total number of saltwater animals in different aquariums\n    total_animals = c0\n\n    #number of animals in each aquarium\n    animals_per_aquarium = c1\n\n    #number of aquariums can be calculated by dividing the total number of animals by the number of animals in each aquarium\n    num_aquariums = total_animals // animals_per_aquarium\n\n    return num_aquariums", "mapping": {"c0": 40.0, "c1": 2.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english and chinese in all?", "answer": [65.0], "response": "def total_learning_hours(c0, c1, c2):\n    #Ryan spends c0 hours on learning english every day\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese every day\n    chinese_hours = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total number of hours Ryan spends on learning english and chinese can be calculated by multiplying the number of hours he spends on each language by the number of days he learns, and then adding them together\n    total_hours = (english_hours + chinese_hours) * days\n\n    return total_hours", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 5.0}}
{"question": "Rachel picked c0 apples from her tree. Thereafter c1 new apples grew on the tree. Now the tree has c2 apples still on it.How many apples did the tree have to begin with?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 apples from the tree\n    picked = c0\n\n    #c1 new apples grew on the tree\n    grew = c1\n\n    #Now the tree has c2 apples still on it\n    remaining = c2\n\n    #The number of apples the tree had to begin with can be calculated by adding the number of apples Rachel picked and the number of new apples that grew to the number of remaining apples on the tree\n    total = picked + grew + remaining\n\n    return total", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 6.0}}
{"question": "There were c0 people on the bus. At the next stop c1 more people got on the bus and c2 people got off.How many people are there on the bus now?", "answer": [17.0], "response": "def bus_people(c0, c1, c2):\n    #initially there were c0 people on the bus\n    initial = c0\n    \n    #c1 more people got on the bus\n    got_on = c1\n    \n    #c2 people got off the bus\n    got_off = c2\n    \n    #total number of people on the bus now can be calculated by adding the number of people who got on and subtracting the number of people who got off from the initial number of people\n    total_now = initial + got_on - got_off\n    \n    return total_now", "mapping": {"c0": 8.0, "c1": 12.0, "c2": 3.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many more apps than files does he have left on the phone?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he now has c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of apps and files he deleted can be calculated by subtracting the number of apps and files he has now from the original number of apps and files\n    apps_deleted = apps_before - apps_after\n    files_deleted = files_before - files_after\n\n    #The number of apps he has left minus the number of files he has left gives the number of more apps than files he has left on the phone\n    more_apps = apps_after - files_after\n\n    return more_apps", "mapping": {"c0": 15.0, "c1": 24.0, "c2": 21.0, "c3": 4.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many cakes does baker still have?", "answer": [190.0], "response": "def Problem(c0, c1, c2):\n    #Baker originally made c0 cakes\n    original_cakes = c0\n\n    #Baker bought c1 new cakes\n    bought_cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #The number of cakes Baker still has can be calculated by adding the number of original cakes and bought cakes, and then subtracting the number of sold cakes\n    remaining_cakes = original_cakes + bought_cakes - sold_cakes\n\n    return remaining_cakes", "mapping": {"c0": 173.0, "c1": 103.0, "c2": 86.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of sugar than cups of salt does she need to add now?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #The recipe calls for c0 cups of sugar\n    sugar_needed = c0\n\n    #The recipe calls for c2 cups of salt\n    salt_needed = c2\n\n    #Mary already put in c3 cups of flour\n    flour_added = c3\n\n    #The recipe calls for c1 cups of flour\n    flour_needed = c1\n\n    #Mary needs to add (flour_needed - flour_added) cups of flour\n    flour_to_add = flour_needed - flour_added\n\n    #Mary needs to add sugar_needed cups of sugar\n    #Mary needs to add salt_needed cups of salt\n    #Mary needs to add (sugar_needed - salt_needed) cups more of sugar than salt\n    sugar_to_add = sugar_needed - salt_needed\n\n    return sugar_to_add - (flour_to_add * 0.5) #Assuming that for every 1 cup of flour, Mary needs to add 0.5 cups of sugar", "mapping": {"c0": 11.0, "c1": 6.0, "c2": 9.0, "c3": 12.0}}
{"question": "Ryan learns english and chinese for c0 days. Every day he spends c1 hours on learning english and c2 hours on learning chinese.How many hours does he spend on learning english and chinese in all?", "answer": [63.0], "response": "def total_hours(c0, c1, c2):\n    # Ryan learns for c0 days\n    days = c0\n\n    # Ryan spends c1 hours on learning english every day\n    english_hours = c1\n\n    # Ryan spends c2 hours on learning chinese every day\n    chinese_hours = c2\n\n    # The total hours Ryan spends on learning english and chinese can be calculated by multiplying the number of days with the sum of hours spent on each language per day\n    total = days * (english_hours + chinese_hours)\n\n    return total", "mapping": {"c0": 7.0, "c1": 4.0, "c2": 5.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money is left?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Dan originally had c0 dollars\n    dan_money = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 3 dollars\n    chocolate_price = 3\n\n    #The total amount Dan spent can be calculated by adding the price of the candy bar and the chocolate\n    total_spent = candy_price + chocolate_price\n\n    #The amount of money Dan has left can be calculated by subtracting the total amount spent from the original amount of money Dan had\n    money_left = dan_money - total_spent\n\n    return money_left", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "During summer break c0 kids from Lawrence county stayed home and the rest went to camp. The total number of kids in Lawrence county is 91676.About how many kids in Lawrence county went to camp?", "answer": [30057.0], "response": "Let's think about it step by step:\ndef Problem(c0):\n    #The total number of kids in Lawrence county is 91676\n    total_kids = 91676\n\n    #The number of kids who stayed home is c0\n    stayed_home = c0\n\n    #The number of kids who went to camp can be calculated by subtracting the number of kids who stayed home from the total number of kids\n    went_to_camp = total_kids - stayed_home\n\n    #We can estimate the answer by rounding to the nearest thousand\n    return round(went_to_camp, -3)", "mapping": {"c0": 61619.0}}
{"question": "After Jessie started to go jogging everyday she lost c0 kilograms. She currently weighs c1 kilograms.How much did she weigh before starting to jog?", "answer": [192.0], "response": "def Problem(c0, c1):\n    #Jessie lost c0 kilograms after starting to jog\n    lost_weight = c0\n\n    #Jessie currently weighs c1 kilograms\n    current_weight = c1\n\n    #The weight Jessie had before starting to jog can be calculated by adding the weight she lost to her current weight\n    original_weight = current_weight + lost_weight\n\n    return original_weight", "mapping": {"c0": 126.0, "c1": 66.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many more marbles did he find than those he lost?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh lost c1 marbles\n    lost = c1\n\n    #Josh found c2 new marbles\n    found = c2\n\n    #The difference between the number of marbles Josh found and lost can be calculated by subtracting the number of lost marbles from the number of found marbles\n    difference = found - lost\n\n    return difference", "mapping": {"c0": 7.0, "c1": 8.0, "c2": 10.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left.How many more Ace cards than baseball cards does Nell have?", "answer": [265.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell originally had c0 baseball cards and c1 Ace cards\n    baseball_cards = c0\n    ace_cards = c1\n\n    #Nell gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left\n    ace_cards_now = c2\n    baseball_cards_now = c3\n\n    #Calculate how many cards Nell gave to Jeff\n    gave_to_jeff_ace = ace_cards - ace_cards_now\n    gave_to_jeff_baseball = baseball_cards - baseball_cards_now\n\n    #Calculate how many more Ace cards than baseball cards Nell has now\n    more_ace_cards = ace_cards_now - baseball_cards_now\n\n    #Add the number of Ace cards Nell gave to Jeff to the difference between Ace and baseball cards\n    result = more_ace_cards + gave_to_jeff_ace\n\n    return result", "mapping": {"c0": 239.0, "c1": 38.0, "c2": 376.0, "c3": 111.0}}
{"question": "In a school there are c0 boys and c1 girls. c2 more girls joined the school.How many more girls than boys does the school have?", "answer": [298.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 boys and c1 girls in the school\n    boys = c0\n    girls_before = c1\n\n    #c2 more girls joined the school\n    girls_now = girls_before + c2\n\n    #calculate the difference between the number of girls and boys\n    diff = girls_now - boys\n\n    return diff", "mapping": {"c0": 362.0, "c1": 257.0, "c2": 403.0}}
{"question": "Paul got a box of some crayons for his birthday. By the end of the school year he had either lost or given away c0 of them and only had c1 left.How many crayons did he get for his birthday?", "answer": [728.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Paul originally got some crayons for his birthday\n    crayons_before = ?\n\n    #By the end of the school year, he had c1 crayons left\n    crayons_after = c1\n\n    #He either lost or gave away c0 crayons\n    lost_or_given = c0\n\n    #The number of crayons he got for his birthday can be calculated by adding the number of crayons he has now to the number of crayons he lost or gave away\n    crayons_before = crayons_after + lost_or_given\n\n    return crayons_before\n\nWe need to know the number of crayons Paul had before he lost or gave away some. We can calculate this by adding the number of crayons he has now to the number he lost or gave away:\n\ncrayons_before = crayons_after + lost_or_given\n\nSo the final function would be:\n\ndef Problem(c0, c1):\n    #Paul originally got some crayons for his birthday\n    crayons_before = c1 + c0\n\n    return crayons_before", "mapping": {"c0": 551.0, "c1": 177.0}}
{"question": "Bryan took a look at his books as well. If he has a total of c0 books and each bookshelf contains c1 booksHow many bookshelves does he have?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #Bryan has c0 books in total\n    total_books = c0\n\n    #Each bookshelf contains c1 books\n    books_per_shelf = c1\n\n    #The number of bookshelves Bryan has can be calculated by dividing the total number of books by the number of books per shelf\n    num_shelves = total_books // books_per_shelf\n\n    return num_shelves", "mapping": {"c0": 42.0, "c1": 2.0}}
{"question": "Julia played tag with c0 kids on monday. If she played tag with c1 more kids on monday than on tuesdayHow many kids did she play with on tuesday?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday = c0\n\n    #She played tag with c1 more kids on monday than on tuesday\n    tuesday = monday - c1\n\n    return tuesday", "mapping": {"c0": 16.0, "c1": 12.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many more sacks of ripe oranges than unripe oranges are harvested per day?", "answer": [45.0], "response": "def Problem(c0, c1):\n    #number of sacks of unripe oranges harvested per day\n    unripe = c0\n\n    #number of sacks of ripe oranges harvested per day\n    ripe = c1\n\n    #difference between the number of sacks of ripe and unripe oranges harvested per day\n    difference = ripe - unripe\n\n    return difference", "mapping": {"c0": 41.0, "c1": 86.0}}
{"question": "Allan brought c0 balloons. If Allan and Jake brought total of c1 balloons to the parkHow many balloons did Jake bring to the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Allan and Jake brought total of c1 balloons\n    total = c1\n\n    #The number of balloons Jake brought can be calculated by subtracting the number of balloons Allan brought from the total number of balloons they brought together\n    jake = total - allan\n\n    return jake", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "The ring toss game at the carnival made c0 dollars per day. They were at the carnival for c1 days.How much money did they make?", "answer": [3168.0], "response": "def carnival_profit(c0, c1):\n    #The ring toss game made c0 dollars per day\n    profit_per_day = c0\n\n    #They were at the carnival for c1 days\n    days = c1\n\n    #The total profit can be calculated by multiplying the profit per day by the number of days they were at the carnival\n    total_profit = profit_per_day * days\n\n    return total_profit", "mapping": {"c0": 144.0, "c1": 22.0}}
{"question": "Each basket of peaches has c0 red peaches and c1 green peaches. If there are c2 such basketsHow many peaches are in the baskets altogether?", "answer": [345.0], "response": "def Problem(c0, c1, c2):\n    #each basket has c0 red peaches and c1 green peaches\n    red_peaches = c0\n    green_peaches = c1\n\n    #there are c2 baskets\n    baskets = c2\n\n    #the total number of peaches can be calculated by multiplying the number of peaches in each basket by the number of baskets and adding them together\n    total_peaches = (red_peaches + green_peaches) * baskets\n\n    return total_peaches", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 15.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many more sweet cookies than salty cookies did he eat?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco originally had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #Paco ate c2 sweet cookies and c3 salty cookies\n    ate_sweet = c2\n    ate_salty = c3\n\n    #The number of sweet cookies Paco has left can be calculated by subtracting the number of sweet cookies he ate from the original number of sweet cookies he had\n    sweet_left = sweet_cookies - ate_sweet\n\n    #The number of salty cookies Paco has left can be calculated by subtracting the number of salty cookies he ate from the original number of salty cookies he had\n    salty_left = salty_cookies - ate_salty\n\n    #The number of more sweet cookies than salty cookies Paco ate can be calculated by subtracting the number of salty cookies he ate from the number of sweet cookies he ate\n    more_sweet = ate_sweet - ate_salty\n\n    return more_sweet", "mapping": {"c0": 37.0, "c1": 11.0, "c2": 5.0, "c3": 2.0}}
{"question": "Jake has c0 fewer peaches than Steven. If Jake has c1 peaches.How many peaches does Steven have?", "answer": [28.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Jake has c0 fewer peaches than Steven\n    jake = c1\n    steven = jake + c0\n\n    return steven", "mapping": {"c0": 11.0, "c1": 17.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he lost c1 crayons while he gave away c2 crayons to his friends.How many more crayons did he give to his friends than those he lost?", "answer": [77.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    paul_crayons = c0\n\n    #During the school year, he lost c1 crayons\n    lost_crayons = c1\n\n    #He gave away c2 crayons to his friends\n    gave_crayons = c2\n\n    #The difference between the number of crayons he gave to his friends and the number of crayons he lost can be calculated by subtracting the number of lost crayons from the number of given crayons\n    difference = gave_crayons - lost_crayons\n\n    return difference", "mapping": {"c0": 267.0, "c1": 231.0, "c2": 308.0}}
{"question": "If the cave is c0 feet deep and they need to travel c1 feetHow far is the end of the cave?", "answer": [2226.0], "response": "def cave_distance(c0, c1):\n    #The distance to the end of the cave can be calculated by adding the depth of the cave to the distance they need to travel\n    distance = c0 + c1\n    return distance", "mapping": {"c0": 919.0, "c1": 1307.0}}
{"question": "There are c0 bananas and c1 oranges in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of bananas?", "answer": [29.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of bananas in Philip's collection\n    bananas = c0\n\n    #number of oranges in Philip's collection\n    oranges = c1\n\n    #number of groups bananas are organized into\n    banana_groups = c2\n\n    #number of groups oranges are organized into\n    orange_groups = c3\n\n    #size of each group of bananas can be calculated by dividing the total number of bananas by the number of groups they are organized into\n    banana_size = bananas // banana_groups\n\n    return banana_size", "mapping": {"c0": 203.0, "c1": 63.0, "c2": 7.0, "c3": 95.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 eggs and c2 marbles.How many more eggs does Rebecca have than marbles?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca wants to split the eggs into groups of c0\n    group_size = c0\n\n    #Rebecca has c1 eggs\n    eggs = c1\n\n    #Rebecca has c2 marbles\n    marbles = c2\n\n    #The number of groups of eggs Rebecca has can be calculated by dividing the number of eggs by the group size\n    egg_groups = eggs // group_size\n\n    #The number of eggs left over after grouping can be calculated by taking the remainder of the division\n    eggs_left = eggs % group_size\n\n    #The number of eggs Rebecca has left after grouping can be calculated by subtracting the number of eggs left from the total number of eggs\n    eggs_now = eggs - eggs_left\n\n    #The number of marbles Rebecca has left after grouping can be calculated by subtracting the number of egg groups from the total number of marbles\n    marbles_now = marbles - egg_groups\n\n    #The difference between the number of eggs and marbles Rebecca has left is the number of more eggs she has than marbles\n    more_eggs = eggs_now - marbles_now\n\n    return more_eggs", "mapping": {"c0": 5.0, "c1": 20.0, "c2": 6.0}}
{"question": "Paige raised c0 goldfish in the pond but stray cats loved eating them. c1 were eaten.How many goldfish remained?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Paige raised c0 goldfish in the pond\n    goldfish_before = c0\n\n    #c1 goldfish were eaten by stray cats\n    eaten = c1\n\n    #The number of goldfish remaining can be calculated by subtracting the number of goldfish eaten from the original number of goldfish\n    goldfish_now = goldfish_before - eaten\n\n    return goldfish_now", "mapping": {"c0": 15.0, "c1": 5.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many push-ups did David do?", "answer": [78.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups\n    zachary_pushups = c0\n\n    #Zachary did c1 crunches\n    zachary_crunches = c1\n\n    #David did c2 more push-ups than Zachary\n    david_pushups = zachary_pushups + c2\n\n    #David did c3 less crunches than Zachary\n    david_crunches = zachary_crunches - c3\n\n    return david_pushups", "mapping": {"c0": 59.0, "c1": 44.0, "c2": 19.0, "c3": 27.0}}
{"question": "Dave had c0 apps on his phone. He deleted c1 apps.How many apps are left on his phone?", "answer": [14.0], "response": "def remaining_apps(c0, c1):\n    # Dave originally had c0 apps on his phone\n    original_apps = c0\n    \n    # Dave deleted c1 apps\n    deleted_apps = c1\n    \n    # The number of apps left on Dave's phone can be calculated by subtracting the number of deleted apps from the original number of apps\n    remaining_apps = original_apps - deleted_apps\n    \n    return remaining_apps", "mapping": {"c0": 19.0, "c1": 5.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #The recipe calls for c0 cups of sugar\n    sugar = c0\n\n    #The recipe calls for c1 cups of flour\n    flour = c1\n\n    #The recipe calls for c2 cups of salt\n    salt = c2\n\n    #Mary already put in c3 cups of flour\n    flour_before = c3\n\n    #Mary needs to add the difference between the amount of flour and sugar needed\n    difference = flour - sugar\n\n    #The amount of flour Mary needs to add now is the difference minus the amount she already put in\n    flour_now = difference - flour_before\n\n    return flour_now", "mapping": {"c0": 9.0, "c1": 14.0, "c2": 40.0, "c3": 4.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of ripe oranges will they have after c2 days of harvest?", "answer": [2050.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of ripe oranges per day\n    ripe_per_day = c0\n\n    #they harvest c1 sacks of unripe oranges per day\n    unripe_per_day = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #the total number of ripe oranges after c2 days can be calculated by multiplying the number of days by the number of ripe oranges harvested per day\n    total_ripe = ripe_per_day * days\n\n    return total_ripe", "mapping": {"c0": 82.0, "c1": 61.0, "c2": 25.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails and c1 letters in the morning\n    morning_emails = c0\n    morning_letters = c1\n\n    #Jack then received c2 emails and c3 letters in the afternoon\n    afternoon_emails = c2\n    afternoon_letters = c3\n\n    #The number of emails Jack received in the morning can be calculated by adding the number of morning emails to the number of afternoon emails\n    total_morning_emails = morning_emails + afternoon_emails\n\n    #The number of emails Jack received in the afternoon can be calculated by adding the number of morning letters to the number of afternoon letters\n    total_afternoon_emails = morning_letters + afternoon_letters\n\n    #The difference between the number of emails Jack received in the morning and the number of emails he received in the afternoon can be calculated by subtracting the total afternoon emails from the total morning emails\n    difference = total_morning_emails - total_afternoon_emails\n\n    return difference", "mapping": {"c0": 10.0, "c1": 12.0, "c2": 3.0, "c3": 44.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games and c3 old games.How many old games do they have c4", "answer": [121.0], "response": "def Problem(c0, c1, c2, c3, c4):\n    #Katie had c0 new games and c1 old games\n    katie_new = c0\n    katie_old = c1\n\n    #Katie's friends had c2 new games and c3 old games\n    friends_new = c2\n    friends_old = c3\n\n    #They have c4 old games in total\n    total_old = c4\n\n    #The number of old games they have can be calculated by adding the number of old games Katie and her friends had and subtracting the total number of old games they have now\n    old_now = katie_old + friends_old - total_old\n\n    return old_now", "mapping": {"c0": 62.0, "c1": 80.0, "c2": 73.0, "c3": 41.0, "c4": 3.0}}
{"question": "Together Adam and Jackie have c0 apples. He has c1 apples more than Adam and Jackie together do. Adam has c2 more apples than Jackie.How many apples does He have?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Adam and Jackie together have c0 apples\n    together = c0\n\n    #He has c1 apples more than Adam and Jackie together do\n    he_more = c1\n\n    #Adam has c2 more apples than Jackie\n    adam_more = c2\n\n    #Let's assume Jackie has x apples\n    x = (together - adam_more) / 2\n\n    #Adam has c2 more apples than Jackie\n    adam = x + c2\n\n    #Together Adam and Jackie have c0 apples\n    together_now = adam + x\n\n    #He has c1 apples more than Adam and Jackie together do\n    he = together_now + he_more\n\n    return he\n\n#Let's test the function with some values\nprint(Problem(10, 5, 2)) #Expected output: 13", "mapping": {"c0": 12.0, "c1": 9.0, "c2": 8.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges are harvested if they harvest a total of c2 sacks of oranges?", "answer": [420.0], "response": "def Problem(c0, c1, c2):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #they harvest a total of c2 sacks of oranges\n    total_sacks = c2\n\n    #The total number of oranges harvested can be calculated by multiplying the number of oranges per sack by the total number of sacks harvested\n    total_oranges = oranges_per_sack * sacks_per_day * total_sacks\n\n    return total_oranges", "mapping": {"c0": 67.0, "c1": 12.0, "c2": 35.0}}
{"question": "There are c0 oranges and c1 bananas in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of bananas?", "answer": [145.0], "response": "def Problem(c0, c1, c2, c3):\n    #there are c1 bananas in Philip's collection\n    bananas = c1\n\n    #the bananas are organized into c2 groups\n    banana_groups = c2\n\n    #the size of each group of bananas can be calculated by dividing the total number of bananas by the number of groups\n    banana_size = bananas / banana_groups\n\n    return banana_size", "mapping": {"c0": 87.0, "c1": 290.0, "c2": 2.0, "c3": 93.0}}
{"question": "There are c0 oranges and c1 bananas in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of oranges?", "answer": [24.0], "response": "def Problem(c0, c1, c2, c3):\n    #there are c0 oranges and c1 bananas in Philip's collection\n    oranges = c0\n    bananas = c1\n\n    #the bananas are organized into c2 groups and oranges are organized into c3 groups\n    banana_groups = c2\n    orange_groups = c3\n\n    #the size of each group of oranges can be calculated by dividing the number of oranges by the number of orange groups\n    orange_group_size = oranges / orange_groups\n\n    return orange_group_size", "mapping": {"c0": 384.0, "c1": 192.0, "c2": 345.0, "c3": 16.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many more crunches than push-ups did Zachary do?", "answer": [12.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #David did c0 more push-ups than Zachary\n    david_pushups = c2 + c0\n\n    #David did c1 less crunches than Zachary\n    david_crunches = c3 - c1\n\n    #Zachary did c2 push-ups\n    zachary_pushups = c2\n\n    #Zachary did c3 crunches\n    zachary_crunches = c3\n\n    #The number of push-ups Zachary did more than crunches can be calculated by subtracting the number of crunches Zachary did from the number of push-ups Zachary did\n    pushups_more = zachary_pushups - zachary_crunches\n\n    #The number of crunches Zachary did more than push-ups can be calculated by subtracting the number of push-ups Zachary did from the number of crunches Zachary did\n    crunches_more = zachary_crunches - zachary_pushups\n\n    #We want to find out how many more crunches than push-ups Zachary did, so we subtract the number of push-ups Zachary did more than crunches from the number of crunches Zachary did more than push-ups\n    result = crunches_more - pushups_more\n\n    return result", "mapping": {"c0": 27.0, "c1": 7.0, "c2": 5.0, "c3": 17.0}}
{"question": "He also had c0 aquariums for freshwater animals and c1 aquariums for saltwater animals. Each aquarium has c2 animals in it.How many saltwater animals does Tyler have?", "answer": [1012.0], "response": "def Problem(c0, c1, c2):\n    #Tyler has c0 aquariums for freshwater animals\n    freshwater_aquariums = c0\n\n    #Tyler has c1 aquariums for saltwater animals\n    saltwater_aquariums = c1\n\n    #Each aquarium has c2 animals in it\n    animals_per_aquarium = c2\n\n    #The total number of saltwater animals Tyler has can be calculated by multiplying the number of saltwater aquariums by the number of animals per aquarium\n    saltwater_animals = saltwater_aquariums * animals_per_aquarium\n\n    return saltwater_animals", "mapping": {"c0": 74.0, "c1": 22.0, "c2": 46.0}}
{"question": "There were c0 dollars in Olivia's wallet. After she visited a supermarket and a showroom there were c1 dollars left. If she spent c2 dollars at the showroomHow much did she spend at the supermarket?", "answer": [31.0], "response": "def calculate_spending(c0, c1, c2):\n    # Olivia had c0 dollars in her wallet\n    initial_wallet = c0\n\n    # After visiting the supermarket and showroom, she had c1 dollars left\n    final_wallet = c1\n\n    # She spent c2 dollars at the showroom\n    showroom_spending = c2\n\n    # The amount she spent at the supermarket can be calculated by subtracting the final wallet amount from the initial wallet amount and then subtracting the showroom spending\n    supermarket_spending = initial_wallet - final_wallet - showroom_spending\n\n    return supermarket_spending", "mapping": {"c0": 106.0, "c1": 26.0, "c2": 49.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How much farther did the mouse jump than the grasshopper?", "answer": [28.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The frog jumped c1 inches farther than the grasshopper\n    frog = c0 + c1\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse = frog - c2\n\n    #The distance the mouse jumped farther than the grasshopper can be calculated by subtracting the distance the grasshopper jumped from the distance the mouse jumped\n    distance = mouse - grasshopper\n\n    return distance", "mapping": {"c0": 24.0, "c1": 33.0, "c2": 5.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 ripe apples and c2 unripe apples.How many apples did the tree have to begin with?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #The tree now has c1 ripe apples and c2 unripe apples\n    ripe = c1\n    unripe = c2\n\n    #The total number of apples the tree had to begin with can be calculated by adding the number of apples Rachel picked to the number of ripe and unripe apples on the tree now\n    total = picked + ripe + unripe\n\n    return total", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 4.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages and he read c1 pages per day.How many days did he take to finish the book?", "answer": [28.0], "response": "def Problem(c0, c1):\n    #Frank started reading the book with c0 pages\n    pages_left = c0\n\n    #Frank read c1 pages per day\n    pages_per_day = c1\n\n    #The number of days it took Frank to finish the book can be calculated by dividing the number of pages left by the number of pages he read per day\n    days = pages_left // pages_per_day\n\n    #If there are any remaining pages, add one more day\n    if pages_left % pages_per_day != 0:\n        days += 1\n\n    return days", "mapping": {"c0": 392.0, "c1": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground while Ed found c2 more marbles.How many more marbles did Ed have than Doug then?", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + c1\n\n    #Doug lost c1 of his marbles at the playground\n    doug = ed - c1\n\n    #Ed found c2 more marbles\n    ed += c2\n\n    #The difference between the number of marbles Ed and Doug have can be calculated by subtracting the number of marbles Doug has from the number of marbles Ed has\n    difference = ed - doug\n\n    return difference", "mapping": {"c0": 24.0, "c1": 27.0, "c2": 9.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. If she had c1 pencils and c2 crayonsHow many rows could she make?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 pencils\n    pencils = c1\n\n    #Faye is placing c0 pencils in each row\n    pencils_per_row = c0\n\n    #Faye also has c2 crayons, which we don't need for this problem\n\n    #The number of rows Faye can make can be calculated by dividing the number of pencils she has by the number of pencils in each row\n    rows = pencils // pencils_per_row\n\n    return rows", "mapping": {"c0": 5.0, "c1": 35.0, "c2": 7.0}}
{"question": "Some children were riding on the bus. At the bus stop c0 more children got on the bus. Then there were c1 children altogether on the bus.How many children were riding on the bus before the bus stop?", "answer": [39.0], "response": "def Problem(c0, c1):\n    #there were originally c1 - c0 children on the bus\n    children_before = c1 - c0\n\n    return children_before", "mapping": {"c0": 2.0, "c1": 41.0}}
{"question": "Danny has c0 bottle caps in his collection. He found c1 bottle caps at the park.How many bottle caps does he have now?", "answer": [65.0], "response": "def bottle_caps_total(c0, c1):\n    # Danny originally had c0 bottle caps\n    original_caps = c0\n\n    # Danny found c1 bottle caps at the park\n    found_caps = c1\n\n    # The total number of bottle caps Danny has now is the sum of his original collection and the ones he found\n    total_caps = original_caps + found_caps\n\n    return total_caps", "mapping": {"c0": 12.0, "c1": 53.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park.How many more balloons did Allan have than Jake in the park?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #The difference between the number of balloons Allan brought and the number of balloons Jake brought is the number of more balloons Allan had than Jake\n    more_balloons = allan - jake\n\n    return more_balloons", "mapping": {"c0": 5.0, "c1": 3.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many more bird families flew away to africa than those that flew away to asia?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families\n    original = c0\n\n    #c1 bird families flew away to africa\n    africa = c1\n\n    #c2 bird families flew away to asia\n    asia = c2\n\n    #The difference between the number of bird families that flew away to africa and those that flew away to asia can be calculated by subtracting the number of bird families that flew away to asia from the number of bird families that flew away to africa\n    difference = africa - asia\n\n    return difference", "mapping": {"c0": 8.0, "c1": 42.0, "c2": 31.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many more crunches than push-ups did Zachary do?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    #David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = c0 + c2\n    david_crunches = c1 - c3\n\n    #The difference between the number of crunches and push-ups Zachary did can be calculated by subtracting the number of push-ups from the number of crunches\n    difference = zachary_crunches - zachary_pushups\n\n    #The difference between the number of crunches and push-ups David did can be calculated by subtracting the number of push-ups from the number of crunches\n    david_difference = david_crunches - david_pushups\n\n    #The difference between the number of crunches and push-ups Zachary did more than David can be calculated by subtracting the difference between the number of crunches and push-ups David did from the difference between the number of crunches and push-ups Zachary did\n    more_than_david = difference - david_difference\n\n    return more_than_david", "mapping": {"c0": 46.0, "c1": 58.0, "c2": 38.0, "c3": 62.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. If c1 people can ride the wheel at the same timeHow many people can each seat hold?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #The Ferris wheel has c0 seats\n    seats = c0\n\n    #c1 people can ride the wheel at the same time\n    riders = c1\n\n    #The number of people each seat can hold can be calculated by dividing the number of riders by the number of seats\n    per_seat = riders / seats\n\n    return per_seat", "mapping": {"c0": 4.0, "c1": 20.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages did she have to complete in all?", "answer": [15.0], "response": "def total_homework_pages(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_pages = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology_pages = c2\n\n    #The total number of pages Rachel had to complete can be calculated by adding the number of pages for each subject\n    total_pages = math_pages + reading_pages + biology_pages\n\n    return total_pages", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 10.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her dad than she did from her mom?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her mom\n    mom = c0\n\n    #Gwen's dad gave her c1 more dollars\n    dad = c0 + c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The amount of money Gwen received from her dad more than her mom can be calculated by subtracting the original amount of money from her dad from the original amount of money from her mom\n    difference = dad - mom\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 4.0}}
{"question": "Baker made c0 cakes. He sold c1 of them. Then he made c2 more cakes.How many cakes would baker still have?", "answer": [111.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker sold c1 cakes\n    sold = c1\n\n    #Baker made c2 more cakes\n    made = c2\n\n    #The number of cakes Baker would still have can be calculated by subtracting the number of cakes sold from the original number of cakes, and then adding the number of cakes made\n    cakes_now = cakes_before - sold + made\n\n    return cakes_now", "mapping": {"c0": 110.0, "c1": 75.0, "c2": 76.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many cakes would baker still have?", "answer": [59.0], "response": "def cakes_left(c0, c1, c2, c3):\n    #Baker made c0 pastries and c1 cakes\n    cakes = c1\n\n    #He sold c2 cakes\n    sold_cakes = c2\n\n    #He has c3 pastries left\n    pastries_left = c3\n\n    #The number of cakes he has left can be calculated by subtracting the number of cakes he sold from the original number of cakes he made\n    cakes_left = cakes - sold_cakes\n\n    return cakes_left", "mapping": {"c0": 61.0, "c1": 167.0, "c2": 108.0, "c3": 44.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books have you read?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of books read\n    books_read = c2\n\n    #number of movies watched\n    movies_watched = c3\n\n    #difference between number of movies and books\n    diff = movies_watched - books_read\n\n    return diff", "mapping": {"c0": 11.0, "c1": 17.0, "c2": 7.0, "c3": 21.0}}
{"question": "A mailman gives c0 junk mails to each house in a block. If the mailman has to give c1 pieces of junk mail to each block.How many houses are there in a block?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #The mailman gives c0 junk mails to each house in a block\n    junk_per_house = c0\n\n    #The mailman has to give c1 pieces of junk mail to each block\n    junk_per_block = c1\n\n    #The number of houses in a block can be calculated by dividing the number of junk mails per block by the number of junk mails per house\n    houses_per_block = junk_per_block / junk_per_house\n\n    return houses_per_block", "mapping": {"c0": 2.0, "c1": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles does Doug have now?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Doug lost c1 of his marbles at the playground\n    doug_now = doug - c1\n\n    #If Ed had c2 marbles, we can calculate how many marbles Doug has now by subtracting Ed's marbles from the total number of marbles they had before\n    doug_after = (ed - c2) / 2\n\n    return doug_after", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 22.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money did he spend to buy candy bar than he did to buy chocolate?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 3 dollars\n    chocolate_price = 3\n\n    #The difference in money spent on candy bar and chocolate can be calculated by subtracting the price of candy bar from the price of chocolate\n    difference = candy_price - chocolate_price\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers.How many more customers stayed behind than those that left?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #After some customers left, the waiter had c1 customers\n    remaining_customers = c1\n\n    #The number of customers that left can be calculated by subtracting the number of remaining customers from the original number of customers\n    left_customers = original_customers - remaining_customers\n\n    #The number of customers that stayed behind can be calculated by subtracting the number of customers that left from the original number of customers\n    stayed_customers = original_customers - left_customers\n\n    #The number of more customers that stayed behind than those that left can be calculated by subtracting the number of customers that left from the number of customers that stayed behind\n    more_stayed_customers = stayed_customers - left_customers\n\n    return more_stayed_customers", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "Julia played tag with c0 kids on tuesday. If she played tag with c1 more kids on monday than on tuesdayHow many kids did she play with on monday?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with c0 kids on tuesday\n    tuesday_kids = c0\n\n    #She played tag with c1 more kids on monday than on tuesday\n    monday_kids = tuesday_kids + c1\n\n    return monday_kids", "mapping": {"c0": 14.0, "c1": 8.0}}
{"question": "Allan brought c0 balloons to the park. If Jake brought c1 more balloons than the number of balloons that Allan broughtHow many balloons did Jake bring to the park?", "answer": [11.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 more balloons than Allan\n    jake = allan + c1\n\n    return jake", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "Jackie has c0 apples. Adam has c1 apples.How many more apples does Jackie have than Adam?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jackie has c0 apples\n    jackie = c0\n\n    #Adam has c1 apples\n    adam = c1\n\n    #The difference in the number of apples can be calculated by subtracting the number of apples Adam has from the number of apples Jackie has\n    difference = jackie - adam\n\n    return difference", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker make?", "answer": [112.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes\n    cakes = c0\n\n    #Baker made c1 pastries\n    pastries = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of cakes and pastries Baker has left can be calculated by subtracting the number of cakes and pastries he sold from the original number of cakes and pastries he made\n    cakes_left = cakes - sold_cakes\n    pastries_left = pastries - sold_pastries\n\n    #The difference between the number of pastries and cakes Baker made can be calculated by subtracting the number of cakes left from the number of pastries left\n    difference = pastries_left - cakes_left\n\n    return difference", "mapping": {"c0": 19.0, "c1": 131.0, "c2": 70.0, "c3": 88.0}}
{"question": "For Gwen's birthday she received c0 dollars. She spent some money and has c1 dollars left with her.How much money did she spend?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Gwen received c0 dollars for her birthday\n    received = c0\n\n    #After spending some money, she has c1 dollars left\n    left = c1\n\n    #The amount of money she spent can be calculated by subtracting the amount of money she has left from the amount she received\n    spent = received - left\n\n    return spent", "mapping": {"c0": 7.0, "c1": 5.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many red and yellow peaches are in the basket?", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #The number of red and yellow peaches can be calculated by adding the number of red peaches and yellow peaches\n    red_yellow = c0 + c1\n\n    return red_yellow", "mapping": {"c0": 18.0, "c1": 14.0, "c2": 17.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many crackers did each person eat?", "answer": [8.0], "response": "Let's think about it step by step:\n\ndef crackers_per_person(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    num_friends = c0\n\n    #Matthew had c1 crackers initially\n    crackers_initial = c1\n\n    #Matthew had c2 cakes initially\n    cakes_initial = c2\n\n    #The total number of crackers and cakes that Matthew gave to his friends is equal to twice the number of friends\n    total_snacks = num_friends * 2\n\n    #The number of crackers each person received is equal to the initial number of crackers divided by the total number of snacks, multiplied by the number of friends\n    crackers_per_person = crackers_initial / total_snacks * num_friends\n\n    return crackers_per_person", "mapping": {"c0": 4.0, "c1": 32.0, "c2": 98.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvested c0 sacks of oranges.How many sacks did they harvest per day if they harvested for a total of c1 days?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #they harvested c0 sacks of oranges in total\n    total_sacks = c0\n\n    #they harvested for c1 days\n    days = c1\n\n    #The number of sacks harvested per day can be calculated by dividing the total number of sacks by the number of days\n    sacks_per_day = total_sacks / days\n\n    return sacks_per_day", "mapping": {"c0": 56.0, "c1": 14.0}}
{"question": "Adam has c0 more apples than Jackie. Together Adam and Jackie have c1 apples. Bob has c2 apples more than Adam and Jackie together do.How many apples does Bob have?", "answer": [20.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Adam has c0 more apples than Jackie\n    adam_jackie_diff = c0\n\n    #Together Adam and Jackie have c1 apples\n    adam_jackie_total = c1\n\n    #Bob has c2 apples more than Adam and Jackie together do\n    bob_diff = c2\n\n    #Let's first find out how many apples Adam and Jackie have in total\n    adam = (adam_jackie_total + adam_jackie_diff) / 2\n    jackie = adam_jackie_total - adam\n\n    #Now let's find out how many apples Bob has\n    bob = adam + jackie + bob_diff\n\n    return bob", "mapping": {"c0": 4.0, "c1": 14.0, "c2": 6.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many more cups of flour does she need to add?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, flour_added, c2):\n    #Mary needs c0 cups of flour and c1 cups of sugar for the recipe\n    flour_needed = c0\n    sugar_needed = c1\n\n    #Mary already added flour_added cups of flour\n    flour_now = flour_added\n\n    #Mary still needs c2 more cups of flour than sugar\n    sugar_now = sugar_needed\n    flour_diff = c2\n\n    #The amount of sugar Mary has now is the same as the amount she needed originally\n    #So we can calculate the amount of flour she needs now by adding the difference between the amount of flour and sugar she needs to the amount of flour she has now\n    flour_needed_now = sugar_now + flour_diff + flour_now\n\n    #The amount of flour Mary needs to add is the difference between the amount of flour she needs now and the amount of flour she has already added\n    flour_to_add = flour_needed_now - flour_now\n\n    return flour_to_add", "mapping": {"c0": 6.0, "c1": 13.0, "c2": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. c0 bird families flew away for the winter from near a mountain. If there were c1 bird families living near the mountain initiallyHow many bird families were left near the mountain?", "answer": [14.0], "response": "def bird_families_left(c0, c1):\n    #c0 bird families flew away for the winter\n    flew_away = c0\n\n    #c1 bird families were living near the mountain initially\n    initially = c1\n\n    #The number of bird families left near the mountain can be calculated by subtracting the number of bird families that flew away from the initial number of bird families\n    left = initially - flew_away\n\n    return left", "mapping": {"c0": 27.0, "c1": 41.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If Jill has c2 peachesHow many more peaches does Jill have than Jake?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Steven has c1 more peaches than Jill\n    steven = c1 + c2\n\n    #Jake has c0 fewer peaches than Steven\n    jake = steven - c0\n\n    #Jill has c2 peaches\n    jill = c2\n\n    #The difference between the number of peaches Jill has and the number of peaches Jake has can be calculated by subtracting the number of peaches Jake has from the number of peaches Jill has\n    difference = jill - jake\n\n    return difference", "mapping": {"c0": 16.0, "c1": 15.0, "c2": 12.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. If there are a total of c2 pages in the bookHow many pages are in the second chapter?", "answer": [33.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The book has c0 chapters\n    chapters = c0\n\n    #The first chapter is c1 pages long\n    first_chapter = c1\n\n    #There are a total of c2 pages in the book\n    total_pages = c2\n\n    #To find out how many pages are in the second chapter, we need to subtract the number of pages in the first chapter from the total number of pages in the book, and then divide the result by the number of remaining chapters\n    remaining_chapters = chapters - 1\n    remaining_pages = total_pages - first_chapter\n    pages_per_chapter = remaining_pages / remaining_chapters\n\n    #The number of pages in the second chapter is the same as the number of pages per chapter\n    second_chapter = pages_per_chapter\n\n    return second_chapter", "mapping": {"c0": 2.0, "c1": 60.0, "c2": 93.0}}
{"question": "Paul got a box of some crayons for his birthday. During the school year he gave c0 crayons to his friends while he lost c1 crayons. If he only had c2 crayons leftHow many crayons did he get for his birthday?", "answer": [1453.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul originally had some crayons\n    original = x\n\n    #During the school year, he gave c0 crayons to his friends\n    gave = c0\n\n    #He also lost c1 crayons\n    lost = c1\n\n    #Now he only has c2 crayons left\n    now = c2\n\n    #The number of crayons he got for his birthday can be calculated by adding the number of crayons he gave to his friends and the number of crayons he lost to the number of crayons he has now\n    got = gave + lost + now\n\n    return got", "mapping": {"c0": 563.0, "c1": 558.0, "c2": 332.0}}
{"question": "At the stop c0 more people got on the bus. Initially there were c1 people on the bus.How many people are there on the bus now?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #Initially there were c1 people on the bus\n    initial = c1\n\n    #c0 more people got on the bus\n    added = c0\n\n    #The number of people on the bus now can be calculated by adding the number of people initially on the bus with the number of people added\n    total_now = initial + added\n\n    return total_now", "mapping": {"c0": 13.0, "c1": 4.0}}
{"question": "Julia played tag with some kids on monday. She played tag with c0 kids on tuesday. If she played with a total of c1 kidsHow many kids did she play with on monday?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with some kids on Monday\n    monday = c0\n\n    #She played tag with c0 kids on Tuesday\n    tuesday = c1 - c0\n\n    #She played with a total of c1 kids\n    total = c1\n\n    #The number of kids Julia played with on Monday can be calculated by subtracting the number of kids she played with on Tuesday from the total number of kids she played with\n    monday_kids = total - tuesday\n\n    return monday_kids", "mapping": {"c0": 14.0, "c1": 16.0}}
{"question": "Baker's friend bought c0 cakes from him. If he had made c1 cakes initiallyHow many cakes would baker still have?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #Baker initially had c1 cakes\n    initial_cakes = c1\n\n    #Baker's friend bought c0 cakes from him\n    bought_cakes = c0\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes his friend bought from the initial number of cakes he had\n    remaining_cakes = initial_cakes - bought_cakes\n\n    return remaining_cakes", "mapping": {"c0": 137.0, "c1": 169.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many more action figures than books were on his shelf?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures and c1 books on the shelf\n    action_figures_before = c0\n    books_before = c1\n\n    #Jerry added c2 more action figures to the shelf\n    added = c2\n\n    #The number of action figures on the shelf now can be calculated by adding the original number of action figures and the number of added action figures\n    action_figures_now = action_figures_before + added\n\n    #The number of more action figures than books on the shelf can be calculated by subtracting the number of books from the number of action figures\n    more_action_figures = action_figures_now - books_before\n\n    return more_action_figures", "mapping": {"c0": 5.0, "c1": 9.0, "c2": 7.0}}
{"question": "For c0 weeks of harvest Lewis earns a total of $ 133.How much money does he earn each week?", "answer": [7.0], "response": "def Problem(c0):\n    #Lewis earns a total of $133 for c0 weeks of harvest\n    total_earnings = 133\n\n    #The amount of money Lewis earns each week can be calculated by dividing the total earnings by the number of weeks\n    earnings_per_week = total_earnings / c0\n\n    return earnings_per_week", "mapping": {"c0": 19.0}}
{"question": "Paul had some books. After selling c0 in a garage sale he had c1 left.How many books did he have at the start?", "answer": [242.0], "response": "def Problem(c0, c1):\n    #Paul had some books\n    books_start = c0 + c1\n\n    #After selling c0 books, he had c1 left\n    books_left = c1\n\n    #The number of books Paul had at the start can be calculated by adding the number of books he sold to the number of books he has left\n    books_before = books_start - books_left\n\n    return books_before", "mapping": {"c0": 137.0, "c1": 105.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Over the weekend Fred delivered newspapers earning c2 dollars and washed cars earning c3 dollars.How much money did Fred earn over the weekend?", "answer": [90.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Fred earned c2 dollars delivering newspapers\n    newspapers = c2\n\n    #Fred earned c3 dollars washing cars\n    cars = c3\n\n    #The total amount of money Fred earned over the weekend can be calculated by adding the amount of money he earned from delivering newspapers and washing cars to the amount of money he had before the weekend\n    fred_now = fred_before + newspapers + cars\n\n    #The amount of money Jason has is not relevant to the question, so we don't need to calculate it\n\n    return fred_now - fred_before #return the amount of money Fred earned over the weekend only", "mapping": {"c0": 33.0, "c1": 95.0, "c2": 16.0, "c3": 74.0}}
{"question": "If you have c0 cookies in total and c1 bags having equal number of cookiesHow many cookies does each bag have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #total number of cookies\n    cookies = c0\n\n    #number of bags\n    bags = c1\n\n    #number of cookies in each bag can be calculated by dividing the total number of cookies by the number of bags\n    cookies_per_bag = cookies // bags\n\n    return cookies_per_bag", "mapping": {"c0": 14.0, "c1": 7.0}}
{"question": "Matthew gave equal numbers of crackers to his c0 friends. If he had c1 crackersHow many crackers did each person eat?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Matthew gave equal numbers of crackers to his c0 friends\n    num_friends = c0\n\n    #Matthew had c1 crackers\n    total_crackers = c1\n\n    #Each person ate an equal number of crackers, so divide the total number of crackers by the number of friends\n    crackers_per_person = total_crackers / num_friends\n\n    return crackers_per_person", "mapping": {"c0": 18.0, "c1": 36.0}}
{"question": "Kelly has c0 nintendo games. She found c1 more nintendo games.How many does she need to give away so that she will have c2 games left?", "answer": [105.0], "response": "def Problem(c0, c1, c2):\n    #Kelly originally had c0 nintendo games\n    kelly_original = c0\n\n    #Kelly found c1 more nintendo games\n    found = c1\n\n    #Kelly needs to give away some nintendo games to have c2 games left\n    left = c2\n\n    #The number of nintendo games Kelly needs to give away can be calculated by subtracting the number of games she wants to have left from the sum of her original games and the games she found, and then subtracting that result from her original number of games.\n    give_away = kelly_original + found - left\n\n    return give_away", "mapping": {"c0": 80.0, "c1": 31.0, "c2": 6.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies do you still have to watch?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #there are c0 different books and c1 different movies in the 'crazy silly school' series\n    books = c0\n    movies = c1\n\n    #if you read c2 of the books and watched c3 of the movies\n    read_books = c2\n    watched_movies = c3\n\n    #how many more movies do you still have to watch?\n    remaining_movies = movies - watched_movies\n\n    return remaining_movies", "mapping": {"c0": 4.0, "c1": 17.0, "c2": 19.0, "c3": 7.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many more sacks of unripe oranges than ripe oranges are harvested per day?", "answer": [69.0], "response": "def Problem(c0, c1):\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c0\n\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c1\n\n    #calculate the difference between the number of sacks of unripe oranges and ripe oranges harvested per day\n    difference = unripe_oranges - ripe_oranges\n\n    return difference", "mapping": {"c0": 5.0, "c1": 74.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money does he pay as rent during the harvest season?", "answer": [527292.0], "response": "def rent_payment(c0, c1, c2):\n    #Lewis earns c0 dollars every week during the harvest season\n    weekly_earnings = c0\n\n    #The harvest season lasts for c1 weeks\n    harvest_weeks = c1\n\n    #Lewis has to pay c2 dollars in rent every week\n    weekly_rent = c2\n\n    #The total amount of money Lewis pays in rent during the harvest season can be calculated by multiplying the number of weeks by the weekly rent\n    total_rent = weekly_rent * harvest_weeks\n\n    return total_rent", "mapping": {"c0": 368.0, "c1": 1359.0, "c2": 388.0}}
{"question": "For the walls of the house he would use c0 nails in all to secure large planks of wood. If each plank needs c1 pieces of nails to be secured and an additional c2 nails were used.How many planks does John need for the house wall?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    # John needs c0 nails in total to secure the planks of wood\n    total_nails = c0\n\n    # Each plank needs c1 nails to be secured\n    nails_per_plank = c1\n\n    # An additional c2 nails were used\n    extra_nails = c2\n\n    # The number of nails used for securing the planks can be calculated by subtracting the additional nails from the total number of nails\n    nails_used = total_nails - extra_nails\n\n    # The number of planks needed can be calculated by dividing the number of nails used by the number of nails needed per plank\n    planks_needed = nails_used // nails_per_plank\n\n    return planks_needed", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 8.0}}
{"question": "c0 red peaches and c1 green peaches are in the basket.How many more red peaches than green peaches are in the basket?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #number of red peaches in the basket\n    red_peaches = c0\n\n    #number of green peaches in the basket\n    green_peaches = c1\n\n    #calculate the difference between the number of red and green peaches\n    difference = red_peaches - green_peaches\n\n    return difference", "mapping": {"c0": 17.0, "c1": 16.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many students participated in the suggestion of new food items?", "answer": [826.0], "response": "def Problem(c0, c1, c2):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 students suggested adding bacon to the menu\n    bacon = c1\n\n    #c2 students suggested adding tomatoes\n    tomatoes = c2\n\n    #The total number of students who participated in the suggestion can be calculated by adding the number of students who suggested each food item\n    total_participants = mashed_potatoes + bacon + tomatoes\n\n    return total_participants", "mapping": {"c0": 324.0, "c1": 374.0, "c2": 128.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home.How many more kids stayed home compared to those who went to the camp?", "answer": [574664.0], "response": "def Problem(c0, c1):\n    #c0 kids went to camp\n    campers = c0\n\n    #c1 kids stayed home\n    stay_home = c1\n\n    #The difference between the number of kids who stayed home and those who went to camp can be calculated by subtracting the number of campers from the number of kids who stayed home\n    difference = stay_home - campers\n\n    return difference", "mapping": {"c0": 202958.0, "c1": 777622.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many more birds than storks are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds and c1 storks were sitting on the fence\n    birds = c0\n    storks = c1\n\n    #c2 more storks came to join them\n    storks_now = storks + c2\n\n    #The number of birds more than storks can be calculated by subtracting the number of storks from the number of birds\n    more_birds = birds - storks_now\n\n    return more_birds", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 2.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books do you still have to read?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of books read\n    books_read = c2\n\n    #number of movies watched\n    movies_watched = c3\n\n    #total number of books in the series\n    total_books = c0\n\n    #number of books left to read\n    books_left = total_books - books_read\n\n    return books_left", "mapping": {"c0": 22.0, "c1": 10.0, "c2": 12.0, "c3": 56.0}}
{"question": "There were c0 people on the bus. At the next stop c1 more people got on the bus. Each bus can not have more than c2 people.How many people are there on the bus now?", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 people on the bus\n    people_before = c0\n\n    #c1 more people got on the bus\n    got_on = c1\n\n    #the maximum number of people the bus can hold is c2\n    max_capacity = c2\n\n    #the number of people on the bus now is the minimum of the sum of people before and got on, and the maximum capacity of the bus\n    people_now = min(people_before + got_on, max_capacity)\n\n    return people_now", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 36.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many bottles did they have total?", "answer": [110.0], "response": "def total_bottles(c0, c1, c2):\n    #The total number of bottles can be calculated by adding the number of bottles of each type\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 57.0, "c1": 26.0, "c2": 27.0}}
{"question": "Because of the decision Sofia asked c0 students to suggest specific types of food. c1 students suggested adding bacon while others suggested adding mashed potatoes to the menu.How many students suggested mashed potatoes?", "answer": [24.0], "response": "def Problem(c0, c1):\n    #c0 students were asked to suggest specific types of food\n    total_students = c0\n\n    #c1 students suggested adding bacon\n    bacon_suggested = c1\n\n    #The remaining students who suggested adding mashed potatoes can be calculated by subtracting the number of students who suggested bacon from the total number of students who were asked to suggest food\n    mashed_potatoes_suggested = total_students - bacon_suggested\n\n    return mashed_potatoes_suggested", "mapping": {"c0": 288.0, "c1": 264.0}}
{"question": "Edward spent $ c0. Then he spent $ c1 more. Now he has $ 17.How much did Edward have before he spent his money?", "answer": [34.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 dollars\n    spent1 = c0\n\n    #Then he spent c1 more dollars\n    spent2 = c1\n\n    #Now he has 17 dollars left\n    left = 17\n\n    #The amount of money Edward had before he spent any money can be calculated by adding the amount he spent and the amount he has left to his original amount of money\n    original = spent1 + spent2 + left\n\n    return original", "mapping": {"c0": 9.0, "c1": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many bird families were left near the mountain?", "answer": [25.0], "response": "def bird_families_left(c0, c1, c2):\n    #calculate the total number of bird families that flew away\n    flew_away = c1 + c2\n    \n    #calculate the number of bird families left near the mountain\n    left = c0 - flew_away\n    \n    return left", "mapping": {"c0": 85.0, "c1": 23.0, "c2": 37.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many girls are there in the school now?", "answer": [946.0], "response": "def count_girls(c0, c1, c2):\n    #total number of girls before new students joined\n    girls_before = c0\n    \n    #total number of boys before new students joined\n    boys_before = c1\n    \n    #number of new girls who joined\n    new_girls = c2\n    \n    #total number of girls after new students joined\n    girls_now = girls_before + new_girls\n    \n    return girls_now", "mapping": {"c0": 902.0, "c1": 811.0, "c2": 44.0}}
{"question": "Dan has $ c0. He bought a chocolate for $ c1 and a candy bar for $ 2.How much money did he spend to buy chocolate than he did to buy candy bar?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    dan_money = c0\n\n    #Dan bought a chocolate for c1 dollars\n    chocolate_cost = c1\n\n    #Dan bought a candy bar for 2 dollars\n    candy_cost = 2\n\n    #The difference in cost between the chocolate and candy bar can be calculated by subtracting the cost of the candy bar from the cost of the chocolate\n    difference = chocolate_cost - candy_cost\n\n    return difference", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many tickets did Dave have left?", "answer": [2.0], "response": "def tickets_left(c0, c1, c2):\n    # Dave originally had c0 tickets\n    original_tickets = c0\n\n    # Dave used c1 tickets to buy toys\n    toys_tickets = c1\n\n    # Dave used c2 more tickets to buy clothes\n    clothes_tickets = c2\n\n    # The number of tickets Dave has left can be calculated by subtracting the total number of tickets he used from the original number of tickets he had\n    tickets_left = original_tickets - toys_tickets - clothes_tickets\n\n    return tickets_left", "mapping": {"c0": 18.0, "c1": 5.0, "c2": 11.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school with each classroom having the same number of students. There are c2 seats on each school bus.How many students are in each class?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 students in the school\n    students = c1\n\n    #There are c2 seats on each school bus\n    seats = c2\n\n    #The number of students in each class can be calculated by dividing the total number of students by the number of classrooms and then rounding up to the nearest integer\n    students_per_class = math.ceil(students/classrooms)\n\n    return students_per_class", "mapping": {"c0": 24.0, "c1": 120.0, "c2": 84.0}}
{"question": "He then went to see the oranges being harvested. He found out that the harvest will go on for c0 days.How many sacks do they harvest per day if they harvested a total of c1 sacks of oranges?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #the harvest will go on for c0 days\n    days = c0\n\n    #they harvested a total of c1 sacks of oranges\n    total_harvest = c1\n\n    #the number of sacks they harvest per day can be calculated by dividing the total number of sacks by the number of days\n    sacks_per_day = total_harvest / days\n\n    return sacks_per_day", "mapping": {"c0": 4.0, "c1": 56.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many more roses did she throw away than those she cut from her garden?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    threw_away = c1\n\n    #Jessica cut some more new roses from her flower garden to put in the vase\n    cut = c2 - roses_before + threw_away\n\n    #There are now c2 roses in the vase\n    roses_now = c2\n\n    #The number of roses Jessica threw away more than those she cut from her garden can be calculated by subtracting the number of roses she has now from the sum of the number of roses she had before and the number of roses she cut from her garden\n    difference = roses_before + cut - roses_now\n\n    return difference", "mapping": {"c0": 21.0, "c1": 34.0, "c2": 15.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Allan bought c2 more balloons at the park\n    allan_park = allan + c2\n\n    #The difference between the number of balloons Jake has and Allan has in the park can be calculated by subtracting the number of balloons Allan has in the park from the number of balloons Jake has\n    difference = jake - allan_park\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 3.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of oranges will they have after c2 days of harvest?", "answer": [2080.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of ripe oranges per day\n    ripe_per_day = c0\n\n    #they harvest c1 sacks of unripe oranges per day\n    unripe_per_day = c1\n\n    #they harvest oranges for c2 days\n    days = c2\n\n    #the total number of ripe oranges harvested can be calculated by multiplying the number of days by the number of ripe oranges harvested per day\n    total_ripe = ripe_per_day * days\n\n    #the total number of unripe oranges harvested can be calculated by multiplying the number of days by the number of unripe oranges harvested per day\n    total_unripe = unripe_per_day * days\n\n    #the total number of oranges they have after c2 days of harvest can be calculated by adding the total number of ripe oranges and the total number of unripe oranges\n    total_oranges = total_ripe + total_unripe\n\n    return total_oranges", "mapping": {"c0": 28.0, "c1": 52.0, "c2": 26.0}}
{"question": "Together Adam and Jackie have c0 apples. He has c1 apples more than adam and jackie together do.How many apples does he have?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Adam and Jackie together have c0 apples\n    together = c0\n\n    #He has c1 apples more than Adam and Jackie together do\n    he_more = c1\n\n    #Let's assume Adam has x apples\n    x = (together - he_more) / 2\n\n    #Jackie has the same number of apples as Adam\n    jackie = x\n\n    #He has c1 more apples than Adam and Jackie together do\n    he = x + jackie + he_more\n\n    return he", "mapping": {"c0": 6.0, "c1": 4.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many more trees survived the typhoon than those that died?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Haley initially had c1 trees\n    initial_trees = c1\n\n    #After the typhoon, c0 trees died\n    dead_trees = c0\n\n    #The number of trees that survived the typhoon can be calculated by subtracting the number of trees that died from the initial number of trees\n    survived_trees = initial_trees - dead_trees\n\n    #The number of trees that died can be calculated by subtracting the number of trees that survived from the initial number of trees\n    died_trees = initial_trees - survived_trees\n\n    #The difference between the number of trees that survived and the number of trees that died is the answer to the problem\n    difference = survived_trees - died_trees\n\n    return difference", "mapping": {"c0": 2.0, "c1": 11.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many balloons did Jake bring to the park?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan = c0\n\n    #Jake brought c1 balloons\n    jake = c1\n\n    #Jake bought c2 more balloons at the park\n    bought = c2\n\n    #The total number of balloons Jake brought to the park can be calculated by adding the number of balloons he brought originally and the number he bought at the park\n    total = jake + bought\n\n    return total", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 3.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the t-shirts?", "answer": [11346.0], "response": "def Problem(c0, c1, c2, c3):\n    #The Razorback shop makes c0 dollars off each t-shirt\n    tshirt_price = c0\n\n    #The Razorback shop makes c1 dollars off each jersey\n    jersey_price = c1\n\n    #During the Arkansas and Texas tech game they sold c2 t-shirts\n    tshirt_sold = c2\n\n    #During the Arkansas and Texas tech game they sold c3 jerseys\n    jersey_sold = c3\n\n    #The amount of money they made from selling t-shirts can be calculated by multiplying the price of each t-shirt by the number of t-shirts sold\n    tshirt_money = tshirt_price * tshirt_sold\n\n    return tshirt_money", "mapping": {"c0": 62.0, "c1": 99.0, "c2": 183.0, "c3": 31.0}}
{"question": "David did c0 more push-ups than Zachary in gym class today. If David did c1 push-upsHow many push-ups did Zachary do?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #David did c1 push-ups\n    david = c1\n\n    #David did c0 more push-ups than Zachary, so Zachary did c1 - c0 push-ups\n    zachary = david - c0\n\n    return zachary", "mapping": {"c0": 30.0, "c1": 37.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much more did his strawberries weigh than his dad's?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #His dad's strawberries weighed c1 - c0 pounds\n    dad_weight = total_weight - marco_weight\n\n    #The difference in weight between Marco's strawberries and his dad's can be calculated by subtracting his dad's weight from his own\n    difference = marco_weight - dad_weight\n\n    return difference", "mapping": {"c0": 30.0, "c1": 47.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 crayons and c2 pencils in each row.How many crayons does she have?", "answer": [96.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 crayons in each row\n    crayons_per_row = c1\n\n    #Faye has c0 rows\n    rows = c0\n\n    #Faye has c1 crayons and c2 pencils in each row, so the total number of crayons can be calculated by multiplying the number of rows by the number of crayons in each row\n    total_crayons = rows * crayons_per_row\n\n    return total_crayons", "mapping": {"c0": 16.0, "c1": 6.0, "c2": 21.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the morning and evening?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning and c2 emails in the evening\n    morning = c0\n    evening = c2\n\n    #The function returns the sum of emails Jack received in the morning and evening\n    return morning + evening", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 8.0}}
{"question": "Jesse's room is c0 feet long. If she needs a carpet of size c1 square feetWhat is the width of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet long\n    length = c0\n\n    #She needs a carpet of size c1 square feet\n    area = c1\n\n    #The width of her room can be calculated by dividing the area of the carpet by the length of the room\n    width = area/length\n\n    return width", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Debby bought c0 water bottles when they were on sale. If she drank c1 bottles a day for c2 days.How many bottles does she have left?", "answer": [99.0], "response": "def Problem(c0, c1, c2):\n    #Debby bought c0 water bottles\n    bottles_before = c0\n\n    #Debby drank c1 bottles a day\n    drank_per_day = c1\n\n    #Debby drank for c2 days\n    days = c2\n\n    #The number of bottles Debby has left can be calculated by subtracting the number of bottles she drank from the original number of bottles she bought\n    bottles_left = bottles_before - (drank_per_day * days)\n\n    return bottles_left", "mapping": {"c0": 264.0, "c1": 15.0, "c2": 11.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the afternoon than in the evening?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #c1 campers went rowing in the afternoon\n    afternoon = c1\n\n    #c2 campers went rowing in the evening\n    evening = c2\n\n    #The difference between the number of campers rowing in the afternoon and evening can be calculated by subtracting the number of campers rowing in the evening from the number of campers rowing in the afternoon\n    difference = afternoon - evening\n\n    return difference", "mapping": {"c0": 33.0, "c1": 34.0, "c2": 10.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many books and magazines does he have in total?", "answer": [2436.0], "response": "def total_books_and_magazines(c0, c1, c2):\n    #Bryan has c0 books in each bookshelf\n    books_per_shelf = c0\n\n    #Bryan has c1 magazines in each bookshelf\n    magazines_per_shelf = c1\n\n    #Bryan has c2 bookshelves\n    num_shelves = c2\n\n    #The total number of books Bryan has can be calculated by multiplying the number of books per shelf by the number of shelves\n    total_books = books_per_shelf * num_shelves\n\n    #The total number of magazines Bryan has can be calculated by multiplying the number of magazines per shelf by the number of shelves\n    total_magazines = magazines_per_shelf * num_shelves\n\n    #The total number of books and magazines Bryan has in total can be calculated by adding the total number of books and the total number of magazines\n    total = total_books + total_magazines\n\n    return total", "mapping": {"c0": 23.0, "c1": 61.0, "c2": 29.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many crayons does she have?", "answer": [210.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c0 rows of pencils and crayons\n    rows = c0\n\n    #Each row has c1 pencils and c2 crayons\n    pencils_per_row = c1\n    crayons_per_row = c2\n\n    #The total number of crayons Faye has can be calculated by multiplying the number of rows by the number of crayons per row\n    total_crayons = rows * crayons_per_row\n\n    return total_crayons", "mapping": {"c0": 7.0, "c1": 36.0, "c2": 30.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many pastries would baker still have?", "answer": [45.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes = c0\n    pastries = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    sold_cakes = c2\n    sold_pastries = c3\n\n    #The number of pastries Baker would still have can be calculated by subtracting the number of sold pastries from the original number of pastries\n    pastries_left = pastries - sold_pastries\n\n    return pastries_left", "mapping": {"c0": 7.0, "c1": 148.0, "c2": 15.0, "c3": 103.0}}
{"question": "Robin cut off c0 inches of his hair. If his hair was c1 inches long initiallyHow long is his hair now?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Robin's hair was initially c1 inches long\n    initial_length = c1\n\n    #Robin cut off c0 inches of his hair\n    cut_off = c0\n\n    #The length of Robin's hair now can be calculated by subtracting the length he cut off from the initial length\n    length_now = initial_length - cut_off\n\n    return length_now", "mapping": {"c0": 13.0, "c1": 14.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables, each having the same number of chairs. If there are a total of c1 chairs in the backyardHow many chairs are there for each table?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are c0 sets of tables\n    num_tables = c0\n\n    #there are c1 chairs in total\n    num_chairs = c1\n\n    #Each table has the same number of chairs, so we can divide the total number of chairs by the number of tables to get the number of chairs per table\n    chairs_per_table = num_chairs / num_tables\n\n    return chairs_per_table", "mapping": {"c0": 2.0, "c1": 12.0}}
{"question": "Debby bought c0 water bottles and c1 soda bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the water bottles last?", "answer": [22.0], "response": "def Problem(c0, c1, c2, c3):\n    #Debby bought c0 water bottles and c1 soda bottles\n    water_bottles = c0\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_per_day = c2\n\n    #The number of days the water bottles would last can be calculated by dividing the number of water bottles by the number of water bottles Debby drinks per day\n    days = water_bottles // water_per_day\n\n    return days", "mapping": {"c0": 88.0, "c1": 13.0, "c2": 4.0, "c3": 87.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Jason washed cars over the weekend and now has c2 dollars.How much money did Jason make washing cars?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Fred had c0 dollars last week\n    fred = c0\n\n    #Jason had c1 dollars last week\n    jason = c1\n\n    #Jason now has c2 dollars after washing cars over the weekend\n    jason_now = c2\n\n    #The amount of money Jason made washing cars can be calculated by subtracting his original amount of money from his current amount of money\n    jason_made = jason_now - jason\n\n    return jason_made", "mapping": {"c0": 60.0, "c1": 19.0, "c2": 33.0}}
{"question": "Paul sold some books in a garage sale leaving him with c0 books. If he had c1 books initiallyHow many books did he sell?", "answer": [109.0], "response": "def Problem(c0, c1):\n    #Paul had c1 books initially\n    initial_books = c1\n\n    #After selling some books, he now has c0 books\n    remaining_books = c0\n\n    #The number of books Paul sold can be calculated by subtracting the remaining books from the initial books\n    sold_books = initial_books - remaining_books\n\n    return sold_books", "mapping": {"c0": 27.0, "c1": 136.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If the feathers require c0 g of wax and right now he has c1 gHow many more grams of wax does he need?", "answer": [146.0], "response": "def Problem(c0, c1):\n    #The feathers require c0 g of wax\n    wax_needed = c0\n\n    #Right now he has c1 g of wax\n    wax_now = c1\n\n    #The additional grams of wax he needs can be calculated by subtracting the amount of wax he has now from the amount of wax needed\n    wax_needed_now = wax_needed - wax_now\n\n    return wax_needed_now", "mapping": {"c0": 166.0, "c1": 20.0}}
{"question": "The bananas in Philip's collection are organized into c0 groups. If there are a total of c1 bananas in Philip's banana collectionHow big is each group?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #The bananas in Philip's collection are organized into c0 groups\n    num_groups = c0\n\n    #If there are a total of c1 bananas in Philip's banana collection\n    total_bananas = c1\n\n    #The size of each group can be calculated by dividing the total number of bananas by the number of groups\n    group_size = total_bananas / num_groups\n\n    return group_size", "mapping": {"c0": 196.0, "c1": 392.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches and the frog jumped c1 inches.How much farther did the frog jump than the grasshopper?", "answer": [3.0], "response": "def jumping_contest(c0, c1):\n    #grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #frog jumped c1 inches\n    frog = c1\n\n    #the difference between the distance the frog jumped and the distance the grasshopper jumped can be calculated by subtracting the distance the grasshopper jumped from the distance the frog jumped\n    difference = frog - grasshopper\n\n    return difference", "mapping": {"c0": 9.0, "c1": 12.0}}
{"question": "In Haley's class c0 boys love to play marbles and c1 boys love to play cards. If Haley has c2 marblesHow many will each of the boys receive?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #In Haley's class, c0 boys love to play marbles and c1 boys love to play cards\n    marbles_lovers = c0\n    cards_lovers = c1\n\n    #Haley has c2 marbles\n    marbles = c2\n\n    #The number of marbles each boy will receive can be calculated by dividing the total number of marbles by the number of boys who love to play marbles\n    marbles_per_boy = marbles / marbles_lovers\n\n    #The number of cards each boy will receive can be calculated by dividing the total number of cards by the number of boys who love to play cards\n    cards_per_boy = (marbles + cards_lovers) / cards_lovers\n\n    return marbles_per_boy, cards_per_boy", "mapping": {"c0": 13.0, "c1": 50.0, "c2": 26.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven who has c2 more peaches than Jill.How many peaches does Jill have?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake = steven - c1\n\n    #Steven has c2 more peaches than Jill\n    jill = steven - c2\n\n    #The number of peaches Jill has can be calculated by subtracting the difference between Steven and Jill from Steven's total number of peaches\n    jill_total = steven - (steven - jill)\n\n    return jill_total", "mapping": {"c0": 18.0, "c1": 12.0, "c2": 8.0}}
{"question": "In Haley's class c0 are boys who love to play marbles. If Haley gives c1 marbles to each boyHow many marbles did she have?", "answer": [99.0], "response": "def Problem(c0, c1):\n    #there are c0 boys in the class who love to play marbles\n    boys = c0\n\n    #Haley gives c1 marbles to each boy\n    marbles_per_boy = c1\n\n    #The total number of marbles Haley gave can be calculated by multiplying the number of boys by the number of marbles she gave to each boy\n    total_marbles_given = boys * marbles_per_boy\n\n    #The total number of marbles Haley had before giving any away can be calculated by adding the total number of marbles given to the number of marbles each boy already had\n    total_marbles_before = total_marbles_given + (boys * (marbles_per_boy - 1))\n\n    return total_marbles_before", "mapping": {"c0": 11.0, "c1": 9.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground. If Ed had c2 marblesHow many more marbles did Ed have than Doug then?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed = c0 + doug\n\n    #Ed lost c1 of his marbles at the playground\n    ed_now = ed - c1\n\n    #Ed had c2 marbles now\n    ed_final = c2\n\n    #Doug had (ed_final - c0) marbles\n    doug_final = ed_final - c0\n\n    #The difference between Ed's and Doug's marbles can be calculated by subtracting Doug's marbles from Ed's marbles\n    difference = ed_final - doug_final\n\n    return difference", "mapping": {"c0": 30.0, "c1": 21.0, "c2": 91.0}}
{"question": "A farmer had c0 green tomatoes and c1 red tomatoes in his garden. If he picked c2 tomatoesHow many tomatoes are left?", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #The farmer had c0 green tomatoes and c1 red tomatoes in his garden\n    green_tomatoes = c0\n    red_tomatoes = c1\n\n    #The farmer picked c2 tomatoes\n    picked_tomatoes = c2\n\n    #The number of tomatoes left can be calculated by subtracting the number of picked tomatoes from the original number of tomatoes\n    tomatoes_left = green_tomatoes + red_tomatoes - picked_tomatoes\n\n    return tomatoes_left", "mapping": {"c0": 105.0, "c1": 71.0, "c2": 137.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 taxHow much money will have at the end of the harvest season?", "answer": [3834.0], "response": "def harvest_money(c0, c1, c2):\n    #Lewis earns c0 every week during c1 weeks of harvest\n    earnings = c0 * c1\n\n    #He has to pay c2 tax\n    tax = c2\n\n    #The amount of money he will have at the end of the harvest season can be calculated by subtracting the tax from his earnings\n    money = earnings - tax\n\n    return money", "mapping": {"c0": 21.0, "c1": 216.0, "c2": 702.0}}
{"question": "Nell collects baseball cards. She had c0 cards while Jeff had c1 cards. She gave some of her cards to Jeff and now has c2 cards left.How many cards does Jeff have now?", "answer": [265.0], "response": "def Problem(c0, c1, c2):\n    #Nell originally had c0 cards\n    nell = c0\n\n    #Jeff originally had c1 cards\n    jeff = c1\n\n    #After Nell gave some cards to Jeff, she now has c2 cards left\n    nell_now = c2\n\n    #The number of cards Jeff has now can be calculated by adding the number of cards Nell gave him to his original number of cards\n    jeff_now = jeff + (nell - nell_now)\n\n    return jeff_now", "mapping": {"c0": 566.0, "c1": 234.0, "c2": 535.0}}
{"question": "Rebecca wants to split a collection of marbles into groups of c0. Rebecca has c1 eggs and c2 marbles.How many groups will be created?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca wants to split the marbles into groups of c0\n    group_size = c0\n\n    #Rebecca has c1 eggs and c2 marbles\n    eggs = c1\n    marbles = c2\n\n    #The total number of marbles and eggs can be combined to get the total number of items to be split into groups\n    total_items = eggs + marbles\n\n    #The number of groups that can be created can be calculated by dividing the total number of items by the group size\n    groups = total_items // group_size\n\n    return groups", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 20.0}}
{"question": "Matthew had c0 crackers. He has c1 crackers left after he gave equal numbers of crackers to his c2 friends.How many crackers did Matthew give to his friends?", "answer": [8.0], "response": "def crackers_given(c0, c1, c2):\n    #Matthew originally had c0 crackers\n    original = c0\n    \n    #Matthew has c1 crackers left after giving crackers to his c2 friends\n    now = c1\n    \n    #Matthew gave equal numbers of crackers to his c2 friends\n    friends = c2\n    \n    #The total number of crackers given to friends can be calculated by subtracting the number of crackers left now from the original number of crackers and dividing by the number of friends\n    given = (original - now) / friends\n    \n    return given", "mapping": {"c0": 31.0, "c1": 23.0, "c2": 5.0}}
{"question": "An industrial machine can make c0 shirts a minute. It worked for c1 minutes yesterday and for c2 minutes today.How many shirts did machine make today?", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #The machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #The machine worked for c1 minutes yesterday\n    minutes_yesterday = c1\n\n    #The machine worked for c2 minutes today\n    minutes_today = c2\n\n    #The total number of shirts made yesterday can be calculated by multiplying the number of minutes worked yesterday by the number of shirts the machine can make per minute\n    shirts_yesterday = shirts_per_minute * minutes_yesterday\n\n    #The total number of shirts made today can be calculated by multiplying the number of minutes worked today by the number of shirts the machine can make per minute\n    shirts_today = shirts_per_minute * minutes_today\n\n    #The total number of shirts made today is the difference between the total number of shirts made yesterday and today\n    total_shirts_today = shirts_today - shirts_yesterday\n\n    return total_shirts_today", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 12.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much more did his dad's strawberries weigh than his?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #His dad's strawberries weighed the difference between the total weight and Marco's strawberries weight\n    dad_weight = total_weight - marco_weight\n\n    #The difference between his dad's strawberries weight and Marco's strawberries weight can be calculated by subtracting Marco's strawberries weight from his dad's strawberries weight\n    difference = dad_weight - marco_weight\n\n    return difference", "mapping": {"c0": 10.0, "c1": 26.0}}
{"question": "Rachel picked c0 apples from her tree. If the tree had c1 apples initially.How many apples are still there on the tree?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Rachel picked c0 apples from the tree\n    picked = c0\n\n    #The tree initially had c1 apples\n    initial = c1\n\n    #The number of apples still on the tree can be calculated by subtracting the number of apples picked from the initial number of apples on the tree\n    remaining = initial - picked\n\n    return remaining", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "After making some pies, chef had c0 apples left. Initially he had c1 applesHow many apples did he use?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #Chef initially had c1 apples\n    initial_apples = c1\n\n    #After making some pies, he had c0 apples left\n    apples_left = c0\n\n    #The number of apples he used can be calculated by subtracting the number of apples left from the initial number of apples\n    used_apples = initial_apples - apples_left\n\n    return used_apples", "mapping": {"c0": 2.0, "c1": 43.0}}
{"question": "Allan brought c0 balloons and c1 balls while Jake brought c2 balloons and c3 balls to the park.How many balloons did Allan and Jake have in the park?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Allan brought c0 balloons and c1 balls\n    allan_balloons = c0\n    allan_balls = c1\n\n    #Jake brought c2 balloons and c3 balls\n    jake_balloons = c2\n    jake_balls = c3\n\n    #The total number of balloons in the park is the sum of balloons brought by Allan and Jake\n    total_balloons = allan_balloons + jake_balloons\n\n    return total_balloons", "mapping": {"c0": 3.0, "c1": 20.0, "c2": 5.0, "c3": 59.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much more money did she spend at the supermarket than she collected at the atm?", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #Olivia originally had c0 dollars in her wallet\n    original_money = c0\n\n    #She collected c1 more dollars from an atm\n    collected_money = c1\n\n    #After visiting the supermarket, she had c2 dollars left\n    remaining_money = c2\n\n    #The amount of money she spent at the supermarket can be calculated by subtracting the remaining money from the total amount of money she had after collecting from the atm\n    spent_money = original_money + collected_money - remaining_money\n\n    #The amount of money she spent more than she collected from the atm can be calculated by subtracting the collected money from the spent money\n    more_spent_money = spent_money - collected_money\n\n    return more_spent_money", "mapping": {"c0": 53.0, "c1": 91.0, "c2": 14.0}}
{"question": "Faye was placing some pencils equally into c0 rows. If she had c1 pencilsHow many pencils did she place in each row?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Faye was placing pencils equally into c0 rows\n    rows = c0\n\n    #Faye had c1 pencils in total\n    total_pencils = c1\n\n    #The number of pencils Faye placed in each row can be calculated by dividing the total number of pencils by the number of rows\n    pencils_per_row = total_pencils // rows\n\n    return pencils_per_row", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with some more kids on tuesday. If she played with a total of c1 kidsHow many kids did she play with on tuesday?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday = c0\n\n    #She played with a total of c1 kids\n    total = c1\n\n    #The number of kids she played with on tuesday can be calculated by subtracting the number of kids she played with on monday from the total number of kids she played with\n    tuesday = total - monday\n\n    return tuesday", "mapping": {"c0": 5.0, "c1": 15.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny find at the park than those he threw away?", "answer": [44.0], "response": "def Problem(c0, c1, c2):\n    #Danny threw away c0 bottle caps\n    threw_away = c0\n\n    #Danny found c1 new bottle caps\n    found = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total_now = c2\n\n    #The difference between the number of new bottle caps found and the number of old bottle caps thrown away can be calculated by subtracting threw_away from found\n    difference = found - threw_away\n\n    return difference", "mapping": {"c0": 6.0, "c1": 50.0, "c2": 60.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many cookies did Paco have left?", "answer": [12.0], "response": "def cookies_left(c0, c1, c2):\n    #Paco originally had c0 cookies\n    paco_original = c0\n\n    #Paco gave c1 cookies to his friend\n    paco_now = paco_original - c1\n\n    #Paco ate c2 cookies\n    paco_left = paco_now - c2\n\n    return paco_left", "mapping": {"c0": 36.0, "c1": 14.0, "c2": 10.0}}
{"question": "They decided to hold the party in their backyard. If they have c0 sets of tables and each set has c1 chairsHow many more chairs than tables do they have?", "answer": [45.0], "response": "def Problem(c0, c1):\n    #they have c0 sets of tables\n    tables = c0\n\n    #each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #the total number of chairs they have is the product of the number of tables and the number of chairs per table\n    total_chairs = tables * chairs_per_table\n\n    #the number of chairs more than tables can be calculated by subtracting the number of tables from the total number of chairs\n    more_chairs = total_chairs - tables\n\n    return more_chairs", "mapping": {"c0": 5.0, "c1": 10.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Ron's height. Dean is c1 feet taller than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [208.0], "response": "def Problem(c0, c1, c2):\n    #Ron's height is c2 feet\n    ron_height = c2\n\n    #Dean is c1 feet taller than Ron\n    dean_height = ron_height + c1\n\n    #The depth of the water is c0 times Ron's height\n    water_depth = c0 * ron_height\n\n    return water_depth", "mapping": {"c0": 16.0, "c1": 9.0, "c2": 13.0}}
{"question": "A farmer had c0 tomatoes and c1 potatoes in his garden. If he picked c2 tomatoesHow many tomatoes and potatoes does he have left?", "answer": [136.0], "response": "def Problem(c0, c1, c2):\n    #The farmer had c0 tomatoes and c1 potatoes\n    tomatoes = c0\n    potatoes = c1\n\n    #The farmer picked c2 tomatoes\n    picked_tomatoes = c2\n\n    #The number of tomatoes and potatoes left can be calculated by subtracting the number of picked tomatoes from the original number of tomatoes and the original number of potatoes\n    tomatoes_left = tomatoes - picked_tomatoes\n    potatoes_left = potatoes\n\n    return tomatoes_left, potatoes_left", "mapping": {"c0": 177.0, "c1": 12.0, "c2": 53.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #number of red peaches in the basket\n    red = c0\n\n    #number of yellow peaches in the basket\n    yellow = c1\n\n    #number of green peaches in the basket\n    green = c2\n\n    #calculate the difference between the number of green and red peaches\n    diff = green - red\n\n    return diff", "mapping": {"c0": 7.0, "c1": 71.0, "c2": 8.0}}
{"question": "c0 campers went rowing in the morning. c1 campers went rowing in the afternoon.How many more campers went rowing in the afternoon than in the morning?", "answer": [9.0], "response": "def rowing_difference(c0, c1):\n    #number of campers rowing in the morning\n    morning = c0\n    \n    #number of campers rowing in the afternoon\n    afternoon = c1\n    \n    #difference between the number of campers rowing in the afternoon and morning\n    difference = afternoon - morning\n    \n    return difference", "mapping": {"c0": 52.0, "c1": 61.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many roses did she cut?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = roses_before - c3\n    orchids_cut = orchids_before - c2\n\n    #There are now c2 orchids and c3 roses in the vase\n    roses_now = c3\n    orchids_now = c2\n\n    #The number of roses Jessica cut can be calculated by subtracting the number of roses now from the original number of roses and the number of roses she cut\n    roses_cut_total = roses_before - roses_now - roses_cut\n\n    return roses_cut_total", "mapping": {"c0": 13.0, "c1": 84.0, "c2": 91.0, "c3": 14.0}}
{"question": "Debby bought some water bottles when they were on sale. She drank c0 bottles a day. If the bottles lasted for c1 daysHow many bottles had she bought?", "answer": [8066.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Debby drank c0 bottles a day\n    drank_per_day = c0\n\n    #The bottles lasted for c1 days\n    days_lasted = c1\n\n    #The total number of bottles Debby bought can be calculated by multiplying the number of bottles she drank per day by the number of days the bottles lasted\n    total_bought = drank_per_day * days_lasted\n\n    return total_bought", "mapping": {"c0": 109.0, "c1": 74.0}}
{"question": "Edward spent $ c0 to buy c1 books each book costing him the same amount of money. Now he has $ 12.How much did each book cost?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars to buy c1 books\n    spent = c0\n    books = c1\n\n    #Each book costs the same amount of money, so we can divide the total amount spent by the number of books to find the cost per book\n    cost_per_book = spent / books\n\n    #Now we know that Edward has $12, so we can set that as the new total amount spent and solve for the cost per book\n    new_spent = 12\n    new_cost_per_book = new_spent / books\n\n    return new_cost_per_book\n\n#Example usage:\nprint(Problem(24, 6)) #Output: 4.0 (each book costs $4)", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces does Robin have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum and c1 packages of candy\n    gum_packages = c0\n    candy_packages = c1\n\n    #There are c2 pieces in each package\n    pieces_per_package = c2\n\n    #The total number of pieces Robin has can be calculated by multiplying the number of packages by the number of pieces per package and adding them together\n    total_pieces = (gum_packages + candy_packages) * pieces_per_package\n\n    return total_pieces", "mapping": {"c0": 28.0, "c1": 14.0, "c2": 6.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books are there in the ' crazy silly school ' series?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of movies left after watching c3 of them\n    movies_left = c0 - c3\n\n    #calculate the number of books left after reading c2 of them\n    books_left = c1 - c2\n\n    #calculate the difference between the number of movies and books left\n    difference = movies_left - books_left\n\n    return difference", "mapping": {"c0": 17.0, "c1": 11.0, "c2": 13.0, "c3": 63.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the morning and afternoon?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon = c1\n\n    #The total number of emails Jack received can be calculated by adding the number of emails he received in the morning, afternoon, and evening\n    total = morning + afternoon + c2\n\n    #The number of emails Jack received in the morning and afternoon can be calculated by adding the number of emails he received in the morning and afternoon\n    morning_and_afternoon = morning + afternoon\n\n    return morning_and_afternoon", "mapping": {"c0": 5.0, "c1": 8.0, "c2": 72.0}}
{"question": "Randy uses c0 blocks to build a tower. If he had c1 blocksHow many blocks are left?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #Randy used c0 blocks to build a tower\n    used = c0\n\n    #If he had c1 blocks, the number of blocks left can be calculated by subtracting the number of blocks used from the number of blocks he had\n    left = c1 - used\n\n    return left", "mapping": {"c0": 36.0, "c1": 59.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. His dad's strawberries weighed c1 pounds.How much did marco's strawberries weigh?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #The total weight of strawberries they picked together is c0 pounds\n    total_weight = c0\n\n    #His dad's strawberries weighed c1 pounds\n    dad_weight = c1\n\n    #The weight of Marco's strawberries can be calculated by subtracting his dad's strawberries weight from the total weight\n    marco_weight = total_weight - dad_weight\n\n    return marco_weight", "mapping": {"c0": 20.0, "c1": 17.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died. Then she grew c2 more trees.How many trees does she have left?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Haley originally grew c0 trees\n    original_trees = c0\n\n    #After the typhoon, c1 trees died\n    dead_trees = c1\n\n    #Haley grew c2 more trees after the typhoon\n    new_trees = c2\n\n    #The number of trees Haley has left can be calculated by subtracting the number of dead trees from the original number of trees and then adding the number of new trees\n    trees_left = original_trees - dead_trees + new_trees\n\n    return trees_left", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 5.0}}
{"question": "Stray cats loved eating goldfish in the pond leaving c0 goldfish. Paige had raised c1 goldfish in the pond initially.How many goldfish disappeared?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Paige initially had c1 goldfish in the pond\n    initial = c1\n\n    #After the stray cats ate some goldfish, there are c0 goldfish left in the pond\n    left = c0\n\n    #The number of goldfish that disappeared can be calculated by subtracting the number of goldfish left from the initial number of goldfish\n    disappeared = initial - left\n\n    return disappeared", "mapping": {"c0": 6.0, "c1": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 wrappers and c3 bottle caps in his collection.How many more bottle caps than wrappers does danny have now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 wrappers and c3 bottle caps\n    bottle_caps_now = c3\n    wrappers_now = c2\n\n    #The difference between the number of bottle caps and wrappers Danny has now can be calculated by subtracting the number of wrappers Danny has now from the number of bottle caps Danny has now\n    difference = bottle_caps_now - wrappers_now\n\n    return difference", "mapping": {"c0": 58.0, "c1": 25.0, "c2": 11.0, "c3": 12.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of sugar.How many more cups of flour than cups of sugar does she need to add now?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The recipe calls for c0 cups of flour and c1 cups of sugar\n    flour = c0\n    sugar = c1\n\n    #Mary already put in c2 cups of sugar\n    sugar_now = c2\n\n    #The number of cups of flour Mary needs to add now can be calculated by subtracting the amount of sugar she already put in from the amount of sugar the recipe calls for, and then subtracting that result from the amount of flour the recipe calls for.\n    flour_needed = flour - (sugar - sugar_now)\n\n    #The number of cups of sugar Mary needs to add now can be calculated by subtracting the amount of sugar she already put in from the amount of sugar the recipe calls for.\n    sugar_needed = sugar - sugar_now\n\n    #The difference between the number of cups of flour needed and the number of cups of sugar needed is the answer to the problem.\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 4.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide. If each tile is of size c2 square feetHow many tiles does she need to cover the whole floor?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Jesse's room is c0 feet long and c1 feet wide\n    length = c0\n    width = c1\n\n    #Each tile is of size c2 square feet\n    tile_size = c2\n\n    #The total area of the floor can be calculated by multiplying the length and width of the room\n    floor_area = length * width\n\n    #The number of tiles needed to cover the whole floor can be calculated by dividing the total area of the floor by the size of each tile\n    tiles_needed = floor_area / tile_size\n\n    return tiles_needed", "mapping": {"c0": 2.0, "c1": 12.0, "c2": 4.0}}
{"question": "An industrial machine can make c0 shirts a minute. It worked for c1 minutes yesterday and for c2 shirts today.How many shirts did machine make altogether?", "answer": [156.0], "response": "def Problem(c0, c1, c2):\n    #The machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #The machine worked for c1 minutes yesterday\n    minutes_yesterday = c1\n\n    #The machine made c2 shirts today\n    shirts_today = c2\n\n    #The total number of shirts the machine made can be calculated by multiplying the number of minutes yesterday by the number of shirts per minute and adding the number of shirts made today\n    total_shirts = (shirts_per_minute * minutes_yesterday) + shirts_today\n\n    return total_shirts", "mapping": {"c0": 6.0, "c1": 12.0, "c2": 14.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many salty cookies did Paco have left?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #Paco ate c2 sweet cookies and c3 salty cookies\n    ate_sweet = c2\n    ate_salty = c3\n\n    #The number of salty cookies Paco has left can be calculated by subtracting the number of salty cookies he ate from the original number of salty cookies he had\n    salty_left = salty_cookies - ate_salty\n\n    return salty_left", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 36.0, "c3": 3.0}}
{"question": "Robin cut off c0 inches of his hair. If his hair is now c1 inches longHow long was his hair before he cut?", "answer": [30.0], "response": "def Problem(c0, c1):\n    #Robin cut off c0 inches of his hair\n    cut_off = c0\n\n    #Robin's hair is now c1 inches long\n    now = c1\n\n    #The length of Robin's hair before he cut can be calculated by adding the length of his hair now to the length he cut off\n    before = now + cut_off\n\n    return before", "mapping": {"c0": 20.0, "c1": 10.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How far did the frog jump?", "answer": [53.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse_jump = frog_jump + c2\n\n    return frog_jump", "mapping": {"c0": 36.0, "c1": 17.0, "c2": 15.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces of gum does Robin have?", "answer": [112.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum\n    gum_packages = c0\n\n    #Each package has c2 pieces\n    gum_per_package = c2\n\n    #The total number of gum pieces Robin has can be calculated by multiplying the number of gum packages by the number of gum pieces per package\n    gum_total = gum_packages * gum_per_package\n\n    return gum_total", "mapping": {"c0": 28.0, "c1": 13.0, "c2": 4.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker sell?", "answer": [11.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes = c0\n    pastries = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    sold_cakes = c2\n    sold_pastries = c3\n\n    #The difference between the number of cakes sold and pastries sold can be calculated by subtracting the number of pastries sold from the number of cakes sold\n    difference = sold_cakes - sold_pastries\n\n    return difference", "mapping": {"c0": 157.0, "c1": 169.0, "c2": 158.0, "c3": 147.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more girls than boysHow many pupils are there in that school?", "answer": [1455.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more girls than boys\n    diff = c1\n\n    #The number of boys can be calculated by dividing the difference by 2 (since the number of girls is c1 more than the number of boys)\n    boys = diff / 2\n\n    #The total number of pupils in the school can be calculated by adding the number of girls and boys\n    total = girls + boys\n\n    return total", "mapping": {"c0": 868.0, "c1": 281.0}}
{"question": "David did c0 push-ups in gym class today. David did c1 more push-ups than Zachary.How many push-ups did Zachary and David do altogether?", "answer": [53.0], "response": "def Problem(c0, c1):\n    #David did c0 push-ups\n    david = c0\n\n    #David did c1 more push-ups than Zachary\n    zachary = david - c1\n\n    #The total number of push-ups they did altogether can be calculated by adding the number of push-ups David did and the number of push-ups Zachary did\n    total = david + zachary\n\n    return total", "mapping": {"c0": 51.0, "c1": 49.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There were c0 bird families living near the mountain. If c1 bird families flew away for winterHow many more bird families stayed behind than those that flew away for the winter?", "answer": [73.0], "response": "def bird_families(c0, c1):\n    #number of bird families that stayed behind can be calculated by subtracting the number of bird families that flew away from the original number of bird families\n    stayed_behind = c0 - c1\n\n    #number of bird families that flew away can be calculated by subtracting the number of bird families that stayed behind from the original number of bird families\n    flew_away = c1\n\n    #difference between the number of bird families that stayed behind and the number of bird families that flew away\n    difference = stayed_behind - flew_away\n\n    return difference", "mapping": {"c0": 87.0, "c1": 7.0}}
{"question": "A school has c0 pupils. There are c1 girls and the rest are boys.How many boys are there in that school?", "answer": [253.0], "response": "def Problem(c0, c1):\n    #c1 girls are in the school\n    girls = c1\n\n    #The rest of the pupils are boys\n    boys = c0 - girls\n\n    return boys", "mapping": {"c0": 485.0, "c1": 232.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker make?", "answer": [123.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries\n    pastries = c0\n\n    #Baker made c1 cakes\n    cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #Baker sold c3 pastries\n    sold_pastries = c3\n\n    #The number of pastries left after selling can be calculated by subtracting the number of pastries sold from the original number of pastries\n    pastries_left = pastries - sold_pastries\n\n    #The number of cakes left after selling can be calculated by subtracting the number of cakes sold from the original number of cakes\n    cakes_left = cakes - sold_cakes\n\n    #The difference between the number of pastries left and the number of cakes left is the number of more pastries than cakes that Baker made\n    more_pastries = pastries_left - cakes_left\n\n    return more_pastries", "mapping": {"c0": 134.0, "c1": 11.0, "c2": 140.0, "c3": 92.0}}
{"question": "Nell collects baseball cards. She had c0 cards while Jeff had c1 cards. She gave some of her cards to jeff and now has c2 cards left.How many cards did Nell give to Jeff?", "answer": [276.0], "response": "def Problem(c0, c1, c2):\n    #Nell originally had c0 cards\n    nell_original = c0\n\n    #Jeff originally had c1 cards\n    jeff_original = c1\n\n    #Nell now has c2 cards after giving some to Jeff\n    nell_now = c2\n\n    #The number of cards Nell gave to Jeff can be calculated by subtracting the number of cards Nell has now from the sum of the original number of cards Nell and Jeff had\n    gave = (nell_original + jeff_original) - nell_now\n\n    return gave", "mapping": {"c0": 528.0, "c1": 11.0, "c2": 252.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 seats on each school bus. If c3 students do n't want to go for the tripHow many buses are needed to take the trip?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #The school has c0 classrooms\n    classrooms = c0\n\n    #There are c1 students in the school\n    students = c1\n\n    #There are c2 seats on each school bus\n    seats_per_bus = c2\n\n    #c3 students don't want to go for the trip\n    not_going = c3\n\n    #The number of students going on the trip can be calculated by subtracting the number of students not going from the total number of students\n    going = students - not_going\n\n    #The number of buses needed can be calculated by dividing the number of students going by the number of seats per bus, rounded up to the nearest integer\n    buses_needed = math.ceil(going/seats_per_bus)\n\n    return buses_needed", "mapping": {"c0": 66.0, "c1": 102.0, "c2": 8.0, "c3": 22.0}}
{"question": "c0 people can ride the Ferris wheel in paradise park at the same time. If each seat on the Ferris wheel can hold c1 peopleHow many seats does the Ferris wheel have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #c0 people can ride the Ferris wheel at the same time\n    capacity = c0\n\n    #each seat on the Ferris wheel can hold c1 people\n    seat_capacity = c1\n\n    #The number of seats the Ferris wheel has can be calculated by dividing the capacity by the seat capacity\n    seats = capacity // seat_capacity\n\n    return seats", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 files and c3 apps left.How many more apps than files does he have left on the phone?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave originally had c0 apps and c1 files\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files, he has c2 files and c3 apps left\n    apps_now = c3\n    files_now = c2\n\n    #The difference between the number of apps and files he has now can be calculated by subtracting the number of files from the number of apps\n    difference = apps_now - files_now\n\n    return difference", "mapping": {"c0": 24.0, "c1": 9.0, "c2": 5.0, "c3": 12.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the morning than in the afternoon?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #c1 campers went rowing in the afternoon\n    afternoon = c1\n\n    #c2 campers went rowing in the evening\n    evening = c2\n\n    #The difference between the number of campers rowing in the morning and afternoon can be calculated by subtracting the number of campers rowing in the afternoon from the number of campers rowing in the morning\n    difference = morning - afternoon\n\n    return difference", "mapping": {"c0": 44.0, "c1": 39.0, "c2": 31.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters, each with the same number of pages. It has a total of c1 pages. It took Frank c2 days to finish the book.How many pages are in each chapter?", "answer": [198.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The book has c0 chapters\n    chapters = c0\n\n    #The book has c1 pages in total\n    pages = c1\n\n    #It took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages in each chapter can be calculated by dividing the total number of pages by the number of chapters\n    pages_per_chapter = pages / chapters\n\n    return pages_per_chapter", "mapping": {"c0": 3.0, "c1": 594.0, "c2": 607.0}}
{"question": "Jesse has c0 square feet of carpet. If her room is c1 feet long and c2 feet wideHow much more carpet does she need to cover the whole floor?", "answer": [62.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jesse has c0 square feet of carpet\n    carpet_before = c0\n\n    #Jesse's room is c1 feet long\n    length = c1\n\n    #Jesse's room is c2 feet wide\n    width = c2\n\n    #The total area of Jesse's room can be calculated by multiplying the length and width\n    room_area = length * width\n\n    #The amount of carpet Jesse needs to cover the whole floor can be calculated by subtracting the original amount of carpet from the total area of the room\n    carpet_needed = room_area - carpet_before\n\n    return carpet_needed", "mapping": {"c0": 18.0, "c1": 4.0, "c2": 20.0}}
{"question": "There are many different books in the ' crazy silly school ' series. If you have read c0 of the books and are yet to read c1 booksHow many books are there in the ' crazy silly school ' series?", "answer": [21.0], "response": "def total_books(c0, c1):\n    #The total number of books in the series can be calculated by adding the number of books read to the number of books yet to be read\n    total = c0 + c1\n    return total", "mapping": {"c0": 13.0, "c1": 8.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left.How many more baseball cards than Ace cards does Nell have?", "answer": [123.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell originally had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some cards to Jeff and now has c2 Ace cards and c3 baseball cards left\n    ace_now = c2\n    baseball_now = c3\n\n    #Calculate how many baseball cards and Ace cards Nell gave to Jeff\n    baseball_gave = baseball_before - baseball_now\n    ace_gave = ace_before - ace_now\n\n    #Calculate how many more baseball cards than Ace cards Nell has now\n    difference = baseball_now - ace_now\n\n    #Add the number of baseball cards Nell gave to Jeff to the difference\n    final_difference = difference + baseball_gave\n\n    return final_difference", "mapping": {"c0": 438.0, "c1": 18.0, "c2": 55.0, "c3": 178.0}}
{"question": "Matthew had c0 crackers. If Matthew gave equal numbers of crackers to his c1 friends and still had c2 crackers leftHow many crackers did Matthew give to his friends?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef crackers_given(c0, c1, c2):\n    #Matthew originally had c0 crackers\n    original_crackers = c0\n\n    #Matthew gave crackers to c1 friends\n    num_friends = c1\n\n    #Matthew still has c2 crackers left\n    crackers_left = c2\n\n    #The total number of crackers given to friends can be calculated by subtracting the number of crackers left from the original number of crackers and dividing by the number of friends\n    crackers_given = (original_crackers - crackers_left) / num_friends\n\n    return crackers_given", "mapping": {"c0": 24.0, "c1": 3.0, "c2": 17.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How much farther did the grasshopper jump than the mouse?", "answer": [41.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The frog jumped c1 inches less than the grasshopper\n    frog = grasshopper - c1\n\n    #The mouse jumped c2 inches less than the frog\n    mouse = frog - c2\n\n    #The difference between the distance the grasshopper jumped and the distance the mouse jumped can be calculated by subtracting the distance the mouse jumped from the distance the grasshopper jumped\n    difference = grasshopper - mouse\n\n    return difference", "mapping": {"c0": 21.0, "c1": 25.0, "c2": 16.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. If there are c2 people sitting on chairsHow many chairs are left unoccupied?", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #they have c0 sets of tables\n    num_tables = c0\n\n    #total number of chairs available\n    total_chairs = chairs_per_table * num_tables\n\n    #c2 people are sitting on chairs\n    occupied_chairs = c2\n\n    #number of chairs left unoccupied\n    unoccupied_chairs = total_chairs - occupied_chairs\n\n    return unoccupied_chairs", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 11.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many visited the Buckingham palace within the past c3 days?", "answer": [1791.0], "response": "def visitors_total(c0, c1, c2, c3):\n    #calculate the total number of visitors in the past c3 days by adding the visitors from each day\n    total_visitors = c0 + c1 + c2\n\n    #if c3 is greater than or equal to 3, we need to subtract the visitors from 3 days ago to get the total visitors in the past c3 days\n    if c3 >= 3:\n        total_visitors -= c3-3\n\n    return total_visitors", "mapping": {"c0": 512.0, "c1": 471.0, "c2": 808.0, "c3": 89.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many more sacks of ripe oranges than unripe oranges are harvested per day?", "answer": [19.0], "response": "def Problem(c0, c1):\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c0\n\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c1\n\n    #difference between the number of sacks of ripe and unripe oranges harvested per day\n    difference = ripe_oranges - unripe_oranges\n\n    return difference", "mapping": {"c0": 44.0, "c1": 25.0}}
{"question": "White t - shirts can be purchased in packages of c0. If mom buys c1 packages of white t - shirts and c2 trousersHow many white t - shirts will she have?", "answer": [3021.0], "response": "def Problem(c0, c1, c2):\n    #each package contains c0 white t-shirts\n    shirts_per_package = c0\n\n    #mom bought c1 packages of white t-shirts\n    packages_bought = c1\n\n    #mom also bought c2 trousers\n    trousers_bought = c2\n\n    #total number of white t-shirts can be calculated by multiplying the number of packages by the number of shirts per package and adding it to the number of shirts bought separately\n    total_shirts = (packages_bought * shirts_per_package) + trousers_bought\n\n    return total_shirts", "mapping": {"c0": 53.0, "c1": 57.0, "c2": 34.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many books did he sell?", "answer": [94.0], "response": "def Problem(c0, c1, c2):\n    #Paul originally had c0 books\n    original_books = c0\n\n    #After selling some books and buying new ones, he now has c2 books\n    current_books = c2\n\n    #He bought c1 new books, so the number of books he had before selling some is c0 + c1\n    books_before_selling = original_books + c1\n\n    #The number of books he sold can be calculated by subtracting the current number of books from the number of books he had before selling some\n    books_sold = books_before_selling - current_books\n\n    return books_sold", "mapping": {"c0": 2.0, "c1": 150.0, "c2": 58.0}}
{"question": "c0 storks and c1 birds were sitting on the fence. c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of birds on the fence\n    total_birds = c1 + c2\n\n    #calculate the total number of storks on the fence\n    total_storks = c0\n\n    #calculate the difference between the number of storks and birds\n    difference = total_storks - total_birds\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 3.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many books does he have in total?", "answer": [621.0], "response": "def total_books(c0, c1, c2):\n    #calculate the total number of books by multiplying the number of books in each shelf by the number of shelves\n    total = c0 * c2\n    return total", "mapping": {"c0": 27.0, "c1": 80.0, "c2": 23.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 left while not having lost a single erasers.How many more crayons than erasers did he have left?", "answer": [353.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons and c1 erasers for his birthday\n    crayons = c0\n    erasers = c1\n\n    #At the end of the school year, he had c2 items left\n    total_left = c2\n\n    #He did not lose any erasers, so the number of erasers left is the same as the original number of erasers\n    erasers_left = erasers\n\n    #The number of crayons left can be calculated by subtracting the number of erasers left from the total number of items left\n    crayons_left = total_left - erasers_left\n\n    #The number of crayons left minus the number of erasers left is the difference between the two\n    difference = crayons_left - erasers_left\n\n    return difference", "mapping": {"c0": 531.0, "c1": 38.0, "c2": 391.0}}
{"question": "Lewis earns a total of $ c0 during the harvest. If he earns $ c1 each weekHow many weeks did the harvest last?", "answer": [76.0], "response": "def Problem(c0, c1):\n    #Lewis earns a total of c0 during the harvest\n    total_earnings = c0\n\n    #Lewis earns c1 each week\n    weekly_earnings = c1\n\n    #The number of weeks the harvest lasted can be calculated by dividing the total earnings by the weekly earnings\n    weeks = total_earnings / weekly_earnings\n\n    return weeks", "mapping": {"c0": 1216.0, "c1": 16.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many apps did he delete?", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 apps on his phone\n    original_apps = c0\n\n    #Dave added c1 new apps\n    added_apps = c1\n\n    #After deleting some apps, Dave now has c2 apps left\n    apps_left = c2\n\n    #The number of apps Dave deleted can be calculated by subtracting the number of apps he has now from the total number of apps he had before adding new apps\n    deleted_apps = original_apps + added_apps - apps_left\n\n    return deleted_apps", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 4.0}}
{"question": "The ring toss game at the carnival made the same amount of money each day. In total in c0 days they earned c1 dollars.How much did they make per day?", "answer": [33.0], "response": "def Problem(c0, c1):\n    #The carnival made c1 dollars in c0 days\n    total_money = c1\n    total_days = c0\n\n    #The amount of money made per day can be calculated by dividing the total amount of money by the total number of days\n    money_per_day = total_money / total_days\n\n    return money_per_day", "mapping": {"c0": 5.0, "c1": 165.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many more roses than orchids are there in the vase now?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c2 - c0\n    orchids_cut = c3 - c1\n\n    #there are now c2 roses and c3 orchids in the vase\n    roses_now = c2\n    orchids_now = c3\n\n    #calculate the difference between the number of roses and orchids now\n    difference = roses_now - orchids_now\n\n    #calculate the difference between the number of roses and orchids before\n    original_difference = roses_before - orchids_before\n\n    #calculate the number of roses added or subtracted\n    roses_change = roses_cut - orchids_cut\n\n    #calculate the number of roses left in the vase\n    roses_left = roses_before + roses_cut\n\n    #calculate the number of orchids left in the vase\n    orchids_left = orchids_before + orchids_cut\n\n    #calculate the difference between the number of roses and orchids left in the vase\n    left_difference = roses_left - orchids_left\n\n    #calculate the final difference between the number of roses and orchids\n    final_difference = difference + left_difference - original_difference\n\n    return final_difference", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 12.0, "c3": 2.0}}
{"question": "The Ferris wheel in paradise park has some seats. Each seat can hold c0 people. If c1 people can ride the wheel at the same timeHow many seats does the Ferris wheel have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each seat can hold c0 people\n    seat_capacity = c0\n\n    #c1 people can ride the wheel at the same time\n    total_capacity = c1\n\n    #The number of seats the Ferris wheel has can be calculated by dividing the total capacity by the seat capacity\n    num_seats = total_capacity // seat_capacity\n\n    return num_seats", "mapping": {"c0": 9.0, "c1": 18.0}}
{"question": "Dave had some apps on his phone. After deleting c0 of them he had c1 left.How many apps did he have on his phone at the start?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #Dave had some apps on his phone\n    apps_before = x\n\n    #After deleting c0 of them, he had c1 left\n    apps_after = c1\n\n    #The number of apps Dave had on his phone at the start can be calculated by adding the number of apps he deleted to the number of apps he had left\n    apps_start = apps_before + c0\n\n    return apps_start", "mapping": {"c0": 18.0, "c1": 5.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies are there in the ' crazy silly school ' series?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left after reading c2 books\n    books_left = c1 - c2\n\n    #calculate the number of movies left after watching c3 movies\n    movies_left = c0 - c3\n\n    #calculate the difference between the number of books and movies left\n    difference = books_left - movies_left\n\n    return difference", "mapping": {"c0": 14.0, "c1": 15.0, "c2": 11.0, "c3": 40.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many more blocks did he use to build the house than he did to build the tower?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    randy_blocks = c0\n\n    #Randy uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #Randy uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The difference between the number of blocks used to build the house and the number of blocks used to build the tower can be calculated by subtracting the number of tower blocks from the number of house blocks\n    difference = house_blocks - tower_blocks\n\n    return difference", "mapping": {"c0": 86.0, "c1": 79.0, "c2": 82.0}}
{"question": "With c0 dollars c1 packs of dvds can be bought.How much does each pack cost?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #The cost of each pack of dvds can be calculated by dividing the total amount of money by the number of packs\n    cost_per_pack = c0 / c1\n\n    return cost_per_pack", "mapping": {"c0": 28.0, "c1": 2.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Jason delivered newspapers and now has c2 dollars. Fred washed cars over the weekend and now has c3 dollars.How much money did Jason earn by delivering newspapers?", "answer": [26.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_last_week = c0\n\n    #Jason had c1 dollars last week\n    jason_last_week = c1\n\n    #Jason now has c2 dollars after delivering newspapers\n    jason_now = c2\n\n    #Fred now has c3 dollars after washing cars\n    fred_now = c3\n\n    #Jason earned the difference between his money last week and his money now\n    jason_earned = jason_now - jason_last_week\n\n    return jason_earned", "mapping": {"c0": 78.0, "c1": 31.0, "c2": 57.0, "c3": 90.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles while he lost c2 marbles.How many more marbles did he lose than those he found?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Josh originally had c0 marbles\n    original = c0\n\n    #Josh found c1 marbles\n    found = c1\n\n    #Josh lost c2 marbles\n    lost = c2\n\n    #The net change in Josh's marbles can be calculated by adding the number of marbles he found and subtracting the number of marbles he lost from the original number of marbles\n    net_change = found - lost\n\n    #The number of marbles Josh lost more than he found can be calculated by subtracting the net change from zero\n    lost_more = 0 - net_change\n\n    return lost_more", "mapping": {"c0": 15.0, "c1": 9.0, "c2": 23.0}}
{"question": "Jack received c0 emails in the morning and some more in the afternoon. If he received a total of c1 emails in the dayHow many emails did Jack receive in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received a total of c1 emails in the day\n    total_emails = c1\n\n    #The number of emails Jack received in the afternoon can be calculated by subtracting the number of morning emails from the total emails\n    afternoon_emails = total_emails - morning_emails\n\n    return afternoon_emails", "mapping": {"c0": 4.0, "c1": 5.0}}
{"question": "Luke gained c0 points in each round of a game. If he played c1 rounds of a trivia gameHow many points did he score in the game?", "answer": [22922.0], "response": "def Problem(c0, c1):\n    #Luke gained c0 points in each round\n    points_per_round = c0\n\n    #Luke played c1 rounds\n    rounds_played = c1\n\n    #The total points Luke scored in the game can be calculated by multiplying the number of points he gained per round by the number of rounds he played\n    total_points = points_per_round * rounds_played\n\n    return total_points", "mapping": {"c0": 146.0, "c1": 157.0}}
{"question": "There were some roses in the vase. Jessica cut c0 more roses from her flower garden and put them in the vase. There are now c1 roses in the vase.How many roses were there in the vase at the beginning?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Jessica cut c0 more roses from her flower garden\n    cut = c0\n\n    #There are now c1 roses in the vase\n    now = c1\n\n    #The number of roses in the vase at the beginning can be calculated by subtracting the number of roses Jessica cut from the number of roses in the vase now\n    before = now - cut\n\n    return before", "mapping": {"c0": 16.0, "c1": 23.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How far did the frog jump?", "answer": [58.0], "response": "def jumping_contest(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The frog jumped c1 inches farther than the grasshopper\n    frog = grasshopper + c1\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse = frog - c2\n\n    #The distance the frog jumped can be calculated by subtracting the distance the grasshopper jumped from the distance the mouse jumped\n    frog_jump = mouse - grasshopper\n\n    return frog_jump", "mapping": {"c0": 19.0, "c1": 39.0, "c2": 94.0}}
{"question": "Adam has c0 more apples than Jackie. Jackie has c1 oranges and c2 apples.How many apples does Adam have?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jackie has c1 oranges and c2 apples\n    jackie_apples = c2\n\n    #Adam has c0 more apples than Jackie\n    adam_apples = jackie_apples + c0\n\n    return adam_apples", "mapping": {"c0": 5.0, "c1": 89.0, "c2": 11.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If c1 people visited the Buckingham palace within the past c2 daysHow many visitors visited the Buckingham palace on the previous day?", "answer": [274.0], "response": "def previous_day_visitors(c0, c1, c2):\n    #total visitors in the past c2 days\n    total_visitors = c1 * c2\n\n    #visitors on the previous day can be calculated by subtracting the total visitors in the past c2 days from the visitors on the current day\n    previous_day = c0 - total_visitors\n\n    return previous_day", "mapping": {"c0": 132.0, "c1": 406.0, "c2": 327.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many more campers went rowing in the morning than in the afternoon?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The number of campers who went rowing in the morning can be calculated by subtracting the number of campers who went hiking in the morning from the total number of campers who went rowing and hiking in the morning\n    rowing_morning_total = rowing_morning + hiking_morning\n    rowing_morning_only = rowing_morning_total - rowing_afternoon\n\n    #The number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing in the morning and afternoon\n    rowing_afternoon_only = rowing_afternoon - rowing_morning_only\n\n    #The difference between the number of campers who went rowing in the morning and afternoon can be calculated by subtracting the number of campers who went rowing in the afternoon from the number of campers who went rowing in the morning\n    difference = rowing_morning_only - rowing_afternoon_only\n\n    return difference", "mapping": {"c0": 29.0, "c1": 66.0, "c2": 26.0}}
{"question": "Dave had c0 apps on his phone. After adding some he had c1 left.How many apps did he add?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dave originally had c0 apps on his phone\n    apps_before = c0\n\n    #After adding some apps, he now has c1 apps on his phone\n    apps_after = c1\n\n    #The number of apps Dave added can be calculated by subtracting the number of apps he has now from the original number of apps he had\n    added = apps_before - apps_after\n\n    return added", "mapping": {"c0": 17.0, "c1": 18.0}}
{"question": "There were c0 parents in the program and c1 pupils too.How many more pupils were present compared to parents in the program?", "answer": [347.0], "response": "def Problem(c0, c1):\n    #number of parents in the program\n    parents = c0\n\n    #number of pupils in the program\n    pupils = c1\n\n    #calculate the difference between the number of pupils and parents\n    diff = pupils - parents\n\n    return diff", "mapping": {"c0": 174.0, "c1": 521.0}}
{"question": "Paco ate c0 cookies and had c1 cookies left.How many cookies did he have in the beginning?", "answer": [54.0], "response": "def Problem(c0, c1):\n    #Paco ate c0 cookies and had c1 cookies left\n    ate = c0\n    left = c1\n\n    #The number of cookies Paco had in the beginning can be calculated by adding the number of cookies he ate to the number of cookies he had left\n    beginning = ate + left\n\n    return beginning", "mapping": {"c0": 19.0, "c1": 35.0}}
{"question": "If each bag has c0 cookies and you had c1 cookies in totalHow many bags of cookies do you have?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #each bag has c0 cookies\n    cookies_per_bag = c0\n\n    #you have c1 cookies in total\n    total_cookies = c1\n\n    #The number of bags of cookies you have can be calculated by dividing the total number of cookies by the number of cookies per bag\n    bags = total_cookies // cookies_per_bag\n\n    return bags", "mapping": {"c0": 3.0, "c1": 21.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How far did the mouse jump?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The grasshopper jumped c0 inches\n    grasshopper = c0\n\n    #The grasshopper jumped c1 inches farther than the frog\n    frog = grasshopper - c1\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse = frog - c2\n\n    return mouse", "mapping": {"c0": 39.0, "c1": 19.0, "c2": 12.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes in c2 days.How many drums of grapes would be filled per day?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #c0 pickers fill c1 drums of grapes in c2 days\n    drums_filled = c1\n    days = c2\n\n    #The number of drums of grapes filled per day can be calculated by dividing the total number of drums filled by the number of days it took to fill them\n    drums_per_day = drums_filled / days\n\n    return drums_per_day", "mapping": {"c0": 94.0, "c1": 90.0, "c2": 6.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games and c3 old games.How many new games do they have together?", "answer": [92.0], "response": "def Problem(c0, c1, c2, c3):\n    #Katie had c0 new games\n    katie_new = c0\n\n    #Katie had c1 old games\n    katie_old = c1\n\n    #Katie and her friends have c0 plus c2 new games in total\n    new_total = katie_new + c2\n\n    #They have c1 plus c3 old games in total\n    old_total = katie_old + c3\n\n    #The number of new games they have together can be calculated by adding the number of new games Katie has to the number of new games her friends have\n    new_together = new_total + c2\n\n    return new_together", "mapping": {"c0": 84.0, "c1": 19.0, "c2": 8.0, "c3": 69.0}}
{"question": "Being his favorite, he saved checking on the grapevines after c0 stops. He was told by c1 of the pickers that they fill c2 drums of grapes per day.How many drums of grapes would be filled in c3 days?", "answer": [6264.0], "response": "def grapevine_problem(c0, c1, c2, c3):\n    # He checked on the grapevines after c0 stops\n    stops = c0\n\n    # c1 pickers told him that they fill c2 drums of grapes per day\n    drums_per_day = c2\n\n    # He wants to know how many drums of grapes would be filled in c3 days\n    days = c3\n\n    # The total number of drums filled in c3 days can be calculated by multiplying the number of days by the number of drums filled per day\n    total_drums = c1 * drums_per_day * days\n\n    return total_drums", "mapping": {"c0": 57.0, "c1": 252.0, "c2": 108.0, "c3": 58.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If c1 people visited the Buckingham palace within the past c2 daysHow many visitors visited the Buckingham palace on that day?", "answer": [784.0], "response": "def visitors_on_day(c0, c1, c2):\n    #calculate the average number of visitors per day\n    avg_visitors_per_day = c1/c2\n\n    #calculate the number of visitors on the specific day\n    visitors_on_day = (avg_visitors_per_day * c2) + c0\n\n    return visitors_on_day", "mapping": {"c0": 45.0, "c1": 829.0, "c2": 85.0}}
{"question": "Adam has c0 apples. Jackie has c1 apples.How many more apples does Jackie have than Adam?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Adam has c0 apples\n    adam = c0\n\n    #Jackie has c1 apples\n    jackie = c1\n\n    #The difference in the number of apples Jackie has compared to Adam can be calculated by subtracting the number of apples Adam has from the number of apples Jackie has\n    difference = jackie - adam\n\n    return difference", "mapping": {"c0": 9.0, "c1": 10.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and some more green peaches. If there are a total of c2 peaches in all basketsHow many green peaches are in each basket?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c1 red peaches\n    red_peaches = c1\n\n    #there are a total of c2 peaches in all baskets\n    total_peaches = c2\n\n    #the number of green peaches in each basket can be calculated by subtracting the number of red peaches from the total number of peaches and then dividing by the number of baskets\n    green_peaches = (total_peaches - (c0 * red_peaches)) / c0\n\n    return green_peaches", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 12.0}}
{"question": "A chef had c0 apples and c1 peaches. After making some pies, he had c2 apples left.How many apples did he use?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #The chef originally had c0 apples and c1 peaches\n    apples_before = c0\n\n    #The chef now has c2 apples left after making some pies\n    apples_after = c2\n\n    #The number of apples the chef used can be calculated by subtracting the number of apples he has now from the original number of apples he had\n    used = apples_before - apples_after\n\n    return used", "mapping": {"c0": 40.0, "c1": 54.0, "c2": 39.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each of the c1 blocks. If there are c2 houses on a blockHow many pieces of junk mail should he give each house?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The mailman has to give c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #There are c1 blocks\n    blocks = c1\n\n    #There are c2 houses on each block\n    houses_per_block = c2\n\n    #The number of pieces of junk mail the mailman should give each house can be calculated by dividing the number of pieces of junk mail per block by the number of houses per block\n    mail_per_house = mail_per_block / houses_per_block\n\n    return mail_per_house", "mapping": {"c0": 38.0, "c1": 78.0, "c2": 19.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c0 - c3 cups of flour\n    flour_needed = c0 - c3\n\n    #Mary needs to add c1 cups of sugar\n    sugar_needed = c1\n\n    #The difference between the amount of flour needed and the amount of sugar needed is the answer\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 10.0, "c1": 2.0, "c2": 80.0, "c3": 7.0}}
{"question": "Julia played tag with c0 kids on monday and c1 kids on tuesday. She played cards with c2 kids on wednesday.How many kids did she play with altogether?", "answer": [38.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on Monday\n    tag_monday = c0\n\n    #Julia played tag with c1 kids on Tuesday\n    tag_tuesday = c1\n\n    #Julia played cards with c2 kids on Wednesday\n    cards_wednesday = c2\n\n    #The total number of kids Julia played with can be calculated by adding the number of kids she played with on each day\n    total_kids = tag_monday + tag_tuesday + cards_wednesday\n\n    return total_kids", "mapping": {"c0": 13.0, "c1": 10.0, "c2": 15.0}}
{"question": "Jesse needs a carpet of size c0 square feet to cover her room. If her room is c1 feet longWhat is the width of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jesse needs a carpet of size c0 square feet to cover her room\n    room_size = c0\n\n    #Jesse's room is c1 feet long\n    room_length = c1\n\n    #The width of Jesse's room can be calculated by dividing the room size by the room length\n    room_width = room_size / room_length\n\n    return room_width", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers. If the skittles and erasers are organized into c2 groupsHow big is each group?", "answer": [57.0], "response": "def Problem(c0, c1, c2):\n    #Steven has c0 skittles and c1 erasers\n    total_items = c0 + c1\n\n    #The items are organized into c2 groups\n    num_groups = c2\n\n    #The size of each group can be calculated by dividing the total number of items by the number of groups\n    group_size = total_items / num_groups\n\n    return group_size", "mapping": {"c0": 4502.0, "c1": 4276.0, "c2": 154.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each of the c1 blocks. If there are c2 houses in each blockHow many pieces of junk mail should he give in total?", "answer": [1088.0], "response": "def Problem(c0, c1, c2):\n    #The mailman has to give c0 pieces of junk mail to each house\n    per_house = c0\n\n    #There are c1 blocks\n    blocks = c1\n\n    #There are c2 houses in each block\n    houses_per_block = c2\n\n    #The total number of houses the mailman has to deliver to is the number of blocks multiplied by the number of houses in each block\n    total_houses = blocks * houses_per_block\n\n    #The total number of pieces of junk mail the mailman has to give in total is the number of houses multiplied by the number of pieces of junk mail per house\n    total_mail = total_houses * per_house\n\n    return total_mail", "mapping": {"c0": 4.0, "c1": 16.0, "c2": 17.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the first chapter have than the third chapter?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #The first chapter is c1 pages long\n    first_chapter = c1\n\n    #The third chapter is c3 pages long\n    third_chapter = c3\n\n    #The number of pages the first chapter has more than the third chapter can be calculated by subtracting the number of pages in the third chapter from the number of pages in the first chapter\n    difference = first_chapter - third_chapter\n\n    return difference", "mapping": {"c0": 3.0, "c1": 53.0, "c2": 75.0, "c3": 21.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many more apps did he add than he deleted?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 apps on his phone\n    original_apps = c0\n\n    #Dave added c1 new apps\n    added_apps = c1\n\n    #After deleting some apps, Dave has c2 apps left\n    remaining_apps = c2\n\n    #The number of apps Dave deleted can be calculated by subtracting the number of remaining apps from the original number of apps\n    deleted_apps = original_apps - remaining_apps\n\n    #The number of apps Dave added more than he deleted can be calculated by subtracting the number of deleted apps from the number of added apps\n    more_added_apps = added_apps - deleted_apps\n\n    return more_added_apps", "mapping": {"c0": 21.0, "c1": 89.0, "c2": 24.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. If he initially had c2 pieces of candyHow many pieces of candy does he still have left?", "answer": [4.0], "response": "def candy_left(c0, c1, c2):\n    # Bobby initially had c2 pieces of candy\n    initial = c2\n\n    # Bobby ate c0 pieces of candy\n    first_eaten = c0\n\n    # Bobby then ate c1 more pieces of candy\n    second_eaten = c1\n\n    # The total number of pieces of candy Bobby ate is the sum of the first and second amount eaten\n    total_eaten = first_eaten + second_eaten\n\n    # The number of pieces of candy Bobby has left is the initial amount minus the total amount eaten\n    left = initial - total_eaten\n\n    return left", "mapping": {"c0": 17.0, "c1": 15.0, "c2": 36.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are some bird families living near the mountain. c0 bird families flew away for winter while c1 bird families stayed behind.How many bird families were living near the mountain at the start?", "answer": [34.0], "response": "def bird_families(c0, c1):\n    #The number of bird families that flew away for winter can be subtracted from the total number of bird families to get the number of bird families living near the mountain at the start.\n    start = c0 + c1\n    return start", "mapping": {"c0": 20.0, "c1": 14.0}}
{"question": "Frank was reading through some books. Each book had c0 pages and it took Frank c1 days to finish each book. If he takes c2 days to finish all booksHow many books did he read?", "answer": [41.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each book has c0 pages\n    pages_per_book = c0\n\n    #it takes Frank c1 days to finish each book\n    days_per_book = c1\n\n    #Frank takes c2 days to finish all books\n    total_days = c2\n\n    #The number of books Frank read can be calculated by dividing the total number of days by the number of days it takes to finish one book\n    books_read = total_days // days_per_book\n\n    return books_read", "mapping": {"c0": 66.0, "c1": 12.0, "c2": 492.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many more push-ups than crunches did Zachary do?", "answer": [25.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Zachary did c2 push-ups\n    push_ups = c2\n\n    #Zachary did c3 crunches\n    crunches = c3\n\n    #David did c0 more push-ups than Zachary\n    david_push_ups = push_ups + c0\n\n    #David did c1 less crunches than Zachary\n    david_crunches = crunches - c1\n\n    #The number of push-ups Zachary did more than crunches can be calculated by subtracting the number of crunches from the number of push-ups\n    difference = push_ups - crunches\n\n    return difference", "mapping": {"c0": 36.0, "c1": 33.0, "c2": 58.0, "c3": 33.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 marbles and c2 eggs.How many more eggs does Rebecca have than marbles?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca wants to split the eggs into groups of c0\n    group_size = c0\n\n    #Rebecca has c1 marbles\n    marbles = c1\n\n    #Rebecca has c2 eggs\n    eggs = c2\n\n    #The number of groups of eggs Rebecca has can be calculated by dividing the total number of eggs by the group size\n    egg_groups = eggs // group_size\n\n    #The number of eggs left over after grouping can be calculated by taking the remainder of the division\n    eggs_left = eggs % group_size\n\n    #The number of eggs Rebecca has more than marbles can be calculated by subtracting the number of marbles from the number of eggs left over\n    eggs_more_than_marbles = eggs_left - marbles\n\n    return eggs_more_than_marbles", "mapping": {"c0": 20.0, "c1": 5.0, "c2": 12.0}}
{"question": "Baker made c0 cakes. Then he made c1 more cakes. He sold c2 of them.How many more cakes did baker make than those he sold?", "answer": [127.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker made c1 more cakes\n    cakes_after = cakes_before + c1\n\n    #Baker sold c2 cakes\n    cakes_sold = c2\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of cakes sold from the number of cakes he made after\n    more_cakes = cakes_after - cakes_sold\n\n    return more_cakes", "mapping": {"c0": 81.0, "c1": 92.0, "c2": 46.0}}
{"question": "c0 red peaches and some more green peaches are in the basket. If there are a total of c1 peaches in the basketHow many green peaches are in the basket?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #there are originally c0 red peaches in the basket\n    red_peaches = c0\n\n    #there are a total of c1 peaches in the basket\n    total_peaches = c1\n\n    #The number of green peaches in the basket can be calculated by subtracting the number of red peaches from the total number of peaches\n    green_peaches = total_peaches - red_peaches\n\n    return green_peaches", "mapping": {"c0": 10.0, "c1": 15.0}}
{"question": "c0 campers went rowing in the morning. c1 campers went rowing in the afternoon.How many more campers went rowing in the morning than in the afternoon?", "answer": [23.0], "response": "def rowing_difference(c0, c1):\n    #number of campers who went rowing in the morning\n    morning = c0\n\n    #number of campers who went rowing in the afternoon\n    afternoon = c1\n\n    #calculate the difference between the number of campers who went rowing in the morning and afternoon\n    difference = morning - afternoon\n\n    return difference", "mapping": {"c0": 62.0, "c1": 39.0}}
{"question": "In a school there are c0 girls and c1 boys. There are also c2 teachersHow many people are there in that school?", "answer": [1396.0], "response": "def total_people(c0, c1, c2):\n    #total number of people in the school is the sum of girls, boys, and teachers\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 315.0, "c1": 309.0, "c2": 772.0}}
{"question": "In Haley's class some boys love to play marbles. If Haley has c0 marbles and she gave c1 marbles to each boyHow many boys did she give the marbles to?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Haley originally had c0 marbles\n    haley_marbles = c0\n\n    #Each boy received c1 marbles\n    boy_marbles = c1\n\n    #The number of boys Haley gave marbles to can be calculated by dividing the number of marbles she gave by the number of marbles each boy received\n    num_boys = haley_marbles // boy_marbles\n\n    return num_boys", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. He also earns $ c2 per week for working overtime. If he works overtime every weekHow much money does he earn during harvest season?", "answer": [1054997.0], "response": "Let's think about it step by step:\n\ndef harvest_earnings(c0, c1, c2):\n    #Lewis earns c0 dollars every week during harvest season\n    regular_pay = c0\n\n    #Harvest season lasts for c1 weeks\n    weeks = c1\n\n    #Lewis earns c2 dollars per week for working overtime\n    overtime_pay = c2\n\n    #If he works overtime every week, he will earn an additional c2 dollars per week\n    total_pay = regular_pay + overtime_pay\n\n    #The total amount of money he earns during harvest season can be calculated by multiplying his total pay per week by the number of weeks\n    total_earnings = total_pay * weeks\n\n    return total_earnings", "mapping": {"c0": 28.0, "c1": 1091.0, "c2": 939.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of math homework than biology homework did she have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    bio_hw = c2\n\n    #The difference between the number of pages of math homework and biology homework can be calculated by subtracting the number of pages of biology homework from the number of pages of math homework\n    diff = math_hw - bio_hw\n\n    return diff", "mapping": {"c0": 11.0, "c1": 2.0, "c2": 3.0}}
{"question": "Adam has c0 more apples than jackie. Adam has c1 apples.How many apples does Jackie have?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Adam has c1 apples\n    adam = c1\n\n    #Adam has c0 more apples than Jackie\n    jackie = adam - c0\n\n    return jackie", "mapping": {"c0": 3.0, "c1": 9.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 ripe apples and c2 unripe apples.How many ripe apples did the tree have to begin with?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #The tree now has c1 ripe apples and c2 unripe apples\n    ripe_now = c1\n\n    #The tree originally had c0 plus c1 ripe apples before Rachel picked them\n    ripe_before = ripe_now + picked\n\n    return ripe_before", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 27.0}}
{"question": "Melissa scored c0 points in each game. She also got c1 bonus points in each game.How many points did she score in c2 games?", "answer": [15089.0], "response": "def Problem(c0, c1, c2):\n    #Melissa scored c0 points in each game\n    points_per_game = c0\n\n    #Melissa also got c1 bonus points in each game\n    bonus_points_per_game = c1\n\n    #Melissa played c2 games\n    games_played = c2\n\n    #The total points Melissa scored in c2 games can be calculated by multiplying the points per game by the number of games played and adding the bonus points per game multiplied by the number of games played\n    total_points = (points_per_game * games_played) + (bonus_points_per_game * games_played)\n\n    return total_points", "mapping": {"c0": 109.0, "c1": 82.0, "c2": 79.0}}
{"question": "Rachel had to complete c0 pages of reading homework, c1 pages of math homework and c2 more pages of biology homework.How many more pages of math homework than reading homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of reading homework\n    reading = c0\n\n    #Rachel had to complete c1 pages of math homework\n    math = c1\n\n    #Rachel had to complete c2 more pages of biology homework than reading homework\n    biology = c2\n\n    #The difference between the number of math and reading homework pages can be calculated by subtracting the number of reading pages from the number of math pages\n    diff = math - reading\n\n    return diff", "mapping": {"c0": 4.0, "c1": 7.0, "c2": 19.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. If Ron is c1 feet tall and Dean is c2 feet shorter than RonHow deep was the water?", "answer": [81.0], "response": "def Problem(c0, c1, c2):\n    #Dean's height is c2 feet shorter than Ron\n    dean_height = c1 - c2\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * dean_height\n\n    return water_depth", "mapping": {"c0": 9.0, "c1": 15.0, "c2": 6.0}}
{"question": "In a school there are c0 girls and c1 boys. There are also c2 teachersHow many pupils are there in that school?", "answer": [626.0], "response": "def total_pupils(c0, c1, c2):\n    #total number of pupils is the sum of girls and boys\n    pupils = c0 + c1\n    #total number of pupils and teachers is the total number of people in the school\n    total = pupils + c2\n    return total", "mapping": {"c0": 308.0, "c1": 318.0, "c2": 36.0}}
{"question": "Friends of Katie had c0 games and she had c1 ds games.How many more games does Katie have than her friends?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Katie's friends had c0 games\n    friends = c0\n\n    #Katie had c1 ds games\n    katie = c1\n\n    #The difference between the number of games Katie has and the number of games her friends have can be calculated by subtracting the number of games her friends have from the number of games Katie has\n    difference = katie - friends\n\n    return difference", "mapping": {"c0": 57.0, "c1": 63.0}}
{"question": "Luke scored c0 points after playing c1 rounds of a trivia game. If he gained the same number of points each roundHow many points did he score per round?", "answer": [42.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Luke scored c0 points after playing c1 rounds of a trivia game\n    total_points = c0\n    num_rounds = c1\n\n    #If he gained the same number of points each round, we can calculate the points per round by dividing the total points by the number of rounds\n    points_per_round = total_points / num_rounds\n\n    return points_per_round", "mapping": {"c0": 84.0, "c1": 2.0}}
{"question": "Next on his checklist is wax to stick the feathers together and colors to paint them. He needs a total of c0 g of colors to paint them. He needs c1 g of wax more. If the feathers require a total of c2 g of waxHow many grams of wax does he already have?", "answer": [331.0], "response": "def Problem(c0, c1, c2):\n    #He needs c0 g of colors to paint the feathers\n    colors = c0\n\n    #He needs c1 g of wax more than the amount required for feathers\n    extra_wax = c1\n\n    #The feathers require a total of c2 g of wax\n    feathers_wax = c2\n\n    #The total amount of wax he needs is the sum of wax required for feathers and extra wax\n    total_wax = feathers_wax + extra_wax\n\n    #The amount of wax he already has can be calculated by subtracting the total wax he needs from the extra wax he has\n    has_wax = total_wax - extra_wax\n\n    return has_wax", "mapping": {"c0": 57.0, "c1": 22.0, "c2": 353.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds. They put c1 seeds in each flower bed and only c2 seeds grew into flowers in each flower bed.How many flower beds did they have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Paige and her mom planted c0 seeds in total\n    total_seeds = c0\n\n    #They put c1 seeds in each flower bed\n    seeds_per_bed = c1\n\n    #Only c2 seeds grew into flowers in each flower bed\n    flowers_per_bed = c2\n\n    #The number of flower beds they had can be calculated by dividing the total number of seeds by the number of seeds per bed that grew into flowers\n    flower_beds = total_seeds // (seeds_per_bed * flowers_per_bed)\n\n    return flower_beds", "mapping": {"c0": 36.0, "c1": 12.0, "c2": 58.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 snakes and c3 alligators were hidingHow many alligators were not hiding?", "answer": [56.0], "response": "def Problem(c0, c1, c2, c3):\n    #The number of alligators not hiding can be calculated by subtracting the number of alligators hiding from the original number of alligators\n    alligators_not_hiding = c1 - c3\n\n    return alligators_not_hiding", "mapping": {"c0": 3.0, "c1": 75.0, "c2": 82.0, "c3": 19.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds. They put c1 seeds in each flower bed and only c2 seeds grew into flowers in each flower bed.How many flowers did they grow?", "answer": [220.0], "response": "def Problem(c0, c1, c2):\n    #Paige and her mom planted c0 seeds in total\n    total_seeds = c0\n\n    #They put c1 seeds in each flower bed\n    seeds_per_bed = c1\n\n    #Only c2 seeds grew into flowers in each flower bed\n    flowers_per_bed = c2\n\n    #The number of flower beds they planted can be calculated by dividing the total number of seeds by the number of seeds per bed\n    beds_planted = total_seeds // seeds_per_bed\n\n    #The number of flowers they grew can be calculated by multiplying the number of flower beds by the number of flowers per bed\n    total_flowers = beds_planted * flowers_per_bed\n\n    return total_flowers", "mapping": {"c0": 55.0, "c1": 15.0, "c2": 60.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of sugar.How many more cups of sugar does she need to add?", "answer": [3.0], "response": "def sugar_needed(c0, c1, c2):\n    #Mary needs to add c0 cups of sugar in total\n    sugar_total = c0\n\n    #Mary already put in c2 cups of sugar\n    sugar_added = c2\n\n    #The number of cups of sugar Mary still needs to add can be calculated by subtracting the amount of sugar she already added from the total amount of sugar needed\n    sugar_needed = sugar_total - sugar_added\n\n    return sugar_needed", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 4.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the grasshopper.How far did the frog jump?", "answer": [11.0], "response": "def jumping_contest(c0, c1):\n    #The grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = grasshopper_jump + c1\n\n    return frog_jump", "mapping": {"c0": 13.0, "c1": 2.0}}
