{"question": " For Halloween Debby and her sister combined the candy they received. Debby had c0 pieces of candy while her sister had c1. If they ate c2 pieces the first night, how many pieces do they have left? ", "answer": [39.0], "response": "def candy_left(c0, c1, c2):\n    # Debby had c0 pieces of candy\n    debby = c0\n\n    # Debby's sister had c1 pieces of candy\n    sister = c1\n\n    # They had c0 + c1 pieces of candy in total\n    total_before = debby + sister\n\n    # They ate c2 pieces of candy\n    ate = c2\n\n    # The number of pieces of candy they have left can be calculated by subtracting the number of pieces they ate from the original total\n    total_now = total_before - ate\n\n    return total_now", "mapping": {"c0": 32.0, "c1": 42.0, "c2": 35.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [8.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 13.0, "c1": 5.0, "c2": 10.0}}
{"question": " Luke was trying to expand his game collection. He bought c0 games from a friend and bought c1 more at a garage sale. If c2 of the games didn't work, how many good games did he end up with? ", "answer": [2.0], "response": "def good_games(c0, c1, c2):\n    #Luke bought c0 games from a friend\n    friend_games = c0\n\n    #Luke bought c1 more games at a garage sale\n    garage_sale_games = c1\n\n    #Luke had a total of friend_games + garage_sale_games games before any of them stopped working\n    total_games_before = friend_games + garage_sale_games\n\n    #c2 of the games didn't work\n    not_working = c2\n\n    #The number of good games Luke ended up with can be calculated by subtracting the number of games that didn't work from the total number of games he had before any of them stopped working\n    good_games = total_games_before - not_working\n\n    return good_games", "mapping": {"c0": 2.0, "c1": 2.0, "c2": 2.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 42.0, "c1": 7.0, "c2": 9.0}}
{"question": " Lana picked c0 tulips and c1 roses to make flower bouquets. If she only used c2 of the flowers though, how many extra flowers did Lana pick? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Lana picked c0 tulips and c1 roses\n    tulips = c0\n    roses = c1\n\n    #Lana only used c2 of the flowers\n    used = c2\n\n    #The number of extra flowers Lana picked can be calculated by subtracting the number of flowers used from the total number of flowers picked\n    extra = tulips + roses - used\n\n    return extra", "mapping": {"c0": 36.0, "c1": 37.0, "c2": 70.0}}
{"question": " Carol and her mom were picking carrots from their garden. Carol picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Carol picked c0 carrots\n    carol = c0\n\n    #Carol's mother picked c1 carrots\n    mother = c1\n\n    #They picked a total of c0 plus c1 carrots\n    total = carol + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 29.0, "c1": 16.0, "c2": 38.0}}
{"question": " Roger had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [19.0], "response": "def Problem(c0, c1, c2):\n    #Roger originally had c0 dollars\n    roger_original = c0\n\n    #After his birthday, he got c1 more dollars\n    roger_now = roger_original + c1\n\n    #He spent c2 dollars on a new game\n    spent = c2\n\n    #The amount of money Roger has now can be calculated by subtracting the amount he spent from the amount he has now\n    roger_final = roger_now - spent\n\n    return roger_final", "mapping": {"c0": 16.0, "c1": 28.0, "c2": 25.0}}
{"question": " While on vacation, Megan took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [2.0], "response": "def remaining_pictures(c0, c1, c2):\n    #Megan took c0 pictures at the zoo\n    zoo_pics = c0\n\n    #Megan took c1 pictures at the museum\n    museum_pics = c1\n\n    #Megan had c0 + c1 pictures in total\n    total_pics = zoo_pics + museum_pics\n\n    #Megan deleted c2 pictures\n    deleted_pics = c2\n\n    #The number of pictures Megan has left can be calculated by subtracting the number of deleted pictures from the total number of pictures she had\n    remaining = total_pics - deleted_pics\n\n    return remaining", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 31.0}}
{"question": " Rachel bought two coloring books. One had c0 pictures and the other had c1. After one week she had already colored c2 of the pictures. How many pictures does she still have to color? ", "answer": [11.0], "response": "def remaining_pictures(c0, c1, c2):\n    # Rachel had c0 pictures in the first coloring book\n    book1 = c0\n\n    # Rachel had c1 pictures in the second coloring book\n    book2 = c1\n\n    # Rachel colored c2 pictures in total\n    colored = c2\n\n    # The total number of pictures Rachel had before coloring any can be calculated by adding the number of pictures in both books\n    total_before = book1 + book2\n\n    # The number of pictures Rachel still has to color can be calculated by subtracting the number of colored pictures from the total number of pictures she had before coloring any\n    remaining = total_before - colored\n\n    return remaining", "mapping": {"c0": 23.0, "c1": 32.0, "c2": 44.0}}
{"question": " Ned had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Ned had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    short_sleeve = c0\n    long_sleeve = c1\n\n    #Ned washed c2 shirts by the time school started\n    washed = c2\n\n    #The number of shirts Ned did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = (short_sleeve + long_sleeve) - washed\n\n    return not_washed", "mapping": {"c0": 9.0, "c1": 21.0, "c2": 29.0}}
{"question": " Oliver had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [66.0], "response": "def Problem(c0, c1, c2):\n    #Oliver had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    short_sleeve = c0\n    long_sleeve = c1\n\n    #Oliver washed c2 shirts by the time school started\n    washed = c2\n\n    #The number of shirts Oliver did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = (short_sleeve + long_sleeve) - washed\n\n    return not_washed", "mapping": {"c0": 39.0, "c1": 47.0, "c2": 20.0}}
{"question": " For the school bake sale Wendy made pastries. She baked c0 cupcakes and c1 cookies. After the sale she had c2 to take back home. How many pastries did she sell? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Wendy baked c0 cupcakes and c1 cookies\n    cupcakes = c0\n    cookies = c1\n\n    #After the sale, she had c2 pastries left\n    left = c2\n\n    #The number of pastries she sold can be calculated by subtracting the number of pastries left from the total number of pastries she baked\n    sold = cupcakes + cookies - left\n\n    return sold", "mapping": {"c0": 4.0, "c1": 29.0, "c2": 24.0}}
{"question": " While on vacation, Debby took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [22.0], "response": "def vacation_pictures(c0, c1, c2):\n    #Debby took c0 pictures at the zoo\n    zoo_pics = c0\n\n    #Debby took c1 pictures at the museum\n    museum_pics = c1\n\n    #Debby had c0 + c1 pictures in total\n    total_pics = zoo_pics + museum_pics\n\n    #Debby deleted c2 pictures\n    deleted_pics = c2\n\n    #The number of pictures Debby still has can be calculated by subtracting the number of deleted pictures from the total number of pictures she had\n    remaining_pics = total_pics - deleted_pics\n\n    return remaining_pics", "mapping": {"c0": 24.0, "c1": 12.0, "c2": 14.0}}
{"question": " Katie picked c0 tulips and c1 roses to make flower bouquets. If she only used c2 of the flowers though, how many extra flowers did Katie pick? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Katie picked c0 tulips and c1 roses\n    picked = c0 + c1\n\n    #Katie only used c2 of the flowers\n    used = c2\n\n    #The number of extra flowers Katie picked can be calculated by subtracting the number of flowers she used from the total number of flowers she picked\n    extra = picked - used\n\n    return extra", "mapping": {"c0": 3.0, "c1": 9.0, "c2": 10.0}}
{"question": " Faye had c0 math problems and c1 science problems for homework. If she finished c2 of the problems at school, how many problems did she have to do for homework? ", "answer": [15.0], "response": "def homework_problems(c0, c1, c2):\n    #Faye had c0 math problems and c1 science problems for homework\n    total_homework = c0 + c1\n\n    #Faye finished c2 of the problems at school\n    finished_at_school = c2\n\n    #The number of problems Faye has to do for homework can be calculated by subtracting the number of problems she finished at school from the total number of homework problems\n    remaining_homework = total_homework - finished_at_school\n\n    return remaining_homework", "mapping": {"c0": 46.0, "c1": 9.0, "c2": 40.0}}
{"question": " Amy had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [2.0], "response": "def remaining_files(c0, c1, c2):\n    # Amy had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # If she deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 4.0, "c1": 21.0, "c2": 23.0}}
{"question": " Ned was trying to expand his game collection. He bought c0 games from a friend and bought c1 more at a garage sale. If c2 of the games didn't work, how many good games did he end up with? ", "answer": [14.0], "response": "def good_games(c0, c1, c2):\n    #Ned bought c0 games from a friend\n    friend = c0\n\n    #Ned bought c1 more games at a garage sale\n    garage_sale = c1\n\n    #Ned had a total of friend + garage_sale games\n    total_before = friend + garage_sale\n\n    #c2 of the games didn't work\n    not_working = c2\n\n    #The number of good games Ned ended up with can be calculated by subtracting the number of games that didn't work from the total number of games he had\n    good = total_before - not_working\n\n    return good", "mapping": {"c0": 11.0, "c1": 22.0, "c2": 19.0}}
{"question": " Chloe was playing a trivia game. In the first round she scored c0 points and in the second round she scored c1 points. In the last round she lost c2 points. How many points did she have at the end of the game? ", "answer": [86.0], "response": "def total_points(c0, c1, c2):\n    #Chloe scored c0 points in the first round\n    round1 = c0\n\n    #Chloe scored c1 points in the second round\n    round2 = c1\n\n    #Chloe lost c2 points in the last round\n    lost = c2\n\n    #The total points Chloe had at the end of the game can be calculated by adding the points she scored in the first and second rounds and then subtracting the points she lost in the last round\n    total = round1 + round2 - lost\n\n    return total", "mapping": {"c0": 40.0, "c1": 50.0, "c2": 4.0}}
{"question": " At the arcade, Tom won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he spent c2 of his tickets on a hat, how many tickets does Tom have left? ", "answer": [50.0], "response": "def tickets_left(c0, c1, c2):\n    #Tom won c0 tickets playing 'whack a mole'\n    whack_a_mole = c0\n\n    #Tom won c1 tickets playing 'skee ball'\n    skee_ball = c1\n\n    #Tom spent c2 tickets on a hat\n    spent = c2\n\n    #The number of tickets Tom has left can be calculated by adding the number of tickets he won from both games and then subtracting the number of tickets he spent on the hat\n    left = whack_a_mole + skee_ball - spent\n\n    return left", "mapping": {"c0": 32.0, "c1": 25.0, "c2": 7.0}}
{"question": " Bianca and her mom were picking carrots from their garden. Bianca picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #Bianca picked c0 carrots\n    bianca = c0\n\n    #Bianca's mother picked c1 carrots\n    mother = c1\n\n    #They picked a total of c0 plus c1 carrots\n    total = bianca + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 26.0, "c1": 15.0, "c2": 16.0}}
{"question": " For the school bake sale Katie made pastries. She baked c0 cupcakes and c1 cookies. After the sale she had c2 to take back home. How many pastries did she sell? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Katie baked c0 cupcakes and c1 cookies\n    cupcakes = c0\n    cookies = c1\n\n    #After the sale, she had c2 pastries left\n    left = c2\n\n    #The number of pastries she sold can be calculated by subtracting the number of pastries left from the total number of pastries she baked\n    sold = cupcakes + cookies - left\n\n    return sold", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 8.0}}
{"question": " Zoe bought two coloring books. One had c0 pictures and the other had c1. After one week she had already colored c2 of the pictures. How many pictures does she still have to color? ", "answer": [68.0], "response": "def remaining_pictures(c0, c1, c2):\n    # Zoe has c0 pictures in the first coloring book\n    book1 = c0\n\n    # Zoe has c1 pictures in the second coloring book\n    book2 = c1\n\n    # Zoe has already colored c2 pictures\n    colored = c2\n\n    # The total number of pictures Zoe has is the sum of pictures in both books\n    total_pictures = book1 + book2\n\n    # The number of pictures Zoe still has to color is the difference between the total number of pictures and the number of pictures she has already colored\n    remaining = total_pictures - colored\n\n    return remaining", "mapping": {"c0": 44.0, "c1": 44.0, "c2": 20.0}}
{"question": " John was trying to expand his game collection. He bought c0 games from a friend and bought c1 more at a garage sale. If c2 of the games didn't work, how many good games did he end up with? ", "answer": [6.0], "response": "def good_games(c0, c1, c2):\n    # John bought c0 games from a friend\n    friend_games = c0\n\n    # John bought c1 more games at a garage sale\n    garage_sale_games = c1\n\n    # John had a total of friend_games + garage_sale_games games\n    total_games = friend_games + garage_sale_games\n\n    # c2 of the games didn't work\n    faulty_games = c2\n\n    # John ended up with total_games - faulty_games good games\n    good_games = total_games - faulty_games\n\n    return good_games", "mapping": {"c0": 21.0, "c1": 8.0, "c2": 23.0}}
{"question": " Henry had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [19.0], "response": "def Problem(c0, c1, c2):\n    #Henry originally had c0 dollars\n    original_money = c0\n\n    #After his birthday, he got c1 more dollars\n    birthday_money = c1\n\n    #He spent c2 dollars on a new game\n    spent_money = c2\n\n    #The amount of money Henry has now can be calculated by adding the money he got on his birthday and subtracting the money he spent on the new game from his original amount of money\n    current_money = original_money + birthday_money - spent_money\n\n    return current_money", "mapping": {"c0": 11.0, "c1": 18.0, "c2": 10.0}}
{"question": " While on vacation, Gwen took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [55.0], "response": "def vacation_pictures(c0, c1, c2):\n    #Gwen took c0 pictures at the zoo\n    zoo_pics = c0\n\n    #Gwen took c1 pictures at the museum\n    museum_pics = c1\n\n    #Gwen had c0 + c1 pictures in total\n    total_pics = zoo_pics + museum_pics\n\n    #Gwen deleted c2 pictures\n    deleted_pics = c2\n\n    #The number of pictures Gwen still has can be calculated by subtracting the number of deleted pictures from the total number of pictures she had\n    remaining_pics = total_pics - deleted_pics\n\n    return remaining_pics", "mapping": {"c0": 41.0, "c1": 29.0, "c2": 15.0}}
{"question": " Sam had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Sam had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    short_sleeve = c0\n    long_sleeve = c1\n\n    #Sam only washed c2 of them by the time school started\n    washed = c2\n\n    #The number of shirts Sam did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = (short_sleeve + long_sleeve) - washed\n\n    return not_washed", "mapping": {"c0": 40.0, "c1": 23.0, "c2": 29.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [12.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 12.0, "c1": 20.0, "c2": 20.0}}
{"question": " Faye and her mom were picking carrots from their garden. Faye picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Faye picked c0 carrots\n    faye = c0\n\n    #Faye's mother picked c1 carrots\n    mother = c1\n\n    #They picked a total of c0 + c1 carrots\n    total_picked = faye + mother\n\n    #Only c2 of the carrots were good\n    good_carrots = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad_carrots = total_picked - good_carrots\n\n    return bad_carrots", "mapping": {"c0": 23.0, "c1": 5.0, "c2": 12.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [73.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 43.0, "c1": 32.0, "c2": 2.0}}
{"question": " There were c0 girls and c1 boys trying out for the schools basketball team. If only c2 of them got called back, how many students didn't make the cut? ", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #The total number of students who tried out is c0 + c1\n    total_students = c0 + c1\n\n    #The number of students who made the cut is c2\n    made_cut = c2\n\n    #The number of students who didn't make the cut can be calculated by subtracting the number of students who made the cut from the total number of students who tried out\n    not_made_cut = total_students - made_cut\n\n    return not_made_cut", "mapping": {"c0": 39.0, "c1": 4.0, "c2": 26.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [18.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 38.0, "c1": 25.0, "c2": 45.0}}
{"question": " For the school bake sale Paige made pastries. She baked c0 cupcakes and c1 cookies. After the sale she had c2 to take back home. How many pastries did she sell? ", "answer": [41.0], "response": "def Problem(c0, c1, c2):\n    #Paige baked c0 cupcakes and c1 cookies\n    cupcakes = c0\n    cookies = c1\n\n    #After the sale, she had c2 pastries left\n    left = c2\n\n    #The number of pastries she sold can be calculated by subtracting the number of pastries left from the total number of pastries she baked\n    sold = cupcakes + cookies - left\n\n    return sold", "mapping": {"c0": 36.0, "c1": 9.0, "c2": 4.0}}
{"question": " Carol was playing a trivia game. In the first round she scored c0 points and in the second round she scored c1 points. In the last round she lost c2 points. How many points did she have at the end of the game? ", "answer": [7.0], "response": "def total_points(c0, c1, c2):\n    # Carol scored c0 points in the first round\n    round1 = c0\n\n    # Carol scored c1 points in the second round\n    round2 = c1\n\n    # Carol lost c2 points in the last round\n    lost = c2\n\n    # The total points Carol had at the end of the game can be calculated by adding the points from the first two rounds and subtracting the lost points in the last round\n    total = round1 + round2 - lost\n\n    return total", "mapping": {"c0": 17.0, "c1": 6.0, "c2": 16.0}}
{"question": " Gwen bought two coloring books. One had c0 pictures and the other had c1. After one week she had already colored c2 of the pictures. How many pictures does she still have to color? ", "answer": [36.0], "response": "def remaining_pictures(c0, c1, c2):\n    #Gwen has c0 pictures in the first coloring book\n    book1 = c0\n\n    #Gwen has c1 pictures in the second coloring book\n    book2 = c1\n\n    #Gwen has already colored c2 pictures\n    colored = c2\n\n    #The total number of pictures Gwen has is the sum of pictures in both books\n    total_pictures = book1 + book2\n\n    #The number of pictures Gwen still has to color can be calculated by subtracting the number of pictures she has already colored from the total number of pictures she has\n    remaining = total_pictures - colored\n\n    return remaining", "mapping": {"c0": 10.0, "c1": 39.0, "c2": 13.0}}
{"question": " For Halloween Janet and her sister combined the candy they received. Janet had c0 pieces of candy while her sister had c1. If they ate c2 pieces the first night, how many pieces do they have left? ", "answer": [63.0], "response": "def candy_left(c0, c1, c2):\n    # Janet had c0 pieces of candy\n    janet = c0\n\n    # Janet's sister had c1 pieces of candy\n    sister = c1\n\n    # They had c0 + c1 pieces of candy in total\n    total_before = janet + sister\n\n    # They ate c2 pieces of candy\n    ate = c2\n\n    # The number of pieces of candy they have left can be calculated by subtracting the number of pieces they ate from the original total\n    total_now = total_before - ate\n\n    return total_now", "mapping": {"c0": 34.0, "c1": 33.0, "c2": 4.0}}
{"question": " Haley and her mom were picking carrots from their garden. Haley picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Haley picked c0 carrots\n    haley = c0\n\n    #Haley's mom picked c1 carrots\n    mom = c1\n\n    #They picked c0 plus c1 carrots in total\n    total = haley + mom\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 39.0, "c1": 38.0, "c2": 64.0}}
{"question": " There were c0 girls and c1 boys trying out for the schools basketball team. If only c2 of them got called back, how many students didn't make the cut? ", "answer": [56.0], "response": "def Problem(c0, c1, c2):\n    #The total number of students who tried out is c0 + c1\n    total = c0 + c1\n\n    #The number of students who made the cut is c2\n    made_cut = c2\n\n    #The number of students who didn't make the cut can be calculated by subtracting the number of students who made the cut from the total number of students who tried out\n    not_made_cut = total - made_cut\n\n    return not_made_cut", "mapping": {"c0": 30.0, "c1": 36.0, "c2": 10.0}}
{"question": " Roger had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #Roger originally had c0 dollars\n    roger_original = c0\n\n    #After his birthday, he got c1 more dollars\n    roger_now = roger_original + c1\n\n    #He spent c2 dollars on a new game\n    spent = c2\n\n    #The amount of money Roger has now can be calculated by subtracting the amount he spent from the amount he has now\n    roger_final = roger_now - spent\n\n    return roger_final", "mapping": {"c0": 29.0, "c1": 20.0, "c2": 34.0}}
{"question": " Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    total_to_wash = c0 + c1\n\n    #Dave only washed c2 of them by the time school started\n    washed = c2\n\n    #The number of shirts Dave did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = total_to_wash - washed\n\n    return not_washed", "mapping": {"c0": 29.0, "c1": 11.0, "c2": 35.0}}
{"question": " Edward was trying to expand his game collection. He bought c0 games from a friend and bought c1 more at a garage sale. If c2 of the games didn't work, how many good games did he end up with? ", "answer": [24.0], "response": "def good_games(c0, c1, c2):\n    # Edward bought c0 games from a friend\n    friend_games = c0\n\n    # Edward bought c1 more games at a garage sale\n    garage_sale_games = c1\n\n    # Edward had a total of friend_games + garage_sale_games games\n    total_games = friend_games + garage_sale_games\n\n    # c2 of the games didn't work\n    faulty_games = c2\n\n    # Edward ended up with total_games - faulty_games good games\n    good_games = total_games - faulty_games\n\n    return good_games", "mapping": {"c0": 41.0, "c1": 14.0, "c2": 31.0}}
{"question": " At the schools book fair Sam bought c0 adventure books and c1 mystery books. If c2 of the books were used, how many new books did he buy? ", "answer": [15.0], "response": "def new_books(c0, c1, c2):\n    # Sam bought c0 adventure books and c1 mystery books\n    total_books_before = c0 + c1\n\n    # c2 of the books were used\n    used_books = c2\n\n    # The number of new books Sam bought can be calculated by subtracting the number of used books from the total number of books he had before\n    new_books = total_books_before - used_books\n\n    return new_books", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 15.0}}
{"question": " Amy had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [14.0], "response": "def remaining_files(c0, c1, c2):\n    # Amy had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # If she deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 26.0, "c1": 36.0, "c2": 48.0}}
{"question": " Oliver had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Oliver originally had c0 dollars\n    original_money = c0\n\n    #After his birthday, he got c1 more dollars\n    birthday_money = c1\n\n    #He spent c2 dollars on a new game\n    spent_money = c2\n\n    #The amount of money he has now can be calculated by adding the money he got on his birthday and subtracting the money he spent on the new game from his original amount of money\n    current_money = original_money + birthday_money - spent_money\n\n    return current_money", "mapping": {"c0": 35.0, "c1": 50.0, "c2": 84.0}}
{"question": " Emily was playing a trivia game. In the first round she scored c0 points and in the second round she scored c1 points. In the last round she lost c2 points. How many points did she have at the end of the game? ", "answer": [1.0], "response": "def total_points(c0, c1, c2):\n    #Emily scored c0 points in the first round\n    round1 = c0\n\n    #Emily scored c1 points in the second round\n    round2 = c1\n\n    #Emily lost c2 points in the last round\n    lost = c2\n\n    #The total points Emily had at the end of the game can be calculated by adding the points she scored in the first and second rounds and then subtracting the points she lost in the last round\n    total = round1 + round2 - lost\n\n    return total", "mapping": {"c0": 16.0, "c1": 33.0, "c2": 48.0}}
{"question": " Paige had c0 math problems and c1 science problems for homework. If she finished c2 of the problems at school, how many problems did she have to do for homework? ", "answer": [11.0], "response": "def homework_problems(c0, c1, c2):\n    # Paige had c0 math problems and c1 science problems for homework\n    total_homework = c0 + c1\n\n    # Paige finished c2 of the problems at school\n    finished_at_school = c2\n\n    # The number of problems Paige has left to do for homework can be calculated by subtracting the number of problems she finished at school from the total number of homework problems\n    remaining_homework = total_homework - finished_at_school\n\n    return remaining_homework", "mapping": {"c0": 43.0, "c1": 12.0, "c2": 44.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 33.0, "c1": 23.0, "c2": 21.0}}
{"question": " Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    total_to_wash = c0 + c1\n\n    #Dave only washed c2 of them by the time school started\n    washed = c2\n\n    #The number of shirts Dave did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = total_to_wash - washed\n\n    return not_washed", "mapping": {"c0": 9.0, "c1": 27.0, "c2": 20.0}}
{"question": " While on vacation, Rachel took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [4.0], "response": "def vacation_pictures(c0, c1, c2):\n    # Rachel took c0 pictures at the zoo and c1 at the museum\n    total_pictures = c0 + c1\n\n    # She later deleted c2 of the pictures\n    deleted_pictures = c2\n\n    # The number of pictures Rachel still has can be calculated by subtracting the number of deleted pictures from the total number of pictures\n    remaining_pictures = total_pictures - deleted_pictures\n\n    return remaining_pictures", "mapping": {"c0": 6.0, "c1": 9.0, "c2": 11.0}}
{"question": " Vanessa and her mom were picking carrots from their garden. Vanessa picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Vanessa picked c0 carrots\n    vanessa = c0\n\n    #Vanessa's mother picked c1 carrots\n    mother = c1\n\n    #They picked c0 plus c1 carrots in total\n    total = vanessa + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 17.0, "c1": 14.0, "c2": 24.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [54.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 41.0, "c1": 28.0, "c2": 15.0}}
{"question": " At the schools book fair Sam bought c0 adventure books and c1 mystery books. If c2 of the books were used, how many new books did he buy? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #Sam bought c0 adventure books and c1 mystery books\n    adventure_books = c0\n    mystery_books = c1\n\n    #c2 of the books were used\n    used_books = c2\n\n    #The number of new books Sam bought can be calculated by subtracting the number of used books from the total number of books he bought\n    new_books = adventure_books + mystery_books - used_books\n\n    return new_books", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 15.0}}
{"question": " Amy had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [14.0], "response": "def remaining_files(c0, c1, c2):\n    # Amy had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # If she deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 26.0, "c1": 36.0, "c2": 48.0}}
{"question": " Oliver had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Oliver originally had c0 dollars\n    original_money = c0\n\n    #After his birthday, he got c1 more dollars\n    birthday_money = c1\n\n    #He spent c2 dollars on a new game\n    spent_money = c2\n\n    #The amount of money he has now can be calculated by adding the money he got on his birthday and subtracting the money he spent on the new game from his original amount of money\n    current_money = original_money + birthday_money - spent_money\n\n    return current_money", "mapping": {"c0": 35.0, "c1": 50.0, "c2": 84.0}}
{"question": " Emily was playing a trivia game. In the first round she scored c0 points and in the second round she scored c1 points. In the last round she lost c2 points. How many points did she have at the end of the game? ", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Emily scored c0 points in the first round\n    round1 = c0\n\n    #Emily scored c1 points in the second round\n    round2 = c1\n\n    #Emily lost c2 points in the last round\n    lost = c2\n\n    #The total number of points Emily had at the end of the game can be calculated by adding the points she scored in the first and second rounds and subtracting the points she lost in the last round\n    total_points = round1 + round2 - lost\n\n    return total_points", "mapping": {"c0": 16.0, "c1": 33.0, "c2": 48.0}}
{"question": " Paige had c0 math problems and c1 science problems for homework. If she finished c2 of the problems at school, how many problems did she have to do for homework? ", "answer": [11.0], "response": "def homework_problems(c0, c1, c2):\n    # Paige had c0 math problems and c1 science problems for homework\n    total_homework = c0 + c1\n\n    # Paige finished c2 of the problems at school\n    finished_at_school = c2\n\n    # The number of problems Paige has left to do for homework can be calculated by subtracting the number of problems she finished at school from the total number of homework problems\n    remaining_homework = total_homework - finished_at_school\n\n    return remaining_homework", "mapping": {"c0": 43.0, "c1": 12.0, "c2": 44.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 33.0, "c1": 23.0, "c2": 21.0}}
{"question": " Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Dave had to wash c0 short sleeve shirts and c1 long sleeve shirts before school\n    total_to_wash = c0 + c1\n\n    #Dave only washed c2 of them by the time school started\n    washed = c2\n\n    #The number of shirts Dave did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = total_to_wash - washed\n\n    return not_washed", "mapping": {"c0": 9.0, "c1": 27.0, "c2": 20.0}}
{"question": " While on vacation, Rachel took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [4.0], "response": "def vacation_pictures(c0, c1, c2):\n    # Rachel took c0 pictures at the zoo and c1 at the museum\n    total_pictures = c0 + c1\n\n    # She later deleted c2 of the pictures\n    deleted_pictures = c2\n\n    # The number of pictures Rachel still has can be calculated by subtracting the number of deleted pictures from the total number of pictures\n    remaining_pictures = total_pictures - deleted_pictures\n\n    return remaining_pictures", "mapping": {"c0": 6.0, "c1": 9.0, "c2": 11.0}}
{"question": " Vanessa and her mom were picking carrots from their garden. Vanessa picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Vanessa picked c0 carrots\n    vanessa = c0\n\n    #Vanessa's mother picked c1 carrots\n    mother = c1\n\n    #They picked c0 plus c1 carrots in total\n    total = vanessa + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 17.0, "c1": 14.0, "c2": 24.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [54.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 41.0, "c1": 28.0, "c2": 15.0}}
{"question": " Janet picked c0 tulips and c1 roses to make flower bouquets. If she only used c2 of the flowers though, how many extra flowers did Janet pick? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Janet picked c0 tulips and c1 roses\n    picked = c0 + c1\n\n    #Janet only used c2 of the flowers\n    used = c2\n\n    #The number of extra flowers Janet picked can be calculated by subtracting the number of flowers she used from the total number of flowers she picked\n    extra = picked - used\n\n    return extra", "mapping": {"c0": 4.0, "c1": 11.0, "c2": 11.0}}
{"question": " Vanessa had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [33.0], "response": "def remaining_files(c0, c1, c2):\n    # Vanessa had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # She deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 13.0, "c1": 30.0, "c2": 10.0}}
{"question": " Debby bought two coloring books. One had c0 pictures and the other had c1. After one week she had already colored c2 of the pictures. How many pictures does she still have to color? ", "answer": [23.0], "response": "def remaining_pictures(c0, c1, c2):\n    # Debby has c0 pictures in the first coloring book\n    book1 = c0\n\n    # Debby has c1 pictures in the second coloring book\n    book2 = c1\n\n    # Debby has already colored c2 pictures\n    colored = c2\n\n    # The total number of pictures Debby has is the sum of pictures in both books\n    total_pictures = book1 + book2\n\n    # The number of pictures Debby still has to color is the difference between the total number of pictures and the number of pictures she has already colored\n    remaining = total_pictures - colored\n\n    return remaining", "mapping": {"c0": 16.0, "c1": 40.0, "c2": 33.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 8.0, "c1": 43.0, "c2": 42.0}}
{"question": " Edward started his own lawn mowing business. In the spring he made c0 dollars mowing lawns and in the summer he made c1 dollars. If he had to spend c2 dollars buying supplies, how much money did he end up with? ", "answer": [24.0], "response": "def lawn_mowing_profit(c0, c1, c2):\n    #Edward made c0 dollars in the spring and c1 dollars in the summer\n    spring_profit = c0\n    summer_profit = c1\n\n    #He spent c2 dollars on supplies\n    supplies_cost = c2\n\n    #His total profit can be calculated by adding his spring and summer profits and then subtracting the cost of supplies\n    total_profit = spring_profit + summer_profit - supplies_cost\n\n    return total_profit", "mapping": {"c0": 2.0, "c1": 27.0, "c2": 5.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [28.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 36.0, "c1": 18.0, "c2": 26.0}}
{"question": " Olivia and her mom were picking carrots from their garden. Olivia picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #Olivia picked c0 carrots\n    olivia = c0\n\n    #Olivia's mother picked c1 carrots\n    mother = c1\n\n    #They picked c0 plus c1 carrots in total\n    total = olivia + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 20.0, "c1": 14.0, "c2": 19.0}}
{"question": " George had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #George originally had c0 dollars\n    george_original = c0\n\n    #After his birthday, he got c1 more dollars\n    george_now = george_original + c1\n\n    #He spent c2 dollars on a new game\n    spent = c2\n\n    #The amount of money George has now can be calculated by subtracting the amount he spent from the amount he has after his birthday\n    george_final = george_now - spent\n\n    return george_final", "mapping": {"c0": 30.0, "c1": 16.0, "c2": 38.0}}
{"question": " There were c0 girls and c1 boys trying out for the schools basketball team. If only c2 of them got called back, how many students didn't make the cut? ", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #The total number of students who tried out is c0 + c1\n    total = c0 + c1\n\n    #The number of students who made the cut is c2\n    made_cut = c2\n\n    #The number of students who didn't make the cut can be calculated by subtracting the number of students who made the cut from the total number of students who tried out\n    not_made_cut = total - made_cut\n\n    return not_made_cut", "mapping": {"c0": 6.0, "c1": 48.0, "c2": 7.0}}
{"question": " For the school bake sale Amy made pastries. She baked c0 cupcakes and c1 cookies. After the sale she had c2 to take back home. How many pastries did she sell? ", "answer": [51.0], "response": "def Problem(c0, c1, c2):\n    #Amy baked c0 cupcakes and c1 cookies\n    cupcakes = c0\n    cookies = c1\n\n    #After the sale, she had c2 pastries left\n    left = c2\n\n    #The number of pastries she sold can be calculated by subtracting the number of pastries left from the total number of pastries she baked\n    sold = cupcakes + cookies - left\n\n    return sold", "mapping": {"c0": 15.0, "c1": 48.0, "c2": 12.0}}
{"question": " At the schools book fair Victor bought c0 adventure books and c1 mystery books. If c2 of the books were used, how many new books did he buy? ", "answer": [53.0], "response": "def new_books(c0, c1, c2):\n    #Victor bought c0 adventure books and c1 mystery books\n    total_books = c0 + c1\n\n    #c2 of the books were used\n    used_books = c2\n\n    #The number of new books Victor bought can be calculated by subtracting the number of used books from the total number of books he bought\n    new_books = total_books - used_books\n\n    return new_books", "mapping": {"c0": 32.0, "c1": 37.0, "c2": 16.0}}
{"question": " While on vacation, Haley took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [20.0], "response": "def vacation_pictures(c0, c1, c2):\n    # Haley took c0 pictures at the zoo and c1 at the museum\n    total_pictures = c0 + c1\n\n    # Haley deleted c2 pictures\n    deleted_pictures = c2\n\n    # The number of pictures Haley still has can be calculated by subtracting the number of deleted pictures from the total number of pictures\n    remaining_pictures = total_pictures - deleted_pictures\n\n    return remaining_pictures", "mapping": {"c0": 50.0, "c1": 8.0, "c2": 38.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 37.0, "c1": 45.0, "c2": 51.0}}
{"question": " While shopping, Maria bought c0 green towels and c1 white towels. If she gave her mother c2 of them, how many towels did Maria end up with? ", "answer": [22.0], "response": "def Problem(c0, c1, c2):\n    #Maria bought c0 green towels\n    green_towels = c0\n\n    #Maria bought c1 white towels\n    white_towels = c1\n\n    #Maria had c0 + c1 towels in total\n    total_before = green_towels + white_towels\n\n    #Maria gave c2 towels to her mother\n    gave = c2\n\n    #Maria now has total_before - gave towels left\n    total_now = total_before - gave\n\n    return total_now", "mapping": {"c0": 35.0, "c1": 21.0, "c2": 34.0}}
{"question": " There were c0 girls and c1 boys trying out for the schools basketball team. If only c2 of them got called back, how many students didn't make the cut? ", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #The total number of students who tried out is c0 + c1\n    total = c0 + c1\n\n    #The number of students who made the cut is c2\n    made_cut = c2\n\n    #The number of students who didn't make the cut can be calculated by subtracting the number of students who made the cut from the total number of students who tried out\n    not_made_cut = total - made_cut\n\n    return not_made_cut", "mapping": {"c0": 17.0, "c1": 32.0, "c2": 10.0}}
{"question": " Nancy and her mom were picking carrots from their garden. Nancy picked c0 and her mother picked c1. If only c2 of the carrots were good, how many bad carrots did they have? ", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Nancy picked c0 carrots\n    nancy = c0\n\n    #Nancy's mother picked c1 carrots\n    mother = c1\n\n    #They picked c0 plus c1 carrots in total\n    total = nancy + mother\n\n    #Only c2 of the carrots were good\n    good = c2\n\n    #The number of bad carrots they have can be calculated by subtracting the number of good carrots from the total number of carrots they picked\n    bad = total - good\n\n    return bad", "mapping": {"c0": 38.0, "c1": 47.0, "c2": 71.0}}
{"question": " A waiter at 'The Greasy Spoon' restaurant had c0 customers to wait on. During the lunch rush he added another c1 customers. If c2 of the customers didn't leave him a tip, how many customers did leave a tip? ", "answer": [15.0], "response": "def tip_customers(c0, c1, c2):\n    # The waiter originally had c0 customers\n    original_customers = c0\n\n    # During the lunch rush, c1 customers were added\n    added_customers = c1\n\n    # The total number of customers the waiter served is the sum of original and added customers\n    total_customers = original_customers + added_customers\n\n    # c2 customers did not leave a tip\n    no_tip_customers = c2\n\n    # The number of customers who left a tip can be calculated by subtracting the number of customers who did not leave a tip from the total number of customers\n    tip_customers = total_customers - no_tip_customers\n\n    return tip_customers", "mapping": {"c0": 29.0, "c1": 20.0, "c2": 34.0}}
{"question": " Tom had to wash c0 short sleeve shirts and c1 long sleeve shirts before school. If he had only washed c2 of them by the time school started, how many did he not wash? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Tom had to wash c0 short sleeve shirts and c1 long sleeve shirts\n    short_sleeve = c0\n    long_sleeve = c1\n\n    #Tom only washed c2 of them by the time school started\n    washed = c2\n\n    #The number of shirts Tom did not wash can be calculated by subtracting the number of shirts he washed from the total number of shirts he had to wash\n    not_washed = (short_sleeve + long_sleeve) - washed\n\n    return not_washed", "mapping": {"c0": 10.0, "c1": 25.0, "c2": 5.0}}
{"question": " Vanessa had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [34.0], "response": "def remaining_files(c0, c1, c2):\n    # Vanessa had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # She deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 16.0, "c1": 48.0, "c2": 30.0}}
{"question": " Kaleb started his own lawn mowing business. In the spring he made c0 dollars mowing lawns and in the summer he made c1 dollars. If he had to spend c2 dollars buying supplies, how much money did he end up with? ", "answer": [50.0], "response": "def lawn_mowing_profit(c0, c1, c2):\n    #Kaleb made c0 dollars in the spring and c1 dollars in the summer\n    spring_profit = c0\n    summer_profit = c1\n\n    #Kaleb spent c2 dollars on supplies\n    supplies_cost = c2\n\n    #The total profit Kaleb made can be calculated by adding the spring and summer profits and then subtracting the cost of supplies\n    total_profit = spring_profit + summer_profit - supplies_cost\n\n    return total_profit", "mapping": {"c0": 4.0, "c1": 50.0, "c2": 4.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 6.0, "c1": 15.0, "c2": 5.0}}
{"question": " Bianca picked c0 tulips and c1 roses to make flower bouquets. If she only used c2 of the flowers though, how many extra flowers did Bianca pick? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Bianca picked c0 tulips and c1 roses\n    tulips = c0\n    roses = c1\n\n    #She only used c2 of the flowers\n    used = c2\n\n    #The number of extra flowers Bianca picked can be calculated by subtracting the number of flowers she used from the total number of flowers she picked\n    extra = tulips + roses - used\n\n    return extra", "mapping": {"c0": 39.0, "c1": 49.0, "c2": 81.0}}
{"question": " While on vacation, Nancy took c0 pictures at the zoo and c1 at the museum. If she later deleted c2 of the pictures, how many pictures from her vacation did she still have? ", "answer": [19.0], "response": "def vacation_pictures(c0, c1, c2):\n    #Nancy took c0 pictures at the zoo\n    zoo_pics = c0\n\n    #Nancy took c1 pictures at the museum\n    museum_pics = c1\n\n    #Nancy had c0 + c1 pictures in total\n    total_pics = zoo_pics + museum_pics\n\n    #Nancy deleted c2 pictures\n    deleted_pics = c2\n\n    #The number of pictures Nancy still has can be calculated by subtracting the number of deleted pictures from the total number of pictures she had\n    remaining_pics = total_pics - deleted_pics\n\n    return remaining_pics", "mapping": {"c0": 49.0, "c1": 8.0, "c2": 38.0}}
{"question": " Gwen had c0 math problems and c1 science problems for homework. If she finished c2 of the problems at school, how many problems did she have to do for homework? ", "answer": [5.0], "response": "def homework_problems(c0, c1, c2):\n    #Gwen had c0 math problems and c1 science problems for homework\n    math_problems = c0\n    science_problems = c1\n\n    #She finished c2 of the problems at school\n    finished_at_school = c2\n\n    #The number of problems she has to do for homework can be calculated by subtracting the number of problems she finished at school from the total number of problems she had\n    total_problems = math_problems + science_problems\n    homework_problems = total_problems - finished_at_school\n\n    return homework_problems", "mapping": {"c0": 18.0, "c1": 11.0, "c2": 24.0}}
{"question": " For Halloween Katie and her sister combined the candy they received. Katie had c0 pieces of candy while her sister had c1. If they ate c2 pieces the first night, how many pieces do they have left? ", "answer": [7.0], "response": "def candy_left(c0, c1, c2):\n    # Katie had c0 pieces of candy\n    katie = c0\n\n    # Katie's sister had c1 pieces of candy\n    sister = c1\n\n    # They had c0 + c1 pieces of candy in total\n    total_before = katie + sister\n\n    # They ate c2 pieces of candy\n    ate = c2\n\n    # The number of pieces of candy they have left can be calculated by subtracting the number of pieces they ate from the original total\n    total_now = total_before - ate\n\n    return total_now", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 9.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [45.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 15.0, "c1": 49.0, "c2": 19.0}}
{"question": " There were c0 girls and c1 boys trying out for the schools basketball team. If only c2 of them got called back, how many students didn't make the cut? ", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #The total number of students who tried out is c0 + c1\n    total = c0 + c1\n\n    #The number of students who made the cut is c2\n    made_cut = c2\n\n    #The number of students who didn't make the cut can be calculated by subtracting the number of students who made the cut from the total number of students who tried out\n    not_made_cut = total - made_cut\n\n    return not_made_cut", "mapping": {"c0": 9.0, "c1": 14.0, "c2": 2.0}}
{"question": " Haley had c0 music files and c1 video files on her flash drive. If she deleted c2 of the files, how many files were still on her flash drive? ", "answer": [58.0], "response": "def remaining_files(c0, c1, c2):\n    # Haley had c0 music files and c1 video files on her flash drive\n    total_files = c0 + c1\n\n    # Haley deleted c2 of the files\n    deleted_files = c2\n\n    # The number of files remaining on her flash drive can be calculated by subtracting the number of deleted files from the total number of files\n    remaining = total_files - deleted_files\n\n    return remaining", "mapping": {"c0": 27.0, "c1": 42.0, "c2": 11.0}}
{"question": " While shopping, Maria bought c0 green towels and c1 white towels. If she gave her mother c2 of them, how many towels did Maria end up with? ", "answer": [19.0], "response": "def Problem(c0, c1, c2):\n    #Maria bought c0 green towels\n    green_towels = c0\n\n    #Maria bought c1 white towels\n    white_towels = c1\n\n    #Maria had c0 + c1 towels in total\n    total_before = green_towels + white_towels\n\n    #Maria gave c2 towels to her mother\n    gave = c2\n\n    #Maria now has total_before - gave towels left\n    total_now = total_before - gave\n\n    return total_now", "mapping": {"c0": 40.0, "c1": 44.0, "c2": 65.0}}
{"question": " A waiter at 'The Greasy Spoon' restaurant had c0 customers to wait on. During the lunch rush he added another c1 customers. If c2 of the customers didn't leave him a tip, how many customers did leave a tip? ", "answer": [2.0], "response": "def tip_customers(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #During the lunch rush, he added c1 customers\n    added_customers = c1\n\n    #The total number of customers he served is the sum of the original and added customers\n    total_customers = original_customers + added_customers\n\n    #The number of customers who didn't leave a tip is c2\n    no_tip_customers = c2\n\n    #The number of customers who left a tip can be calculated by subtracting the number of customers who didn't leave a tip from the total number of customers\n    tip_customers = total_customers - no_tip_customers\n\n    return tip_customers", "mapping": {"c0": 39.0, "c1": 12.0, "c2": 49.0}}
{"question": " A pet store had c0 siamese cats and c1 house cats. During a sale they sold c2 cats. How many cats do they have left? ", "answer": [8.0], "response": "def cats_left(c0, c1, c2):\n    #The pet store originally had c0 siamese cats and c1 house cats\n    original_cats = c0 + c1\n\n    #During the sale, they sold c2 cats\n    sold_cats = c2\n\n    #The number of cats they have left can be calculated by subtracting the number of cats sold from the original number of cats\n    cats_left = original_cats - sold_cats\n\n    return cats_left", "mapping": {"c0": 19.0, "c1": 45.0, "c2": 56.0}}
{"question": " A waiter at 'The Greasy Spoon' restaurant had c0 customers to wait on. During the lunch rush he added another c1 customers. If c2 of the customers didn't leave him a tip, how many customers did leave a tip? ", "answer": [26.0], "response": "def tip_customers(c0, c1, c2):\n    # The waiter originally had c0 customers\n    original_customers = c0\n\n    # During the lunch rush, c1 customers were added\n    added_customers = c1\n\n    # The total number of customers the waiter served is the sum of original and added customers\n    total_customers = original_customers + added_customers\n\n    # c2 customers did not leave a tip\n    no_tip_customers = c2\n\n    # The number of customers who left a tip can be calculated by subtracting the number of customers who did not leave a tip from the total number of customers\n    tip_customers = total_customers - no_tip_customers\n\n    return tip_customers", "mapping": {"c0": 26.0, "c1": 27.0, "c2": 27.0}}
{"question": " Rachel bought two coloring books. One had c0 pictures and the other had c1. After one week she had already colored c2 of the pictures. How many pictures does she still have to color? ", "answer": [59.0], "response": "def remaining_pictures(c0, c1, c2):\n    # Rachel has c0 pictures in the first coloring book\n    book1 = c0\n\n    # Rachel has c1 pictures in the second coloring book\n    book2 = c1\n\n    # Rachel has already colored c2 pictures\n    colored = c2\n\n    # The total number of pictures Rachel had before coloring any is the sum of pictures in both books\n    total_before = book1 + book2\n\n    # The number of pictures Rachel still has to color is the difference between the total number of pictures and the number of pictures she has already colored\n    remaining = total_before - colored\n\n    return remaining", "mapping": {"c0": 24.0, "c1": 39.0, "c2": 4.0}}
{"question": " While shopping, Emily bought c0 green towels and c1 white towels. If she gave her mother c2 of them, how many towels did Emily end up with? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Emily bought c0 green towels\n    green_towels = c0\n\n    #Emily bought c1 white towels\n    white_towels = c1\n\n    #Emily had c0 + c1 towels in total\n    total_before = green_towels + white_towels\n\n    #Emily gave c2 towels to her mother\n    gave = c2\n\n    #Emily now has total_before - gave towels left\n    total_now = total_before - gave\n\n    return total_now", "mapping": {"c0": 5.0, "c1": 30.0, "c2": 26.0}}
{"question": " For Halloween Katie and her sister combined the candy they received. Katie had c0 pieces of candy while her sister had c1. If they ate c2 pieces the first night, how many pieces do they have left? ", "answer": [23.0], "response": "def candy_left(c0, c1, c2):\n    # Katie had c0 pieces of candy\n    katie = c0\n\n    # Katie's sister had c1 pieces of candy\n    sister = c1\n\n    # They had c0 + c1 pieces of candy in total\n    total_before = katie + sister\n\n    # They ate c2 pieces of candy\n    ate = c2\n\n    # The number of pieces of candy they have left can be calculated by subtracting the number of pieces they ate from the original total\n    total_now = total_before - ate\n\n    return total_now", "mapping": {"c0": 8.0, "c1": 23.0, "c2": 8.0}}
{"question": " Ned was trying to expand his game collection. He bought c0 games from a friend and bought c1 more at a garage sale. If c2 of the games didn't work, how many good games did he end up with? ", "answer": [3.0], "response": "def good_games(c0, c1, c2):\n    #Ned bought c0 games from a friend\n    friend = c0\n\n    #Ned bought c1 more games at a garage sale\n    garage_sale = c1\n\n    #Ned had a total of friend + garage_sale games\n    total_before = friend + garage_sale\n\n    #c2 of the games didn't work\n    not_working = c2\n\n    #The number of good games Ned ended up with can be calculated by subtracting the number of games that didn't work from the total number of games he had\n    good = total_before - not_working\n\n    return good", "mapping": {"c0": 50.0, "c1": 27.0, "c2": 74.0}}
{"question": " For the school bake sale Wendy made pastries. She baked c0 cupcakes and c1 cookies. After the sale she had c2 to take back home. How many pastries did she sell? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #Wendy baked c0 cupcakes and c1 cookies\n    cupcakes = c0\n    cookies = c1\n\n    #After the sale, she had c2 pastries left\n    left = c2\n\n    #The number of pastries she sold can be calculated by subtracting the number of pastries left from the total number of pastries she baked\n    sold = cupcakes + cookies - left\n\n    return sold", "mapping": {"c0": 41.0, "c1": 31.0, "c2": 32.0}}
{"question": " The school cafeteria ordered c0 red apples and c1 green apples for students lunches. But, if only c2 students wanted fruit, how many extra did the cafeteria end up with? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria ordered c0 red apples and c1 green apples\n    red_apples = c0\n    green_apples = c1\n\n    #If only c2 students wanted fruit, the total number of apples needed is c2\n    total_apples_needed = c2\n\n    #The total number of apples the cafeteria ordered is the sum of red and green apples\n    total_apples_ordered = red_apples + green_apples\n\n    #The number of extra apples the cafeteria ended up with is the difference between the total apples ordered and the total apples needed\n    extra_apples = total_apples_ordered - total_apples_needed\n\n    return extra_apples", "mapping": {"c0": 25.0, "c1": 17.0, "c2": 10.0}}
{"question": " At the arcade, Jerry won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he spent c2 of his tickets on a hat, how many tickets does Jerry have left? ", "answer": [34.0], "response": "def tickets_left(c0, c1, c2):\n    #Jerry won c0 tickets playing 'whack a mole'\n    whack_a_mole = c0\n\n    #Jerry won c1 tickets playing 'skee ball'\n    skee_ball = c1\n\n    #Jerry had c0 + c1 tickets in total\n    total_tickets = whack_a_mole + skee_ball\n\n    #Jerry spent c2 tickets on a hat\n    spent_tickets = c2\n\n    #The number of tickets Jerry has left can be calculated by subtracting the number of tickets he spent from the total number of tickets he had\n    tickets_left = total_tickets - spent_tickets\n\n    return tickets_left", "mapping": {"c0": 29.0, "c1": 17.0, "c2": 12.0}}
{"question": " Cody had c0 dollars. For his birthday he got c1 more dollars but spent c2 on a new game. How much money does he have now? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #Cody originally had c0 dollars\n    original_money = c0\n\n    #After his birthday, he got c1 more dollars\n    birthday_money = c1\n\n    #He spent c2 dollars on a new game\n    spent_money = c2\n\n    #The amount of money Cody has now can be calculated by adding the money he got on his birthday and subtracting the money he spent on the new game from his original amount of money\n    current_money = original_money + birthday_money - spent_money\n\n    return current_money", "mapping": {"c0": 45.0, "c1": 9.0, "c2": 19.0}}
{"question": " For the school bake sale Carol made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #Carol made c0 cupcakes\n    cupcakes_before = c0\n\n    #She sold c1 cupcakes\n    sold = c1\n\n    #She made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes she has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 30.0, "c1": 9.0, "c2": 28.0}}
{"question": " For Halloween Faye scored c0 pieces of candy. She ate c1 pieces the first night and then her sister gave her c2 more pieces. How many pieces of candy does Faye have now? ", "answer": [62.0], "response": "def Problem(c0, c1, c2):\n    #Faye originally scored c0 pieces of candy\n    faye_original = c0\n\n    #Faye ate c1 pieces of candy the first night\n    faye_ate = c1\n\n    #Faye's sister gave her c2 more pieces of candy\n    sister_gave = c2\n\n    #The number of pieces of candy Faye has now can be calculated by subtracting the number of pieces she ate from the original number of pieces she had and then adding the number her sister gave her\n    faye_now = faye_original - faye_ate + sister_gave\n\n    return faye_now", "mapping": {"c0": 47.0, "c1": 25.0, "c2": 40.0}}
{"question": " Kaleb had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Kaleb have? ", "answer": [24.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Kaleb originally had c0 books\n    original_books = c0\n\n    #Kaleb sold c1 books\n    sold_books = c1\n\n    #Kaleb used the money he earned to buy c2 new books\n    bought_books = c2\n\n    #The number of books Kaleb has now can be calculated by subtracting the number of books he sold from the original number of books he had and then adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 34.0, "c1": 17.0, "c2": 7.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [48.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 10.0, "c1": 4.0, "c2": 42.0}}
{"question": " Oliver had c0 dollars in January. By March he had spent c1 dollars. If he got another c2 dollars from his mom, how much money would he have? ", "answer": [61.0], "response": "def Problem(c0, c1, c2):\n    #Oliver had c0 dollars in January\n    january_money = c0\n\n    #By March he had spent c1 dollars\n    march_spending = c1\n\n    #Oliver got another c2 dollars from his mom\n    mom_money = c2\n\n    #The total amount of money Oliver has now can be calculated by adding the amount of money he had in January, the amount he got from his mom, and subtracting the amount he spent in March\n    total_money = january_money + mom_money - march_spending\n\n    return total_money", "mapping": {"c0": 33.0, "c1": 4.0, "c2": 32.0}}
{"question": " A florist had c0 roses. If she sold c1 of them and then later picked c2 more, how many roses would she have? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #The florist originally had c0 roses\n    roses_before = c0\n\n    #The florist sold c1 roses\n    sold = c1\n\n    #The florist picked c2 more roses\n    picked = c2\n\n    #The number of roses the florist has now can be calculated by subtracting the number of roses sold from the original number of roses and then adding the number of roses picked\n    roses_now = roses_before - sold + picked\n\n    return roses_now", "mapping": {"c0": 37.0, "c1": 16.0, "c2": 19.0}}
{"question": " A teacher had c0 worksheets to grade. If she graded c1, but then another c2 were turned in, how many worksheets would she have to grade? ", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #The teacher originally had c0 worksheets to grade\n    original = c0\n\n    #The teacher graded c1 worksheets\n    graded = c1\n\n    #Another c2 worksheets were turned in\n    turned_in = c2\n\n    #The total number of worksheets the teacher has to grade now can be calculated by adding the original number of worksheets to the number of worksheets turned in and then subtracting the number of worksheets already graded\n    total = original + turned_in - graded\n\n    return total", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 18.0}}
{"question": " A book store had c0 books in the bargin bin. If they sold c1 books, but then put c2 more in the bin, how many books would be in the bin? ", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #The book store originally had c0 books in the bargin bin\n    original_books = c0\n\n    #They sold c1 books\n    sold_books = c1\n\n    #They put c2 more books in the bin\n    added_books = c2\n\n    #The number of books in the bin now can be calculated by subtracting the number of sold books from the original number of books and then adding the number of added books\n    books_now = original_books - sold_books + added_books\n\n    return books_now", "mapping": {"c0": 41.0, "c1": 33.0, "c2": 2.0}}
{"question": " A waiter had c0 customers to wait on. If c1 customers left and he got another c2 customers, how many customers would he have? ", "answer": [41.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 customers arrived\n    customers_arrived = c2\n\n    #The number of customers the waiter has now can be calculated by subtracting the number of customers who left and adding the number of customers who arrived\n    current_customers = original_customers - customers_left + customers_arrived\n\n    return current_customers", "mapping": {"c0": 19.0, "c1": 14.0, "c2": 36.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [6.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 3.0}}
{"question": " A teacher had c0 worksheets to grade. If she graded c1, but then another c2 were turned in, how many worksheets would she have to grade? ", "answer": [51.0], "response": "def Problem(c0, c1, c2):\n    #The teacher originally had c0 worksheets to grade\n    original = c0\n\n    #The teacher graded c1 worksheets\n    graded = c1\n\n    #Another c2 worksheets were turned in\n    turned_in = c2\n\n    #The total number of worksheets the teacher has to grade now can be calculated by adding the number of worksheets graded by the original number of worksheets and then adding the number of worksheets turned in\n    total = original + graded + turned_in\n\n    return total", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 46.0}}
{"question": " Paige had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Paige deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Paige added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Paige has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 30.0}}
{"question": " Maria picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [52.0], "response": "def total_carrots(c0, c1, c2):\n    #Maria originally picked c0 carrots\n    original_carrots = c0\n\n    #Maria threw out c1 carrots\n    thrown_carrots = c1\n\n    #Maria picked c2 more carrots the next day\n    new_carrots = c2\n\n    #The total number of carrots Maria has now can be calculated by subtracting the thrown carrots from the original carrots and then adding the new carrots\n    total_carrots = original_carrots - thrown_carrots + new_carrots\n\n    return total_carrots", "mapping": {"c0": 48.0, "c1": 11.0, "c2": 15.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [27.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 34.0, "c1": 20.0, "c2": 13.0}}
{"question": " A waiter had c0 customers to wait on. If c1 customers left and he got another c2 customers, how many customers would he have? ", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 customers arrived\n    customers_arrived = c2\n\n    #The number of customers the waiter has now can be calculated by subtracting the number of customers who left and adding the number of customers who arrived\n    current_customers = original_customers - customers_left + customers_arrived\n\n    return current_customers", "mapping": {"c0": 47.0, "c1": 41.0, "c2": 20.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 33.0, "c1": 18.0, "c2": 14.0}}
{"question": " For the school bake sale Katie made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #Katie made c0 cupcakes\n    cupcakes_before = c0\n\n    #She sold c1 cupcakes\n    sold = c1\n\n    #She made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes she has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 26.0, "c1": 20.0, "c2": 20.0}}
{"question": " Adam had c0 dollars. At the store he spent $c1 on a new game. If he got another c2 dollars for his allowance, how much money does he have now? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Adam originally had c0 dollars\n    adam_original = c0\n\n    #Adam spent c1 dollars on a new game\n    spent = c1\n\n    #Adam got c2 dollars for his allowance\n    allowance = c2\n\n    #The amount of money Adam has now can be calculated by adding his original amount, subtracting what he spent, and adding his allowance\n    adam_now = adam_original - spent + allowance\n\n    return adam_now", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 5.0}}
{"question": " Tiffany was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [56.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany originally had c0 lives\n    tiffany_lives = c0\n\n    #Tiffany lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    #Tiffany got c2 more lives in the next level\n    gained_lives = c2\n\n    #The number of lives Tiffany would have after the next level can be calculated by adding the number of lives she gained to the number of lives she had before losing any lives\n    total_lives = tiffany_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 43.0, "c1": 14.0, "c2": 27.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [17.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 12.0, "c1": 10.0, "c2": 15.0}}
{"question": " A waiter had c0 customers to wait on. If c1 customers left and he got another c2 customers, how many customers would he have? ", "answer": [50.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 customers arrived\n    customers_arrived = c2\n\n    #The number of customers the waiter has now can be calculated by subtracting the number of customers who left and adding the number of customers who arrived\n    current_customers = original_customers - customers_left + customers_arrived\n\n    return current_customers", "mapping": {"c0": 14.0, "c1": 3.0, "c2": 39.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [25.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 30.0, "c1": 10.0, "c2": 5.0}}
{"question": " Faye had c0 coloring books. If she gave away c1 of them, but then bought c2 more, how many would she have total? ", "answer": [79.0], "response": "def total_coloring_books(c0, c1, c2):\n    # Faye originally had c0 coloring books\n    original_books = c0\n    \n    # Faye gave away c1 coloring books\n    gave_away = c1\n    \n    # Faye bought c2 more coloring books\n    bought = c2\n    \n    # The total number of coloring books Faye has now can be calculated by adding the number of original books and the number of bought books, and then subtracting the number of books she gave away\n    total_books = original_books + bought - gave_away\n    \n    return total_books", "mapping": {"c0": 34.0, "c1": 3.0, "c2": 48.0}}
{"question": " Paige had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Paige deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Paige added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Paige has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 11.0, "c1": 9.0, "c2": 8.0}}
{"question": " A teacher had c0 worksheets to grade. If she graded c1, but then another c2 were turned in, how many worksheets would she have to grade? ", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #The teacher originally had c0 worksheets to grade\n    original = c0\n\n    #The teacher graded c1 worksheets\n    graded = c1\n\n    #Another c2 worksheets were turned in\n    turned_in = c2\n\n    #The total number of worksheets the teacher has to grade now can be calculated by adding the original number of worksheets to the number of worksheets turned in and then subtracting the number of worksheets already graded\n    total = original + turned_in - graded\n\n    return total", "mapping": {"c0": 38.0, "c1": 4.0, "c2": 15.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [52.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 40.0, "c1": 14.0, "c2": 26.0}}
{"question": " Wendy was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [74.0], "response": "def calculate_lives(c0, c1, c2):\n    # Wendy originally had c0 lives\n    original_lives = c0\n\n    # Wendy lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    # Wendy gained c2 lives in the next level\n    gained_lives = c2\n\n    # The number of lives Wendy would have after the hard part of the game and the next level can be calculated by subtracting the lost lives and adding the gained lives to the original number of lives\n    total_lives = original_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 43.0, "c1": 8.0, "c2": 39.0}}
{"question": " A book store had c0 books in the bargin bin. If they sold c1 books, but then put c2 more in the bin, how many books would be in the bin? ", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #The book store originally had c0 books in the bargin bin\n    original_books = c0\n\n    #They sold c1 books\n    sold_books = c1\n\n    #They put c2 more books in the bin\n    added_books = c2\n\n    #The number of books in the bin now can be calculated by subtracting the number of sold books from the original number of books and then adding the number of added books\n    books_now = original_books - sold_books + added_books\n\n    return books_now", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 10.0}}
{"question": " At the arcade Cody won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [30.0], "response": "def arcade_tickets(c0, c1, c2):\n    # Cody originally won c0 tickets\n    original_tickets = c0\n\n    # Cody spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    # Cody later won c2 more tickets\n    won_tickets = c2\n\n    # The number of tickets Cody has now can be calculated by subtracting the number of tickets he spent and adding the number of tickets he won\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 49.0, "c1": 25.0, "c2": 6.0}}
{"question": " For the school bake sale Bianca made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #Bianca made c0 cupcakes\n    cupcakes_before = c0\n\n    #She sold c1 cupcakes\n    sold = c1\n\n    #She made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes she has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 17.0}}
{"question": " Bianca had c0 coloring books. If she gave away c1 of them, but then bought c2 more, how many would she have total? ", "answer": [59.0], "response": "def total_coloring_books(c0, c1, c2):\n    # Bianca originally had c0 coloring books\n    original_books = c0\n\n    # Bianca gave away c1 coloring books\n    gave_away = c1\n\n    # Bianca bought c2 more coloring books\n    bought = c2\n\n    # The total number of coloring books Bianca has now can be calculated by adding the number of original books and the number of bought books, and then subtracting the number of books she gave away\n    total_books = original_books + bought - gave_away\n\n    return total_books", "mapping": {"c0": 45.0, "c1": 6.0, "c2": 20.0}}
{"question": " Zoe had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [57.0], "response": "def Problem(c0, c1, c2):\n    #Zoe originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Zoe deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Zoe added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Zoe has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 15.0, "c1": 8.0, "c2": 50.0}}
{"question": " At the arcade Jerry won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [49.0], "response": "def arcade_tickets(c0, c1, c2):\n    # Jerry originally won c0 tickets\n    original_tickets = c0\n\n    # Jerry spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    # Jerry won c2 more tickets later\n    won_tickets = c2\n\n    # The number of tickets Jerry has now can be calculated by subtracting the number of tickets he spent and adding the number of tickets he won\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 47.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [60.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 31.0, "c1": 9.0, "c2": 38.0}}
{"question": " Adam had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Adam have? ", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #Adam originally had c0 books\n    original_books = c0\n\n    #Adam sold c1 books\n    sold_books = c1\n\n    #Adam used the money to buy c2 new books\n    bought_books = c2\n\n    #The number of books Adam has now can be calculated by subtracting the number of books he sold and adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 33.0, "c1": 11.0, "c2": 23.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [10.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 10.0, "c1": 2.0, "c2": 2.0}}
{"question": " The school cafeteria had c0 apples. If they used c1 to make lunch for the students and then bought c2 more, how many apples would they have? ", "answer": [46.0], "response": "def Problem(c0, c1, c2):\n    #The school cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They used c1 apples to make lunch for the students\n    used = c1\n\n    #They bought c2 more apples\n    bought = c2\n\n    #The number of apples they have now can be calculated by subtracting the number of apples they used from the original number of apples and then adding the number of apples they bought\n    apples_now = apples_before - used + bought\n\n    return apples_now", "mapping": {"c0": 38.0, "c1": 20.0, "c2": 28.0}}
{"question": " George had c0 socks. If he threw away c1 old ones that didn't fit and bought c2 new ones, how many socks would he have? ", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #George originally had c0 socks\n    original_socks = c0\n\n    #He threw away c1 old socks that didn't fit\n    threw_away = c1\n\n    #He bought c2 new socks\n    bought = c2\n\n    #The number of socks he has now can be calculated by subtracting the number of socks he threw away from the original number of socks and then adding the number of socks he bought\n    total_socks = original_socks - threw_away + bought\n\n    return total_socks", "mapping": {"c0": 28.0, "c1": 4.0, "c2": 36.0}}
{"question": " For Halloween Robin scored c0 pieces of candy. She ate c1 pieces the first night and then her sister gave her c2 more pieces. How many pieces of candy does Robin have now? ", "answer": [37.0], "response": "def Problem(c0, c1, c2):\n    #Robin originally had c0 pieces of candy\n    robin_original = c0\n\n    #Robin ate c1 pieces of candy the first night\n    robin_now = robin_original - c1\n\n    #Robin's sister gave her c2 more pieces of candy\n    robin_final = robin_now + c2\n\n    return robin_final", "mapping": {"c0": 23.0, "c1": 7.0, "c2": 21.0}}
{"question": " Rachel was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [32.0], "response": "def calculate_lives(c0, c1, c2):\n    # Rachel originally had c0 lives\n    original_lives = c0\n\n    # Rachel lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    # Rachel gained c2 lives in the next level\n    gained_lives = c2\n\n    # The number of lives Rachel would have after the hard part of the game and gaining lives in the next level can be calculated by subtracting the lost lives and adding the gained lives to the original number of lives\n    total_lives = original_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 10.0, "c1": 4.0, "c2": 26.0}}
{"question": " A florist had c0 roses. If she sold c1 of them and then later picked c2 more, how many roses would she have? ", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #The florist originally had c0 roses\n    roses_before = c0\n\n    #The florist sold c1 roses\n    sold = c1\n\n    #The florist picked c2 more roses\n    picked = c2\n\n    #The number of roses the florist has now can be calculated by subtracting the number of roses sold from the original number of roses and then adding the number of roses picked\n    roses_now = roses_before - sold + picked\n\n    return roses_now", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 12.0}}
{"question": " For Halloween Haley scored c0 pieces of candy. She ate c1 pieces the first night and then her sister gave her c2 more pieces. How many pieces of candy does Haley have now? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #Haley originally scored c0 pieces of candy\n    haley_original = c0\n\n    #Haley ate c1 pieces of candy the first night\n    haley_now = haley_original - c1\n\n    #Haley's sister gave her c2 more pieces of candy\n    haley_final = haley_now + c2\n\n    return haley_final", "mapping": {"c0": 33.0, "c1": 17.0, "c2": 19.0}}
{"question": " The school cafeteria had c0 apples. If they used c1 to make lunch for the students and then bought c2 more, how many apples would they have? ", "answer": [50.0], "response": "def Problem(c0, c1, c2):\n    #The school cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They used c1 apples to make lunch for the students\n    used = c1\n\n    #They bought c2 more apples\n    bought = c2\n\n    #The number of apples they have now can be calculated by subtracting the number of apples they used from the original number of apples and then adding the number of apples they bought\n    apples_now = apples_before - used + bought\n\n    return apples_now", "mapping": {"c0": 14.0, "c1": 13.0, "c2": 49.0}}
{"question": " Edward had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Edward have? ", "answer": [38.0], "response": "def Problem(c0, c1, c2):\n    #Edward originally had c0 books\n    original_books = c0\n\n    #Edward sold c1 books\n    sold_books = c1\n\n    #Edward used the money to buy c2 new books\n    bought_books = c2\n\n    #The number of books Edward has now can be calculated by subtracting the number of books he sold and adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 43.0, "c1": 19.0, "c2": 14.0}}
{"question": " A teacher had c0 worksheets to grade. If she graded c1, but then another c2 were turned in, how many worksheets would she have to grade? ", "answer": [33.0], "response": "def worksheets_to_grade(c0, c1, c2):\n    # The teacher originally had c0 worksheets to grade\n    original = c0\n    \n    # The teacher graded c1 worksheets\n    graded = c1\n    \n    # Another c2 worksheets were turned in\n    turned_in = c2\n    \n    # The total number of worksheets to grade now is the original number plus the number turned in, minus the number already graded\n    total = original + turned_in - graded\n    \n    return total", "mapping": {"c0": 29.0, "c1": 25.0, "c2": 29.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [35.0], "response": "def fourth_grade_students(c0, c1, c2):\n    #number of students at the start of the year\n    start = c0\n    \n    #number of students who left during the year\n    left = c1\n    \n    #number of new students who came to school during the year\n    new = c2\n    \n    #number of students at the end of the year can be calculated by subtracting the number of students who left from the starting number of students and then adding the number of new students who came to school\n    end = start - left + new\n    \n    return end", "mapping": {"c0": 35.0, "c1": 10.0, "c2": 10.0}}
{"question": " For the school bake sale Carol made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #Carol made c0 cupcakes\n    cupcakes_before = c0\n\n    #She sold c1 cupcakes\n    sold = c1\n\n    #She made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes she has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 19.0, "c1": 6.0, "c2": 27.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [10.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 40.0, "c1": 37.0, "c2": 7.0}}
{"question": " At the arcade Victor won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [58.0], "response": "def arcade_tickets(c0, c1, c2):\n    #Victor originally won c0 tickets\n    original_tickets = c0\n\n    #Victor spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    #Victor won c2 more tickets later\n    won_tickets = c2\n\n    #The number of tickets Victor has now can be calculated by subtracting the number of tickets he spent on the beanie from the original number of tickets he won and then adding the number of tickets he won later\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 46.0, "c1": 27.0, "c2": 39.0}}
{"question": " Chloe picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [45.0], "response": "def total_carrots(c0, c1, c2):\n    # Chloe originally picked c0 carrots\n    original_carrots = c0\n\n    # Chloe threw out c1 carrots\n    thrown_out_carrots = c1\n\n    # Chloe picked c2 more carrots the next day\n    picked_carrots = c2\n\n    # The total number of carrots Chloe has now can be calculated by subtracting the number of thrown out carrots from the original number of carrots and then adding the number of picked carrots\n    total_carrots = original_carrots - thrown_out_carrots + picked_carrots\n\n    return total_carrots", "mapping": {"c0": 48.0, "c1": 45.0, "c2": 42.0}}
{"question": " Sam had c0 socks. If he threw away c1 old ones that didn't fit and bought c2 new ones, how many socks would he have? ", "answer": [43.0], "response": "def Problem(c0, c1, c2):\n    #Sam originally had c0 socks\n    original_socks = c0\n\n    #He threw away c1 old socks that didn't fit\n    threw_away = c1\n\n    #He bought c2 new socks\n    bought_new = c2\n\n    #The number of socks he has now can be calculated by subtracting the number of socks he threw away from the original number of socks and adding the number of new socks he bought\n    total_socks = original_socks - threw_away + bought_new\n\n    return total_socks", "mapping": {"c0": 10.0, "c1": 3.0, "c2": 36.0}}
{"question": " Maria had c0 bottles of water in her fridge. If she drank c1 of them and then bought c2 more, how many bottles would she have? ", "answer": [51.0], "response": "def Problem(c0, c1, c2):\n    #Maria originally had c0 bottles of water\n    original = c0\n\n    #Maria drank c1 bottles of water\n    drank = c1\n\n    #Maria bought c2 more bottles of water\n    bought = c2\n\n    #The number of bottles Maria has now can be calculated by subtracting the number of bottles she drank from the original number of bottles and then adding the number of bottles she bought\n    now = original - drank + bought\n\n    return now", "mapping": {"c0": 14.0, "c1": 8.0, "c2": 45.0}}
{"question": " A teacher had c0 worksheets to grade. If she graded c1, but then another c2 were turned in, how many worksheets would she have to grade? ", "answer": [63.0], "response": "def worksheets_to_grade(c0, c1, c2):\n    # The teacher originally had c0 worksheets to grade\n    original = c0\n    \n    # The teacher graded c1 worksheets\n    graded = c1\n    \n    # Another c2 worksheets were turned in\n    turned_in = c2\n    \n    # The total number of worksheets to grade now is the original number plus the number turned in, minus the number already graded\n    total = original + turned_in - graded\n    \n    return total", "mapping": {"c0": 34.0, "c1": 7.0, "c2": 36.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [11.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 7.0, "c1": 4.0, "c2": 8.0}}
{"question": " Emily had c0 coloring books. If she gave away c1 of them, but then bought c2 more, how many would she have total? ", "answer": [19.0], "response": "def total_coloring_books(c0, c1, c2):\n    # Emily originally had c0 coloring books\n    original_books = c0\n\n    # Emily gave away c1 coloring books\n    gave_away = c1\n\n    # Emily bought c2 more coloring books\n    bought = c2\n\n    # The total number of coloring books Emily has now can be calculated by adding the number of original books and the number of bought books, and then subtracting the number of books she gave away\n    total_books = original_books + bought - gave_away\n\n    return total_books", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 14.0}}
{"question": " At the arcade Dave won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [18.0], "response": "def arcade_tickets(c0, c1, c2):\n    # Dave originally won c0 tickets\n    original_tickets = c0\n\n    # Dave spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    # Dave won c2 more tickets later\n    won_tickets = c2\n\n    # The number of tickets Dave has now can be calculated by subtracting the number of tickets he spent on the beanie from the original number of tickets he won and then adding the number of tickets he won later\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 25.0, "c1": 22.0, "c2": 15.0}}
{"question": " Robin had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Robin originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Robin deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Robin added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Robin has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 30.0, "c1": 8.0, "c2": 10.0}}
{"question": " The school cafeteria had c0 apples. If they used c1 to make lunch for the students and then bought c2 more, how many apples would they have? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The school cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They used c1 apples to make lunch for the students\n    used = c1\n\n    #They bought c2 more apples\n    bought = c2\n\n    #The number of apples they have now can be calculated by subtracting the number of apples they used from the original number of apples and then adding the number of apples they bought\n    apples_now = apples_before - used + bought\n\n    return apples_now", "mapping": {"c0": 23.0, "c1": 20.0, "c2": 6.0}}
{"question": " Janet was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Janet originally had c0 lives\n    original_lives = c0\n\n    #Janet lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    #Janet got c2 more lives in the next level\n    gained_lives = c2\n\n    #The number of lives Janet would have after the next level can be calculated by adding the number of lives she originally had, subtracting the number of lives she lost, and adding the number of lives she gained\n    total_lives = original_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 38.0, "c1": 16.0, "c2": 32.0}}
{"question": " Megan picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [61.0], "response": "def total_carrots(c0, c1, c2):\n    #Megan originally picked c0 carrots\n    original = c0\n\n    #She threw out c1 of them\n    thrown_out = c1\n\n    #She picked c2 more the next day\n    picked_more = c2\n\n    #The total number of carrots she has now can be calculated by subtracting the number of carrots she threw out and adding the number of carrots she picked the next day\n    total = original - thrown_out + picked_more\n\n    return total", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 46.0}}
{"question": " Roger had c0 dollars in January. By March he had spent c1 dollars. If he got another c2 dollars from his mom, how much money would he have? ", "answer": [71.0], "response": "def Problem(c0, c1, c2):\n    #Roger had c0 dollars in January\n    roger_jan = c0\n\n    #By March he had spent c1 dollars\n    roger_mar = c1\n\n    #If he got another c2 dollars from his mom, his total money would be the sum of what he had in March and what he got from his mom\n    roger_total = roger_mar + c2\n\n    return roger_total", "mapping": {"c0": 45.0, "c1": 20.0, "c2": 46.0}}
{"question": " The school cafeteria had c0 apples. If they used c1 to make lunch for the students and then bought c2 more, how many apples would they have? ", "answer": [38.0], "response": "def Problem(c0, c1, c2):\n    #The school cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They used c1 apples to make lunch for the students\n    used = c1\n\n    #They bought c2 more apples\n    bought = c2\n\n    #The number of apples they have now can be calculated by subtracting the number of apples they used from the original number of apples and then adding the number of apples they bought\n    apples_now = apples_before - used + bought\n\n    return apples_now", "mapping": {"c0": 17.0, "c1": 2.0, "c2": 23.0}}
{"question": " Janet was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #Janet originally had c0 lives\n    original_lives = c0\n\n    #Janet lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    #Janet got c2 more lives in the next level\n    gained_lives = c2\n\n    #The number of lives Janet would have after the next level can be calculated by adding the number of lives she gained to the number of lives she had before losing any lives\n    total_lives = original_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 47.0, "c1": 23.0, "c2": 46.0}}
{"question": " Nancy picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [31.0], "response": "def total_carrots(c0, c1, c2):\n    #Nancy originally picked c0 carrots\n    original = c0\n\n    #Nancy threw out c1 carrots\n    threw_out = c1\n\n    #Nancy picked c2 more carrots the next day\n    picked_more = c2\n\n    #The total number of carrots Nancy has now can be calculated by subtracting the number of carrots she threw out from the original number of carrots and then adding the number of carrots she picked the next day\n    total = original - threw_out + picked_more\n\n    return total", "mapping": {"c0": 12.0, "c1": 2.0, "c2": 21.0}}
{"question": " Bianca had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [64.0], "response": "def Problem(c0, c1, c2):\n    #Bianca originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #She deleted c1 old songs from it\n    deleted_songs = c1\n\n    #She added c2 new songs\n    added_songs = c2\n\n    #The number of songs she has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 34.0, "c1": 14.0, "c2": 44.0}}
{"question": " Tom had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Tom have? ", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #Tom originally had c0 books\n    original_books = c0\n\n    #Tom sold c1 books\n    sold_books = c1\n\n    #Tom used the money to buy c2 new books\n    bought_books = c2\n\n    #The number of books Tom has now can be calculated by subtracting the number of books he sold and adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 38.0}}
{"question": " John had c0 socks. If he threw away c1 old ones that didn't fit and bought c2 new ones, how many socks would he have? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #John originally had c0 socks\n    original_socks = c0\n\n    #He threw away c1 old socks that didn't fit\n    thrown_away = c1\n\n    #He bought c2 new socks\n    bought = c2\n\n    #The number of socks he has now can be calculated by subtracting the number of socks he threw away from the original number of socks and adding the number of socks he bought\n    total_now = original_socks - thrown_away + bought\n\n    return total_now", "mapping": {"c0": 33.0, "c1": 19.0, "c2": 13.0}}
{"question": " For the school bake sale Maria made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #Maria made c0 cupcakes\n    cupcakes_before = c0\n\n    #Maria sold c1 cupcakes\n    sold = c1\n\n    #Maria made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes Maria has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 19.0, "c1": 5.0, "c2": 10.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [34.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 50.0, "c1": 40.0, "c2": 24.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 8.0}}
{"question": " Bianca picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [60.0], "response": "def total_carrots(c0, c1, c2):\n    #Bianca picked c0 carrots from her garden\n    picked = c0\n\n    #She threw out c1 of them\n    thrown_out = c1\n\n    #She picked c2 more the next day\n    picked_next_day = c2\n\n    #The total number of carrots she has now can be calculated by subtracting the number of carrots she threw out from the original number of carrots she picked and then adding the number of carrots she picked the next day\n    total = picked - thrown_out + picked_next_day\n\n    return total", "mapping": {"c0": 23.0, "c1": 10.0, "c2": 47.0}}
{"question": " Zoe had c0 bottles of water in her fridge. If she drank c1 of them and then bought c2 more, how many bottles would she have? ", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #Zoe originally had c0 bottles of water\n    original = c0\n\n    #Zoe drank c1 bottles of water\n    drank = c1\n\n    #Zoe bought c2 more bottles of water\n    bought = c2\n\n    #The number of bottles Zoe has now can be calculated by subtracting the number of bottles she drank from the original number of bottles and then adding the number of bottles she bought\n    now = original - drank + bought\n\n    return now", "mapping": {"c0": 42.0, "c1": 25.0, "c2": 30.0}}
{"question": " Katie had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #Katie originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Katie deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Katie added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Katie has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 11.0, "c1": 7.0, "c2": 24.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [31.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 28.0}}
{"question": " Adam had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Adam have? ", "answer": [67.0], "response": "def Problem(c0, c1, c2):\n    #Adam originally had c0 books\n    original_books = c0\n\n    #Adam sold c1 books\n    sold_books = c1\n\n    #Adam used the money to buy c2 new books\n    bought_books = c2\n\n    #The number of books Adam has now can be calculated by subtracting the number of books he sold and adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 48.0, "c1": 19.0, "c2": 38.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [37.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 31.0, "c1": 5.0, "c2": 11.0}}
{"question": " For the school bake sale Robin made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [59.0], "response": "def Problem(c0, c1, c2):\n    #Robin made c0 cupcakes\n    cupcakes_before = c0\n\n    #Robin sold c1 cupcakes\n    sold = c1\n\n    #Robin made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes Robin has now can be calculated by subtracting the number of cupcakes sold from the original number of cupcakes and then adding the number of cupcakes made\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 42.0, "c1": 22.0, "c2": 39.0}}
{"question": " A florist had c0 roses. If she sold c1 of them and then later picked c2 more, how many roses would she have? ", "answer": [41.0], "response": "def Problem(c0, c1, c2):\n    #The florist originally had c0 roses\n    roses_before = c0\n\n    #The florist sold c1 roses\n    sold = c1\n\n    #The florist picked c2 more roses\n    picked = c2\n\n    #The number of roses the florist has now can be calculated by subtracting the number of roses sold from the original number of roses and then adding the number of roses picked\n    roses_now = roses_before - sold + picked\n\n    return roses_now", "mapping": {"c0": 11.0, "c1": 2.0, "c2": 32.0}}
{"question": " Frank had c0 dollars. At the store he spent $c1 on a new game. If he got another c2 dollars for his allowance, how much money does he have now? ", "answer": [22.0], "response": "def money_after_spending(c0, c1, c2):\n    #Frank originally had c0 dollars\n    original_money = c0\n\n    #He spent c1 dollars on a new game\n    spent_money = c1\n\n    #He got c2 dollars for his allowance\n    allowance = c2\n\n    #The amount of money he has now can be calculated by subtracting the amount he spent from the original amount and adding his allowance\n    money_now = original_money - spent_money + allowance\n\n    return money_now", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 14.0}}
{"question": " Haley was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [46.0], "response": "def Problem(c0, c1, c2):\n    #Haley originally had c0 lives\n    haley_lives = c0\n\n    #Haley lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    #Haley got c2 more lives in the next level\n    gained_lives = c2\n\n    #The number of lives Haley would have after the next level can be calculated by adding the number of lives she gained to the number of lives she had before losing any lives\n    total_lives = haley_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 14.0, "c1": 4.0, "c2": 36.0}}
{"question": " Luke had c0 dollars in January. By March he had spent c1 dollars. If he got another c2 dollars from his mom, how much money would he have? ", "answer": [58.0], "response": "def Problem(c0, c1, c2):\n    #Luke had c0 dollars in January\n    january = c0\n\n    #By March he had spent c1 dollars\n    march = c1\n\n    #If he got another c2 dollars from his mom, his total money would be the sum of what he had in March and what he got from his mom\n    total = march + c2\n\n    return total", "mapping": {"c0": 48.0, "c1": 11.0, "c2": 21.0}}
{"question": " Emily was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [41.0], "response": "def calculate_lives(c0, c1, c2):\n    # Emily originally had c0 lives\n    original_lives = c0\n\n    # Emily lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    # Emily gained c2 lives in the next level\n    gained_lives = c2\n\n    # The number of lives Emily would have after the next level can be calculated by adding the number of gained lives to the remaining lives after losing some\n    remaining_lives = original_lives - lost_lives\n    total_lives = remaining_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 42.0, "c1": 25.0, "c2": 24.0}}
{"question": " Debby had c0 coloring books. If she gave away c1 of them, but then bought c2 more, how many would she have total? ", "answer": [58.0], "response": "def total_coloring_books(c0, c1, c2):\n    #Debby originally had c0 coloring books\n    original_books = c0\n\n    #Debby gave away c1 coloring books\n    gave_away = c1\n\n    #Debby bought c2 more coloring books\n    bought = c2\n\n    #The total number of coloring books Debby has now can be calculated by adding the number of original books and the number of bought books, and then subtracting the number of books she gave away\n    total_books = original_books + bought - gave_away\n\n    return total_books", "mapping": {"c0": 30.0, "c1": 7.0, "c2": 35.0}}
{"question": " The school cafeteria had c0 apples. If they used c1 to make lunch for the students and then bought c2 more, how many apples would they have? ", "answer": [23.0], "response": "def Problem(c0, c1, c2):\n    #The school cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They used c1 apples to make lunch for the students\n    used = c1\n\n    #They bought c2 more apples\n    bought = c2\n\n    #The number of apples they have now can be calculated by subtracting the number of apples they used from the original number of apples and then adding the number of apples they bought\n    apples_now = apples_before - used + bought\n\n    return apples_now", "mapping": {"c0": 12.0, "c1": 8.0, "c2": 19.0}}
{"question": " At the fair there were c0 people in line for the bumper cars. If c1 of them got tired of waiting and left and c2 more got in line, how many people would be in line? ", "answer": [31.0], "response": "def bumper_cars(c0, c1, c2):\n    #initially there were c0 people in line\n    initial = c0\n\n    #c1 people got tired of waiting and left\n    left = c1\n\n    #c2 more people got in line\n    joined = c2\n\n    #the number of people in line now can be calculated by subtracting the number of people who left and adding the number of people who joined\n    final = initial - left + joined\n\n    return final", "mapping": {"c0": 31.0, "c1": 25.0, "c2": 25.0}}
{"question": " A florist had c0 roses. If she sold c1 of them and then later picked c2 more, how many roses would she have? ", "answer": [56.0], "response": "def Problem(c0, c1, c2):\n    #The florist originally had c0 roses\n    roses_before = c0\n\n    #The florist sold c1 roses\n    sold = c1\n\n    #The florist picked c2 more roses\n    picked = c2\n\n    #The number of roses the florist has now can be calculated by subtracting the number of roses sold from the original number of roses and then adding the number of roses picked\n    roses_now = roses_before - sold + picked\n\n    return roses_now", "mapping": {"c0": 50.0, "c1": 15.0, "c2": 21.0}}
{"question": " Zoe had c0 songs on her mp3 player. If she deleted c1 old songs from it and then added c2 new songs, how many songs does she have on her mp3 player? ", "answer": [23.0], "response": "def Problem(c0, c1, c2):\n    #Zoe originally had c0 songs on her mp3 player\n    original_songs = c0\n\n    #Zoe deleted c1 old songs from her mp3 player\n    deleted_songs = c1\n\n    #Zoe added c2 new songs to her mp3 player\n    added_songs = c2\n\n    #The number of songs Zoe has on her mp3 player now can be calculated by subtracting the number of deleted songs from the original number of songs and then adding the number of added songs\n    total_songs = original_songs - deleted_songs + added_songs\n\n    return total_songs", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 20.0}}
{"question": " At the arcade Dave won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [16.0], "response": "def arcade_tickets(c0, c1, c2):\n    # Dave originally won c0 tickets\n    original_tickets = c0\n\n    # Dave spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    # Dave won c2 more tickets later\n    won_tickets = c2\n\n    # The number of tickets Dave has now can be calculated by subtracting the number of tickets he spent on the beanie from the original number of tickets he won and then adding the number of tickets he won later\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 11.0, "c1": 5.0, "c2": 10.0}}
{"question": " A waiter had c0 customers to wait on. If c1 customers left and he got another c2 customers, how many customers would he have? ", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers\n    original_customers = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 customers arrived\n    customers_arrived = c2\n\n    #The number of customers the waiter has now can be calculated by subtracting the number of customers who left and adding the number of customers who arrived\n    current_customers = original_customers - customers_left + customers_arrived\n\n    return current_customers", "mapping": {"c0": 33.0, "c1": 31.0, "c2": 26.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 students in fourth grade\n    students_before = c0\n\n    #c1 students left during the year\n    left = c1\n\n    #c2 new students came to school during the year\n    came = c2\n\n    #The number of students in fourth grade at the end of the year can be calculated by subtracting the number of students who left from the original number of students and then adding the number of new students who came.\n    students_after = students_before - left + came\n\n    return students_after", "mapping": {"c0": 11.0, "c1": 6.0, "c2": 42.0}}
{"question": " Oliver had c0 socks. If he threw away c1 old ones that didn't fit and bought c2 new ones, how many socks would he have? ", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Oliver originally had c0 socks\n    original_socks = c0\n\n    #He threw away c1 old socks that didn't fit\n    threw_away = c1\n\n    #He bought c2 new socks\n    bought_new = c2\n\n    #The number of socks he has now can be calculated by subtracting the number of socks he threw away from the original number of socks and adding the number of new socks he bought\n    total_now = original_socks - threw_away + bought_new\n\n    return total_now", "mapping": {"c0": 11.0, "c1": 4.0, "c2": 26.0}}
{"question": " A store had c0 oranges in a bin. If they threw away c1 of the old ones and put c2 new ones in the bin how many would be in the bin? ", "answer": [36.0], "response": "def oranges_in_bin(c0, c1, c2):\n    #The number of oranges in the bin before throwing away the old ones can be calculated as c0\n    oranges_before = c0\n\n    #The number of oranges thrown away can be calculated as c1\n    oranges_thrown_away = c1\n\n    #The number of new oranges put in the bin can be calculated as c2\n    new_oranges = c2\n\n    #The number of oranges in the bin after throwing away the old ones and putting new ones can be calculated by subtracting the number of oranges thrown away from the original number of oranges and then adding the number of new oranges put in the bin\n    oranges_after = oranges_before - oranges_thrown_away + new_oranges\n\n    return oranges_after", "mapping": {"c0": 40.0, "c1": 25.0, "c2": 21.0}}
{"question": " At the arcade Edward won c0 tickets. If he spent c1 tickets on a beanie and later won c2 more tickets, how many would he have? ", "answer": [9.0], "response": "def arcade_tickets(c0, c1, c2):\n    # Edward originally won c0 tickets\n    original_tickets = c0\n\n    # Edward spent c1 tickets on a beanie\n    spent_tickets = c1\n\n    # Edward later won c2 more tickets\n    won_tickets = c2\n\n    # The number of tickets Edward has now can be calculated by subtracting the number of tickets he spent and adding the number of tickets he won from the original number of tickets he had\n    total_tickets = original_tickets - spent_tickets + won_tickets\n\n    return total_tickets", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 4.0}}
{"question": " In fourth grade there were c0 students at the start of the year. During the year c1 students left and c2 new students came to school. How many students were in fourth grade at the end? ", "answer": [43.0], "response": "def fourth_grade_students(c0, c1, c2):\n    #number of students at the start of the year\n    start = c0\n    \n    #number of students who left during the year\n    left = c1\n    \n    #number of new students who came to school during the year\n    new = c2\n    \n    #number of students at the end of the year can be calculated by subtracting the number of students who left from the starting number of students and then adding the number of new students who came to school\n    end = start - left + new\n    \n    return end", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 42.0}}
{"question": " Haley picked c0 carrots from her garden. If she threw out c1 of them and then picked c2 more the next day, how many carrots would she have total? ", "answer": [26.0], "response": "def total_carrots(c0, c1, c2):\n    # Haley originally picked c0 carrots\n    original_carrots = c0\n\n    # Haley threw out c1 carrots\n    thrown_out_carrots = c1\n\n    # Haley picked c2 more carrots the next day\n    picked_carrots = c2\n\n    # The total number of carrots Haley has now can be calculated by subtracting the number of carrots she threw out and adding the number of carrots she picked the next day\n    total_carrots = original_carrots - thrown_out_carrots + picked_carrots\n\n    return total_carrots", "mapping": {"c0": 28.0, "c1": 11.0, "c2": 9.0}}
{"question": " Roger had c0 books. If he sold c1 of them and used the money he earned to buy c2 new books, how many books would Roger have? ", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Roger originally had c0 books\n    original_books = c0\n\n    #Roger sold c1 books\n    sold_books = c1\n\n    #Roger used the money he earned to buy c2 new books\n    bought_books = c2\n\n    #The number of books Roger has now can be calculated by subtracting the number of books he sold and adding the number of books he bought\n    total_books = original_books - sold_books + bought_books\n\n    return total_books", "mapping": {"c0": 25.0, "c1": 21.0, "c2": 30.0}}
{"question": " A florist had c0 roses. If she sold c1 of them and then later picked c2 more, how many roses would she have? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #The florist originally had c0 roses\n    roses_before = c0\n\n    #The florist sold c1 roses\n    sold = c1\n\n    #The florist picked c2 more roses\n    picked = c2\n\n    #The number of roses the florist has now can be calculated by subtracting the number of roses sold from the original number of roses and then adding the number of roses picked\n    roses_now = roses_before - sold + picked\n\n    return roses_now", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 34.0}}
{"question": " Wendy was playing a video game and had c0 lives. In a hard part of the game she lost c1 lives. If she got c2 more lives in the next level, how many lives would she have? ", "answer": [41.0], "response": "def calculate_lives(c0, c1, c2):\n    # Wendy originally had c0 lives\n    original_lives = c0\n\n    # Wendy lost c1 lives in a hard part of the game\n    lost_lives = c1\n\n    # Wendy gained c2 lives in the next level\n    gained_lives = c2\n\n    # The number of lives Wendy would have after the hard part of the game and gaining lives in the next level can be calculated by subtracting the lost lives and adding the gained lives to the original number of lives\n    total_lives = original_lives - lost_lives + gained_lives\n\n    return total_lives", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 37.0}}
{"question": " John had c0 dollars. At the store he spent $c1 on a new game. If he got another c2 dollars for his allowance, how much money does he have now? ", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #John originally had c0 dollars\n    john_original = c0\n\n    #John spent c1 dollars on a new game\n    spent = c1\n\n    #John got c2 dollars for his allowance\n    allowance = c2\n\n    #The amount of money John has now can be calculated by adding his original amount of money and his allowance, and then subtracting the amount he spent\n    john_now = john_original + allowance - spent\n\n    return john_now", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 26.0}}
{"question": " For the school bake sale Chloe made c0 cupcakes. If she sold c1 of them and then made c2 more, how many cupcakes would she have? ", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Chloe made c0 cupcakes\n    cupcakes_before = c0\n\n    #Chloe sold c1 cupcakes\n    sold = c1\n\n    #Chloe made c2 more cupcakes\n    made = c2\n\n    #The number of cupcakes Chloe has now can be calculated by subtracting the number of cupcakes she sold from the original number of cupcakes she made, and then adding the number of cupcakes she made later\n    cupcakes_now = cupcakes_before - sold + made\n\n    return cupcakes_now", "mapping": {"c0": 28.0, "c1": 25.0, "c2": 8.0}}
{"question": " At the town carnival Billy rode the ferris wheel c0 times and the bumper cars c1 times. If each ride cost c2 tickets, how many tickets did he use? ", "answer": [50.0], "response": "def carnival_tickets(c0, c1, c2):\n    #Billy rode the ferris wheel c0 times and the bumper cars c1 times\n    ferris_wheel = c0\n    bumper_cars = c1\n\n    #Each ride cost c2 tickets\n    cost_per_ride = c2\n\n    #The total number of tickets Billy used can be calculated by multiplying the number of rides by the cost per ride\n    total_tickets = (ferris_wheel + bumper_cars) * cost_per_ride\n\n    return total_tickets", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 5.0}}
{"question": " Chloe was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Chloe have total? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Chloe found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces can be calculated by adding the total number of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 6.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [90.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 3.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Emily bought c1 roses and c2 daisies, how much did she spend? ", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Each flower costs c0 dollars\n    cost_per_flower = c0\n\n    #Emily bought c1 roses and c2 daisies\n    roses = c1\n    daisies = c2\n\n    #The total cost can be calculated by multiplying the number of each type of flower by the cost per flower and adding them together\n    total_cost = (roses * cost_per_flower) + (daisies * cost_per_flower)\n\n    return total_cost", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 2.0}}
{"question": " Isabel had c0 pages of math homework and c1 pages of reading homework. If each page had c2 problems on it, how many problems did she have to complete total? ", "answer": [30.0], "response": "def total_problems(c0, c1, c2):\n    #Isabel had c0 pages of math homework\n    math_pages = c0\n\n    #Isabel had c1 pages of reading homework\n    reading_pages = c1\n\n    #Each page has c2 problems on it\n    problems_per_page = c2\n\n    #The total number of problems Isabel has to complete can be calculated by multiplying the number of pages by the number of problems per page for both math and reading homework, and then adding them together\n    total_problems = (math_pages * problems_per_page) + (reading_pages * problems_per_page)\n\n    return total_problems", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 5.0}}
{"question": " Wendy was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [35.0], "response": "def calculate_score(c0, c1, c2):\n    # Wendy scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    # Wendy found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    # Wendy's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 3.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [63.0], "response": "def total_lives(c0, c1, c2):\n    #total number of players after c1 more players joined\n    total_players = c0 + c1\n    \n    #total number of lives\n    total_lives = total_players * c2\n    \n    return total_lives", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 7.0}}
{"question": " Paul bought c0 boxes of chocolate candy and c1 boxes of caramel candy. If each box has c2 pieces inside it, how much candy did he have total? ", "answer": [90.0], "response": "def total_candy(c0, c1, c2):\n    #calculate the total number of pieces of chocolate candy\n    chocolate_candy = c0 * c2\n\n    #calculate the total number of pieces of caramel candy\n    caramel_candy = c1 * c2\n\n    #calculate the total number of pieces of candy\n    total_candy = chocolate_candy + caramel_candy\n\n    return total_candy", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 9.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [48.0], "response": "def total_birds(c0, c1, c2):\n    #each cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    total_cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = birds_per_cage * total_cages\n\n    return total_birds", "mapping": {"c0": 6.0, "c1": 6.0, "c2": 2.0}}
{"question": " Rachel was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [72.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Rachel has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 2.0}}
{"question": " Rachel was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Rachel have total? ", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #Rachel found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces Rachel has is the sum of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 4.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #each bird cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = cages * birds_per_cage\n\n    return total_birds", "mapping": {"c0": 9.0, "c1": 2.0, "c2": 2.0}}
{"question": " Cody bought c0 boxes of chocolate candy and c1 boxes of caramel candy. If each box has c2 pieces inside it, how much candy did he have total? ", "answer": [80.0], "response": "def total_candy(c0, c1, c2):\n    #calculate the total number of pieces of chocolate candy\n    chocolate_candy = c0 * c2\n\n    #calculate the total number of pieces of caramel candy\n    caramel_candy = c1 * c2\n\n    #calculate the total number of pieces of candy\n    total_candy = chocolate_candy + caramel_candy\n\n    return total_candy", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 8.0}}
{"question": " At Billy's Restaurant a group with c0 adults and c1 children came in to eat. If each meal cost c2 dollars, how much was the bill? ", "answer": [21.0], "response": "def calculate_bill(c0, c1, c2):\n    #calculate the total number of people\n    total_people = c0 + c1\n\n    #calculate the total cost of the meals\n    total_cost = total_people * c2\n\n    return total_cost", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 3.0}}
{"question": " Paul was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [72.0], "response": "def total_cans(c0, c1, c2):\n    #On Saturday, Paul filled c0 bags\n    saturday_bags = c0\n\n    #On Sunday, Paul filled c1 more bags\n    sunday_bags = c1\n\n    #The total number of bags can be calculated by adding the number of bags on Saturday and Sunday\n    total_bags = saturday_bags + sunday_bags\n\n    #Each bag had c2 cans in it\n    cans_per_bag = c2\n\n    #The total number of cans can be calculated by multiplying the total number of bags by the number of cans per bag\n    total_cans = total_bags * cans_per_bag\n\n    return total_cans", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 8.0}}
{"question": " While playing a trivia game, Adam answered c0 questions correct in the first half and c1 questions correct in the second half. If each question was worth c2 points, what was his final score? ", "answer": [50.0], "response": "def trivia_score(c0, c1, c2):\n    #Adam answered c0 questions correct in the first half\n    first_half = c0\n\n    #Adam answered c1 questions correct in the second half\n    second_half = c1\n\n    #Each question was worth c2 points\n    points_per_question = c2\n\n    #Adam's final score can be calculated by adding the number of correct answers in the first half and second half, and then multiplying by the points per question\n    final_score = (first_half + second_half) * points_per_question\n\n    return final_score", "mapping": {"c0": 5.0, "c1": 5.0, "c2": 5.0}}
{"question": " Haley's favorite band was holding a concert where tickets were c0 dollars each. Haley bought c1 tickets for herself and her friends and c2 extra tickets in case anyone else wanted to go. How much did she spend? ", "answer": [32.0], "response": "def concert_cost(c0, c1, c2):\n    #each ticket costs c0 dollars\n    ticket_cost = c0\n\n    #Haley bought c1 tickets for herself and her friends\n    haley_tickets = c1\n\n    #Haley also bought c2 extra tickets\n    extra_tickets = c2\n\n    #The total cost of the tickets can be calculated by multiplying the number of tickets by the cost of each ticket\n    total_cost = (haley_tickets + extra_tickets) * ticket_cost\n\n    return total_cost", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 5.0}}
{"question": " Luke was putting his spare change into piles. He had c0 piles of quarters and c1 piles of dimes. If each pile had c2 coins in it, how many coins did he have total? ", "answer": [30.0], "response": "def total_coins(c0, c1, c2):\n    #calculate the total number of quarters by multiplying the number of piles by the number of coins in each pile\n    quarters = c0 * c2\n    \n    #calculate the total number of dimes by multiplying the number of piles by the number of coins in each pile\n    dimes = c1 * c2\n    \n    #calculate the total number of coins by adding the number of quarters and dimes\n    total = quarters + dimes\n    \n    return total", "mapping": {"c0": 5.0, "c1": 5.0, "c2": 3.0}}
{"question": " Victor and his friend were buying trick decks from the magic shop for c0 dollars each. How much did they spend if Victor bought c1 decks and his friend bought c2 decks? ", "answer": [64.0], "response": "def Problem(c0, c1, c2):\n    #each deck costs c0 dollars\n    cost_per_deck = c0\n\n    #Victor bought c1 decks\n    victor_decks = c1\n\n    #Victor's friend bought c2 decks\n    friend_decks = c2\n\n    #The total cost can be calculated by multiplying the cost per deck by the total number of decks bought\n    total_cost = cost_per_deck * (victor_decks + friend_decks)\n\n    return total_cost", "mapping": {"c0": 8.0, "c1": 6.0, "c2": 2.0}}
{"question": " Katie had c0 pages of math homework and c1 pages of reading homework. If each page had c2 problems on it, how many problems did she have to complete total? ", "answer": [90.0], "response": "def total_problems(c0, c1, c2):\n    #Katie had c0 pages of math homework\n    math_pages = c0\n\n    #Katie had c1 pages of reading homework\n    reading_pages = c1\n\n    #Each page had c2 problems on it\n    problems_per_page = c2\n\n    #The total number of problems Katie had to complete can be calculated by multiplying the number of pages by the number of problems per page for both math and reading homework, and then adding them together\n    total_problems = (math_pages * problems_per_page) + (reading_pages * problems_per_page)\n\n    return total_problems", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 9.0}}
{"question": " Faye was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [56.0], "response": "def calculate_score(c0, c1, c2):\n    #Faye scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    #Faye found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    #Faye's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 6.0}}
{"question": " Gwen was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [72.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Gwen has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 9.0, "c1": 3.0, "c2": 5.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [24.0], "response": "def total_lives(c0, c1, c2):\n    #total number of players after c1 more players joined\n    total_players = c0 + c1\n    \n    #total number of lives\n    total_lives = total_players * c2\n    \n    return total_lives", "mapping": {"c0": 2.0, "c1": 2.0, "c2": 6.0}}
{"question": " Wendy bought c0 new chairs and c1 new tables for her house. If she spent c2 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ", "answer": [48.0], "response": "def Problem(c0, c1, c2):\n    #Wendy bought c0 new chairs and c1 new tables\n    chairs = c0\n    tables = c1\n\n    #She spent c2 minutes on each piece of furniture putting it together\n    time_per_piece = c2\n\n    #The total time she spent putting together all the furniture can be calculated by multiplying the number of chairs and tables by the time spent on each piece\n    total_time = (chairs + tables) * time_per_piece\n\n    return total_time", "mapping": {"c0": 4.0, "c1": 4.0, "c2": 6.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Zoe bought c1 roses and c2 daisies, how much did she spend? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Each flower costs c0 dollars\n    cost_per_flower = c0\n\n    #Zoe bought c1 roses and c2 daisies\n    roses = c1\n    daisies = c2\n\n    #The total cost can be calculated by multiplying the number of each type of flower by the cost per flower and adding them together\n    total_cost = (roses * cost_per_flower) + (daisies * cost_per_flower)\n\n    return total_cost", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 2.0}}
{"question": " Paige was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Paige have total? ", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Paige found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces can be calculated by adding the total number of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 5.0}}
{"question": " Sam was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [42.0], "response": "def total_cans(c0, c1, c2):\n    # Sam filled c0 bags on Saturday\n    saturday_bags = c0\n\n    # Sam filled c1 more bags on Sunday\n    sunday_bags = c1\n\n    # The total number of bags Sam filled can be calculated by adding the number of bags he filled on Saturday and Sunday\n    total_bags = saturday_bags + sunday_bags\n\n    # Each bag had c2 cans in it\n    cans_per_bag = c2\n\n    # The total number of cans Sam picked up can be calculated by multiplying the total number of bags by the number of cans per bag\n    total_cans = total_bags * cans_per_bag\n\n    return total_cans", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 6.0}}
{"question": " George was working as a sacker at a grocery store where he made c0 dollars an hour. On Monday he worked c1 hours and on Tuesday he worked c2 hours. How much money did George make in those two days? ", "answer": [45.0], "response": "def calculate_pay(c0, c1, c2):\n    # George makes c0 dollars an hour\n    hourly_rate = c0\n\n    # George worked c1 hours on Monday and c2 hours on Tuesday\n    monday_hours = c1\n    tuesday_hours = c2\n\n    # George's total pay can be calculated by multiplying his hourly rate by the total number of hours worked\n    total_pay = hourly_rate * (monday_hours + tuesday_hours)\n\n    return total_pay", "mapping": {"c0": 5.0, "c1": 7.0, "c2": 2.0}}
{"question": " While playing a trivia game, Frank answered c0 questions correct in the first half and c1 questions correct in the second half. If each question was worth c2 points, what was his final score? ", "answer": [15.0], "response": "def trivia_score(c0, c1, c2):\n    #Frank answered c0 questions correct in the first half\n    first_half = c0\n\n    #Frank answered c1 questions correct in the second half\n    second_half = c1\n\n    #Each question was worth c2 points\n    points_per_question = c2\n\n    #Frank's final score can be calculated by multiplying the total number of questions he answered correctly by the points per question\n    final_score = (first_half + second_half) * points_per_question\n\n    return final_score", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 3.0}}
{"question": " Edward and his friend were buying trick decks from the magic shop for c0 dollars each. How much did they spend if Edward bought c1 decks and his friend bought c2 decks? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Each deck costs c0 dollars\n    cost_per_deck = c0\n\n    #Edward bought c1 decks\n    edward_decks = c1\n\n    #Edward's friend bought c2 decks\n    friend_decks = c2\n\n    #The total cost can be calculated by multiplying the cost per deck by the total number of decks bought\n    total_cost = cost_per_deck * (edward_decks + friend_decks)\n\n    return total_cost", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 4.0}}
{"question": " Tom and his friend were buying trick decks from the magic shop for c0 dollars each. How much did they spend if Tom bought c1 decks and his friend bought c2 decks? ", "answer": [64.0], "response": "def Problem(c0, c1, c2):\n    #Tom bought c1 decks and his friend bought c2 decks\n    tom_decks = c1\n    friend_decks = c2\n\n    #Each deck costs c0 dollars\n    cost_per_deck = c0\n\n    #The total cost can be calculated by multiplying the cost per deck by the total number of decks bought\n    total_cost = (tom_decks + friend_decks) * cost_per_deck\n\n    return total_cost", "mapping": {"c0": 8.0, "c1": 3.0, "c2": 5.0}}
{"question": " While shopping for music online, Megan bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Megan buy total? ", "answer": [70.0], "response": "def total_songs(c0, c1, c2):\n    #Megan bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    #Megan bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    #The total number of songs Megan bought can be calculated by adding the number of country songs and pop songs\n    total = country_songs + pop_songs\n\n    return total", "mapping": {"c0": 2.0, "c1": 8.0, "c2": 7.0}}
{"question": " Victor was working as a sacker at a grocery store where he made c0 dollars an hour. On Monday he worked c1 hours and on Tuesday he worked c2 hours. How much money did Victor make in those two days? ", "answer": [60.0], "response": "def calculate_pay(c0, c1, c2):\n    #Victor makes c0 dollars an hour\n    hourly_rate = c0\n\n    #Victor worked c1 hours on Monday\n    monday_hours = c1\n\n    #Victor worked c2 hours on Tuesday\n    tuesday_hours = c2\n\n    #The total amount of money Victor made can be calculated by multiplying his hourly rate by the total number of hours he worked\n    total_pay = hourly_rate * (monday_hours + tuesday_hours)\n\n    return total_pay", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 5.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #each bird cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = cages * birds_per_cage\n\n    return total_birds", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 7.0}}
{"question": " Maria bought c0 new chairs and c1 new tables for her house. If she spent c2 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Maria bought c0 new chairs and c1 new tables\n    chairs = c0\n    tables = c1\n\n    #She spent c2 minutes on each piece of furniture putting it together\n    time_per_piece = c2\n\n    #The total time she spent putting together all the furniture can be calculated by multiplying the number of chairs and tables by the time spent per piece\n    total_time = (chairs + tables) * time_per_piece\n\n    return total_time", "mapping": {"c0": 2.0, "c1": 2.0, "c2": 8.0}}
{"question": " Olivia was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [32.0], "response": "def calculate_score(c0, c1, c2):\n    # Olivia scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    # Olivia found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    # Olivia's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 8.0, "c1": 2.0, "c2": 2.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [48.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 5.0}}
{"question": " Faye was selling her necklaces at a garage sale. She sold c0 bead necklaces and c1 gem stone necklaces. If each necklace cost c2 dollars, how much money did she earn? ", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #Faye sold c0 bead necklaces and c1 gem stone necklaces\n    bead_necklaces = c0\n    gem_necklaces = c1\n\n    #Each necklace cost c2 dollars\n    cost_per_necklace = c2\n\n    #The total amount of money Faye earned can be calculated by multiplying the number of necklaces sold by the cost per necklace\n    total_earned = (bead_necklaces + gem_necklaces) * cost_per_necklace\n\n    return total_earned", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 7.0}}
{"question": " At the town carnival Oliver rode the ferris wheel c0 times and the bumper cars c1 times. If each ride cost c2 tickets, how many tickets did he use? ", "answer": [63.0], "response": "def carnival_tickets(c0, c1, c2):\n    #Oliver rode the ferris wheel c0 times and the bumper cars c1 times\n    rides = c0 + c1\n\n    #Each ride cost c2 tickets\n    cost_per_ride = c2\n\n    #The total number of tickets Oliver used can be calculated by multiplying the number of rides by the cost per ride\n    total_tickets = rides * cost_per_ride\n\n    return total_tickets", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 7.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [56.0], "response": "def total_lives(c0, c1, c2):\n    #there were originally c0 friends playing\n    original_players = c0\n\n    #c1 more players joined the game\n    new_players = c1\n\n    #total number of players now\n    total_players = original_players + new_players\n\n    #each player has c2 lives\n    lives_per_player = c2\n\n    #total number of lives can be calculated by multiplying the number of players by the number of lives per player\n    total_lives = total_players * lives_per_player\n\n    return total_lives", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 8.0}}
{"question": " Katie was selling her necklaces at a garage sale. She sold c0 bead necklaces and c1 gem stone necklaces. If each necklace cost c2 dollars, how much money did she earn? ", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #Katie sold c0 bead necklaces and c1 gem stone necklaces\n    bead_necklaces = c0\n    gemstone_necklaces = c1\n\n    #Each necklace cost c2 dollars\n    cost_per_necklace = c2\n\n    #The total amount of money Katie earned can be calculated by multiplying the number of necklaces sold by the cost per necklace\n    total_earned = (bead_necklaces + gemstone_necklaces) * cost_per_necklace\n\n    return total_earned", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 3.0}}
{"question": " Edward was working as a sacker at a grocery store where he made c0 dollars an hour. On Monday he worked c1 hours and on Tuesday he worked c2 hours. How much money did Edward make in those two days? ", "answer": [48.0], "response": "def calculate_salary(c0, c1, c2):\n    #Edward makes c0 dollars an hour\n    hourly_rate = c0\n\n    #Edward worked c1 hours on Monday\n    monday_hours = c1\n\n    #Edward worked c2 hours on Tuesday\n    tuesday_hours = c2\n\n    #Edward's total earnings can be calculated by multiplying his hourly rate by the total number of hours he worked\n    total_earnings = hourly_rate * (monday_hours + tuesday_hours)\n\n    return total_earnings", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 5.0}}
{"question": " While playing a trivia game, Mike answered c0 questions correct in the first half and c1 questions correct in the second half. If each question was worth c2 points, what was his final score? ", "answer": [24.0], "response": "def trivia_score(c0, c1, c2):\n    #Mike answered c0 questions correct in the first half\n    first_half = c0\n\n    #Mike answered c1 questions correct in the second half\n    second_half = c1\n\n    #Each question is worth c2 points\n    points_per_question = c2\n\n    #Mike's final score can be calculated by adding the number of correct answers in the first half and second half, and then multiplying by the points per question\n    final_score = (first_half + second_half) * points_per_question\n\n    return final_score", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 3.0}}
{"question": " Amy was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [32.0], "response": "def calculate_score(c0, c1, c2):\n    #Amy scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    #Amy found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    #Amy's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 2.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 3.0}}
{"question": " Chloe was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [54.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Chloe has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 4.0}}
{"question": " While shopping for music online, Isabel bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Isabel buy total? ", "answer": [72.0], "response": "def total_songs(c0, c1, c2):\n    # Isabel bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    # Isabel bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    # Total number of songs Isabel bought\n    total_songs = country_songs + pop_songs\n\n    return total_songs", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 9.0}}
{"question": " At Oliver's Restaurant a group with c0 adults and c1 children came in to eat. If each meal cost c2 dollars, how much was the bill? ", "answer": [18.0], "response": "def calculate_bill(c0, c1, c2):\n    #calculate the total number of people\n    total_people = c0 + c1\n\n    #calculate the total cost of the meals\n    total_cost = total_people * c2\n\n    return total_cost", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": " Tiffany had c0 pages of math homework and c1 pages of reading homework. If each page had c2 problems on it, how many problems did she have to complete total? ", "answer": [30.0], "response": "def total_problems(c0, c1, c2):\n    #Tiffany had c0 pages of math homework\n    math_pages = c0\n\n    #Tiffany had c1 pages of reading homework\n    reading_pages = c1\n\n    #Each page had c2 problems on it\n    problems_per_page = c2\n\n    #The total number of problems Tiffany had to complete can be calculated by multiplying the number of pages by the number of problems per page for both math and reading homework, and then adding them together\n    total_problems = (math_pages * problems_per_page) + (reading_pages * problems_per_page)\n\n    return total_problems", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 3.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Robin bought c1 roses and c2 daisies, how much did she spend? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #Robin bought c1 roses and c2 daisies\n    roses = c1\n    daisies = c2\n\n    #Each flower costs c0 dollars\n    cost_per_flower = c0\n\n    #The total cost can be calculated by multiplying the number of each type of flower by the cost per flower and adding them together\n    total_cost = (roses * cost_per_flower) + (daisies * cost_per_flower)\n\n    return total_cost", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 4.0}}
{"question": " Zoe was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Zoe have total? ", "answer": [80.0], "response": "def Problem(c0, c1, c2):\n    #Zoe found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces can be calculated by adding the total number of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 8.0, "c1": 4.0, "c2": 6.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [12.0], "response": "def total_lives(c0, c1, c2):\n    #there were originally c0 friends playing\n    original_players = c0\n\n    #c1 more players joined the game\n    new_players = c1\n\n    #total number of players now\n    total_players = original_players + new_players\n\n    #each player has c2 lives\n    lives_per_player = c2\n\n    #total number of lives can be calculated by multiplying the number of players by the number of lives per player\n    total_lives = total_players * lives_per_player\n\n    return total_lives", "mapping": {"c0": 2.0, "c1": 2.0, "c2": 3.0}}
{"question": " Adam bought c0 boxes of chocolate candy and c1 boxes of caramel candy. If each box has c2 pieces inside it, how much candy did he have total? ", "answer": [28.0], "response": "def total_candy(c0, c1, c2):\n    #calculate the total number of pieces of chocolate candy\n    chocolate_candy = c0 * c2\n\n    #calculate the total number of pieces of caramel candy\n    caramel_candy = c1 * c2\n\n    #calculate the total number of pieces of candy\n    total_candy = chocolate_candy + caramel_candy\n\n    return total_candy", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 4.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #each bird cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = cages * birds_per_cage\n\n    return total_birds", "mapping": {"c0": 8.0, "c1": 2.0, "c2": 7.0}}
{"question": " Lana's favorite band was holding a concert where tickets were c0 dollars each. Lana bought c1 tickets for herself and her friends and c2 extra tickets in case anyone else wanted to go. How much did she spend? ", "answer": [60.0], "response": "def concert_cost(c0, c1, c2):\n    #each ticket costs c0 dollars\n    ticket_cost = c0\n\n    #Lana bought c1 tickets for herself and her friends\n    num_tickets = c1\n\n    #Lana also bought c2 extra tickets\n    extra_tickets = c2\n\n    #The total cost of the tickets can be calculated by multiplying the number of tickets by the cost of each ticket\n    total_cost = (num_tickets + extra_tickets) * ticket_cost\n\n    return total_cost", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 2.0}}
{"question": " At Tom's Restaurant a group with c0 adults and c1 children came in to eat. If each meal cost c2 dollars, how much was the bill? ", "answer": [56.0], "response": "def calculate_bill(c0, c1, c2):\n    #calculate the total number of people\n    total_people = c0 + c1\n\n    #calculate the total cost of the meals\n    total_cost = total_people * c2\n\n    return total_cost", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 8.0}}
{"question": " Gwen was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [32.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Gwen has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 4.0, "c1": 5.0, "c2": 3.0}}
{"question": " While shopping for music online, Isabel bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Isabel buy total? ", "answer": [72.0], "response": "def total_songs(c0, c1, c2):\n    # Isabel bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    # Isabel bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    # Total number of songs Isabel bought\n    total_songs = country_songs + pop_songs\n\n    return total_songs", "mapping": {"c0": 4.0, "c1": 5.0, "c2": 8.0}}
{"question": " Megan was selling her necklaces at a garage sale. She sold c0 bead necklaces and c1 gem stone necklaces. If each necklace cost c2 dollars, how much money did she earn? ", "answer": [90.0], "response": "def Problem(c0, c1, c2):\n    #Megan sold c0 bead necklaces and c1 gem stone necklaces\n    bead_necklaces = c0\n    gem_necklaces = c1\n\n    #Each necklace cost c2 dollars\n    cost_per_necklace = c2\n\n    #The total amount of money Megan earned can be calculated by multiplying the number of necklaces sold by the cost per necklace\n    total_earned = (bead_necklaces + gem_necklaces) * cost_per_necklace\n\n    return total_earned", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 9.0}}
{"question": " Rachel was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [63.0], "response": "def calculate_score(c0, c1, c2):\n    #Rachel scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    #Rachel found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    #Rachel's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 9.0, "c1": 5.0, "c2": 2.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Katie bought c1 roses and c2 daisies, how much did she spend? ", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Each flower costs c0 dollars\n    cost_per_flower = c0\n\n    #Katie bought c1 roses and c2 daisies\n    roses = c1\n    daisies = c2\n\n    #The total cost can be calculated by multiplying the number of each type of flower by the cost per flower and adding them together\n    total_cost = (roses * cost_per_flower) + (daisies * cost_per_flower)\n\n    return total_cost", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 5.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #each bird cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = cages * birds_per_cage\n\n    return total_birds", "mapping": {"c0": 9.0, "c1": 2.0, "c2": 6.0}}
{"question": " Roger was putting his spare change into piles. He had c0 piles of quarters and c1 piles of dimes. If each pile had c2 coins in it, how many coins did he have total? ", "answer": [42.0], "response": "def total_coins(c0, c1, c2):\n    #calculate the total number of quarters by multiplying the number of piles by the number of coins in each pile\n    quarters = c0 * c2\n    #calculate the total number of dimes by multiplying the number of piles by the number of coins in each pile\n    dimes = c1 * c2\n    #calculate the total number of coins by adding the number of quarters and dimes\n    total = quarters + dimes\n    return total", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 7.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [32.0], "response": "def total_lives(c0, c1, c2):\n    #there were originally c0 friends playing\n    original_players = c0\n\n    #c1 more players joined the game\n    new_players = c1\n\n    #total number of players now\n    total_players = original_players + new_players\n\n    #each player has c2 lives\n    lives_per_player = c2\n\n    #total number of lives can be calculated by multiplying the number of players by the number of lives per player\n    total_lives = total_players * lives_per_player\n\n    return total_lives", "mapping": {"c0": 2.0, "c1": 2.0, "c2": 8.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 7.0, "c1": 7.0, "c2": 2.0}}
{"question": " Tiffany was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [48.0], "response": "def calculate_score(c0, c1, c2):\n    #Tiffany scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    #Tiffany found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    #Tiffany's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 5.0}}
{"question": " While shopping for music online, Zoe bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Zoe buy total? ", "answer": [24.0], "response": "def total_songs(c0, c1, c2):\n    # Zoe bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    # Zoe bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    # Total number of songs Zoe bought\n    total_songs = country_songs + pop_songs\n\n    return total_songs", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 3.0}}
{"question": " Megan was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [70.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Megan has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #The total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 7.0, "c1": 8.0, "c2": 2.0}}
{"question": " Isabel was selling her necklaces at a garage sale. She sold c0 bead necklaces and c1 gem stone necklaces. If each necklace cost c2 dollars, how much money did she earn? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Isabel sold c0 bead necklaces and c1 gem stone necklaces\n    bead_necklaces = c0\n    gem_necklaces = c1\n\n    #Each necklace cost c2 dollars\n    cost_per_necklace = c2\n\n    #The total amount of money Isabel earned can be calculated by multiplying the number of necklaces sold by the cost per necklace\n    total_earned = (bead_necklaces + gem_necklaces) * cost_per_necklace\n\n    return total_earned", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 6.0}}
{"question": " Frank was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [40.0], "response": "def total_cans(c0, c1, c2):\n    #Frank filled c0 bags on Saturday\n    saturday_bags = c0\n\n    #Frank filled c1 more bags on Sunday\n    sunday_bags = c1\n\n    #The total number of bags Frank filled can be calculated by adding the number of bags he filled on Saturday and Sunday\n    total_bags = saturday_bags + sunday_bags\n\n    #Each bag had c2 cans in it\n    cans_per_bag = c2\n\n    #The total number of cans Frank picked up can be calculated by multiplying the total number of bags by the number of cans per bag\n    total_cans = total_bags * cans_per_bag\n\n    return total_cans", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 5.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Vanessa bought c1 roses and c2 daisies, how much did she spend? ", "answer": [48.0], "response": "def flower_cost(c0, c1, c2):\n    #calculate the total cost of roses and daisies\n    total_cost = (c0 * c1) + (c0 * c2)\n    \n    return total_cost", "mapping": {"c0": 8.0, "c1": 3.0, "c2": 3.0}}
{"question": " Will was working as a sacker at a grocery store where he made c0 dollars an hour. On Monday he worked c1 hours and on Tuesday he worked c2 hours. How much money did Will make in those two days? ", "answer": [80.0], "response": "def calculate_wages(c0, c1, c2):\n    # Will makes c0 dollars an hour\n    hourly_wage = c0\n\n    # Will worked c1 hours on Monday\n    monday_hours = c1\n\n    # Will worked c2 hours on Tuesday\n    tuesday_hours = c2\n\n    # Will's total earnings can be calculated by multiplying his hourly wage by the total number of hours worked\n    total_earnings = hourly_wage * (monday_hours + tuesday_hours)\n\n    return total_earnings", "mapping": {"c0": 8.0, "c1": 8.0, "c2": 2.0}}
{"question": " Rachel bought c0 new chairs and c1 new tables for her house. If she spent c2 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #Rachel bought c0 new chairs and c1 new tables\n    chairs = c0\n    tables = c1\n\n    #She spent c2 minutes on each piece of furniture putting it together\n    time_per_piece = c2\n\n    #The total time she spent putting together all the furniture can be calculated by multiplying the number of chairs and tables by the time spent per piece\n    total_time = (chairs + tables) * time_per_piece\n\n    return total_time", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 4.0}}
{"question": " While playing a trivia game, Adam answered c0 questions correct in the first half and c1 questions correct in the second half. If each question was worth c2 points, what was his final score? ", "answer": [80.0], "response": "def trivia_score(c0, c1, c2):\n    #Adam answered c0 questions correct in the first half\n    first_half = c0\n\n    #Adam answered c1 questions correct in the second half\n    second_half = c1\n\n    #Each question was worth c2 points\n    points_per_question = c2\n\n    #Adam's final score can be calculated by adding the number of correct answers in both halves and multiplying it by the points per question\n    final_score = (first_half + second_half) * points_per_question\n\n    return final_score", "mapping": {"c0": 8.0, "c1": 2.0, "c2": 8.0}}
{"question": " A pet store has c0 bird cages. If each cage has c1 parrots and c2 parakeets in it, how many birds does the pet store have total? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #each bird cage has c1 parrots and c2 parakeets\n    birds_per_cage = c1 + c2\n\n    #the pet store has c0 bird cages\n    cages = c0\n\n    #the total number of birds can be calculated by multiplying the number of cages by the number of birds per cage\n    total_birds = cages * birds_per_cage\n\n    return total_birds", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 2.0}}
{"question": " Kaleb was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [40.0], "response": "def total_cans(c0, c1, c2):\n    # Kaleb filled c0 bags on Saturday\n    saturday_bags = c0\n    \n    # Kaleb filled c1 more bags on Sunday\n    sunday_bags = c1\n    \n    # Each bag had c2 cans in it\n    cans_per_bag = c2\n    \n    # Total number of cans picked up can be calculated by multiplying the number of bags with the number of cans per bag\n    total_cans = (saturday_bags + sunday_bags) * cans_per_bag\n    \n    return total_cans", "mapping": {"c0": 5.0, "c1": 5.0, "c2": 4.0}}
{"question": " Bianca was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [72.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Bianca has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves with the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 4.0}}
{"question": " Billy was putting his spare change into piles. He had c0 piles of quarters and c1 piles of dimes. If each pile had c2 coins in it, how many coins did he have total? ", "answer": [20.0], "response": "def total_coins(c0, c1, c2):\n    #calculate the total number of quarters by multiplying the number of piles by the number of coins in each pile\n    quarters = c0 * c2\n    #calculate the total number of dimes by multiplying the number of piles by the number of coins in each pile\n    dimes = c1 * c2\n    #calculate the total number of coins by adding the number of quarters and dimes\n    total = quarters + dimes\n    return total", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 4.0}}
{"question": " Chloe was playing a video game where she scores c0 points for each treasure she finds. If she found c1 treasures on the first level and c2 on the second, what would her score be? ", "answer": [81.0], "response": "def calculate_score(c0, c1, c2):\n    #Chloe scores c0 points for each treasure she finds\n    points_per_treasure = c0\n\n    #Chloe found c1 treasures on the first level and c2 on the second\n    treasures_found = c1 + c2\n\n    #Chloe's score can be calculated by multiplying the number of treasures found by the points per treasure\n    score = treasures_found * points_per_treasure\n\n    return score", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 3.0}}
{"question": " While shopping for music online, Nancy bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Nancy buy total? ", "answer": [64.0], "response": "def total_songs(c0, c1, c2):\n    #Nancy bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    #Nancy bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    #The total number of songs Nancy bought can be calculated by adding the number of country songs and pop songs\n    total = country_songs + pop_songs\n\n    return total", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 8.0}}
{"question": " Lana was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Lana have total? ", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #Lana found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces Lana has is the sum of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 4.0}}
{"question": " Frank and his friend were buying trick decks from the magic shop for c0 dollars each. How much did they spend if Frank bought c1 decks and his friend bought c2 decks? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #each deck costs c0 dollars\n    cost_per_deck = c0\n\n    #Frank bought c1 decks\n    frank_decks = c1\n\n    #Frank's friend bought c2 decks\n    friend_decks = c2\n\n    #The total cost can be calculated by multiplying the cost per deck by the total number of decks bought\n    total_cost = cost_per_deck * (frank_decks + friend_decks)\n\n    return total_cost", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 2.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [40.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 5.0, "c1": 5.0, "c2": 3.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [60.0], "response": "def total_lives(c0, c1, c2):\n    #there were originally c0 friends playing\n    original_players = c0\n\n    #c1 more players joined the game\n    new_players = c1\n\n    #total number of players now\n    total_players = original_players + new_players\n\n    #each player has c2 lives\n    lives_per_player = c2\n\n    #total number of lives can be calculated by multiplying the number of players by the number of lives per player\n    total_lives = total_players * lives_per_player\n\n    return total_lives", "mapping": {"c0": 8.0, "c1": 2.0, "c2": 6.0}}
{"question": " Sam was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [63.0], "response": "def total_cans(c0, c1, c2):\n    # Sam filled c0 bags on Saturday\n    saturday_bags = c0\n\n    # Sam filled c1 more bags on Sunday\n    sunday_bags = c1\n\n    # The total number of bags Sam filled can be calculated by adding the number of bags he filled on Saturday and Sunday\n    total_bags = saturday_bags + sunday_bags\n\n    # Each bag had c2 cans in it\n    cans_per_bag = c2\n\n    # The total number of cans Sam picked up can be calculated by multiplying the total number of bags by the number of cans per bag\n    total_cans = total_bags * cans_per_bag\n\n    return total_cans", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 9.0}}
{"question": " April's discount flowers was having a sale where each flower was c0 dollars. If Maria bought c1 roses and c2 daisies, how much did she spend? ", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Maria bought c1 roses and c2 daisies\n    roses = c1\n    daisies = c2\n\n    #Each flower costs c0 dollars\n    cost_per_flower = c0\n\n    #The total cost can be calculated by multiplying the number of each type of flower by the cost per flower and adding them together\n    total_cost = (roses * cost_per_flower) + (daisies * cost_per_flower)\n\n    return total_cost", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 3.0}}
{"question": " Dave was working as a sacker at a grocery store where he made c0 dollars an hour. On Monday he worked c1 hours and on Tuesday he worked c2 hours. How much money did Dave make in those two days? ", "answer": [48.0], "response": "def calculate_pay(c0, c1, c2):\n    # Dave makes c0 dollars an hour\n    hourly_rate = c0\n\n    # Dave worked c1 hours on Monday and c2 hours on Tuesday\n    monday_hours = c1\n    tuesday_hours = c2\n\n    # Dave's total pay can be calculated by multiplying his hourly rate by the total number of hours worked\n    total_pay = hourly_rate * (monday_hours + tuesday_hours)\n\n    return total_pay", "mapping": {"c0": 6.0, "c1": 6.0, "c2": 2.0}}
{"question": " Nancy was organizing her book case making sure each of the shelves had exactly c0 books on it. If she had c1 shelves of mystery books and c2 shelves of picture books, how many books did she have total? ", "answer": [48.0], "response": "def total_books(c0, c1, c2):\n    #each shelf has c0 books\n    books_per_shelf = c0\n\n    #Nancy has c1 shelves of mystery books and c2 shelves of picture books\n    mystery_shelves = c1\n    picture_shelves = c2\n\n    #total number of books can be calculated by multiplying the number of shelves by the number of books per shelf\n    total_books = (mystery_shelves + picture_shelves) * books_per_shelf\n\n    return total_books", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 6.0}}
{"question": " While shopping for music online, Faye bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Faye buy total? ", "answer": [30.0], "response": "def total_songs(c0, c1, c2):\n    #Faye bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    #Faye bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    #The total number of songs Faye bought can be calculated by adding the number of country songs and pop songs\n    total = country_songs + pop_songs\n\n    return total", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 6.0}}
{"question": " Tom was putting his spare change into piles. He had c0 piles of quarters and c1 piles of dimes. If each pile had c2 coins in it, how many coins did he have total? ", "answer": [30.0], "response": "def total_coins(c0, c1, c2):\n    # Tom has c0 piles of quarters, each with c2 coins\n    quarters = c0 * c2\n\n    # Tom has c1 piles of dimes, each with c2 coins\n    dimes = c1 * c2\n\n    # The total number of coins Tom has is the sum of the quarters and dimes\n    total = quarters + dimes\n\n    return total", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 5.0}}
{"question": " While playing a trivia game, George answered c0 questions correct in the first half and c1 questions correct in the second half. If each question was worth c2 points, what was his final score? ", "answer": [30.0], "response": "def trivia_score(c0, c1, c2):\n    #George answered c0 questions correct in the first half\n    first_half = c0\n\n    #George answered c1 questions correct in the second half\n    second_half = c1\n\n    #Each question was worth c2 points\n    points_per_question = c2\n\n    #George's final score can be calculated by multiplying the total number of questions he answered correctly by the points per question\n    final_score = (first_half + second_half) * points_per_question\n\n    return final_score", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 3.0}}
{"question": " Lana was unboxing some of her old winter clothes. She found c0 boxes of clothing and inside each box there were c1 scarves and c2 mittens. How many pieces of winter clothing did Lana have total? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Lana found c0 boxes of winter clothing\n    boxes = c0\n\n    #Each box contains c1 scarves and c2 mittens\n    scarves_per_box = c1\n    mittens_per_box = c2\n\n    #The total number of scarves and mittens can be calculated by multiplying the number of boxes with the number of scarves/mittens per box\n    total_scarves = boxes * scarves_per_box\n    total_mittens = boxes * mittens_per_box\n\n    #The total number of winter clothing pieces Lana has is the sum of scarves and mittens\n    total_clothing = total_scarves + total_mittens\n\n    return total_clothing", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 6.0}}
{"question": " At the town carnival Oliver rode the ferris wheel c0 times and the bumper cars c1 times. If each ride cost c2 tickets, how many tickets did he use? ", "answer": [30.0], "response": "def carnival_tickets(c0, c1, c2):\n    #Oliver rode the ferris wheel c0 times and the bumper cars c1 times\n    ferris_wheel = c0\n    bumper_cars = c1\n\n    #Each ride cost c2 tickets\n    cost_per_ride = c2\n\n    #The total number of tickets Oliver used can be calculated by multiplying the number of rides by the cost per ride\n    total_tickets = (ferris_wheel + bumper_cars) * cost_per_ride\n\n    return total_tickets", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 3.0}}
{"question": " Sarah had c0 pages of math homework and c1 pages of reading homework. If each page had c2 problems on it, how many problems did she have to complete total? ", "answer": [40.0], "response": "def total_problems(c0, c1, c2):\n    # Sarah had c0 pages of math homework\n    math_pages = c0\n\n    # Sarah had c1 pages of reading homework\n    reading_pages = c1\n\n    # Each page had c2 problems on it\n    problems_per_page = c2\n\n    # Total number of problems Sarah had to complete can be calculated by multiplying the number of pages with the number of problems per page and adding them together\n    total_problems = (math_pages + reading_pages) * problems_per_page\n\n    return total_problems", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 4.0}}
{"question": " Kaleb was collecting cans for recycling. On Saturday he filled c0 bags up and on Sunday he filled c1 more bags. If each bag had c2 cans in it, how many cans did he pick up total? ", "answer": [40.0], "response": "def total_cans(c0, c1, c2):\n    # Kaleb filled c0 bags on Saturday\n    saturday_bags = c0\n    \n    # Kaleb filled c1 more bags on Sunday\n    sunday_bags = c1\n    \n    # Each bag had c2 cans in it\n    cans_per_bag = c2\n    \n    # Total number of cans picked up can be calculated by multiplying the number of bags with the number of cans per bag\n    total_cans = (saturday_bags + sunday_bags) * cans_per_bag\n    \n    return total_cans", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 4.0}}
{"question": " Edward and his friend were buying trick decks from the magic shop for c0 dollars each. How much did they spend if Edward bought c1 decks and his friend bought c2 decks? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Each deck costs c0 dollars\n    cost_per_deck = c0\n\n    #Edward bought c1 decks\n    edward_decks = c1\n\n    #Edward's friend bought c2 decks\n    friend_decks = c2\n\n    #The total cost can be calculated by multiplying the cost per deck by the total number of decks bought\n    total_cost = cost_per_deck * (edward_decks + friend_decks)\n\n    return total_cost", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 6.0}}
{"question": " Emily bought c0 new chairs and c1 new tables for her house. If she spent c2 minutes on each piece furniture putting it together, how many minutes did it take her to finish? ", "answer": [48.0], "response": "def Problem(c0, c1, c2):\n    #Emily bought c0 new chairs and c1 new tables\n    chairs = c0\n    tables = c1\n\n    #She spent c2 minutes on each piece of furniture putting it together\n    time_per_piece = c2\n\n    #The total time she spent putting together all the furniture can be calculated by multiplying the number of chairs and tables by the time spent per piece\n    total_time = (chairs + tables) * time_per_piece\n\n    return total_time", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 8.0}}
{"question": " A waiter had c0 tables he was waiting on, with c1 women and c2 men at each table. How many customers total did the waiter have? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 tables he was waiting on\n    tables = c0\n\n    #There were c1 women and c2 men at each table\n    women = c1\n    men = c2\n\n    #The total number of customers can be calculated by multiplying the number of tables by the sum of the number of women and men at each table\n    total_customers = tables * (women + men)\n\n    return total_customers", "mapping": {"c0": 9.0, "c1": 2.0, "c2": 6.0}}
{"question": " There were c0 friends playing a video game online when c1 more players joined the game. If each player had c2 lives, how many lives did they have total? ", "answer": [27.0], "response": "def total_lives(c0, c1, c2):\n    #there were originally c0 friends playing\n    original_players = c0\n\n    #c1 more players joined the game\n    new_players = c1\n\n    #total number of players now\n    total_players = original_players + new_players\n\n    #each player has c2 lives\n    lives_per_player = c2\n\n    #total number of lives can be calculated by multiplying the number of players by the number of lives per player\n    total_lives = total_players * lives_per_player\n\n    return total_lives", "mapping": {"c0": 4.0, "c1": 5.0, "c2": 3.0}}
{"question": " While shopping for music online, Janet bought c0 country albums and c1 pop albums. Each album came with a lyric sheet and had c2 songs. How many songs did Janet buy total? ", "answer": [72.0], "response": "def total_songs(c0, c1, c2):\n    #Janet bought c0 country albums and each album has c2 songs\n    country_songs = c0 * c2\n\n    #Janet bought c1 pop albums and each album has c2 songs\n    pop_songs = c1 * c2\n\n    #The total number of songs Janet bought can be calculated by adding the number of country songs and pop songs\n    total = country_songs + pop_songs\n\n    return total", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 9.0}}
{"question": " The schools debate team had c0 boys and c1 girls on it. If they were split into groups of c2 how many groups could they make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The debate team had c0 boys and c1 girls\n    boys = c0\n    girls = c1\n\n    #They were split into groups of c2\n    group_size = c2\n\n    #The total number of team members\n    total_members = boys + girls\n\n    #The number of groups they can make can be calculated by dividing the total number of team members by the group size\n    num_groups = total_members // group_size\n\n    return num_groups", "mapping": {"c0": 26.0, "c1": 46.0, "c2": 9.0}}
{"question": " Robin uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Robin uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    num_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // num_albums\n\n    return pics_per_album", "mapping": {"c0": 35.0, "c1": 5.0, "c2": 5.0}}
{"question": " Kaleb had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [6.0], "response": "def toys(c0, c1, c2):\n    #Kaleb had c0 dollars saved up\n    saved = c0\n\n    #Kaleb received c1 dollars for his allowance\n    allowance = c1\n\n    #Kaleb now has c0 plus c1 dollars\n    total = saved + allowance\n\n    #The number of c2 dollar toys Kaleb can buy can be calculated by dividing the total amount of money he has by the cost of each toy\n    num_toys = total // c2\n\n    return num_toys", "mapping": {"c0": 21.0, "c1": 15.0, "c2": 6.0}}
{"question": " Olivia was making baggies of cookies with c0 cookies in each bag. If she had c1 chocolate chip cookies and c2 oatmeal cookies, how many baggies could she make? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Olivia has c1 chocolate chip cookies and c2 oatmeal cookies\n    total_cookies = c1 + c2\n\n    #She is making baggies of c0 cookies each\n    cookies_per_bag = c0\n\n    #The number of baggies she can make can be calculated by dividing the total number of cookies by the number of cookies per bag\n    baggies = total_cookies // cookies_per_bag\n\n    return baggies", "mapping": {"c0": 9.0, "c1": 13.0, "c2": 41.0}}
{"question": " Luke made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Luke made c0 dollars mowing lawns and c1 dollars weed eating\n    total_money = c0 + c1\n\n    #He only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The number of weeks the money will last can be calculated by dividing the total money by the weekly spending\n    weeks = total_money // weekly_spending\n\n    return weeks", "mapping": {"c0": 9.0, "c1": 18.0, "c2": 3.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 48.0, "c1": 6.0, "c2": 6.0}}
{"question": " For a birthday party Jerry bought c0 regular sodas and c1 diet sodas. If his fridge would only hold c2 on each shelf, how many shelves would he fill up? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Jerry bought c0 regular sodas and c1 diet sodas\n    regular = c0\n    diet = c1\n\n    #The total number of sodas Jerry bought can be calculated by adding the number of regular sodas and diet sodas\n    total_sodas = regular + diet\n\n    #Jerry's fridge can hold c2 sodas on each shelf\n    sodas_per_shelf = c2\n\n    #The number of shelves Jerry needs to fill up can be calculated by dividing the total number of sodas by the number of sodas per shelf and rounding up to the nearest integer\n    shelves_needed = math.ceil(total_sodas / sodas_per_shelf)\n\n    return shelves_needed", "mapping": {"c0": 41.0, "c1": 22.0, "c2": 9.0}}
{"question": " Paige and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Paige recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Paige recycled c1 pounds of paper\n    paige = c1\n\n    #Paige's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Paige's and her friends' recycled paper\n    total_paper = paige + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1\n\n    #The total number of points earned can be calculated by dividing the total amount of paper recycled by the amount of paper needed to earn one point\n    total_points = total_paper // c0\n\n    return total_points", "mapping": {"c0": 4.0, "c1": 14.0, "c2": 2.0}}
{"question": " For homework Nancy had c0 math problems and c1 spelling problems. If she can finish c2 problems in an hour how long will it take her to finish all the problems? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Nancy has c0 math problems and c1 spelling problems\n    math_problems = c0\n    spelling_problems = c1\n\n    #Nancy can finish c2 problems in an hour\n    problems_per_hour = c2\n\n    #The total number of problems Nancy needs to finish is the sum of math and spelling problems\n    total_problems = math_problems + spelling_problems\n\n    #The time it will take Nancy to finish all the problems can be calculated by dividing the total number of problems by the number of problems she can finish in an hour\n    time_in_hours = total_problems / problems_per_hour\n\n    return time_in_hours", "mapping": {"c0": 17.0, "c1": 15.0, "c2": 8.0}}
{"question": " Will was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Will has c0 cards on each page\n    cards_per_page = c0\n\n    #Will has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards Will has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages Will needs to use can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 10.0}}
{"question": " The schools debate team had c0 boys and c1 girls on it. If they were split into groups of c2 how many groups could they make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The debate team had c0 boys and c1 girls\n    boys = c0\n    girls = c1\n\n    #They were split into groups of c2\n    group_size = c2\n\n    #The total number of team members\n    total_members = boys + girls\n\n    #The number of groups they can make can be calculated by dividing the total number of team members by the group size\n    num_groups = total_members // group_size\n\n    return num_groups", "mapping": {"c0": 11.0, "c1": 45.0, "c2": 7.0}}
{"question": " A group of c0 friends went into a restaurant. The chef already had c1 chicken wings cooked but cooked c2 more for the group. If they each got the same amount how many would each person get? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The chef already had c1 chicken wings cooked\n    cooked_before = c1\n\n    #The chef cooked c2 more chicken wings for the group\n    cooked_now = cooked_before + c2\n\n    #The group has c0 friends\n    friends = c0\n\n    #Each person would get an equal amount of chicken wings, so we can divide the total number of chicken wings by the number of friends\n    per_person = cooked_now / friends\n\n    return per_person", "mapping": {"c0": 4.0, "c1": 9.0, "c2": 7.0}}
{"question": " A vase can hold c0 flowers. If you had c1 carnations and c2 roses, how many vases would you need to hold the flowers? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of flowers\n    total_flowers = c1 + c2\n\n    #calculate the number of vases needed by dividing the total number of flowers by the capacity of each vase\n    vases_needed = total_flowers // c0\n\n    #if there are any remaining flowers, add one more vase\n    if total_flowers % c0 != 0:\n        vases_needed += 1\n\n    return vases_needed", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 47.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 9.0, "c1": 12.0, "c2": 3.0}}
{"question": " Roger was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Roger can carry c0 trays at a time\n    capacity = c0\n\n    #Roger needs to pick up c1 trays from one table and c2 trays from another\n    table1 = c1\n    table2 = c2\n\n    #The total number of trays Roger needs to pick up is the sum of trays from both tables\n    total_trays = table1 + table2\n\n    #The number of trips Roger needs to make can be calculated by dividing the total number of trays by his carrying capacity and rounding up to the nearest integer\n    trips = math.ceil(total_trays / capacity)\n\n    return trips", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 2.0}}
{"question": " A toy store had c0 giant stuffed bears in stock when they got another shipment with c1 bears in it. The put the bears onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The toy store originally had c0 giant stuffed bears in stock\n    bears_before = c0\n\n    #They got another shipment with c1 bears in it\n    bears_shipment = c1\n\n    #The total number of bears they have now is the sum of the original bears and the bears in the shipment\n    bears_total = bears_before + bears_shipment\n\n    #They put the bears onto shelves with c2 on each shelf\n    bears_per_shelf = c2\n\n    #The number of shelves they used can be calculated by dividing the total number of bears by the number of bears on each shelf\n    shelves_used = bears_total // bears_per_shelf\n\n    return shelves_used", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 7.0}}
{"question": " John made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #John made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #He only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The number of weeks the money will last can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 3.0}}
{"question": " Wendy's old washing machine could only wash c0 pieces of clothing at a time. If she had to wash c1 shirts and c2 sweaters how many loads would she have to do? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Wendy's old washing machine can only wash c0 pieces of clothing at a time\n    capacity = c0\n\n    #Wendy has c1 shirts and c2 sweaters to wash\n    shirts = c1\n    sweaters = c2\n\n    #The total number of clothes Wendy has to wash is the sum of shirts and sweaters\n    total_clothes = shirts + sweaters\n\n    #The number of loads Wendy has to do can be calculated by dividing the total number of clothes by the capacity of the washing machine\n    loads = total_clothes // capacity\n\n    #If there are any remaining clothes that cannot fit in a full load, Wendy will have to do an additional load\n    if total_clothes % capacity != 0:\n        loads += 1\n\n    return loads", "mapping": {"c0": 8.0, "c1": 39.0, "c2": 33.0}}
{"question": " Debby's class is going on a field trip to the zoo. If each van can hold c0 people and there are c1 students and c2 adults going, how many vans will they need? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of people going on the field trip\n    total_people = c1 + c2\n\n    #calculate the number of vans needed by dividing the total number of people by the capacity of each van and rounding up to the nearest integer\n    vans_needed = math.ceil(total_people/c0)\n\n    return vans_needed", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 6.0}}
{"question": " Isabel uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Isabel uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    num_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // num_albums\n\n    return pics_per_album", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": " While playing at the arcade, Frank won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he was trying to buy candy that cost c2 tickets a piece, how many could he buy? ", "answer": [7.0], "response": "def buy_candy(c0, c1, c2):\n    #Frank won c0 tickets playing 'whack a mole'\n    whack_a_mole_tickets = c0\n\n    #Frank won c1 tickets playing 'skee ball'\n    skee_ball_tickets = c1\n\n    #Frank has c0 + c1 tickets in total\n    total_tickets = whack_a_mole_tickets + skee_ball_tickets\n\n    #Candy costs c2 tickets a piece\n    candy_cost = c2\n\n    #Frank can buy as many candies as he can with the total tickets he has\n    candies = total_tickets // candy_cost\n\n    return candies", "mapping": {"c0": 33.0, "c1": 9.0, "c2": 6.0}}
{"question": " Mike made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Mike made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #Mike only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The number of weeks the money will last can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 14.0, "c1": 26.0, "c2": 5.0}}
{"question": " Gwen and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Gwen recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Gwen recycled c1 pounds of paper\n    gwen = c1\n\n    #Gwen's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Gwen's and her friends' recycled paper\n    total_paper = gwen + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1/c0\n\n    #The total number of points earned can be calculated by multiplying the total amount of paper recycled by the points earned per pound\n    total_points = total_paper * points_per_pound\n\n    return total_points", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 13.0}}
{"question": " Robin uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Robin uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    num_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // num_albums\n\n    return pics_per_album", "mapping": {"c0": 31.0, "c1": 5.0, "c2": 9.0}}
{"question": " For Halloween Megan received c0 pieces of candy from neighbors and c1 pieces from her older sister. If she only ate c2 pieces a day, how long would the candy last her? ", "answer": [2.0], "response": "def candy_duration(c0, c1, c2):\n    # Megan received c0 pieces of candy from neighbors\n    from_neighbors = c0\n\n    # Megan received c1 pieces of candy from her older sister\n    from_sister = c1\n\n    # Megan has total candy before eating any\n    total_candy = from_neighbors + from_sister\n\n    # Megan eats c2 pieces of candy a day\n    eaten_per_day = c2\n\n    # Calculate how many days the candy will last\n    days = total_candy // eaten_per_day\n\n    return days", "mapping": {"c0": 11.0, "c1": 5.0, "c2": 8.0}}
{"question": " Maria was making baggies of cookies with c0 cookies in each bag. If she had c1 chocolate chip cookies and c2 oatmeal cookies, how many baggies could she make? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Maria has c1 chocolate chip cookies and c2 oatmeal cookies\n    total_cookies = c1 + c2\n\n    #The number of baggies Maria can make can be calculated by dividing the total number of cookies by the number of cookies in each bag\n    baggies = total_cookies // c0\n\n    return baggies", "mapping": {"c0": 5.0, "c1": 33.0, "c2": 2.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 5.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 5.0, "c1": 35.0, "c2": 8.0}}
{"question": " Nancy's class is going on a field trip to the zoo. If each van can hold c0 people and there are c1 students and c2 adults going, how many vans will they need? ", "answer": [3.0], "response": "def vans_needed(c0, c1, c2):\n    #calculate the total number of people going on the field trip\n    total_people = c1 + c2\n    \n    #calculate the number of vans needed by dividing the total number of people by the capacity of each van\n    vans = total_people // c0\n    \n    #if there are any remaining people, add an extra van\n    if total_people % c0 != 0:\n        vans += 1\n    \n    return vans", "mapping": {"c0": 5.0, "c1": 12.0, "c2": 3.0}}
{"question": " Dave was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of trays Dave needs to pick up\n    total_trays = c1 + c2\n\n    #calculate the number of trips Dave needs to make by dividing the total number of trays by the number of trays he can carry at a time\n    trips = total_trays // c0\n\n    #if there are any remaining trays that Dave needs to pick up, add an extra trip\n    if total_trays % c0 != 0:\n        trips += 1\n\n    return trips", "mapping": {"c0": 9.0, "c1": 17.0, "c2": 55.0}}
{"question": " For a birthday party George bought c0 regular sodas and c1 diet sodas. If his fridge would only hold c2 on each shelf, how many shelves would he fill up? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #George bought c0 regular sodas and c1 diet sodas\n    regular = c0\n    diet = c1\n\n    #The maximum number of sodas that can be stored on each shelf is c2\n    max_per_shelf = c2\n\n    #The total number of sodas George has is the sum of regular and diet sodas\n    total_sodas = regular + diet\n\n    #The number of shelves George needs to fill up can be calculated by dividing the total number of sodas by the maximum number of sodas that can be stored on each shelf\n    shelves_needed = total_sodas // max_per_shelf\n\n    #If there are any remaining sodas, George will need an additional shelf\n    if total_sodas % max_per_shelf != 0:\n        shelves_needed += 1\n\n    return shelves_needed", "mapping": {"c0": 10.0, "c1": 22.0, "c2": 4.0}}
{"question": " The schools debate team had c0 boys and c1 girls on it. If they were split into groups of c2 how many groups could they make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The debate team had c0 boys and c1 girls\n    boys = c0\n    girls = c1\n\n    #They were split into groups of c2\n    group_size = c2\n\n    #The total number of team members\n    total_members = boys + girls\n\n    #The number of groups they can make can be calculated by dividing the total number of team members by the group size\n    num_groups = total_members // group_size\n\n    return num_groups", "mapping": {"c0": 28.0, "c1": 4.0, "c2": 4.0}}
{"question": " Maria was making baggies of cookies with c0 cookies in each bag. If she had c1 chocolate chip cookies and c2 oatmeal cookies, how many baggies could she make? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Maria has c1 chocolate chip cookies and c2 oatmeal cookies\n    total_cookies = c1 + c2\n\n    #The number of baggies Maria can make can be calculated by dividing the total number of cookies by the number of cookies in each bag\n    baggies = total_cookies // c0\n\n    return baggies", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 19.0}}
{"question": " For Halloween Sarah received c0 pieces of candy from neighbors and c1 pieces from her older sister. If she only ate c2 pieces a day, how long would the candy last her? ", "answer": [9.0], "response": "def candy_duration(c0, c1, c2):\n    #total number of candies Sarah has\n    total_candies = c0 + c1\n\n    #number of candies Sarah eats per day\n    candies_per_day = c2\n\n    #number of days the candies will last\n    days = total_candies // candies_per_day\n\n    return days", "mapping": {"c0": 66.0, "c1": 15.0, "c2": 9.0}}
{"question": " Henry was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Henry can carry c0 trays at a time\n    capacity = c0\n\n    #He needs to pick up c1 trays from one table and c2 trays from another\n    table1 = c1\n    table2 = c2\n\n    #The total number of trays he needs to pick up is the sum of trays from both tables\n    total_trays = table1 + table2\n\n    #The number of trips he needs to make can be calculated by dividing the total number of trays by his carrying capacity and rounding up to the nearest integer\n    trips = math.ceil(total_trays / capacity)\n\n    return trips", "mapping": {"c0": 9.0, "c1": 29.0, "c2": 52.0}}
{"question": " Tiffany uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // albums\n\n    return pics_per_album", "mapping": {"c0": 7.0, "c1": 13.0, "c2": 5.0}}
{"question": " A toy store had c0 giant stuffed bears in stock when they got another shipment with c1 bears in it. The put the bears onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The toy store originally had c0 giant stuffed bears in stock\n    bears_before = c0\n\n    #They got another shipment with c1 bears in it\n    shipment = c1\n\n    #The total number of bears they have now is the sum of the original bears and the shipment\n    bears_now = bears_before + shipment\n\n    #They put the bears onto shelves with c2 on each shelf\n    bears_per_shelf = c2\n\n    #The number of shelves they used can be calculated by dividing the total number of bears by the number of bears on each shelf\n    shelves_used = bears_now // bears_per_shelf\n\n    return shelves_used", "mapping": {"c0": 5.0, "c1": 7.0, "c2": 6.0}}
{"question": " Paul made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Paul made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #He only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The money will last him for the number of weeks that can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 68.0, "c1": 13.0, "c2": 9.0}}
{"question": " While playing at the arcade, Edward won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he was trying to buy candy that cost c2 tickets a piece, how many could he buy? ", "answer": [2.0], "response": "def buy_candy(c0, c1, c2):\n    #Edward won c0 tickets playing 'whack a mole'\n    whack_a_mole_tickets = c0\n\n    #Edward won c1 tickets playing 'skee ball'\n    skee_ball_tickets = c1\n\n    #Edward has c0 + c1 tickets in total\n    total_tickets = whack_a_mole_tickets + skee_ball_tickets\n\n    #Each candy costs c2 tickets\n    candy_cost = c2\n\n    #Edward can buy as many candies as he can with his total tickets\n    candies = total_tickets // candy_cost\n\n    return candies", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 4.0}}
{"question": " Megan's class is going on a field trip to the zoo. If each van can hold c0 people and there are c1 students and c2 adults going, how many vans will they need? ", "answer": [6.0], "response": "def vans_needed(c0, c1, c2):\n    #calculate the total number of people going on the field trip\n    total_people = c1 + c2\n    \n    #calculate the number of vans needed by dividing the total number of people by the capacity of each van\n    vans = total_people // c0\n    \n    #if there are any remaining people, add an extra van\n    if total_people % c0 != 0:\n        vans += 1\n    \n    return vans", "mapping": {"c0": 5.0, "c1": 25.0, "c2": 5.0}}
{"question": " Luke was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Luke has c0 cards on each page\n    cards_per_page = c0\n\n    #Luke has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards Luke has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages Luke needs to use can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 9.0}}
{"question": " A group of c0 friends went into a restaurant. The chef already had c1 chicken wings cooked but cooked c2 more for the group. If they each got the same amount how many would each person get? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The chef already had c1 chicken wings cooked\n    cooked_before = c1\n\n    #The chef cooked c2 more chicken wings for the group\n    cooked_now = cooked_before + c2\n\n    #The group has c0 friends\n    friends = c0\n\n    #Each person would get an equal amount of chicken wings, so we can divide the total number of chicken wings by the number of friends\n    per_person = cooked_now / friends\n\n    return per_person", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 3.0}}
{"question": " Olivia uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Olivia uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // albums\n\n    return pics_per_album", "mapping": {"c0": 5.0, "c1": 35.0, "c2": 8.0}}
{"question": " A toy store had c0 giant stuffed bears in stock when they got another shipment with c1 bears in it. The put the bears onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The toy store originally had c0 giant stuffed bears in stock\n    bears_before = c0\n\n    #They got another shipment with c1 bears in it\n    shipment = c1\n\n    #The total number of bears they have now is the sum of the original bears and the shipment\n    bears_now = bears_before + shipment\n\n    #They put the bears onto shelves with c2 on each shelf\n    bears_per_shelf = c2\n\n    #The number of shelves they used can be calculated by dividing the total number of bears by the number of bears on each shelf\n    shelves_used = bears_now // bears_per_shelf\n\n    return shelves_used", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 6.0}}
{"question": " Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jerry can carry c0 trays at a time\n    carry_capacity = c0\n\n    #Jerry needs to pick up c1 trays from one table and c2 trays from another\n    table1_trays = c1\n    table2_trays = c2\n\n    #The total number of trays Jerry needs to pick up is the sum of trays from both tables\n    total_trays = table1_trays + table2_trays\n\n    #The number of trips Jerry needs to make can be calculated by dividing the total number of trays by his carry capacity and rounding up to the nearest integer\n    trips = math.ceil(total_trays / carry_capacity)\n\n    return trips", "mapping": {"c0": 8.0, "c1": 9.0, "c2": 7.0}}
{"question": " A vase can hold c0 flowers. If you had c1 carnations and c2 roses, how many vases would you need to hold the flowers? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of flowers\n    total_flowers = c1 + c2\n\n    #calculate the number of vases needed by dividing the total number of flowers by the capacity of each vase\n    vases_needed = total_flowers // c0\n\n    #if there are any remaining flowers, add one more vase\n    if total_flowers % c0 != 0:\n        vases_needed += 1\n\n    return vases_needed", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 19.0}}
{"question": " Haley and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Haley recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Haley recycled c1 pounds of paper\n    haley = c1\n\n    #Haley's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Haley's and her friends' recycled paper\n    total_paper = haley + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1\n\n    #The total number of points they earned can be calculated by dividing the total amount of paper recycled by the number of pounds needed to earn one point\n    total_points = total_paper // c0\n\n    return total_points", "mapping": {"c0": 3.0, "c1": 11.0, "c2": 16.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 17.0, "c1": 55.0, "c2": 8.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 12.0, "c1": 44.0, "c2": 8.0}}
{"question": " Frank had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [5.0], "response": "def toys_can_buy(c0, c1, c2):\n    #Frank had c0 dollars saved up\n    saved_up = c0\n\n    #Frank received c1 dollars for his allowance\n    allowance = c1\n\n    #Frank now has c0 plus c1 dollars\n    total_money = saved_up + allowance\n\n    #The number of c2 dollar toys Frank can buy can be calculated by dividing the total money he has by the cost of each toy\n    toys = total_money // c2\n\n    return toys", "mapping": {"c0": 3.0, "c1": 37.0, "c2": 8.0}}
{"question": " Luke was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Luke has c0 cards on each page\n    cards_per_page = c0\n\n    #Luke has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards Luke has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages Luke needs to use can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 9.0}}
{"question": " A group of c0 friends went into a restaurant. The chef already had c1 chicken wings cooked but cooked c2 more for the group. If they each got the same amount how many would each person get? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The chef already had c1 chicken wings cooked\n    cooked_before = c1\n\n    #The chef cooked c2 more chicken wings for the group\n    cooked_now = cooked_before + c2\n\n    #The group has c0 friends\n    friends = c0\n\n    #Each person would get an equal amount of chicken wings, which can be calculated by dividing the total number of chicken wings by the number of friends\n    per_person = cooked_now / friends\n\n    return per_person", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 3.0}}
{"question": " Olivia uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Olivia uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // albums\n\n    return pics_per_album", "mapping": {"c0": 5.0, "c1": 35.0, "c2": 8.0}}
{"question": " A toy store had c0 giant stuffed bears in stock when they got another shipment with c1 bears in it. The put the bears onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The toy store originally had c0 giant stuffed bears in stock\n    bears_before = c0\n\n    #They got another shipment with c1 bears in it\n    shipment = c1\n\n    #The total number of bears they have now can be calculated by adding the original number of bears and the number of bears in the shipment\n    bears_now = bears_before + shipment\n\n    #They put the bears onto shelves with c2 on each shelf\n    bears_per_shelf = c2\n\n    #The number of shelves they used can be calculated by dividing the total number of bears by the number of bears on each shelf and rounding up to the nearest integer\n    shelves_used = math.ceil(bears_now / bears_per_shelf)\n\n    return shelves_used", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 6.0}}
{"question": " Jerry was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jerry can carry c0 trays at a time\n    carry_capacity = c0\n\n    #Jerry needs to pick up c1 trays from one table and c2 trays from another\n    table1_trays = c1\n    table2_trays = c2\n\n    #The total number of trays Jerry needs to pick up is the sum of trays from both tables\n    total_trays = table1_trays + table2_trays\n\n    #The number of trips Jerry needs to make can be calculated by dividing the total number of trays by his carry capacity and rounding up to the nearest integer\n    trips = math.ceil(total_trays / carry_capacity)\n\n    return trips", "mapping": {"c0": 8.0, "c1": 9.0, "c2": 7.0}}
{"question": " A vase can hold c0 flowers. If you had c1 carnations and c2 roses, how many vases would you need to hold the flowers? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of flowers\n    total_flowers = c1 + c2\n\n    #calculate the number of vases needed by dividing the total number of flowers by the capacity of each vase\n    vases_needed = total_flowers // c0\n\n    #if there are any remaining flowers, add one more vase\n    if total_flowers % c0 != 0:\n        vases_needed += 1\n\n    return vases_needed", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 19.0}}
{"question": " Haley and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Haley recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [9.0], "response": "def calculate_points(c0, c1, c2):\n    # Haley recycled c1 pounds and her friends recycled c2 pounds\n    total_pounds = c1 + c2\n\n    # For every c0 pounds they recycled they earned one point\n    points = total_pounds // c0\n\n    return points", "mapping": {"c0": 3.0, "c1": 11.0, "c2": 16.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 17.0, "c1": 55.0, "c2": 8.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 12.0, "c1": 44.0, "c2": 8.0}}
{"question": " Frank had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [5.0], "response": "def toys_can_buy(c0, c1, c2):\n    #Frank had c0 dollars saved up\n    saved_up = c0\n\n    #Frank received c1 dollars for his allowance\n    allowance = c1\n\n    #Frank now has c0 plus c1 dollars\n    total_money = saved_up + allowance\n\n    #The number of c2 dollar toys Frank can buy can be calculated by dividing the total money he has by the cost of each toy\n    toys = total_money // c2\n\n    return toys", "mapping": {"c0": 3.0, "c1": 37.0, "c2": 8.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 8.0, "c1": 19.0, "c2": 3.0}}
{"question": " For homework Faye had c0 math problems and c1 spelling problems. If she can finish c2 problems in an hour how long will it take her to finish all the problems? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c0 math problems and c1 spelling problems\n    math_problems = c0\n    spelling_problems = c1\n\n    #Faye can finish c2 problems in an hour\n    problems_per_hour = c2\n\n    #The total number of problems Faye needs to finish is the sum of math and spelling problems\n    total_problems = math_problems + spelling_problems\n\n    #The time it will take Faye to finish all the problems can be calculated by dividing the total number of problems by the number of problems she can finish in an hour\n    time_in_hours = total_problems / problems_per_hour\n\n    return time_in_hours", "mapping": {"c0": 13.0, "c1": 2.0, "c2": 3.0}}
{"question": " Sam had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [5.0], "response": "def toys_can_buy(c0, c1, c2):\n    #Sam had c0 dollars saved up\n    saved_up = c0\n\n    #Sam received c1 dollars for his allowance\n    allowance = c1\n\n    #Sam now has c0 plus c1 dollars in total\n    total_money = saved_up + allowance\n\n    #Sam can buy c2 dollar toys\n    toy_price = c2\n\n    #The number of toys Sam can buy can be calculated by dividing the total money he has by the price of each toy\n    toys_can_buy = total_money // toy_price\n\n    return toys_can_buy", "mapping": {"c0": 8.0, "c1": 7.0, "c2": 3.0}}
{"question": " Bianca and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Bianca recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [9.0], "response": "def calculate_points(c0, c1, c2):\n    #Bianca recycled c1 pounds of paper\n    bianca = c1\n\n    #Bianca's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Bianca's and her friends' recycled paper\n    total_paper = bianca + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1\n\n    #The total points earned can be calculated by dividing the total amount of paper recycled by the amount of paper needed to earn one point\n    total_points = total_paper // c0\n\n    return total_points", "mapping": {"c0": 3.0, "c1": 24.0, "c2": 3.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 31.0, "c1": 4.0, "c2": 7.0}}
{"question": " Oliver was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Oliver has c0 cards on each page\n    cards_per_page = c0\n\n    #Oliver has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards Oliver has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages Oliver needs can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 10.0}}
{"question": " Paul made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Paul made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #He only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The money will last him for the number of weeks that can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 3.0}}
{"question": " Robin was making baggies of cookies with c0 cookies in each bag. If she had c1 chocolate chip cookies and c2 oatmeal cookies, how many baggies could she make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of cookies\n    total_cookies = c1 + c2\n\n    #calculate the number of baggies Robin can make\n    baggies = total_cookies // c0\n\n    return baggies", "mapping": {"c0": 6.0, "c1": 23.0, "c2": 25.0}}
{"question": " The schools debate team had c0 boys and c1 girls on it. If they were split into groups of c2 how many groups could they make? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The debate team had c0 boys and c1 girls\n    boys = c0\n    girls = c1\n\n    #They were split into groups of c2\n    group_size = c2\n\n    #The total number of team members\n    total_members = boys + girls\n\n    #The number of groups they can make can be calculated by dividing the total number of team members by the group size\n    num_groups = total_members // group_size\n\n    return num_groups", "mapping": {"c0": 5.0, "c1": 40.0, "c2": 9.0}}
{"question": " At a company picnic c0 managers and c1 employees decided to start a game of volleyball. If they split into c2 teams how many people would be on each team? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #total number of people at the picnic\n    total_people = c0 + c1\n\n    #number of people on each team can be calculated by dividing the total number of people by the number of teams\n    people_per_team = total_people // c2\n\n    return people_per_team", "mapping": {"c0": 23.0, "c1": 7.0, "c2": 6.0}}
{"question": " For a birthday party Cody bought c0 regular sodas and c1 diet sodas. If his fridge would only hold c2 on each shelf, how many shelves would he fill up? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Cody bought c0 regular sodas and c1 diet sodas\n    regular = c0\n    diet = c1\n\n    #The maximum number of sodas that can be stored on each shelf is c2\n    max_per_shelf = c2\n\n    #The total number of sodas Cody has can be calculated by adding the number of regular sodas and diet sodas\n    total_sodas = regular + diet\n\n    #The number of shelves Cody needs to fill up can be calculated by dividing the total number of sodas by the maximum number of sodas that can be stored on each shelf\n    shelves_needed = total_sodas // max_per_shelf\n\n    #If there are any remaining sodas, Cody will need an additional shelf\n    if total_sodas % max_per_shelf != 0:\n        shelves_needed += 1\n\n    return shelves_needed", "mapping": {"c0": 4.0, "c1": 44.0, "c2": 6.0}}
{"question": " Robin's class is going on a field trip to the zoo. If each van can hold c0 people and there are c1 students and c2 adults going, how many vans will they need? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of people going on the field trip\n    total_people = c1 + c2\n\n    #calculate the number of vans needed by dividing the total number of people by the capacity of each van and rounding up to the nearest integer\n    vans_needed = math.ceil(total_people/c0)\n\n    return vans_needed", "mapping": {"c0": 8.0, "c1": 22.0, "c2": 2.0}}
{"question": " Ned was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Ned can carry c0 trays at a time\n    capacity = c0\n\n    #Ned needs to pick up c1 trays from one table and c2 trays from another\n    table1 = c1\n    table2 = c2\n\n    #The total number of trips Ned needs to make can be calculated by dividing the total number of trays by his carrying capacity and rounding up to the nearest integer\n    total_trips = math.ceil((table1 + table2) / capacity)\n\n    return total_trips", "mapping": {"c0": 5.0, "c1": 5.0, "c2": 5.0}}
{"question": " There school's baseball team had c0 new players and c1 returning players. If the coach put them into groups with c2 players in each group, how many groups would there be? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The school's baseball team had c0 new players and c1 returning players\n    total_players = c0 + c1\n\n    #The coach put them into groups with c2 players in each group\n    group_size = c2\n\n    #The number of groups can be calculated by dividing the total number of players by the group size\n    num_groups = total_players // group_size\n\n    return num_groups", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 4.0}}
{"question": " For homework Amy had c0 math problems and c1 spelling problems. If she can finish c2 problems in an hour how long will it take her to finish all the problems? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Amy has c0 math problems and c1 spelling problems\n    math_problems = c0\n    spelling_problems = c1\n\n    #Amy can finish c2 problems in an hour\n    problems_per_hour = c2\n\n    #The total number of problems Amy needs to finish is the sum of math and spelling problems\n    total_problems = math_problems + spelling_problems\n\n    #The time it will take Amy to finish all the problems can be calculated by dividing the total number of problems by the number of problems she can finish in an hour\n    time_to_finish = total_problems / problems_per_hour\n\n    return time_to_finish", "mapping": {"c0": 18.0, "c1": 6.0, "c2": 4.0}}
{"question": " Maria was making baggies of cookies with c0 cookies in each bag. If she had c1 chocolate chip cookies and c2 oatmeal cookies, how many baggies could she make? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Maria has c1 chocolate chip cookies and c2 oatmeal cookies\n    total_cookies = c1 + c2\n\n    #The number of baggies Maria can make can be calculated by dividing the total number of cookies by the number of cookies in each bag\n    baggies = total_cookies // c0\n\n    return baggies", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 16.0}}
{"question": " Sarah's old washing machine could only wash c0 pieces of clothing at a time. If she had to wash c1 shirts and c2 sweaters how many loads would she have to do? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Sarah's old washing machine can only wash c0 pieces of clothing at a time\n    capacity = c0\n\n    #Sarah has c1 shirts and c2 sweaters to wash\n    shirts = c1\n    sweaters = c2\n\n    #The total number of clothes Sarah has to wash is the sum of shirts and sweaters\n    total_clothes = shirts + sweaters\n\n    #The number of loads Sarah has to do can be calculated by dividing the total number of clothes by the capacity of her washing machine\n    loads = total_clothes // capacity\n\n    #If there are any remaining clothes that cannot fit in a full load, Sarah will have to do an additional load\n    if total_clothes % capacity != 0:\n        loads += 1\n\n    return loads", "mapping": {"c0": 5.0, "c1": 43.0, "c2": 2.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 3.0, "c1": 3.0, "c2": 3.0}}
{"question": " While playing at the arcade, Luke won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he was trying to buy candy that cost c2 tickets a piece, how many could he buy? ", "answer": [5.0], "response": "def buy_candy(c0, c1, c2):\n    #Luke won c0 tickets playing 'whack a mole'\n    whack_a_mole_tickets = c0\n\n    #Luke won c1 tickets playing 'skee ball'\n    skee_ball_tickets = c1\n\n    #Luke has c0 + c1 tickets in total\n    total_tickets = whack_a_mole_tickets + skee_ball_tickets\n\n    #Candy costs c2 tickets a piece\n    candy_cost = c2\n\n    #Luke can buy as many candies as he can with his total tickets\n    candies = total_tickets // candy_cost\n\n    return candies", "mapping": {"c0": 2.0, "c1": 13.0, "c2": 3.0}}
{"question": " A group of c0 friends went into a restaurant. The chef already had c1 chicken wings cooked but cooked c2 more for the group. If they each got the same amount how many would each person get? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #The chef already had c1 chicken wings cooked\n    cooked_before = c1\n\n    #The chef cooked c2 more chicken wings for the group\n    cooked_now = cooked_before + c2\n\n    #The group has c0 friends\n    friends = c0\n\n    #Each person would get an equal amount of chicken wings, so we can divide the total number of chicken wings by the number of friends\n    per_person = cooked_now / friends\n\n    return per_person", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 10.0}}
{"question": " Nancy's old washing machine could only wash c0 pieces of clothing at a time. If she had to wash c1 shirts and c2 sweaters how many loads would she have to do? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Nancy's washing machine can only wash c0 pieces of clothing at a time\n    capacity = c0\n\n    #Nancy has c1 shirts and c2 sweaters to wash\n    shirts = c1\n    sweaters = c2\n\n    #The total number of clothes Nancy has to wash is the sum of shirts and sweaters\n    total_clothes = shirts + sweaters\n\n    #The number of loads Nancy has to do can be calculated by dividing the total number of clothes by the capacity of her washing machine\n    loads = total_clothes // capacity\n\n    #If there are any remaining clothes that cannot fit in a full load, Nancy will have to do an additional load\n    if total_clothes % capacity != 0:\n        loads += 1\n\n    return loads", "mapping": {"c0": 9.0, "c1": 19.0, "c2": 8.0}}
{"question": " Paul had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [2.0], "response": "def toys_to_buy(c0, c1, c2):\n    #Paul had c0 dollars saved up\n    saved_up = c0\n\n    #Paul received c1 dollars for his allowance\n    allowance = c1\n\n    #Paul now has c0 plus c1 dollars\n    total_money = saved_up + allowance\n\n    #The number of c2 dollar toys Paul can buy can be calculated by dividing the total money he has by the cost of each toy\n    toys = total_money // c2\n\n    return toys", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 5.0}}
{"question": " Jerry made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Jerry made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #Jerry only spent c2 dollar a week\n    weekly_spending = c2\n\n    #The number of weeks the money will last can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 14.0, "c1": 31.0, "c2": 5.0}}
{"question": " While playing at the arcade, Ned won c0 tickets playing 'whack a mole' and c1 tickets playing 'skee ball'. If he was trying to buy candy that cost c2 tickets a piece, how many could he buy? ", "answer": [5.0], "response": "def buy_candy(c0, c1, c2):\n    #Ned won c0 tickets playing 'whack a mole'\n    whack_a_mole = c0\n\n    #Ned won c1 tickets playing 'skee ball'\n    skee_ball = c1\n\n    #Ned has c0 plus c1 tickets in total\n    total_tickets = whack_a_mole + skee_ball\n\n    #The cost of one candy is c2 tickets\n    candy_cost = c2\n\n    #The number of candies Ned can buy can be calculated by dividing the total number of tickets by the cost of one candy\n    candies = total_tickets // candy_cost\n\n    return candies", "mapping": {"c0": 26.0, "c1": 19.0, "c2": 9.0}}
{"question": " Luke was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Luke can carry c0 trays at a time\n    carry_capacity = c0\n\n    #Luke needs to pick up c1 trays from one table and c2 trays from another\n    table1_trays = c1\n    table2_trays = c2\n\n    #The total number of trays Luke needs to carry can be calculated by adding the number of trays from both tables\n    total_trays = table1_trays + table2_trays\n\n    #The number of trips Luke needs to make can be calculated by dividing the total number of trays by his carry capacity and rounding up to the nearest integer\n    trips = math.ceil(total_trays / carry_capacity)\n\n    return trips", "mapping": {"c0": 4.0, "c1": 20.0, "c2": 16.0}}
{"question": " Vanessa and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Vanessa recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Vanessa recycled c1 pounds of paper\n    vanessa = c1\n\n    #Vanessa's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Vanessa's and her friends' recycled paper\n    total_paper = vanessa + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1\n\n    #The total number of points earned can be calculated by dividing the total amount of paper recycled by the amount of paper needed to earn one point\n    total_points = total_paper // c0\n\n    return total_points", "mapping": {"c0": 9.0, "c1": 20.0, "c2": 16.0}}
{"question": " A pet shelter had c0 puppies when another c1 were brought in. If c2 puppies a day are adopted, how long would it take for all of them to be adopted? ", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #The pet shelter originally had c0 puppies\n    original_puppies = c0\n\n    #c1 puppies were brought in\n    new_puppies = c1\n\n    #The total number of puppies in the shelter now is the sum of the original puppies and the new puppies\n    total_puppies = original_puppies + new_puppies\n\n    #c2 puppies are adopted each day\n    adopted_per_day = c2\n\n    #The number of days it will take to adopt all the puppies can be calculated by dividing the total number of puppies by the number of puppies adopted per day\n    days_to_adopt_all = total_puppies / adopted_per_day\n\n    return days_to_adopt_all", "mapping": {"c0": 2.0, "c1": 34.0, "c2": 4.0}}
{"question": " At a company picnic c0 managers and c1 employees decided to start a game of volleyball. If they split into c2 teams how many people would be on each team? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #total number of people at the picnic\n    total_people = c0 + c1\n\n    #number of people on each team can be calculated by dividing the total number of people by the number of teams\n    people_per_team = total_people // c2\n\n    return people_per_team", "mapping": {"c0": 9.0, "c1": 15.0, "c2": 8.0}}
{"question": " John was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #John has c0 cards on each page\n    cards_per_page = c0\n\n    #John has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards John has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages John needs to use can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 16.0}}
{"question": " Wendy uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Wendy uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // albums\n\n    return pics_per_album", "mapping": {"c0": 22.0, "c1": 2.0, "c2": 4.0}}
{"question": " A toy store had c0 giant stuffed bears in stock when they got another shipment with c1 bears in it. The put the bears onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The toy store originally had c0 giant stuffed bears in stock\n    bears_before = c0\n\n    #They got another shipment with c1 bears in it\n    shipment = c1\n\n    #The total number of bears they have now is the sum of the original bears and the shipment\n    bears_now = bears_before + shipment\n\n    #They put the bears onto shelves with c2 on each shelf\n    bears_per_shelf = c2\n\n    #The number of shelves they used can be calculated by dividing the total number of bears by the number of bears on each shelf\n    shelves_used = bears_now // bears_per_shelf\n\n    return shelves_used", "mapping": {"c0": 17.0, "c1": 10.0, "c2": 9.0}}
{"question": " Zoe and her friends were recycling paper for their class. For every c0 pounds they recycled they earned one point. If Zoe recycled c1 pounds and her friends recycled c2 pounds, how many points did they earn? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Zoe recycled c1 pounds of paper\n    zoe = c1\n\n    #Zoe's friends recycled c2 pounds of paper\n    friends = c2\n\n    #The total amount of paper recycled can be calculated by adding Zoe's and her friends' recycled paper\n    total_paper = zoe + friends\n\n    #For every c0 pounds of paper recycled, they earn one point\n    points_per_pound = 1\n\n    #The total number of points they earned can be calculated by dividing the total amount of paper recycled by the amount of paper needed to earn one point\n    total_points = total_paper // c0\n\n    return total_points", "mapping": {"c0": 8.0, "c1": 25.0, "c2": 23.0}}
{"question": " Billy was organizing his baseball cards in a binder with c0 on each page. If he had c1 new cards and c2 old cards to put in the binder, how many pages would he use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Billy has c0 cards on each page\n    cards_per_page = c0\n\n    #Billy has c1 new cards and c2 old cards to put in the binder\n    new_cards = c1\n    old_cards = c2\n\n    #The total number of cards Billy has to put in the binder\n    total_cards = new_cards + old_cards\n\n    #The number of pages Billy needs to use can be calculated by dividing the total number of cards by the number of cards per page and rounding up to the nearest integer\n    pages_needed = math.ceil(total_cards/cards_per_page)\n\n    return pages_needed", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 42.0}}
{"question": " For a birthday party Tom bought c0 regular sodas and c1 diet sodas. If his fridge would only hold c2 on each shelf, how many shelves would he fill up? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Tom bought c0 regular sodas and c1 diet sodas\n    regular = c0\n    diet = c1\n\n    #The fridge can hold c2 sodas on each shelf\n    capacity = c2\n\n    #The total number of sodas Tom has is the sum of regular and diet sodas\n    total = regular + diet\n\n    #The number of shelves Tom needs to fill up can be calculated by dividing the total number of sodas by the capacity of each shelf and rounding up to the nearest integer\n    shelves = math.ceil(total/capacity)\n\n    return shelves", "mapping": {"c0": 4.0, "c1": 52.0, "c2": 7.0}}
{"question": " Victor was helping the cafeteria workers pick up lunch trays, but he could only carry c0 trays at a time. If he had to pick up c1 trays from one table and c2 trays from another, how many trips will he make? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of trays that Victor needs to pick up\n    total_trays = c1 + c2\n\n    #calculate the number of trips Victor needs to make by dividing the total number of trays by the number of trays he can carry at a time\n    trips = total_trays // c0\n\n    #if there are any remaining trays that Victor needs to pick up, add an extra trip\n    if total_trays % c0 != 0:\n        trips += 1\n\n    return trips", "mapping": {"c0": 7.0, "c1": 23.0, "c2": 5.0}}
{"question": " Paul had saved up c0 dollars. If he received another c1 dollars for his allowance, how many c2 dollar toys could he buy? ", "answer": [3.0], "response": "def toys_can_buy(c0, c1, c2):\n    #Paul had c0 dollars saved up\n    saved_up = c0\n\n    #Paul received c1 dollars for his allowance\n    allowance = c1\n\n    #Paul now has c0 plus c1 dollars\n    total_money = saved_up + allowance\n\n    #The number of c2 dollar toys Paul can buy can be calculated by dividing the total money he has by the cost of each toy\n    toys = total_money // c2\n\n    return toys", "mapping": {"c0": 4.0, "c1": 11.0, "c2": 5.0}}
{"question": " Katie uploaded c0 pictures from her phone and c1 from her camera to facebook. If she sorted the pics into c2 different albums with the same amount of pics in each album, how many pictures were in each of the albums? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Katie uploaded c0 pictures from her phone and c1 from her camera\n    total_pics = c0 + c1\n\n    #She sorted the pics into c2 different albums with the same amount of pics in each album\n    num_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums\n    pics_per_album = total_pics // num_albums\n\n    return pics_per_album", "mapping": {"c0": 30.0, "c1": 51.0, "c2": 9.0}}
{"question": " Debby's class is going on a field trip to the zoo. If each van can hold c0 people and there are c1 students and c2 adults going, how many vans will they need? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of people going on the field trip\n    total_people = c1 + c2\n\n    #calculate the number of vans needed by dividing the total number of people by the capacity of each van and rounding up to the nearest integer\n    vans_needed = math.ceil(total_people/c0)\n\n    return vans_needed", "mapping": {"c0": 9.0, "c1": 40.0, "c2": 14.0}}
{"question": " For Halloween Emily received c0 pieces of candy from neighbors and c1 pieces from her older sister. If she only ate c2 pieces a day, how long would the candy last her? ", "answer": [2.0], "response": "def candy_duration(c0, c1, c2):\n    #Emily received c0 pieces of candy from neighbors\n    from_neighbors = c0\n\n    #Emily received c1 pieces of candy from her older sister\n    from_sister = c1\n\n    #Emily has c0 + c1 pieces of candy in total\n    total_candy = from_neighbors + from_sister\n\n    #Emily eats c2 pieces of candy a day\n    daily_consumption = c2\n\n    #The duration of the candy can be calculated by dividing the total number of candy by the daily consumption\n    duration = total_candy / daily_consumption\n\n    return duration", "mapping": {"c0": 5.0, "c1": 13.0, "c2": 9.0}}
{"question": " Frank made c0 dollars mowing lawns and c1 dollars weed eating. If he only spent c2 dollar a week, how long would the money last him? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Frank made c0 dollars mowing lawns and c1 dollars weed eating\n    total_income = c0 + c1\n\n    #Frank spent c2 dollar a week\n    weekly_spending = c2\n\n    #The number of weeks the money will last can be calculated by dividing the total income by the weekly spending\n    weeks = total_income // weekly_spending\n\n    return weeks", "mapping": {"c0": 5.0, "c1": 58.0, "c2": 7.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [36.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 14.0, "c1": 5.0, "c2": 4.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [45.0], "response": "def cook_time(c0, c1, c2):\n    #calculate the number of potatoes left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 16.0, "c1": 7.0, "c2": 5.0}}
{"question": " Ned bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Ned still have? ", "answer": [42.0], "response": "def Problem(c0, c1, c2):\n    #Ned bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Ned gave c1 boxes to his little brother\n    given = c1\n\n    #Ned has (c0 - c1) boxes left\n    left = boxes - given\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #Ned has (c0 - c1) * c2 pieces left\n    pieces_left = left * pieces_per_box\n\n    return pieces_left", "mapping": {"c0": 14.0, "c1": 7.0, "c2": 6.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #number of players remaining\n    friends_now = friends_before - players_quit\n\n    #each player left had c2 lives\n    lives_per_player = c2\n\n    #total number of lives remaining\n    total_lives = friends_now * lives_per_player\n\n    return total_lives", "mapping": {"c0": 11.0, "c1": 5.0, "c2": 5.0}}
{"question": " Henry earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #Henry earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #Henry had c1 lawns to mow\n    total_lawns = c1\n\n    #Henry forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns Henry actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money Henry actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 5.0, "c1": 12.0, "c2": 7.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 6.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 10.0, "c1": 8.0, "c2": 8.0}}
{"question": " In a video game, each enemy defeated gives you c0 points. If a level has c1 enemies total and you destroy all but c2 of them, how many points would you earn? ", "answer": [12.0], "response": "def calculate_points(c0, c1, c2):\n    #calculate the number of enemies defeated\n    defeated = c1 - c2\n    \n    #calculate the total points earned\n    points = defeated * c0\n    \n    return points", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 2.0}}
{"question": " Wendy earned c0 points for each bag of cans she recycled. If she had c1 bags, but didn't recycle c2 of them, how many points would she have earned? ", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #Wendy earns c0 points for each bag of cans she recycles\n    points_per_bag = c0\n\n    #Wendy had c1 bags of cans\n    total_bags = c1\n\n    #Wendy didn't recycle c2 bags of cans\n    unrecycled_bags = c2\n\n    #The number of bags Wendy actually recycled can be calculated by subtracting the number of unrecycled bags from the total number of bags\n    recycled_bags = total_bags - unrecycled_bags\n\n    #The total number of points Wendy earned can be calculated by multiplying the number of recycled bags by the points per bag\n    total_points = recycled_bags * points_per_bag\n\n    return total_points", "mapping": {"c0": 5.0, "c1": 11.0, "c2": 2.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Olivia sold all but c2 bars, how much money would she have made? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Olivia sold all but c2 bars\n    sold_bars = total_bars - c2\n\n    #The amount of money Olivia made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = sold_bars * cost_per_bar\n\n    return money_made", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 4.0}}
{"question": " Kaleb bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Kaleb still have? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Kaleb bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Kaleb gave c1 boxes to his little brother\n    gave = c1\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #The total number of pieces Kaleb had before giving any to his brother\n    total_before = boxes * pieces_per_box\n\n    #The number of pieces Kaleb has left after giving some to his brother\n    total_now = total_before - (gave * pieces_per_box)\n\n    return total_now", "mapping": {"c0": 14.0, "c1": 5.0, "c2": 6.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [15.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 3.0, "c1": 12.0, "c2": 7.0}}
{"question": " Jerry had c0 action figures, but needed c1 total for a complete collection. If each one costs $c2, how much money would he need to finish his collection? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Jerry originally had c0 action figures\n    jerry_original = c0\n\n    #Jerry needs c1 total action figures for a complete collection\n    jerry_complete = c1\n\n    #The number of action figures Jerry needs to buy can be calculated by subtracting the original number of action figures from the total number of action figures needed for a complete collection\n    need_to_buy = jerry_complete - jerry_original\n\n    #The total cost of the action figures Jerry needs to buy can be calculated by multiplying the number of action figures he needs to buy by the cost of each action figure\n    total_cost = need_to_buy * c2\n\n    return total_cost", "mapping": {"c0": 7.0, "c1": 16.0, "c2": 8.0}}
{"question": " In a video game, each enemy defeated gives you c0 points. If a level has c1 enemies total and you destroy all but c2 of them, how many points would you earn? ", "answer": [72.0], "response": "def calculate_points(c0, c1, c2):\n    #calculate the number of enemies defeated\n    defeated = c1 - c2\n    \n    #calculate the total points earned\n    points = defeated * c0\n    \n    return points", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 3.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #each player that quit had c2 lives\n    lives_per_player = c2\n\n    #total lives lost can be calculated by multiplying the number of players that quit by the number of lives they had\n    total_lives_lost = players_quit * lives_per_player\n\n    #total lives remaining can be calculated by multiplying the number of friends remaining by the number of lives they have\n    total_lives_remaining = (friends_before - players_quit) * lives_per_player\n\n    #total lives can be calculated by adding the remaining lives to the lost lives\n    total_lives = total_lives_remaining + total_lives_lost\n\n    return total_lives", "mapping": {"c0": 16.0, "c1": 7.0, "c2": 8.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [20.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 5.0}}
{"question": " Adam earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Adam earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #Adam had c1 lawns to mow\n    total_lawns = c1\n\n    #Adam forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns Adam actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money Adam actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 9.0, "c1": 12.0, "c2": 8.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [64.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 8.0}}
{"question": " Mike had c0 video games but c1 of them weren't working. If he wanted to sell the working games for $c2 each, how much money could he earn? ", "answer": [56.0], "response": "def Problem(c0, c1, c2):\n    #Mike originally had c0 video games\n    original_games = c0\n\n    #c1 of them weren't working\n    not_working = c1\n\n    #The number of working games Mike has now can be calculated by subtracting the number of not working games from the original number of games\n    working_games = original_games - not_working\n\n    #Mike can sell each working game for $c2\n    price_per_game = c2\n\n    #The total amount of money Mike can earn can be calculated by multiplying the number of working games by the price per game\n    total_earnings = working_games * price_per_game\n\n    return total_earnings", "mapping": {"c0": 16.0, "c1": 8.0, "c2": 7.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 12.0, "c1": 7.0, "c2": 5.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #number of players remaining\n    friends_now = friends_before - players_quit\n\n    #each player left had c2 lives\n    lives_per_player = c2\n\n    #total number of lives remaining\n    total_lives = friends_now * lives_per_player\n\n    return total_lives", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 5.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 15.0, "c1": 6.0, "c2": 3.0}}
{"question": " Ned had c0 video games but c1 of them weren't working. If he wanted to sell the working games for $c2 each, how much money could he earn? ", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #Ned originally had c0 video games\n    ned_original = c0\n\n    #c1 of them weren't working\n    not_working = c1\n\n    #The number of working video games Ned has now can be calculated by subtracting the number of not working video games from the original number of video games\n    working = ned_original - not_working\n\n    #Ned can sell each working video game for $c2\n    price = c2\n\n    #The total amount of money Ned can earn can be calculated by multiplying the number of working video games by the price of each game\n    total_earnings = working * price\n\n    return total_earnings", "mapping": {"c0": 15.0, "c1": 6.0, "c2": 7.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Zoe sold all but c2 bars, how much money would she have made? ", "answer": [42.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Zoe sold all but c2 bars\n    sold_bars = total_bars - c2\n\n    #The amount of money Zoe made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = sold_bars * cost_per_bar\n\n    return money_made", "mapping": {"c0": 6.0, "c1": 13.0, "c2": 6.0}}
{"question": " Will bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Will still have? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Will bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Will gave c1 boxes to his little brother\n    gave = c1\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #The total number of pieces Will had before giving any to his brother\n    total_before = boxes * pieces_per_box\n\n    #The number of pieces Will has left after giving some to his brother\n    total_now = total_before - (gave * pieces_per_box)\n\n    return total_now", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 4.0}}
{"question": " Mike invited c0 friends to a birthday party, but c1 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly c2, how many should he buy? ", "answer": [24.0], "response": "def cupcakes_needed(c0, c1, c2):\n    #calculate the number of friends who can come to the party\n    friends_attending = c0 - c1\n    \n    #calculate the total number of cupcakes needed\n    cupcakes_needed = friends_attending * c2\n    \n    return cupcakes_needed", "mapping": {"c0": 13.0, "c1": 7.0, "c2": 4.0}}
{"question": " In a video game, each enemy defeated gives you c0 points. If a level has c1 enemies total and you destroy all but c2 of them, how many points would you earn? ", "answer": [10.0], "response": "def calculate_points(c0, c1, c2):\n    #calculate the number of enemies defeated\n    defeated = c1 - c2\n    \n    #calculate the total points earned\n    points = defeated * c0\n    \n    return points", "mapping": {"c0": 5.0, "c1": 8.0, "c2": 6.0}}
{"question": " Roger earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Roger earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #Roger had c1 lawns to mow\n    total_lawns = c1\n\n    #Roger forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns Roger actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money Roger actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 9.0, "c1": 14.0, "c2": 8.0}}
{"question": " A magician was selling magic card decks for c0 dollars each. If he started with c1 decks and by the end of the day he had c2 left, how much money did he earn? ", "answer": [4.0], "response": "def calculate_earnings(c0, c1, c2):\n    #calculate the number of decks sold\n    decks_sold = c1 - c2\n    \n    #calculate the total earnings\n    earnings = decks_sold * c0\n    \n    return earnings", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 3.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [36.0], "response": "def cook_time(c0, c1, c2):\n    #calculate the number of potatoes left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 12.0, "c1": 6.0, "c2": 6.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [18.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 6.0}}
{"question": " At the fair Adam bought c0 tickets. After riding the ferris wheel he had c1 tickets left. If each ticket cost c2 dollars, how much money did Adam spend riding the ferris wheel? ", "answer": [81.0], "response": "def ferris_wheel_cost(c0, c1, c2):\n    # Adam had c0 tickets before riding the ferris wheel\n    tickets_before = c0\n    \n    # Adam had c1 tickets left after riding the ferris wheel\n    tickets_after = c1\n    \n    # Adam used (tickets_before - tickets_after) tickets to ride the ferris wheel\n    tickets_used = tickets_before - tickets_after\n    \n    # Each ticket cost c2 dollars\n    ticket_cost = c2\n    \n    # Adam spent tickets_used * ticket_cost dollars riding the ferris wheel\n    total_cost = tickets_used * ticket_cost\n    \n    return total_cost", "mapping": {"c0": 13.0, "c1": 4.0, "c2": 9.0}}
{"question": " Dave bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Dave still have? ", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #Dave bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Dave gave c1 boxes to his little brother\n    gave = c1\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #The total number of pieces Dave had before giving any to his brother\n    total_before = boxes * pieces_per_box\n\n    #The number of pieces Dave has left after giving some to his brother\n    total_now = total_before - (gave * pieces_per_box)\n\n    return total_now", "mapping": {"c0": 12.0, "c1": 5.0, "c2": 3.0}}
{"question": " John had c0 action figures, but needed c1 total for a complete collection. If each one costs $c2, how much money would he need to finish his collection? ", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #John originally had c0 action figures\n    john_original = c0\n\n    #John needs c1 total action figures for a complete collection\n    john_complete = c1\n\n    #The number of action figures John needs to buy can be calculated by subtracting the original number of action figures from the total number of action figures needed for a complete collection\n    need_to_buy = john_complete - john_original\n\n    #The total cost of the action figures John needs to buy can be calculated by multiplying the number of action figures he needs to buy by the cost of each action figure\n    total_cost = need_to_buy * c2\n\n    return total_cost", "mapping": {"c0": 5.0, "c1": 7.0, "c2": 5.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 9.0, "c1": 8.0, "c2": 5.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Emily sold all but c2 bars, how much money would she have made? ", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Emily sold all but c2 bars\n    sold_bars = total_bars - c2\n\n    #The amount of money Emily made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = sold_bars * cost_per_bar\n\n    return money_made", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 3.0}}
{"question": " At lunch a waiter had c0 customers and c1 of them didn't leave a tip. If he got $c2 each from the ones who did tip, how much money did he earn? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 customers\n    customers = c0\n\n    #c1 customers didn't leave a tip\n    no_tip = c1\n\n    #The number of customers who left a tip can be calculated by subtracting the number of customers who didn't leave a tip from the total number of customers\n    tip = customers - no_tip\n\n    #The amount of money the waiter earned can be calculated by multiplying the number of customers who left a tip by the amount of money each customer tipped\n    earnings = tip * c2\n\n    return earnings", "mapping": {"c0": 10.0, "c1": 5.0, "c2": 3.0}}
{"question": " A worksheet had c0 problems on it. If a teacher had c1 worksheets to grade and had already graded c2 of them, how many more problems does she have to grade? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #The worksheet had c0 problems on it\n    problems_per_worksheet = c0\n\n    #The teacher had c1 worksheets to grade\n    total_worksheets = c1\n\n    #The teacher had already graded c2 of the worksheets\n    graded_worksheets = c2\n\n    #The total number of problems the teacher has to grade can be calculated by multiplying the number of problems per worksheet by the number of worksheets, and then subtracting the number of worksheets already graded\n    problems_left = (problems_per_worksheet * total_worksheets) - (problems_per_worksheet * graded_worksheets)\n\n    return problems_left", "mapping": {"c0": 4.0, "c1": 9.0, "c2": 5.0}}
{"question": " Will invited c0 friends to a birthday party, but c1 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly c2, how many should he buy? ", "answer": [40.0], "response": "def cupcakes_needed(c0, c1, c2):\n    #number of friends who can come\n    friends_attending = c0 - c1\n\n    #number of cupcakes needed\n    cupcakes = friends_attending * c2\n\n    return cupcakes", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 8.0}}
{"question": " A magician was selling magic card decks for c0 dollars each. If he started with c1 decks and by the end of the day he had c2 left, how much money did he earn? ", "answer": [45.0], "response": "def calculate_earnings(c0, c1, c2):\n    #calculate the number of decks sold\n    decks_sold = c1 - c2\n    \n    #calculate the total earnings\n    earnings = decks_sold * c0\n    \n    return earnings", "mapping": {"c0": 9.0, "c1": 12.0, "c2": 7.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [6.0], "response": "def cook_time(c0, c1, c2):\n    #calculate the number of potatoes left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 3.0}}
{"question": " A magician was selling magic card decks for c0 dollars each. If he started with c1 decks and by the end of the day he had c2 left, how much money did he earn? ", "answer": [45.0], "response": "def calculate_earnings(c0, c1, c2):\n    #calculate the number of decks sold\n    decks_sold = c1 - c2\n    \n    #calculate the total earnings\n    earnings = decks_sold * c0\n    \n    return earnings", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 5.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Wendy sold all but c2 bars, how much money would she have made? ", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Wendy sold all but c2 bars\n    sold_bars = total_bars - c2\n\n    #The amount of money Wendy made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = sold_bars * cost_per_bar\n\n    return money_made", "mapping": {"c0": 3.0, "c1": 9.0, "c2": 3.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 12.0, "c1": 3.0, "c2": 4.0}}
{"question": " Adam bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Adam still have? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Adam bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Adam gave c1 boxes to his little brother\n    gave = c1\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #The total number of pieces Adam had before giving any to his brother\n    total_before = boxes * pieces_per_box\n\n    #The total number of pieces Adam has left after giving some to his brother\n    total_now = total_before - (gave * pieces_per_box)\n\n    return total_now", "mapping": {"c0": 13.0, "c1": 7.0, "c2": 6.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [28.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 7.0, "c1": 13.0, "c2": 9.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 4.0}}
{"question": " Kaleb had c0 video games but c1 of them weren't working. If he wanted to sell the working games for $c2 each, how much money could he earn? ", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Kaleb had c0 video games\n    games = c0\n\n    #c1 of them weren't working\n    not_working = c1\n\n    #The number of working games Kaleb has can be calculated by subtracting the number of not working games from the total number of games\n    working = games - not_working\n\n    #Kaleb can sell each working game for $c2\n    price = c2\n\n    #The total amount of money Kaleb can earn can be calculated by multiplying the number of working games by the price of each game\n    earnings = working * price\n\n    return earnings", "mapping": {"c0": 10.0, "c1": 8.0, "c2": 6.0}}
{"question": " April's discount flowers was having a sale where each rose was c0 dollars. If April started with c1 roses and had c2 roses left, how much money did she earn? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #April started with c1 roses\n    start = c1\n\n    #April had c2 roses left\n    end = c2\n\n    #The number of roses sold can be calculated by subtracting the number of roses left from the original number of roses\n    sold = start - end\n\n    #The amount of money April earned can be calculated by multiplying the number of roses sold by the price of each rose\n    earnings = sold * c0\n\n    return earnings", "mapping": {"c0": 7.0, "c1": 9.0, "c2": 4.0}}
{"question": " At lunch a waiter had c0 customers and c1 of them didn't leave a tip. If he got $c2 each from the ones who did tip, how much money did he earn? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 customers\n    customers = c0\n\n    #c1 customers didn't leave a tip\n    no_tip = c1\n\n    #The number of customers who left a tip can be calculated by subtracting the number of customers who didn't leave a tip from the total number of customers\n    tip = customers - no_tip\n\n    #The amount of money the waiter earned can be calculated by multiplying the number of customers who left a tip by the amount of money each customer tipped\n    earnings = tip * c2\n\n    return earnings", "mapping": {"c0": 9.0, "c1": 5.0, "c2": 8.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [48.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 14.0, "c1": 8.0, "c2": 8.0}}
{"question": " Bianca earned c0 points for each bag of cans she recycled. If she had c1 bags, but didn't recycle c2 of them, how many points would she have earned? ", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #Bianca earned c0 points for each bag of cans she recycled\n    points_per_bag = c0\n\n    #Bianca had c1 bags of cans\n    total_bags = c1\n\n    #Bianca didn't recycle c2 bags of cans\n    unrecycled_bags = c2\n\n    #The number of bags Bianca actually recycled can be calculated by subtracting the number of unrecycled bags from the total number of bags\n    recycled_bags = total_bags - unrecycled_bags\n\n    #The total number of points Bianca earned can be calculated by multiplying the number of recycled bags by the points per bag\n    total_points = recycled_bags * points_per_bag\n\n    return total_points", "mapping": {"c0": 5.0, "c1": 17.0, "c2": 8.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [72.0], "response": "def cook_time(c0, c1, c2):\n    #calculate how many potatoes are left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 15.0, "c1": 6.0, "c2": 8.0}}
{"question": " Henry had c0 action figures, but needed c1 total for a complete collection. If each one costs $c2, how much money would he need to finish his collection? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Henry originally had c0 action figures\n    original = c0\n\n    #Henry needs c1 total action figures for a complete collection\n    total = c1\n\n    #The number of action figures Henry needs to buy can be calculated by subtracting the original number of action figures from the total number needed\n    needed = total - original\n\n    #The total cost of the needed action figures can be calculated by multiplying the cost of each action figure by the number needed\n    cost = needed * c2\n\n    return cost", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 6.0}}
{"question": " John earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [64.0], "response": "def Problem(c0, c1, c2):\n    #John earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #John had c1 lawns to mow\n    total_lawns = c1\n\n    #John forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns John actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money John actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 8.0, "c1": 15.0, "c2": 7.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #each player that quit had c2 lives\n    lives_per_player = c2\n\n    #total lives lost can be calculated by multiplying the number of players that quit by the number of lives they had\n    total_lives_lost = players_quit * lives_per_player\n\n    #total lives remaining can be calculated by multiplying the number of friends remaining by the number of lives they have\n    total_lives_remaining = (friends_before - players_quit) * lives_per_player\n\n    #total lives can be calculated by adding the remaining lives to the lost lives\n    total_lives = total_lives_remaining + total_lives_lost\n\n    return total_lives", "mapping": {"c0": 10.0, "c1": 7.0, "c2": 8.0}}
{"question": " In a video game, each enemy defeated gives you c0 points. If a level has c1 enemies total and you destroy all but c2 of them, how many points would you earn? ", "answer": [40.0], "response": "def calculate_points(c0, c1, c2):\n    #calculate the number of enemies defeated\n    defeated = c1 - c2\n    \n    #calculate the total points earned\n    points = defeated * c0\n    \n    return points", "mapping": {"c0": 8.0, "c1": 7.0, "c2": 2.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 11.0, "c1": 7.0, "c2": 2.0}}
{"question": " Dave had c0 video games but c1 of them weren't working. If he wanted to sell the working games for $c2 each, how much money could he earn? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Dave originally had c0 video games\n    games_before = c0\n\n    #c1 of them weren't working\n    not_working = c1\n\n    #The number of working games Dave has now can be calculated by subtracting the number of not working games from the original number of games\n    working = games_before - not_working\n\n    #Dave can sell each working game for $c2\n    price = c2\n\n    #The total amount of money Dave can earn can be calculated by multiplying the number of working games by the price of each game\n    total_earnings = working * price\n\n    return total_earnings", "mapping": {"c0": 10.0, "c1": 2.0, "c2": 4.0}}
{"question": " A worksheet had c0 problems on it. If a teacher had c1 worksheets to grade and had already graded c2 of them, how many more problems does she have to grade? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #The worksheet had c0 problems on it\n    problems_per_worksheet = c0\n\n    #The teacher had c1 worksheets to grade\n    total_worksheets = c1\n\n    #The teacher had already graded c2 of the worksheets\n    graded_worksheets = c2\n\n    #The total number of problems the teacher has to grade can be calculated by multiplying the number of problems per worksheet by the number of worksheets, and then subtracting the number of worksheets already graded\n    problems_left = (problems_per_worksheet * total_worksheets) - (problems_per_worksheet * graded_worksheets)\n\n    return problems_left", "mapping": {"c0": 4.0, "c1": 16.0, "c2": 8.0}}
{"question": " A worksheet had c0 problems on it. If a teacher had c1 worksheets to grade and had already graded c2 of them, how many more problems does she have to grade? ", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #The worksheet had c0 problems on it\n    problems_per_worksheet = c0\n\n    #The teacher had c1 worksheets to grade\n    total_worksheets = c1\n\n    #The teacher had already graded c2 of the worksheets\n    graded_worksheets = c2\n\n    #The total number of problems the teacher has to grade can be calculated by multiplying the number of problems per worksheet by the number of worksheets, and then subtracting the number of worksheets already graded\n    problems_left = (problems_per_worksheet * total_worksheets) - (problems_per_worksheet * graded_worksheets)\n\n    return problems_left", "mapping": {"c0": 2.0, "c1": 14.0, "c2": 7.0}}
{"question": " April's discount flowers was having a sale where each rose was c0 dollars. If April started with c1 roses and had c2 roses left, how much money did she earn? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #April started with c1 roses\n    start = c1\n\n    #April had c2 roses left\n    end = c2\n\n    #The number of roses sold can be calculated by subtracting the number of roses left from the original number of roses\n    sold = start - end\n\n    #The amount of money April earned can be calculated by multiplying the number of roses sold by the price of each rose\n    earnings = sold * c0\n\n    return earnings", "mapping": {"c0": 4.0, "c1": 13.0, "c2": 4.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [35.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 5.0, "c1": 15.0, "c2": 8.0}}
{"question": " Zoe baked c0 brownies, but needed c1 total for her party. If she used c2 cups of flour on each one, how much cups of flour does she still need? ", "answer": [42.0], "response": "def Problem(c0, c1, c2):\n    #Zoe baked c0 brownies\n    brownies_baked = c0\n\n    #Zoe needed c1 total brownies for her party\n    brownies_needed = c1\n\n    #Zoe used c2 cups of flour on each brownie\n    cups_per_brownie = c2\n\n    #The total cups of flour used can be calculated by multiplying the number of brownies baked by the cups of flour used per brownie\n    total_cups_used = brownies_baked * cups_per_brownie\n\n    #The cups of flour still needed can be calculated by subtracting the total cups used from the cups needed for the party\n    cups_still_needed = (brownies_needed - brownies_baked) * cups_per_brownie\n\n    return cups_still_needed", "mapping": {"c0": 5.0, "c1": 11.0, "c2": 7.0}}
{"question": " A painter needed to paint c0 rooms in a building. Each room takes c1 hours to paint. If he already painted c2 rooms, how much longer will he take to paint the rest? ", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #The painter needs to paint c0 rooms in total\n    total_rooms = c0\n\n    #Each room takes c1 hours to paint\n    time_per_room = c1\n\n    #The painter already painted c2 rooms\n    painted_rooms = c2\n\n    #The number of rooms left to paint can be calculated by subtracting the number of rooms already painted from the total number of rooms\n    rooms_left = total_rooms - painted_rooms\n\n    #The total time needed to paint the remaining rooms can be calculated by multiplying the time per room by the number of rooms left\n    time_needed = rooms_left * time_per_room\n\n    return time_needed", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 2.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Vanessa sold all but c2 bars, how much money would she have made? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Vanessa sold all but c2 bars\n    sold_bars = total_bars - c2\n\n    #The amount of money Vanessa made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = sold_bars * cost_per_bar\n\n    return money_made", "mapping": {"c0": 4.0, "c1": 11.0, "c2": 7.0}}
{"question": " Gwen earned c0 points for each bag of cans she recycled. If she had c1 bags, but didn't recycle c2 of them, how many points would she have earned? ", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Gwen earns c0 points for each bag of cans she recycles\n    points_per_bag = c0\n\n    #Gwen had c1 bags of cans\n    total_bags = c1\n\n    #Gwen didn't recycle c2 bags of cans\n    unrecycled_bags = c2\n\n    #The number of bags Gwen actually recycled can be calculated by subtracting the number of unrecycled bags from the total number of bags\n    recycled_bags = total_bags - unrecycled_bags\n\n    #The total number of points Gwen earned can be calculated by multiplying the number of recycled bags by the points per bag\n    total_points = recycled_bags * points_per_bag\n\n    return total_points", "mapping": {"c0": 8.0, "c1": 4.0, "c2": 2.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [24.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 12.0, "c1": 6.0, "c2": 4.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [63.0], "response": "def cook_time(c0, c1, c2):\n    #calculate how many potatoes are left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 15.0, "c1": 8.0, "c2": 9.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [35.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    team_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the original number of team members\n    present_members = team_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 14.0, "c1": 7.0, "c2": 5.0}}
{"question": " A chef needs to cook c0 potatoes. He has already cooked c1. If each potato takes c2 minutes to cook, how long will it take him to cook the rest? ", "answer": [48.0], "response": "def cook_time(c0, c1, c2):\n    #calculate the number of potatoes left to cook\n    potatoes_left = c0 - c1\n    #calculate the total time needed to cook the remaining potatoes\n    time_needed = potatoes_left * c2\n    return time_needed", "mapping": {"c0": 13.0, "c1": 5.0, "c2": 6.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 11.0, "c1": 6.0, "c2": 9.0}}
{"question": " Each chocolate bar in a box cost $c0. If a box had c1 bars total and Rachel sold all but c2 bars, how much money would she have made? ", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #Each chocolate bar in a box cost $c0\n    cost_per_bar = c0\n\n    #A box had c1 bars total\n    total_bars = c1\n\n    #Rachel sold all but c2 bars\n    bars_left = c2\n\n    #The number of bars Rachel sold can be calculated by subtracting the number of bars left from the total number of bars\n    bars_sold = total_bars - bars_left\n\n    #The amount of money Rachel made can be calculated by multiplying the number of bars sold by the cost per bar\n    money_made = bars_sold * cost_per_bar\n\n    return money_made", "mapping": {"c0": 2.0, "c1": 13.0, "c2": 4.0}}
{"question": " Isabel baked c0 brownies, but needed c1 total for her party. If she used c2 cups of flour on each one, how much cups of flour does she still need? ", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Isabel baked c0 brownies\n    brownies_baked = c0\n\n    #Isabel needed c1 total brownies for her party\n    brownies_needed = c1\n\n    #Isabel used c2 cups of flour on each brownie\n    cups_per_brownie = c2\n\n    #The total cups of flour used can be calculated by multiplying the number of brownies baked by the cups of flour used per brownie\n    total_cups_used = brownies_baked * cups_per_brownie\n\n    #The cups of flour still needed can be calculated by subtracting the total cups used from the cups needed for the party\n    cups_still_needed = (brownies_needed - brownies_baked) * cups_per_brownie\n\n    return cups_still_needed", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 5.0}}
{"question": " A worksheet had c0 problems on it. If a teacher had c1 worksheets to grade and had already graded c2 of them, how many more problems does she have to grade? ", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #The worksheet had c0 problems on it\n    problems_per_worksheet = c0\n\n    #The teacher had c1 worksheets to grade\n    total_worksheets = c1\n\n    #The teacher had already graded c2 of the worksheets\n    graded_worksheets = c2\n\n    #The total number of problems the teacher has to grade can be calculated by multiplying the number of problems per worksheet by the number of worksheets, and then subtracting the number of worksheets already graded\n    problems_left = (problems_per_worksheet * total_worksheets) - (problems_per_worksheet * graded_worksheets)\n\n    return problems_left", "mapping": {"c0": 3.0, "c1": 15.0, "c2": 7.0}}
{"question": " At lunch a waiter had c0 customers and c1 of them didn't leave a tip. If he got $c2 each from the ones who did tip, how much money did he earn? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 customers\n    customers = c0\n\n    #c1 customers didn't leave a tip\n    no_tip = c1\n\n    #The number of customers who left a tip can be calculated by subtracting the number of customers who didn't leave a tip from the total number of customers\n    tip = customers - no_tip\n\n    #The amount of money the waiter earned can be calculated by multiplying the number of customers who left a tip by the amount of money each customer tipped\n    earnings = tip * c2\n\n    return earnings", "mapping": {"c0": 7.0, "c1": 4.0, "c2": 9.0}}
{"question": " April's discount flowers was having a sale where each rose was c0 dollars. If April started with c1 roses and had c2 roses left, how much money did she earn? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #April started with c1 roses\n    start = c1\n\n    #April had c2 roses left\n    end = c2\n\n    #Each rose was c0 dollars\n    price = c0\n\n    #The number of roses sold can be calculated by subtracting the number of roses left from the original number of roses\n    sold = start - end\n\n    #The amount of money April earned can be calculated by multiplying the number of roses sold by the price of each rose\n    earnings = sold * price\n\n    return earnings", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 8.0}}
{"question": " Tom bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Tom still have? ", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #Tom bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Tom gave c1 boxes to his little brother\n    given = c1\n\n    #Tom had (c0 - c1) boxes left\n    left = boxes - given\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #Tom had (c0 - c1) * c2 pieces left\n    pieces_left = left * pieces_per_box\n\n    return pieces_left", "mapping": {"c0": 14.0, "c1": 8.0, "c2": 3.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [12.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 2.0, "c1": 15.0, "c2": 9.0}}
{"question": " Edward earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #Edward earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #Edward had c1 lawns to mow\n    total_lawns = c1\n\n    #Edward forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns Edward actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money Edward actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 4.0, "c1": 17.0, "c2": 9.0}}
{"question": " A new building needed c0 windows. The builder had already installed c1 of them. If it takes c2 hours to install each window, how long will it take him to install the rest? ", "answer": [56.0], "response": "def install_time(c0, c1, c2):\n    #calculate the number of windows left to install\n    windows_left = c0 - c1\n    \n    #calculate the total time needed to install the remaining windows\n    total_time = windows_left * c2\n    \n    return total_time", "mapping": {"c0": 11.0, "c1": 4.0, "c2": 8.0}}
{"question": " Tom bought c0 boxes of chocolate candy and gave c1 to his little brother. If each box has c2 pieces inside it, how many pieces did Tom still have? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Tom bought c0 boxes of chocolate candy\n    boxes = c0\n\n    #Tom gave c1 boxes to his little brother\n    given = c1\n\n    #Tom has (c0 - c1) boxes left\n    left = boxes - given\n\n    #Each box has c2 pieces inside it\n    pieces_per_box = c2\n\n    #Tom has (c0 - c1) * c2 pieces left\n    pieces_left = left * pieces_per_box\n\n    return pieces_left", "mapping": {"c0": 12.0, "c1": 7.0, "c2": 6.0}}
{"question": " John had c0 action figures, but needed c1 total for a complete collection. If each one costs $c2, how much money would he need to finish his collection? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #John originally had c0 action figures\n    john_original = c0\n\n    #John needs c1 total action figures for a complete collection\n    john_complete = c1\n\n    #The number of action figures John needs to buy can be calculated by subtracting the original number of action figures from the total number of action figures needed for a complete collection\n    need_to_buy = john_complete - john_original\n\n    #The total cost of the action figures John needs to buy can be calculated by multiplying the number of action figures he needs to buy by the cost of each action figure\n    total_cost = need_to_buy * c2\n\n    return total_cost", "mapping": {"c0": 6.0, "c1": 11.0, "c2": 6.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [72.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 8.0, "c1": 11.0, "c2": 2.0}}
{"question": " At the fair Kaleb bought c0 tickets. After riding the ferris wheel he had c1 tickets left. If each ticket cost c2 dollars, how much money did Kaleb spend riding the ferris wheel? ", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #Kaleb originally had c0 tickets\n    tickets_before = c0\n\n    #After riding the ferris wheel, he had c1 tickets left\n    tickets_after = c1\n\n    #The number of tickets he used can be calculated by subtracting the number of tickets he has now from the original number of tickets he had\n    tickets_used = tickets_before - tickets_after\n\n    #The amount of money he spent can be calculated by multiplying the number of tickets used by the cost per ticket\n    money_spent = tickets_used * c2\n\n    return money_spent", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 9.0}}
{"question": " Tiffany baked c0 brownies, but needed c1 total for her party. If she used c2 cups of flour on each one, how much cups of flour does she still need? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany baked c0 brownies\n    baked = c0\n\n    #Tiffany needed c1 total brownies for her party\n    needed = c1\n\n    #Tiffany used c2 cups of flour on each brownie\n    flour_per_brownie = c2\n\n    #The total amount of flour Tiffany used can be calculated by multiplying the number of brownies by the amount of flour used per brownie\n    total_flour_used = baked * flour_per_brownie\n\n    #The amount of flour Tiffany still needs can be calculated by subtracting the total amount of flour used from the amount of flour needed for the party\n    flour_needed = (needed - baked) * flour_per_brownie\n\n    return flour_needed", "mapping": {"c0": 8.0, "c1": 17.0, "c2": 8.0}}
{"question": " In a video game, each enemy defeated gives you c0 points. If a level has c1 enemies total and you destroy all but c2 of them, how many points would you earn? ", "answer": [21.0], "response": "def calculate_points(c0, c1, c2):\n    #calculate the number of enemies defeated\n    defeated = c1 - c2\n    \n    #calculate the total points earned\n    points = defeated * c0\n    \n    return points", "mapping": {"c0": 7.0, "c1": 11.0, "c2": 8.0}}
{"question": " A magician was selling magic card decks for c0 dollars each. If he started with c1 decks and by the end of the day he had c2 left, how much money did he earn? ", "answer": [56.0], "response": "def calculate_earnings(c0, c1, c2):\n    #calculate the number of decks sold\n    decks_sold = c1 - c2\n    \n    #calculate the total earnings\n    earnings = decks_sold * c0\n    \n    return earnings", "mapping": {"c0": 7.0, "c1": 16.0, "c2": 8.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #each player that quit had c2 lives\n    lives_per_player = c2\n\n    #total lives lost can be calculated by multiplying the number of players that quit by the number of lives they had\n    total_lives_lost = players_quit * lives_per_player\n\n    #total lives remaining can be calculated by multiplying the number of friends remaining by the number of lives they have\n    total_lives_remaining = (friends_before - players_quit) * lives_per_player\n\n    #total lives can be calculated by adding the remaining lives to the lost lives\n    total_lives = total_lives_remaining + total_lives_lost\n\n    return total_lives", "mapping": {"c0": 13.0, "c1": 8.0, "c2": 6.0}}
{"question": " At lunch a waiter had c0 customers and c1 of them didn't leave a tip. If he got $c2 each from the ones who did tip, how much money did he earn? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #The waiter had c0 customers\n    customers = c0\n\n    #c1 customers didn't leave a tip\n    no_tip = c1\n\n    #The number of customers who left a tip can be calculated by subtracting the number of customers who didn't leave a tip from the total number of customers\n    tip = customers - no_tip\n\n    #The amount of money the waiter earned can be calculated by multiplying the number of customers who left a tip by the amount of money each customer tipped\n    earnings = tip * c2\n\n    return earnings", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 3.0}}
{"question": " At the fair Adam bought c0 tickets. After riding the ferris wheel he had c1 tickets left. If each ticket cost c2 dollars, how much money did Adam spend riding the ferris wheel? ", "answer": [63.0], "response": "def ferris_wheel_cost(c0, c1, c2):\n    # Adam originally had c0 tickets\n    original_tickets = c0\n\n    # After riding the ferris wheel, he had c1 tickets left\n    remaining_tickets = c1\n\n    # Adam used (original_tickets - remaining_tickets) tickets to ride the ferris wheel\n    used_tickets = original_tickets - remaining_tickets\n\n    # Each ticket costs c2 dollars\n    ticket_cost = c2\n\n    # Adam spent used_tickets * ticket_cost dollars riding the ferris wheel\n    total_cost = used_tickets * ticket_cost\n\n    return total_cost", "mapping": {"c0": 10.0, "c1": 3.0, "c2": 9.0}}
{"question": " A worksheet had c0 problems on it. If a teacher had c1 worksheets to grade and had already graded c2 of them, how many more problems does she have to grade? ", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #The worksheet had c0 problems on it\n    problems_per_worksheet = c0\n\n    #The teacher had c1 worksheets to grade\n    total_worksheets = c1\n\n    #The teacher had already graded c2 of the worksheets\n    graded_worksheets = c2\n\n    #The total number of problems the teacher has to grade can be calculated by multiplying the number of problems per worksheet by the number of worksheets, and then subtracting the number of worksheets already graded\n    problems_left = (problems_per_worksheet * total_worksheets) - (problems_per_worksheet * graded_worksheets)\n\n    return problems_left", "mapping": {"c0": 7.0, "c1": 17.0, "c2": 8.0}}
{"question": " A trivia team had c0 members total, but during a game c1 members didn't show up. If each member that did show up scored c2 points, how many points were scored total? ", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #The trivia team originally had c0 members\n    total_members = c0\n\n    #c1 members didn't show up\n    absent_members = c1\n\n    #The number of members who showed up can be calculated by subtracting the number of absent members from the total number of members\n    present_members = total_members - absent_members\n\n    #Each member who showed up scored c2 points\n    score_per_member = c2\n\n    #The total score can be calculated by multiplying the number of present members by the score per member\n    total_score = present_members * score_per_member\n\n    return total_score", "mapping": {"c0": 9.0, "c1": 3.0, "c2": 2.0}}
{"question": " Mike had c0 video games but c1 of them weren't working. If he wanted to sell the working games for $c2 each, how much money could he earn? ", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Mike originally had c0 video games\n    original_games = c0\n\n    #c1 of them weren't working\n    not_working = c1\n\n    #The number of working games Mike has now can be calculated by subtracting the number of not working games from the original number of games\n    working_games = original_games - not_working\n\n    #Mike can sell each working game for $c2\n    price_per_game = c2\n\n    #The total amount of money Mike can earn can be calculated by multiplying the number of working games by the price per game\n    total_earnings = working_games * price_per_game\n\n    return total_earnings", "mapping": {"c0": 15.0, "c1": 9.0, "c2": 5.0}}
{"question": " Edward earned c0 dollars for each lawn he mowed. If he had c1 lawns to mow, but forgot to mow c2 of them, how much money did he actually earn? ", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Edward earned c0 dollars for each lawn he mowed\n    earnings_per_lawn = c0\n\n    #Edward had c1 lawns to mow\n    total_lawns = c1\n\n    #Edward forgot to mow c2 of the lawns\n    forgot_lawns = c2\n\n    #The number of lawns Edward actually mowed can be calculated by subtracting the number of lawns he forgot to mow from the total number of lawns he had to mow\n    actual_lawns = total_lawns - forgot_lawns\n\n    #The amount of money Edward actually earned can be calculated by multiplying the number of lawns he actually mowed by the amount he earned per lawn\n    actual_earnings = actual_lawns * earnings_per_lawn\n\n    return actual_earnings", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 2.0}}
{"question": " At a restaurant each adult meal costs $c0 and kids eat free. If a group of c1 people came in and c2 were kids, how much would it cost for the group to eat? ", "answer": [14.0], "response": "def restaurant_cost(c0, c1, c2):\n    #each adult meal costs c0 dollars\n    adult_cost = c0\n\n    #there are c1 people in the group\n    total_people = c1\n\n    #c2 of them are kids\n    kids = c2\n\n    #the number of adults in the group can be calculated by subtracting the number of kids from the total number of people\n    adults = total_people - kids\n\n    #the total cost for the group can be calculated by multiplying the number of adults by the cost of each adult meal\n    total_cost = adults * adult_cost\n\n    return total_cost", "mapping": {"c0": 2.0, "c1": 9.0, "c2": 2.0}}
{"question": " Chloe baked c0 brownies, but needed c1 total for her party. If she used c2 cups of flour on each one, how much cups of flour does she still need? ", "answer": [54.0], "response": "def Problem(c0, c1, c2):\n    #Chloe baked c0 brownies\n    baked = c0\n\n    #Chloe needed c1 total brownies for her party\n    needed = c1\n\n    #Chloe used c2 cups of flour on each brownie\n    flour_per_brownie = c2\n\n    #The total amount of flour Chloe used can be calculated by multiplying the number of brownies by the amount of flour used per brownie\n    total_flour_used = baked * flour_per_brownie\n\n    #The amount of flour Chloe still needs can be calculated by subtracting the total amount of flour used from the amount of flour needed for the party\n    flour_needed = (needed - baked) * flour_per_brownie\n\n    return flour_needed", "mapping": {"c0": 7.0, "c1": 16.0, "c2": 6.0}}
{"question": " There were c0 friends playing a video game online when c1 players quit. If each player left had c2 lives, how many lives did they have total? ", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 friends playing\n    friends_before = c0\n\n    #c1 players quit\n    players_quit = c1\n\n    #each player that quit had c2 lives\n    lives_per_player = c2\n\n    #total lives lost can be calculated by multiplying the number of players that quit by the number of lives they had\n    total_lives_lost = players_quit * lives_per_player\n\n    #total lives remaining can be calculated by multiplying the number of friends remaining by the number of lives they have\n    total_lives_remaining = (friends_before - players_quit) * lives_per_player\n\n    #total lives can be calculated by adding the remaining lives to the lost lives\n    total_lives = total_lives_remaining + total_lives_lost\n\n    return total_lives", "mapping": {"c0": 8.0, "c1": 3.0, "c2": 3.0}}
{"question": " Sam invited c0 friends to a birthday party, but c1 couldn't come. If he wanted to buy enough cupcakes so each person could have exactly c2, how many should he buy? ", "answer": [6.0], "response": "def cupcakes_needed(c0, c1, c2):\n    #calculate the number of friends who can come to the party\n    friends_attending = c0 - c1\n    \n    #calculate the total number of cupcakes needed\n    cupcakes_needed = friends_attending * c2\n    \n    return cupcakes_needed", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 2.0}}
{"question": " Megan earned c0 points for each bag of cans she recycled. If she had c1 bags, but didn't recycle c2 of them, how many points would she have earned? ", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Megan earned c0 points for each bag of cans she recycled\n    points_per_bag = c0\n\n    #Megan had c1 bags of cans\n    total_bags = c1\n\n    #Megan didn't recycle c2 bags of cans\n    unrecycled_bags = c2\n\n    #The number of bags Megan actually recycled can be calculated by subtracting the number of unrecycled bags from the total number of bags\n    recycled_bags = total_bags - unrecycled_bags\n\n    #The total number of points Megan earned can be calculated by multiplying the number of recycled bags by the points per bag\n    total_points = recycled_bags * points_per_bag\n\n    return total_points", "mapping": {"c0": 8.0, "c1": 14.0, "c2": 5.0}}
{"question": " Will had c0 dollars. If he spent c1 bucks on a new game, how many c2 dollar toys could he buy with the money he had left? ", "answer": [5.0], "response": "def toys_left(c0, c1, c2):\n    #Will originally had c0 dollars\n    original_money = c0\n\n    #Will spent c1 dollars on a new game\n    spent_money = c1\n\n    #Will has c0 minus c1 dollars left\n    money_left = original_money - spent_money\n\n    #The number of c2 dollar toys Will can buy with the money he has left can be calculated by dividing the money left by the cost of each toy\n    toys = money_left // c2\n\n    return toys", "mapping": {"c0": 57.0, "c1": 27.0, "c2": 6.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 18.0, "c1": 3.0, "c2": 5.0}}
{"question": " Luke had c0 pieces of clothing to wash. He put c1 of them in one load, but decided to split the rest into c2 equal loads. How many pieces of clothing could go in each of the small loads? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Luke had c0 pieces of clothing to wash\n    total_clothing = c0\n\n    #Luke put c1 pieces of clothing in one load\n    one_load = c1\n\n    #Luke decided to split the rest into c2 equal loads\n    small_loads = c2\n\n    #The number of pieces of clothing that need to be split into small loads can be calculated by subtracting the number of pieces in one load from the total number of pieces\n    remaining_clothing = total_clothing - one_load\n\n    #The number of pieces of clothing that can go in each small load can be calculated by dividing the remaining clothing by the number of small loads\n    pieces_per_small_load = remaining_clothing / small_loads\n\n    return pieces_per_small_load", "mapping": {"c0": 47.0, "c1": 17.0, "c2": 5.0}}
{"question": " Edward bought c0 tickets at the state fair. He spent c1 tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost c2 tickets, how many rides could he go on? ", "answer": [8.0], "response": "def rides(c0, c1, c2):\n    # Edward bought c0 tickets\n    tickets_before = c0\n\n    # Edward spent c1 tickets at the 'dunk a clown' booth\n    spent = c1\n\n    # Edward has c0 - c1 tickets left for rides\n    tickets_for_rides = tickets_before - spent\n\n    # Each ride costs c2 tickets\n    ride_cost = c2\n\n    # Edward can go on this many rides\n    num_rides = tickets_for_rides // ride_cost\n\n    return num_rides", "mapping": {"c0": 79.0, "c1": 23.0, "c2": 7.0}}
{"question": " Katie baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Katie baked c0 cupcakes\n    katie = c0\n\n    #Todd ate c1 cupcakes\n    todd = c1\n\n    #Katie has c0 - c1 cupcakes left\n    left = katie - todd\n\n    #Katie can make left // c2 packages\n    packages = left // c2\n\n    return packages", "mapping": {"c0": 18.0, "c1": 8.0, "c2": 2.0}}
{"question": " Megan had c0 files on her computer. She deleted c1 of them and put the rest into folders with c2 files in each one. How many folders did Megan end up with? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Megan originally had c0 files\n    original_files = c0\n\n    #Megan deleted c1 files\n    deleted_files = c1\n\n    #Megan put the rest of the files into folders with c2 files in each one\n    files_per_folder = c2\n\n    #The number of files Megan has left after deleting can be calculated by subtracting the number of deleted files from the original number of files\n    remaining_files = original_files - deleted_files\n\n    #The number of folders Megan ended up with can be calculated by dividing the remaining files by the number of files per folder and rounding up to the nearest integer\n    folders = -(-remaining_files // files_per_folder)\n\n    return folders", "mapping": {"c0": 93.0, "c1": 21.0, "c2": 8.0}}
{"question": " Wendy uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Wendy uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums (including the one album with c1 pictures)\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 79.0, "c1": 44.0, "c2": 5.0}}
{"question": " Isabel had c0 homework problems. She finished c1 of them but still had c2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Isabel had c0 homework problems\n    total_problems = c0\n\n    #Isabel finished c1 of them\n    finished_problems = c1\n\n    #Isabel still had c2 pages of problems to do\n    remaining_pages = c2\n\n    #The number of problems on each page can be calculated by subtracting the number of finished problems from the total number of problems and then dividing by the number of remaining pages\n    problems_per_page = (total_problems - finished_problems) / remaining_pages\n\n    return problems_per_page", "mapping": {"c0": 72.0, "c1": 32.0, "c2": 5.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #Each pie takes c2 apples\n    apples_per_pie = c2\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples per pie\n    pies = apples_for_pies // apples_per_pie\n\n    return pies", "mapping": {"c0": 62.0, "c1": 8.0, "c2": 9.0}}
{"question": " Mike made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Mike made c0 dollars mowing lawns over the summer\n    earnings = c0\n\n    #Mike spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money Mike has left can be calculated by subtracting his expenses from his earnings\n    money_left = earnings - expenses\n\n    #The number of c2 dollar games Mike can buy with the money he has left can be calculated by dividing the money he has left by the cost of each game\n    games = money_left // c2\n\n    return games", "mapping": {"c0": 101.0, "c1": 47.0, "c2": 6.0}}
{"question": " Paige's team won their dodgeball game and scored c0 points total. If Paige scored c1 of the points and everyone else scored c2 points each, how many players were on her team? ", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paige's team scored c0 points total\n    total_points = c0\n\n    #Paige scored c1 of the points\n    paige_points = c1\n\n    #Everyone else scored c2 points each\n    other_points = c2\n\n    #Let's assume there are n players on Paige's team\n    n = 1\n\n    #Paige's points plus the points of everyone else should equal the total points\n    while paige_points + (n-1)*other_points != total_points:\n        n += 1\n\n    #Return the number of players on Paige's team\n    return n", "mapping": {"c0": 41.0, "c1": 11.0, "c2": 6.0}}
{"question": " Oliver is at the library helping put away books. There are c0 book to put away total but a librarian takes c1 of them and leaves Oliver with the rest. If he can fit c2 books on a shelf, how many shelves will he need? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The number of books Oliver has to put away after the librarian takes some can be calculated by subtracting the number of books the librarian took from the total number of books\n    books_left = c0 - c1\n\n    #The number of shelves Oliver will need can be calculated by dividing the number of books left by the number of books that can fit on a shelf, and rounding up to the nearest integer\n    shelves_needed = math.ceil(books_left/c2)\n\n    return shelves_needed", "mapping": {"c0": 46.0, "c1": 10.0, "c2": 4.0}}
{"question": " Emily was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Emily have? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Emily started with c0 seeds\n    seeds_before = c0\n\n    #Emily planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Emily put c2 seeds in each of her small gardens\n    small_garden = c2\n\n    #The number of small gardens Emily has can be calculated by dividing the remaining seeds after planting the big garden by the number of seeds in each small garden\n    remaining_seeds = seeds_before - big_garden\n    small_gardens = remaining_seeds // small_garden\n\n    return small_gardens", "mapping": {"c0": 41.0, "c1": 29.0, "c2": 4.0}}
{"question": " Edward made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Edward made c0 dollars mowing lawns over the summer\n    earnings = c0\n\n    #He spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money he has left can be calculated by subtracting his expenses from his earnings\n    remaining_money = earnings - expenses\n\n    #The number of games he can buy with the remaining money can be calculated by dividing the remaining money by the cost of each game\n    num_games = remaining_money // c2\n\n    return num_games", "mapping": {"c0": 37.0, "c1": 21.0, "c2": 2.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 81.0, "c1": 41.0, "c2": 8.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    groups = c2\n    students_per_group = picked / groups\n\n    return students_per_group", "mapping": {"c0": 65.0, "c1": 17.0, "c2": 8.0}}
{"question": " Tom had c0 dollars. If he spent c1 bucks on a new game, how many c2 dollar toys could he buy with the money he had left? ", "answer": [2.0], "response": "def toys_left(c0, c1, c2):\n    #Tom originally had c0 dollars\n    tom_money = c0\n\n    #Tom spent c1 dollars on a new game\n    spent = c1\n\n    #Tom has c0 minus c1 dollars left\n    money_left = tom_money - spent\n\n    #Tom can buy as many c2 dollar toys as he can with the money he has left\n    toys = money_left // c2\n\n    return toys", "mapping": {"c0": 57.0, "c1": 49.0, "c2": 4.0}}
{"question": " Isabel picked c0 flowers for her friend\u2019s wedding. She was making bouquets with c1 flowers in each one. If c2 of the flowers wilted before the wedding, how many bouquets could she still make? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Isabel picked c0 flowers\n    picked = c0\n\n    #She was making bouquets with c1 flowers in each one\n    per_bouquet = c1\n\n    #c2 of the flowers wilted before the wedding\n    wilted = c2\n\n    #The number of bouquets she can still make can be calculated by dividing the number of flowers left after the wilted ones were removed by the number of flowers in each bouquet\n    bouquets = (picked - wilted) // per_bouquet\n\n    return bouquets", "mapping": {"c0": 66.0, "c1": 8.0, "c2": 10.0}}
{"question": " For Halloween Sarah received c0 pieces of candy. She ate c1 pieces then placed the rest into piles with c2 in each pile. How many piles could she make? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Sarah received c0 pieces of candy\n    received = c0\n\n    #Sarah ate c1 pieces of candy\n    ate = c1\n\n    #Sarah has c0 - c1 pieces of candy left\n    left = received - ate\n\n    #Sarah can make left // c2 piles of candy, using integer division to get the number of full piles\n    piles = left // c2\n\n    return piles", "mapping": {"c0": 108.0, "c1": 36.0, "c2": 9.0}}
{"question": " Nancy had c0 files on her computer. She deleted c1 of them and put the rest into folders with c2 files in each one. How many folders did Nancy end up with? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Nancy originally had c0 files\n    original_files = c0\n\n    #Nancy deleted c1 files\n    deleted_files = c1\n\n    #Nancy now has original_files - deleted_files files left\n    remaining_files = original_files - deleted_files\n\n    #Nancy puts the remaining files into folders with c2 files in each one\n    folders = remaining_files // c2\n\n    #If there are any remaining files that don't fit into a full folder, add one more folder\n    if remaining_files % c2 != 0:\n        folders += 1\n\n    return folders", "mapping": {"c0": 80.0, "c1": 31.0, "c2": 7.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    group_size = picked / c2\n\n    return group_size", "mapping": {"c0": 36.0, "c1": 9.0, "c2": 3.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria originally had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples needed for each pie\n    pies = apples_for_pies // c2\n\n    return pies", "mapping": {"c0": 96.0, "c1": 42.0, "c2": 6.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 64.0, "c1": 28.0, "c2": 4.0}}
{"question": " Edward was selling his old games. He started out with c0 but sold c1 of them. He packed the rest up putting c2 games into each box. How many boxes did he have to use? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Edward started out with c0 games\n    games_before = c0\n\n    #Edward sold c1 games\n    sold = c1\n\n    #Edward has c0 - c1 games left after selling\n    games_after = games_before - sold\n\n    #Edward packed c2 games into each box\n    games_per_box = c2\n\n    #The number of boxes Edward had to use can be calculated by dividing the number of games left after selling by the number of games per box\n    boxes_used = games_after // games_per_box\n\n    return boxes_used", "mapping": {"c0": 35.0, "c1": 19.0, "c2": 8.0}}
{"question": " Frank made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Frank made c0 dollars mowing lawns over the summer\n    earnings = c0\n\n    #Frank spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money Frank has left can be calculated by subtracting his expenses from his earnings\n    remaining_money = earnings - expenses\n\n    #The number of c2 dollar games Frank can buy with the money he has left can be calculated by dividing his remaining money by the cost of each game\n    num_games = remaining_money // c2\n\n    return num_games", "mapping": {"c0": 19.0, "c1": 11.0, "c2": 2.0}}
{"question": " Megan had c0 homework problems. She finished c1 of them but still had c2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Megan had c0 homework problems\n    total_problems = c0\n\n    #Megan finished c1 of them\n    finished_problems = c1\n\n    #Megan still had c2 pages of problems to do\n    remaining_pages = c2\n\n    #The number of problems on each page can be calculated by subtracting the number of finished problems from the total number of problems and then dividing by the number of remaining pages\n    problems_per_page = (total_problems - finished_problems) / remaining_pages\n\n    return problems_per_page", "mapping": {"c0": 40.0, "c1": 26.0, "c2": 2.0}}
{"question": " Wendy picked c0 flowers for her friend\u2019s wedding. She was making bouquets with c1 flowers in each one. If c2 of the flowers wilted before the wedding, how many bouquets could she still make? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Wendy picked c0 flowers\n    picked = c0\n\n    #She was making bouquets with c1 flowers in each one\n    per_bouquet = c1\n\n    #c2 of the flowers wilted before the wedding\n    wilted = c2\n\n    #The number of bouquets Wendy can still make can be calculated by dividing the number of flowers left after the wilted ones were removed by the number of flowers in each bouquet\n    bouquets = (picked - wilted) // per_bouquet\n\n    return bouquets", "mapping": {"c0": 103.0, "c1": 8.0, "c2": 47.0}}
{"question": " Kaleb had c0 pieces of clothing to wash. He put c1 of them in one load, but decided to split the rest into c2 equal loads. How many pieces of clothing could go in each of the small loads? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Kaleb had c0 pieces of clothing to wash\n    total_clothing = c0\n\n    #Kaleb put c1 pieces of clothing in one load\n    one_load = c1\n\n    #Kaleb decided to split the rest into c2 equal loads\n    small_loads = c2\n\n    #The number of pieces of clothing that need to be split into small loads can be calculated by subtracting the number of pieces in one load from the total number of pieces\n    rest_clothing = total_clothing - one_load\n\n    #The number of pieces of clothing that can go in each small load can be calculated by dividing the number of pieces in the rest by the number of small loads\n    pieces_per_small_load = rest_clothing / small_loads\n\n    return pieces_per_small_load", "mapping": {"c0": 39.0, "c1": 19.0, "c2": 5.0}}
{"question": " A company invited c0 people to a luncheon, but c1 of them didn't show up. If the tables they had held c2 people each, how many tables do they need? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #c0 people were invited to the luncheon\n    invited = c0\n\n    #c1 people didn't show up\n    no_show = c1\n\n    #The number of people who actually showed up can be calculated by subtracting the number of people who didn't show up from the number of people who were invited\n    showed_up = invited - no_show\n\n    #c2 people can sit at each table\n    table_capacity = c2\n\n    #The number of tables needed can be calculated by dividing the number of people who showed up by the table capacity and rounding up to the nearest integer\n    tables_needed = math.ceil(showed_up / table_capacity)\n\n    return tables_needed", "mapping": {"c0": 18.0, "c1": 12.0, "c2": 3.0}}
{"question": " Mike is at the library helping put away books. There are c0 book to put away total but a librarian takes c1 of them and leaves Mike with the rest. If he can fit c2 books on a shelf, how many shelves will he need? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The librarian takes c1 books, so Mike is left with c0 - c1 books to put away\n    books_left = c0 - c1\n\n    #Mike can fit c2 books on a shelf\n    books_per_shelf = c2\n\n    #The number of shelves Mike will need can be calculated by dividing the number of books left by the number of books he can fit on a shelf, and rounding up to the nearest integer\n    shelves_needed = math.ceil(books_left/books_per_shelf)\n\n    return shelves_needed", "mapping": {"c0": 82.0, "c1": 10.0, "c2": 9.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 78.0, "c1": 30.0, "c2": 8.0}}
{"question": " Bianca uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Bianca uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the number of pictures in the other albums by the number of other albums, and adding the number of pictures in one album\n    pics_per_album = (total_pics - one_album) / other_albums + one_album\n\n    return pics_per_album", "mapping": {"c0": 33.0, "c1": 27.0, "c2": 3.0}}
{"question": " Emily's team won their dodgeball game and scored c0 points total. If Emily scored c1 of the points and everyone else scored c2 points each, how many players were on her team? ", "answer": [8.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Emily's team scored c0 points in total\n    total_points = c0\n\n    #Emily scored c1 points\n    emily_points = c1\n\n    #Everyone else scored c2 points each\n    other_points = c2\n\n    #The number of players on Emily's team can be calculated by subtracting Emily's points from the total points, then dividing by the points scored by everyone else\n    num_players = (total_points - emily_points) / other_points\n\n    return num_players", "mapping": {"c0": 39.0, "c1": 23.0, "c2": 2.0}}
{"question": " A company invited c0 people to a luncheon, but c1 of them didn't show up. If the tables they had held c2 people each, how many tables do they need? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #c0 people were invited to the luncheon\n    invited = c0\n\n    #c1 people didn't show up\n    no_show = c1\n\n    #The number of people who actually showed up can be calculated by subtracting the number of people who didn't show up from the number of people who were invited\n    showed_up = invited - no_show\n\n    #c2 people can sit at each table\n    table_capacity = c2\n\n    #The number of tables needed can be calculated by dividing the number of people who showed up by the table capacity and rounding up to the nearest integer\n    tables_needed = math.ceil(showed_up / table_capacity)\n\n    return tables_needed", "mapping": {"c0": 47.0, "c1": 7.0, "c2": 5.0}}
{"question": " A waiter had c0 customers in his section. If c1 of them left and the rest of his tables had c2 people at each table, how many tables did he have? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers in his section\n    customers_before = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #The number of customers remaining can be calculated by subtracting the number of customers who left from the original number of customers\n    customers_now = customers_before - customers_left\n\n    #The number of tables the waiter has can be calculated by dividing the number of remaining customers by the number of people at each table\n    tables = customers_now // c2\n\n    return tables", "mapping": {"c0": 44.0, "c1": 12.0, "c2": 8.0}}
{"question": " A store had c0 coloring books in stock. They ended up putting them on sale and getting rid of c1 of them. The put the ones they still had onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The store originally had c0 coloring books in stock\n    original_stock = c0\n\n    #They got rid of c1 coloring books\n    sold_books = c1\n\n    #The number of coloring books they still have can be calculated by subtracting the number of sold books from the original stock\n    remaining_books = original_stock - sold_books\n\n    #The number of shelves they used can be calculated by dividing the number of remaining books by the number of books on each shelf\n    shelves_used = remaining_books // c2\n\n    return shelves_used", "mapping": {"c0": 40.0, "c1": 20.0, "c2": 4.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    groups = c2\n    students_per_group = picked / groups\n\n    return students_per_group", "mapping": {"c0": 64.0, "c1": 36.0, "c2": 4.0}}
{"question": " Kaleb was selling his old games. He started out with c0 but sold c1 of them. He packed the rest up putting c2 games into each box. How many boxes did he have to use? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Kaleb started out with c0 games\n    games_before = c0\n\n    #Kaleb sold c1 games\n    sold = c1\n\n    #Kaleb has c0 - c1 games left after selling\n    games_after = games_before - sold\n\n    #Kaleb packed c2 games into each box\n    games_per_box = c2\n\n    #The number of boxes Kaleb had to use can be calculated by dividing the number of games left after selling by the number of games per box\n    boxes_used = games_after // games_per_box\n\n    return boxes_used", "mapping": {"c0": 76.0, "c1": 46.0, "c2": 5.0}}
{"question": " Jerry is at the library helping put away books. There are c0 book to put away total but a librarian takes c1 of them and leaves Jerry with the rest. If he can fit c2 books on a shelf, how many shelves will he need? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The librarian takes c1 books, so Jerry is left with c0 - c1 books\n    books_left = c0 - c1\n\n    #Jerry can fit c2 books on a shelf\n    books_per_shelf = c2\n\n    #The number of shelves Jerry will need can be calculated by dividing the number of books left by the number of books he can fit on a shelf, rounded up to the nearest integer\n    shelves_needed = math.ceil(books_left/books_per_shelf)\n\n    return shelves_needed", "mapping": {"c0": 34.0, "c1": 7.0, "c2": 3.0}}
{"question": " Nancy was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Nancy have? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Nancy started with c0 seeds\n    seeds_start = c0\n\n    #Nancy planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Nancy planted c2 seeds in each small garden\n    small_garden = c2\n\n    #The number of small gardens Nancy has can be calculated by subtracting the number of seeds planted in the big garden from the total number of seeds and then dividing by the number of seeds planted in each small garden\n    num_small_gardens = (seeds_start - big_garden) / small_garden\n\n    return num_small_gardens", "mapping": {"c0": 52.0, "c1": 28.0, "c2": 4.0}}
{"question": " Will had c0 dollars. If he spent c1 bucks on a new game, how many c2 dollar toys could he buy with the money he had left? ", "answer": [9.0], "response": "def toys_left(c0, c1, c2):\n    #Will originally had c0 dollars\n    original_money = c0\n\n    #Will spent c1 dollars on a new game\n    spent_money = c1\n\n    #Will has c0 minus c1 dollars left\n    money_left = original_money - spent_money\n\n    #The number of c2 dollar toys Will can buy with the money he has left can be calculated by dividing the money left by the cost of each toy\n    toys = money_left // c2\n\n    return toys", "mapping": {"c0": 83.0, "c1": 47.0, "c2": 4.0}}
{"question": " Bianca was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Bianca have? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Bianca started with c0 seeds\n    seeds_before = c0\n\n    #Bianca planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Bianca put c2 seeds in each of her small gardens\n    small_garden = c2\n\n    #The number of seeds Bianca used in the small gardens can be calculated by subtracting the number of seeds used in the big garden from the original number of seeds\n    seeds_small_garden = seeds_before - big_garden\n\n    #The number of small gardens Bianca has can be calculated by dividing the number of seeds used in the small gardens by the number of seeds used in each small garden\n    num_small_gardens = seeds_small_garden // small_garden\n\n    return num_small_gardens", "mapping": {"c0": 52.0, "c1": 40.0, "c2": 2.0}}
{"question": " A waiter had c0 customers in his section. If c1 of them left and the rest of his tables had c2 people at each table, how many tables did he have? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers in his section\n    customers_before = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #The number of customers remaining can be calculated by subtracting the number of customers who left from the original number of customers\n    customers_now = customers_before - customers_left\n\n    #The number of tables the waiter has can be calculated by dividing the number of remaining customers by the number of people at each table\n    tables = customers_now // c2\n\n    return tables", "mapping": {"c0": 21.0, "c1": 12.0, "c2": 3.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    groups = c2\n    students_per_group = picked / groups\n\n    return students_per_group", "mapping": {"c0": 25.0, "c1": 15.0, "c2": 2.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #Each pie takes c2 apples\n    apples_per_pie = c2\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples per pie\n    pies = apples_for_pies // apples_per_pie\n\n    return pies", "mapping": {"c0": 47.0, "c1": 27.0, "c2": 4.0}}
{"question": " Megan baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Megan baked c0 cupcakes\n    cupcakes = c0\n\n    #Todd ate c1 cupcakes\n    ate = c1\n\n    #Megan has cupcakes left after Todd ate some\n    left = cupcakes - ate\n\n    #Megan can make packages with c2 cupcakes in each package\n    package_size = c2\n\n    #The number of packages Megan can make can be calculated by dividing the number of cupcakes left by the number of cupcakes in each package\n    packages = left // package_size\n\n    return packages", "mapping": {"c0": 68.0, "c1": 32.0, "c2": 6.0}}
{"question": " A store had c0 coloring books in stock. They ended up putting them on sale and getting rid of c1 of them. The put the ones they still had onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The store originally had c0 coloring books in stock\n    original_stock = c0\n\n    #They got rid of c1 coloring books\n    sold_books = c1\n\n    #The number of coloring books they still have can be calculated by subtracting the number of sold books from the original stock\n    remaining_books = original_stock - sold_books\n\n    #The number of shelves they used can be calculated by dividing the number of remaining books by the number of books on each shelf\n    shelves_used = remaining_books // c2\n\n    return shelves_used", "mapping": {"c0": 120.0, "c1": 39.0, "c2": 9.0}}
{"question": " Isabel uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Isabel uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures minus the number of pictures in one album by the number of other albums\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 25.0, "c1": 10.0, "c2": 5.0}}
{"question": " Sarah had c0 homework problems. She finished c1 of them but still had c2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Sarah had c0 homework problems\n    total_problems = c0\n\n    #Sarah finished c1 of them\n    finished_problems = c1\n\n    #Sarah still had c2 pages of problems to do\n    remaining_pages = c2\n\n    #The number of problems on each page can be calculated by subtracting the number of finished problems from the total number of problems and then dividing by the number of remaining pages\n    problems_per_page = (total_problems - finished_problems) / remaining_pages\n\n    return problems_per_page", "mapping": {"c0": 60.0, "c1": 20.0, "c2": 5.0}}
{"question": " Mike made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Mike made c0 dollars mowing lawns over the summer\n    earnings = c0\n\n    #Mike spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money Mike has left can be calculated by subtracting his expenses from his earnings\n    money_left = earnings - expenses\n\n    #The number of c2 dollar games Mike can buy with the money he has left can be calculated by dividing the money he has left by the cost of each game\n    games = money_left // c2\n\n    return games", "mapping": {"c0": 42.0, "c1": 10.0, "c2": 8.0}}
{"question": " Will had c0 pieces of clothing to wash. He put c1 of them in one load, but decided to split the rest into c2 equal loads. How many pieces of clothing could go in each of the small loads? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Will had c0 pieces of clothing to wash\n    total_clothing = c0\n\n    #Will put c1 pieces of clothing in one load\n    first_load = c1\n\n    #Will decided to split the rest into c2 equal loads\n    remaining_clothing = total_clothing - first_load\n    small_loads = c2\n\n    #The number of pieces of clothing that could go in each of the small loads can be calculated by dividing the remaining clothing by the number of small loads\n    pieces_per_load = remaining_clothing // small_loads\n\n    return pieces_per_load", "mapping": {"c0": 59.0, "c1": 32.0, "c2": 9.0}}
{"question": " Oliver made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Oliver made c0 dollars over the summer\n    oliver_money = c0\n\n    #Oliver spent c1 dollars buying new mower blades\n    spent = c1\n\n    #The amount of money Oliver has left can be calculated by subtracting the amount he spent from the amount he made\n    left = oliver_money - spent\n\n    #The number of c2 dollar games Oliver can buy with the money he has left can be calculated by dividing the amount he has left by the cost of each game\n    games = left // c2\n\n    return games", "mapping": {"c0": 35.0, "c1": 7.0, "c2": 4.0}}
{"question": " Emily was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Emily have? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Emily started with c0 seeds\n    seeds_start = c0\n\n    #Emily planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Emily planted c2 seeds in each small garden\n    small_garden = c2\n\n    #The number of small gardens Emily has can be calculated by subtracting the number of seeds planted in the big garden from the total number of seeds and then dividing by the number of seeds planted in each small garden\n    num_small_gardens = (seeds_start - big_garden) / small_garden\n\n    return num_small_gardens", "mapping": {"c0": 42.0, "c1": 36.0, "c2": 2.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    group_size = picked / c2\n\n    return group_size", "mapping": {"c0": 17.0, "c1": 5.0, "c2": 3.0}}
{"question": " Katie's team won their dodgeball game and scored c0 points total. If Katie scored c1 of the points and everyone else scored c2 points each, how many players were on her team? ", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Katie's team scored c0 points total\n    total_points = c0\n\n    #Katie scored c1 of the points\n    katie_points = c1\n\n    #Everyone else scored c2 points each\n    other_points = c2\n\n    #The number of players on Katie's team can be calculated by subtracting Katie's points from the total points, then dividing by the points scored by each other player\n    num_players = (total_points - katie_points) / other_points\n\n    return num_players", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 4.0}}
{"question": " Megan baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Megan baked c0 cupcakes\n    cupcakes = c0\n\n    #Todd ate c1 cupcakes\n    ate = c1\n\n    #Megan has cupcakes left after Todd ate some\n    left = cupcakes - ate\n\n    #Megan can make packages with c2 cupcakes in each package\n    package_size = c2\n\n    #The number of packages Megan can make can be calculated by dividing the number of cupcakes left by the number of cupcakes in each package\n    packages = left // package_size\n\n    return packages", "mapping": {"c0": 71.0, "c1": 43.0, "c2": 7.0}}
{"question": " Wendy uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Wendy uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums (one album plus the number of other albums)\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 45.0, "c1": 27.0, "c2": 9.0}}
{"question": " A store had c0 coloring books in stock. They ended up putting them on sale and getting rid of c1 of them. The put the ones they still had onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The store originally had c0 coloring books in stock\n    original_stock = c0\n\n    #They got rid of c1 coloring books\n    sold_books = c1\n\n    #The number of coloring books they still have can be calculated by subtracting the number of sold books from the original stock\n    remaining_books = original_stock - sold_books\n\n    #The number of shelves they used can be calculated by dividing the number of remaining books by the number of books on each shelf\n    shelves_used = remaining_books // c2\n\n    return shelves_used", "mapping": {"c0": 86.0, "c1": 37.0, "c2": 7.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #Each pie takes c2 apples\n    apples_per_pie = c2\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples per pie\n    pies = apples_for_pies // apples_per_pie\n\n    return pies", "mapping": {"c0": 50.0, "c1": 5.0, "c2": 5.0}}
{"question": " Nancy had c0 homework problems. She finished c1 of them but still had c2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Nancy had c0 homework problems\n    total_problems = c0\n\n    #Nancy finished c1 of them\n    finished_problems = c1\n\n    #Nancy still had c2 pages of problems to do\n    remaining_pages = c2\n\n    #The number of problems on each page can be calculated by subtracting the number of finished problems from the total number of problems and then dividing by the number of remaining pages\n    problems_per_page = (total_problems - finished_problems) / remaining_pages\n\n    return problems_per_page", "mapping": {"c0": 101.0, "c1": 47.0, "c2": 6.0}}
{"question": " Paige had c0 files on her computer. She deleted c1 of them and put the rest into folders with c2 files in each one. How many folders did Paige end up with? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 files\n    original_files = c0\n\n    #Paige deleted c1 files\n    deleted_files = c1\n\n    #Paige now has original_files - deleted_files files left\n    remaining_files = original_files - deleted_files\n\n    #Paige puts the remaining files into folders with c2 files in each one\n    folders = remaining_files // c2\n\n    #If there are any remaining files that don't fit into a full folder, add one more folder\n    if remaining_files % c2 != 0:\n        folders += 1\n\n    return folders", "mapping": {"c0": 27.0, "c1": 9.0, "c2": 6.0}}
{"question": " For Halloween Bianca received c0 pieces of candy. She ate c1 pieces then placed the rest into piles with c2 in each pile. How many piles could she make? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Bianca received c0 pieces of candy\n    received = c0\n\n    #Bianca ate c1 pieces of candy\n    ate = c1\n\n    #Bianca has c0 - c1 pieces of candy left\n    left = received - ate\n\n    #Bianca can make left // c2 piles of candy, using integer division to get the number of full piles\n    piles = left // c2\n\n    return piles", "mapping": {"c0": 78.0, "c1": 30.0, "c2": 8.0}}
{"question": " A company invited c0 people to a luncheon, but c1 of them didn't show up. If the tables they had held c2 people each, how many tables do they need? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 people were invited to the luncheon\n    invited = c0\n\n    #c1 people didn't show up\n    no_show = c1\n\n    #The number of people who actually showed up can be calculated by subtracting the number of people who didn't show up from the number of people who were invited\n    showed_up = invited - no_show\n\n    #c2 people can sit at each table\n    table_capacity = c2\n\n    #The number of tables needed can be calculated by dividing the number of people who showed up by the table capacity and rounding up to the nearest integer\n    tables_needed = math.ceil(showed_up / table_capacity)\n\n    return tables_needed", "mapping": {"c0": 45.0, "c1": 35.0, "c2": 2.0}}
{"question": " Haley uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Haley uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures minus the number of pictures in one album by the number of other albums\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 65.0, "c1": 17.0, "c2": 6.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 102.0, "c1": 21.0, "c2": 9.0}}
{"question": " Roger had c0 pieces of clothing to wash. He put c1 of them in one load, but decided to split the rest into c2 equal loads. How many pieces of clothing could go in each of the small loads? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Roger had c0 pieces of clothing to wash\n    total_clothing = c0\n\n    #Roger put c1 pieces of clothing in one load\n    one_load = c1\n\n    #Roger decided to split the rest into c2 equal loads\n    small_loads = c2\n\n    #The number of pieces of clothing left after putting one load can be calculated by subtracting the number of pieces in one load from the total number of clothing\n    remaining_clothing = total_clothing - one_load\n\n    #The number of pieces of clothing that can go in each of the small loads can be calculated by dividing the remaining clothing by the number of small loads\n    small_load_size = remaining_clothing / small_loads\n\n    return small_load_size", "mapping": {"c0": 120.0, "c1": 48.0, "c2": 9.0}}
{"question": " Wendy picked c0 flowers for her friend\u2019s wedding. She was making bouquets with c1 flowers in each one. If c2 of the flowers wilted before the wedding, how many bouquets could she still make? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Wendy picked c0 flowers\n    picked = c0\n\n    #She was making bouquets with c1 flowers in each one\n    per_bouquet = c1\n\n    #c2 of the flowers wilted before the wedding\n    wilted = c2\n\n    #The number of bouquets Wendy can still make can be calculated by dividing the number of flowers left after the wilted ones were removed by the number of flowers in each bouquet\n    bouquets = (picked - wilted) // per_bouquet\n\n    return bouquets", "mapping": {"c0": 45.0, "c1": 5.0, "c2": 35.0}}
{"question": " Isabel baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Isabel baked c0 cupcakes\n    cupcakes = c0\n\n    #Todd ate c1 cupcakes\n    ate = c1\n\n    #The number of cupcakes left after Todd ate can be calculated by subtracting the number of cupcakes Todd ate from the original number of cupcakes\n    left = cupcakes - ate\n\n    #The number of packages Isabel can make can be calculated by dividing the number of cupcakes left by the number of cupcakes in each package\n    packages = left // c2\n\n    return packages", "mapping": {"c0": 39.0, "c1": 21.0, "c2": 3.0}}
{"question": " Sarah had c0 homework problems. She finished c1 of them but still had c2 pages of problems to do. If each page has the same number of problems on it, how many problems are on each page? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Sarah had c0 homework problems\n    total_problems = c0\n\n    #Sarah finished c1 of them\n    finished_problems = c1\n\n    #Sarah still had c2 pages of problems to do\n    remaining_pages = c2\n\n    #The number of problems on each page can be calculated by subtracting the number of finished problems from the total number of problems and then dividing by the number of remaining pages\n    problems_per_page = (total_problems - finished_problems) / remaining_pages\n\n    return problems_per_page", "mapping": {"c0": 55.0, "c1": 6.0, "c2": 7.0}}
{"question": " There are c0 students trying out for the school's trivia teams. If c1 of them didn't get picked for the team and the rest were put into c2 groups, how many students would be in each group? ", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #c0 students tried out for the trivia team\n    students = c0\n\n    #c1 students didn't get picked for the team\n    not_picked = c1\n\n    #The number of students who made it onto the team can be calculated by subtracting the number of students who didn't make it from the total number of students\n    picked = students - not_picked\n\n    #The number of students in each group can be calculated by dividing the number of picked students by the number of groups\n    group_size = picked / c2\n\n    return group_size", "mapping": {"c0": 58.0, "c1": 10.0, "c2": 8.0}}
{"question": " Paige picked c0 flowers for her friend\u2019s wedding. She was making bouquets with c1 flowers in each one. If c2 of the flowers wilted before the wedding, how many bouquets could she still make? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Paige picked c0 flowers\n    picked = c0\n\n    #She was making bouquets with c1 flowers in each one\n    per_bouquet = c1\n\n    #c2 of the flowers wilted before the wedding\n    wilted = c2\n\n    #The number of bouquets Paige can still make can be calculated by dividing the number of flowers left after the wilted ones were removed by the number of flowers in each bouquet\n    bouquets = (picked - wilted) // per_bouquet\n\n    return bouquets", "mapping": {"c0": 53.0, "c1": 7.0, "c2": 18.0}}
{"question": " A waiter had c0 customers in his section. If c1 of them left and the rest of his tables had c2 people at each table, how many tables did he have? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The waiter originally had c0 customers in his section\n    customers_before = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #The number of customers remaining can be calculated by subtracting the number of customers who left from the original number of customers\n    customers_now = customers_before - customers_left\n\n    #The number of tables the waiter has can be calculated by dividing the number of remaining customers by the number of people at each table\n    tables = customers_now // c2\n\n    return tables", "mapping": {"c0": 22.0, "c1": 14.0, "c2": 4.0}}
{"question": " Luke was selling his old games. He started out with c0 but sold c1 of them. He packed the rest up putting c2 games into each box. How many boxes did he have to use? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Luke started out with c0 games\n    games_before = c0\n\n    #Luke sold c1 games\n    sold = c1\n\n    #Luke has c0 - c1 games left after selling\n    games_after = games_before - sold\n\n    #Luke packed c2 games into each box\n    games_per_box = c2\n\n    #The number of boxes Luke had to use can be calculated by dividing the number of games left after selling by the number of games per box\n    boxes_used = games_after // games_per_box\n\n    return boxes_used", "mapping": {"c0": 39.0, "c1": 19.0, "c2": 4.0}}
{"question": " Haley baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Haley baked c0 cupcakes\n    cupcakes = c0\n\n    #Todd ate c1 cupcakes\n    ate = c1\n\n    #Haley has cupcakes left after Todd ate some\n    left = cupcakes - ate\n\n    #Haley can make packages with c2 cupcakes in each package\n    package_size = c2\n\n    #The number of packages Haley can make can be calculated by dividing the number of cupcakes left by the number of cupcakes in each package\n    packages = left // package_size\n\n    return packages", "mapping": {"c0": 20.0, "c1": 11.0, "c2": 3.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 13.0, "c1": 7.0, "c2": 2.0}}
{"question": " A store had c0 coloring books in stock. They ended up putting them on sale and getting rid of c1 of them. The put the ones they still had onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #The store originally had c0 coloring books in stock\n    original_stock = c0\n\n    #They got rid of c1 coloring books\n    sold_books = c1\n\n    #The number of coloring books they still have can be calculated by subtracting the number of sold books from the original stock\n    remaining_books = original_stock - sold_books\n\n    #The number of shelves they used can be calculated by dividing the number of remaining books by the number of books on each shelf\n    shelves_used = remaining_books // c2\n\n    return shelves_used", "mapping": {"c0": 27.0, "c1": 6.0, "c2": 7.0}}
{"question": " Wendy had c0 files on her computer. She deleted c1 of them and put the rest into folders with c2 files in each one. How many folders did Wendy end up with? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Wendy originally had c0 files\n    original_files = c0\n\n    #Wendy deleted c1 files\n    deleted_files = c1\n\n    #Wendy now has original_files - deleted_files files left\n    remaining_files = original_files - deleted_files\n\n    #Wendy puts the remaining files into folders with c2 files in each one\n    folders = remaining_files // c2\n\n    #If there are any remaining files that don't fit into a full folder, add one more folder\n    if remaining_files % c2 != 0:\n        folders += 1\n\n    return folders", "mapping": {"c0": 82.0, "c1": 37.0, "c2": 5.0}}
{"question": " Kaleb had c0 dollars. If he spent c1 bucks on a new game, how many c2 dollar toys could he buy with the money he had left? ", "answer": [2.0], "response": "def toys_left(c0, c1, c2):\n    # Kaleb originally had c0 dollars\n    original_money = c0\n\n    # Kaleb spent c1 dollars on a new game\n    spent_money = c1\n\n    # Kaleb has c0 - c1 dollars left\n    money_left = original_money - spent_money\n\n    # Kaleb can buy as many c2 dollar toys as possible with the money he has left\n    toys = money_left // c2\n\n    return toys", "mapping": {"c0": 12.0, "c1": 8.0, "c2": 2.0}}
{"question": " Sarah was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Sarah have? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Sarah started with c0 seeds\n    seeds_start = c0\n\n    #Sarah planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Sarah planted c2 seeds in each small garden\n    small_garden = c2\n\n    #The number of small gardens Sarah has can be calculated by dividing the remaining seeds after planting the big garden by the number of seeds planted in each small garden\n    remaining_seeds = seeds_start - big_garden\n    num_small_gardens = remaining_seeds // small_garden\n\n    return num_small_gardens", "mapping": {"c0": 21.0, "c1": 12.0, "c2": 3.0}}
{"question": " Nancy uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Nancy uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums (including the one album with c1 pictures)\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 51.0, "c1": 11.0, "c2": 8.0}}
{"question": " A company invited c0 people to a luncheon, but c1 of them didn't show up. If the tables they had held c2 people each, how many tables do they need? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #c0 people were invited to the luncheon\n    invited = c0\n\n    #c1 people didn't show up\n    no_show = c1\n\n    #The number of people who actually showed up can be calculated by subtracting the number of people who didn't show up from the number of people who were invited\n    showed_up = invited - no_show\n\n    #c2 people can sit at each table\n    table_capacity = c2\n\n    #The number of tables needed can be calculated by dividing the number of people who showed up by the table capacity and rounding up to the nearest integer\n    tables_needed = math.ceil(showed_up / table_capacity)\n\n    return tables_needed", "mapping": {"c0": 24.0, "c1": 10.0, "c2": 7.0}}
{"question": " Bianca's team won their dodgeball game and scored c0 points total. If Bianca scored c1 of the points and everyone else scored c2 points each, how many players were on her team? ", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Bianca's team scored c0 points total\n    total_points = c0\n\n    #Bianca scored c1 of the points\n    bianca_points = c1\n\n    #Everyone else scored c2 points each\n    other_points = c2\n\n    #The number of players on Bianca's team can be calculated by subtracting Bianca's points from the total points, then dividing by the points scored by each other player\n    num_players = (total_points - bianca_points) / other_points\n\n    return num_players", "mapping": {"c0": 75.0, "c1": 45.0, "c2": 6.0}}
{"question": " For Halloween Emily received c0 pieces of candy. She ate c1 pieces then placed the rest into piles with c2 in each pile. How many piles could she make? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Emily received c0 pieces of candy\n    received = c0\n\n    #Emily ate c1 pieces of candy\n    ate = c1\n\n    #Emily has c0 - c1 pieces of candy left\n    left = received - ate\n\n    #Emily can make left // c2 piles of candy, using integer division to get the number of full piles\n    piles = left // c2\n\n    return piles", "mapping": {"c0": 54.0, "c1": 33.0, "c2": 7.0}}
{"question": " Haley was planting vegetables in her garden. She started with c0 seeds and planted c1 of them in the big garden and in each of her small gardens put c2 seeds each. How many small gardens did Haley have? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Haley started with c0 seeds\n    seeds_start = c0\n\n    #Haley planted c1 seeds in the big garden\n    big_garden = c1\n\n    #Haley put c2 seeds in each of her small gardens\n    small_garden = c2\n\n    #The number of small gardens Haley has can be calculated by subtracting the number of seeds planted in the big garden from the original number of seeds, and then dividing by the number of seeds planted in each small garden\n    num_small_gardens = (seeds_start - big_garden) / small_garden\n\n    return num_small_gardens", "mapping": {"c0": 56.0, "c1": 35.0, "c2": 3.0}}
{"question": " A store had c0 coloring books in stock. They ended up putting them on sale and getting rid of c1 of them. The put the ones they still had onto shelves with c2 on each shelf. How many shelves did they use? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #The store originally had c0 coloring books in stock\n    original_stock = c0\n\n    #They got rid of c1 coloring books\n    sold_books = c1\n\n    #The number of coloring books they still have can be calculated by subtracting the number of sold books from the original stock\n    remaining_books = original_stock - sold_books\n\n    #The number of shelves they used can be calculated by dividing the number of remaining books by the number of books on each shelf\n    shelves_used = remaining_books // c2\n\n    return shelves_used", "mapping": {"c0": 48.0, "c1": 38.0, "c2": 5.0}}
{"question": " Roger is at the library helping put away books. There are c0 book to put away total but a librarian takes c1 of them and leaves Roger with the rest. If he can fit c2 books on a shelf, how many shelves will he need? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #The number of books Roger has to put away after the librarian takes some can be calculated by subtracting the number of books the librarian took from the total number of books\n    books_left = c0 - c1\n\n    #The number of shelves Roger will need can be calculated by dividing the number of books left by the number of books that can fit on a shelf, and rounding up to the nearest integer\n    shelves_needed = math.ceil(books_left/c2)\n\n    return shelves_needed", "mapping": {"c0": 14.0, "c1": 2.0, "c2": 3.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 56.0, "c1": 24.0, "c2": 4.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #Each pie takes c2 apples\n    apples_per_pie = c2\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples per pie\n    pies = apples_for_pies // apples_per_pie\n\n    return pies", "mapping": {"c0": 86.0, "c1": 30.0, "c2": 8.0}}
{"question": " Jerry had c0 pieces of clothing to wash. He put c1 of them in one load, but decided to split the rest into c2 equal loads. How many pieces of clothing could go in each of the small loads? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 pieces of clothing to wash\n    total_clothing = c0\n\n    #Jerry put c1 pieces of clothing in one load\n    first_load = c1\n\n    #Jerry decided to split the rest into c2 equal loads\n    remaining_clothing = total_clothing - first_load\n    small_loads = c2\n\n    #The number of pieces of clothing that could go in each of the small loads can be calculated by dividing the remaining clothing by the number of small loads\n    pieces_per_load = remaining_clothing // small_loads\n\n    return pieces_per_load", "mapping": {"c0": 60.0, "c1": 40.0, "c2": 5.0}}
{"question": " Mike made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Mike made c0 dollars mowing lawns over the summer\n    earnings = c0\n\n    #Mike spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money Mike has left can be calculated by subtracting his expenses from his earnings\n    money_left = earnings - expenses\n\n    #The number of c2 dollar games Mike can buy with the money he has left can be calculated by dividing the money he has left by the cost of each game\n    games = money_left // c2\n\n    return games", "mapping": {"c0": 69.0, "c1": 24.0, "c2": 5.0}}
{"question": " Will made c0 dollars mowing lawns over the summer. If he spent c1 dollars buying new mower blades, how many c2 dollar games could he buy with the money he had left? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Will made c0 dollars mowing lawns over the summer\n    income = c0\n\n    #Will spent c1 dollars buying new mower blades\n    expenses = c1\n\n    #The amount of money Will has left can be calculated by subtracting his expenses from his income\n    money_left = income - expenses\n\n    #The number of c2 dollar games Will can buy with the money he has left can be calculated by dividing the money he has left by the cost of each game\n    games = money_left // c2\n\n    return games", "mapping": {"c0": 104.0, "c1": 41.0, "c2": 9.0}}
{"question": " For Halloween Bianca received c0 pieces of candy. She ate c1 pieces then placed the rest into piles with c2 in each pile. How many piles could she make? ", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Bianca received c0 pieces of candy\n    received = c0\n\n    #Bianca ate c1 pieces of candy\n    ate = c1\n\n    #Bianca has c0 - c1 pieces of candy left\n    left = received - ate\n\n    #Bianca can make left // c2 piles of candy, using integer division to get the number of full piles\n    piles = left // c2\n\n    return piles", "mapping": {"c0": 32.0, "c1": 12.0, "c2": 5.0}}
{"question": " Luke was selling his old games. He started out with c0 but sold c1 of them. He packed the rest up putting c2 games into each box. How many boxes did he have to use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Luke started out with c0 games\n    games_before = c0\n\n    #Luke sold c1 games\n    sold = c1\n\n    #Luke has c0 - c1 games left after selling\n    games_after = games_before - sold\n\n    #Luke packed c2 games into each box\n    games_per_box = c2\n\n    #The number of boxes Luke had to use can be calculated by dividing the number of games left after selling by the number of games per box\n    boxes_used = games_after // games_per_box\n\n    return boxes_used", "mapping": {"c0": 57.0, "c1": 39.0, "c2": 2.0}}
{"question": " A pet store had c0 puppies. In one day they sold c1 of them and put the rest into cages with c2 in each cage. How many cages did they use? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #The pet store originally had c0 puppies\n    puppies_before = c0\n\n    #They sold c1 puppies\n    sold = c1\n\n    #The number of puppies left after selling can be calculated by subtracting the number of puppies sold from the original number of puppies\n    puppies_after = puppies_before - sold\n\n    #The number of cages they used can be calculated by dividing the number of puppies left after selling by the number of puppies in each cage\n    cages_used = puppies_after // c2\n\n    return cages_used", "mapping": {"c0": 88.0, "c1": 34.0, "c2": 6.0}}
{"question": " Katie had c0 files on her computer. She deleted c1 of them and put the rest into folders with c2 files in each one. How many folders did Katie end up with? ", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Katie originally had c0 files\n    original_files = c0\n\n    #Katie deleted c1 files\n    deleted_files = c1\n\n    #Katie now has original_files - deleted_files files\n    remaining_files = original_files - deleted_files\n\n    #Katie puts the remaining files into folders with c2 files in each one\n    folders = remaining_files // c2\n\n    #If there are any remaining files that don't fit into a full folder, add one more folder\n    if remaining_files % c2 != 0:\n        folders += 1\n\n    return folders", "mapping": {"c0": 85.0, "c1": 40.0, "c2": 5.0}}
{"question": " Roger had c0 dollars. If he spent c1 bucks on a new game, how many c2 dollar toys could he buy with the money he had left? ", "answer": [3.0], "response": "def toys_left(c0, c1, c2):\n    #Roger originally had c0 dollars\n    roger_money = c0\n\n    #Roger spent c1 dollars on a new game\n    spent = c1\n\n    #Roger has c0 minus c1 dollars left\n    money_left = roger_money - spent\n\n    #The number of c2 dollar toys Roger can buy with the money he has left can be calculated by dividing the money left by the cost of each toy\n    toys = money_left // c2\n\n    return toys", "mapping": {"c0": 68.0, "c1": 47.0, "c2": 7.0}}
{"question": " Tom bought c0 tickets at the state fair. He spent c1 tickets at the 'dunk a clown' booth and decided to use the rest on rides. If each ride cost c2 tickets, how many rides could he go on? ", "answer": [3.0], "response": "def rides_available(c0, c1, c2):\n    #Tom bought c0 tickets\n    tickets_bought = c0\n\n    #Tom spent c1 tickets at the 'dunk a clown' booth\n    tickets_spent = c1\n\n    #Tom has c0 - c1 tickets left to spend on rides\n    tickets_left = tickets_bought - tickets_spent\n\n    #Each ride costs c2 tickets\n    ride_cost = c2\n\n    #Tom can go on this many rides\n    rides = tickets_left // ride_cost\n\n    return rides", "mapping": {"c0": 40.0, "c1": 28.0, "c2": 4.0}}
{"question": " The cafeteria had c0 apples. For lunch they handed out c1 to students and decided to use the rest to make pies. If each pie takes c2 apples, how many pies could they make? ", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #The cafeteria had c0 apples\n    apples_before = c0\n\n    #They handed out c1 apples to students\n    handed_out = c1\n\n    #The number of apples left for pies can be calculated by subtracting the number of apples handed out from the original number of apples\n    apples_for_pies = apples_before - handed_out\n\n    #Each pie takes c2 apples\n    apples_per_pie = c2\n\n    #The number of pies they can make can be calculated by dividing the number of apples for pies by the number of apples per pie\n    pies = apples_for_pies // apples_per_pie\n\n    return pies", "mapping": {"c0": 75.0, "c1": 19.0, "c2": 8.0}}
{"question": " Sarah baked c0 cupcakes for her school's bake sale. If her brother, Todd, ate c1 of them how many packages could she make if she put c2 cupcake in each package? ", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Sarah baked c0 cupcakes\n    cupcakes = c0\n\n    #Todd ate c1 cupcakes\n    ate = c1\n\n    #The number of cupcakes left after Todd ate can be calculated by subtracting the number of cupcakes Todd ate from the original number of cupcakes\n    left = cupcakes - ate\n\n    #The number of packages Sarah can make can be calculated by dividing the number of cupcakes left by the number of cupcakes in each package\n    packages = left // c2\n\n    return packages", "mapping": {"c0": 38.0, "c1": 14.0, "c2": 8.0}}
{"question": " Nancy uploaded c0 pictures to Facebook. She put c1 pics into one album and put the rest into c2 different albums. How many pictures were in each album? ", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Nancy uploaded c0 pictures to Facebook\n    total_pics = c0\n\n    #She put c1 pics into one album\n    one_album = c1\n\n    #She put the rest into c2 different albums\n    other_albums = c2\n\n    #The number of pictures in each album can be calculated by dividing the total number of pictures by the number of albums (including the one album with c1 pictures)\n    pics_per_album = (total_pics - one_album) / other_albums\n\n    return pics_per_album", "mapping": {"c0": 41.0, "c1": 37.0, "c2": 2.0}}
