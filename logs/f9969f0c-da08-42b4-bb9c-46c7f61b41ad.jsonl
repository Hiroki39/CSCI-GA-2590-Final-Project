{"question": "Each pack of dvds costs c0 dollars. If there is a discount of c1 dollars on each packHow much do you have to pay to buy each pack?", "answer": [51.0], "response": "def Problem(c0, c1):\n    #each pack of dvds costs c0 dollars\n    original_price = c0\n\n    #there is a discount of c1 dollars on each pack\n    discount = c1\n\n    #the final price after discount can be calculated by subtracting the discount from the original price\n    final_price = original_price - discount\n\n    return final_price", "mapping": {"c0": 76.0, "c1": 25.0}}
{"question": "Dan had $ c0 left with him after he bought a candy bar. If he had $ c1 at the startHow much did the candy bar cost?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Dan had c0 left after buying a candy bar\n    money_left = c0\n\n    #Dan had c1 at the start\n    money_start = c1\n\n    #The cost of the candy bar can be calculated by subtracting the money left from the money Dan had at the start\n    candy_cost = money_start - money_left\n\n    return candy_cost", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "Paco had c0 salty cookies and c1 sweet cookies. He ate c2 sweet cookies and c3 salty cookies.How many salty cookies did Paco have left?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 salty cookies and c1 sweet cookies\n    salty_cookies = c0\n\n    #He ate c2 sweet cookies and c3 salty cookies\n    eaten_sweet = c2\n    eaten_salty = c3\n\n    #The number of salty cookies Paco has left can be calculated by subtracting the number of salty cookies he ate from the original number of salty cookies\n    remaining_salty = salty_cookies - eaten_salty\n\n    return remaining_salty", "mapping": {"c0": 26.0, "c1": 17.0, "c2": 14.0, "c3": 9.0}}
{"question": "c0 children were riding on the bus. At the bus stop some children got off the bus. Then there were c1 children left on the bus.How many children got off the bus at the bus stop?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #there were originally c0 children on the bus\n    children_before = c0\n\n    #there are c1 children left on the bus after some got off\n    children_after = c1\n\n    #The number of children who got off the bus can be calculated by subtracting the number of children left on the bus from the original number of children\n    got_off = children_before - children_after\n\n    return got_off", "mapping": {"c0": 43.0, "c1": 21.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many more children got on the bus than those that got off?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    original = c0\n\n    #c1 children got on the bus while some got off\n    net_change = c1 - (c2 - c0)\n\n    #The number of children that got on the bus more than those that got off can be calculated by subtracting the net change from the number of children that got on the bus\n    more_on = c1 - net_change\n\n    return more_on", "mapping": {"c0": 28.0, "c1": 82.0, "c2": 30.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much more money did she collect at the atm than she spent at the supermarket?", "answer": [46.0], "response": "def Problem(c0, c1, c2):\n    #Olivia had c0 dollars in her wallet\n    initial_money = c0\n\n    #She collected c1 more dollars from an atm\n    atm_money = c1\n\n    #After visiting the supermarket, she had c2 dollars left\n    remaining_money = c2\n\n    #The amount of money she spent at the supermarket can be calculated by subtracting the remaining money from the initial money\n    spent_money = initial_money - remaining_money\n\n    #The difference between the money she collected from the atm and the money she spent at the supermarket can be calculated by subtracting the spent money from the atm money\n    difference = atm_money - spent_money\n\n    return difference", "mapping": {"c0": 3.0, "c1": 49.0, "c2": 49.0}}
{"question": "Jerry had some action figures on a shelf in his room. Later he added c0 more action figures to the shelf. If there are a total of c1 action figures on his shelf nowHow many action figures did he have initially on the shelf?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef initial_figures(c0, c1):\n    # Jerry had some action figures on the shelf\n    # Let's call the initial number of action figures x\n    x = c1 - c0\n    \n    return x\n\n# We can test the function with some values\nprint(initial_figures(5, 12)) # Output should be 7\nprint(initial_figures(10, 25)) # Output should be 15", "mapping": {"c0": 7.0, "c1": 10.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many more cookies did he eat than those he gave to his friend?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He gave c1 cookies to his friend\n    cookies_given = c1\n\n    #He ate c2 cookies\n    cookies_eaten = c2\n\n    #The difference between the number of cookies he ate and the number of cookies he gave to his friend can be calculated by subtracting the number of cookies given from the number of cookies eaten\n    difference = cookies_eaten - cookies_given\n\n    return difference", "mapping": {"c0": 41.0, "c1": 9.0, "c2": 18.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour does she need to add?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #the recipe calls for c1 cups of flour\n    flour_needed = c1\n\n    #Mary already put in c3 cups of flour\n    flour_used = c3\n\n    #The number of cups of flour Mary still needs to add can be calculated by subtracting the amount of flour used from the amount of flour needed\n    flour_remaining = flour_needed - flour_used\n\n    return flour_remaining", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 15.0, "c3": 6.0}}
{"question": "A waiter had some customers. After c0 customers left he still had c1 customers.How many customers did he have at the start?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #after c0 customers left, the waiter had c1 customers\n    customers_left = c0\n    customers_after = c1\n\n    #the number of customers at the start can be calculated by adding the number of customers who left to the number of customers after\n    customers_start = customers_left + customers_after\n\n    return customers_start", "mapping": {"c0": 9.0, "c1": 12.0}}
{"question": "c0 birds were sitting on the fence. c1 more storks and c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 birds on the fence\n    birds_before = c0\n\n    #c1 more storks and c2 more birds came to join them\n    storks = c1\n    birds = c2\n\n    #The total number of birds on the fence after the new arrivals\n    birds_after = birds_before + storks + birds\n\n    #The difference between the number of storks and birds on the fence\n    difference = storks - birds\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 2.0}}
{"question": "They decided to hold the party in their backyard. If they have c0 sets of tables and each set has c1 chairsHow many chairs do they have in the backyard?", "answer": [143.0], "response": "def Problem(c0, c1):\n    #each set of tables has c1 chairs\n    chairs_per_set = c1\n\n    #there are c0 sets of tables\n    sets_of_tables = c0\n\n    #The total number of chairs can be calculated by multiplying the number of sets of tables by the number of chairs per set\n    total_chairs = chairs_per_set * sets_of_tables\n\n    return total_chairs", "mapping": {"c0": 11.0, "c1": 13.0}}
{"question": "In a school there are c0 more girls than boys. If there are c1 girlsHow many pupils are there in that school?", "answer": [926.0], "response": "def Problem(c0, c1):\n    #there are c1 girls in the school\n    girls = c1\n\n    #there are c0 more girls than boys, so we can calculate the number of boys by subtracting c0 from the number of girls\n    boys = girls - c0\n\n    #the total number of pupils is the sum of boys and girls\n    pupils = boys + girls\n\n    return pupils", "mapping": {"c0": 458.0, "c1": 692.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. Dean is c1 feet taller than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [255.0], "response": "def Problem(c0, c1, c2):\n    #Dean's height is c1 feet taller than Ron\n    ron_height = c2\n    dean_height = ron_height + c1\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * dean_height\n\n    return water_depth", "mapping": {"c0": 15.0, "c1": 4.0, "c2": 13.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many birds are sitting on the fence?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 birds on the fence\n    birds_before = c0\n\n    #c1 more birds and c2 more storks came to join them\n    birds_arrived = c1 + c2\n\n    #The number of birds sitting on the fence now can be calculated by adding the number of birds arrived to the original number of birds\n    birds_after = birds_before + birds_arrived\n\n    return birds_after", "mapping": {"c0": 6.0, "c1": 4.0, "c2": 8.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco ' dad lost c1 pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh now?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the total weight of strawberries collected by Marco and his dad is c0 pounds\n    total_weight = c0\n\n    #on the way back, Marco's dad lost c1 pounds of strawberries\n    lost_weight = c1\n\n    #now Marco's strawberries weigh c2 pounds\n    marco_weight = c2\n\n    #the weight of his dad's strawberries can be calculated by subtracting Marco's strawberries weight from the total weight and then subtracting the lost weight\n    dad_weight = total_weight - marco_weight - lost_weight\n\n    return dad_weight", "mapping": {"c0": 36.0, "c1": 8.0, "c2": 12.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more girls than boysHow many boys are there in that school?", "answer": [469.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more girls than boys\n    #so the number of boys is c1 less than the number of girls\n    boys = girls - c1\n\n    return boys", "mapping": {"c0": 697.0, "c1": 228.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls and c3 more boys joined the school.How many girls are there in the school now?", "answer": [1414.0], "response": "def count_girls(c0, c1, c2, c3):\n    #total number of girls in the school\n    girls = c0 + c2\n\n    return girls", "mapping": {"c0": 732.0, "c1": 761.0, "c2": 682.0, "c3": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many wrappers did danny have at first?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    bottle_caps_found = c0\n    wrappers_found = c1\n\n    #Now he has c2 bottle caps and c3 wrappers in his collection\n    bottle_caps_collected = c2\n    wrappers_collected = c3\n\n    #We need to find out how many wrappers Danny had at first\n    #We can start by subtracting the number of wrappers he collected from the total number of wrappers he has now\n    wrappers_before = wrappers_collected - (c3 - c1)\n\n    #Next, we need to add the number of bottle caps he found to the number of wrappers he had before\n    total_wrappers_before = wrappers_before + bottle_caps_found\n\n    return total_wrappers_before", "mapping": {"c0": 22.0, "c1": 30.0, "c2": 17.0, "c3": 57.0}}
{"question": "Paul got a box of c0 erasers and c1 crayons for his birthday. At the end of the school year he only had c2 crayons left while not having lost a single eraser.How many more crayons than erasers did he have left?", "answer": [66.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 erasers and c1 crayons for his birthday\n    erasers = c0\n    crayons = c1\n\n    #At the end of the school year, he had c2 crayons left\n    crayons_left = c2\n\n    #Paul did not lose any erasers, so he still has c0 erasers left\n    erasers_left = c0\n\n    #The difference between the number of crayons left and erasers left is how many more crayons than erasers he has left\n    difference = crayons_left - erasers_left\n\n    return difference", "mapping": {"c0": 457.0, "c1": 617.0, "c2": 523.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many cakes does baker still have?", "answer": [186.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #Baker bought c2 new cakes\n    cakes_bought = c2\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes sold and adding the number of cakes bought from the original number of cakes\n    cakes_after = cakes_before - cakes_sold + cakes_bought\n\n    return cakes_after", "mapping": {"c0": 121.0, "c1": 105.0, "c2": 170.0}}
{"question": "An industrial machine worked for c0 minutes. It can make c1 shirts a minute.How many shirts did machine make?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #the machine worked for c0 minutes\n    minutes_worked = c0\n\n    #the machine can make c1 shirts a minute\n    shirts_per_minute = c1\n\n    #The number of shirts the machine made can be calculated by multiplying the number of minutes worked by the number of shirts made per minute\n    shirts_made = minutes_worked * shirts_per_minute\n\n    return shirts_made", "mapping": {"c0": 5.0, "c1": 4.0}}
{"question": "The bananas in Philip's collection are organized into groups of size c0. If there are a total of c1 bananas in Philip's banana collectionHow many groups are there?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #the bananas are organized into groups of size c0\n    group_size = c0\n\n    #there are a total of c1 bananas in the collection\n    total_bananas = c1\n\n    #The number of groups can be calculated by dividing the total number of bananas by the group size\n    num_groups = total_bananas // group_size\n\n    return num_groups", "mapping": {"c0": 18.0, "c1": 180.0}}
{"question": "There were some birds sitting on the fence. c0 more birds came to join them. If there are a total of c1 birds on the fence nowHow many birds had been sitting on the fence at the start?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #c0 more birds came to join the birds sitting on the fence\n    joined = c0\n\n    #there are a total of c1 birds on the fence now\n    total = c1\n\n    #The number of birds sitting on the fence at the start can be calculated by subtracting the number of birds joined from the total number of birds\n    sitting = total - joined\n\n    return sitting", "mapping": {"c0": 4.0, "c1": 5.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf and removed some of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he remove from the shelf?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jerry had c0 action figures on the shelf\n    initial_figures = c0\n\n    #He added c1 more action figures to the shelf\n    added_figures = c1\n\n    #Now there are c2 action figures on the shelf\n    current_figures = c2\n\n    #The number of action figures he removed can be calculated by subtracting the initial number of figures and the added figures from the current number of figures\n    removed_figures = current_figures - initial_figures - added_figures\n\n    return removed_figures", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 6.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps did danny find at the park?", "answer": [60.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    bottle_caps_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    wrappers_in_collection = c3\n    bottle_caps_in_collection = c2\n\n    #Danny found x more wrappers than bottle caps at the park\n    x = wrappers_found - bottle_caps_found\n\n    #Danny now has y more wrappers than bottle caps in his collection\n    y = wrappers_in_collection - bottle_caps_in_collection\n\n    #The difference between x and y is the answer to the problem\n    answer = y - x\n\n    return answer", "mapping": {"c0": 65.0, "c1": 5.0, "c2": 31.0, "c3": 9.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food from a total of c0 choices. If c1 students suggested adding mashed potatoes c2 suggested adding bacon to the menu and the rest did not participateHow many students participated in the suggestion of new food items?", "answer": [488.0], "response": "def Problem(c0, c1, c2):\n    #total number of choices is c0\n    total_choices = c0\n\n    #number of students who suggested adding mashed potatoes is c1\n    mashed_potatoes = c1\n\n    #number of students who suggested adding bacon is c2\n    bacon = c2\n\n    #number of students who did not participate can be calculated by subtracting the number of students who suggested from the total number of students\n    not_participated = total_choices - mashed_potatoes - bacon\n\n    #number of students who participated can be calculated by adding the number of students who suggested mashed potatoes and bacon\n    participated = mashed_potatoes + bacon\n\n    return participated", "mapping": {"c0": 66.0, "c1": 450.0, "c2": 38.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many crackers and cakes did each person eat?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    crackers_per_person = c1 / c0\n    cakes_per_person = c2 / c0\n\n    return crackers_per_person, cakes_per_person\n\n#The function returns the number of crackers and cakes each person ate, which is simply the total number of crackers and cakes divided by the number of friends.", "mapping": {"c0": 28.0, "c1": 13.0, "c2": 15.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many bottles of regular soda and diet soda did they have altogether?", "answer": [89.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of regular and diet soda bottles\n    total = c0 + c1\n    return total", "mapping": {"c0": 49.0, "c1": 40.0, "c2": 6.0}}
{"question": "Dan has $ c0. He bought c1 candy bar for $ c2, each one costing the same amount of money.How much did each candy bar cost?", "answer": [2.0], "response": "def candy_bar_cost(c0, c1, c2):\n    # Dan has c0 dollars\n    dan_money = c0\n\n    # Dan bought c1 candy bars for c2 dollars each\n    candy_bars = c1\n    cost_per_bar = c2\n\n    # The cost per candy bar can be calculated by dividing the total cost by the number of candy bars\n    cost_per_bar = (dan_money - (candy_bars * cost_per_bar)) / candy_bars\n\n    return cost_per_bar", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 4.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags worth of cans.How many more bags did she find on the next day than she had on monday?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Tiffany had c0 bags of cans on Monday\n    bags_monday = c0\n\n    #She found c1 more bags worth of cans the next day\n    bags_tuesday = bags_monday + c1\n\n    #The number of bags she found on Tuesday can be calculated by subtracting the number of bags she had on Monday from the number of bags she had on Tuesday\n    bags_found = bags_tuesday - bags_monday\n\n    return bags_found", "mapping": {"c0": 7.0, "c1": 12.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many roses did she cut?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c2 - roses_before\n    orchids_cut = c3 - orchids_before\n\n    #The number of roses she cut can be calculated by subtracting the original number of roses from the current number of roses\n    return roses_cut", "mapping": {"c0": 15.0, "c1": 62.0, "c2": 17.0, "c3": 96.0}}
{"question": "There are some baskets of peaches. Each basket has c0 red peaches and c1 green peaches. If there are a total of c2 peaches in all basketsHow many baskets of peaches are there?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c0 red peaches and c1 green peaches\n    #the total number of peaches in all baskets is c2\n    #let's assume there are x baskets in total\n\n    #the total number of red peaches is c0 times the number of baskets\n    total_red = c0 * x\n\n    #the total number of green peaches is c1 times the number of baskets\n    total_green = c1 * x\n\n    #the total number of peaches is the sum of red and green peaches\n    total_peaches = total_red + total_green\n\n    #if the total number of peaches matches c2, then x is the number of baskets\n    if total_peaches == c2:\n        return x\n\n    #if the total number of peaches doesn't match c2, then we need to adjust the number of baskets\n    else:\n        #let's assume there are y additional baskets needed\n        y = (c2 - total_peaches) / (c0 + c1)\n\n        #round up y to the nearest integer\n        y = math.ceil(y)\n\n        #the total number of baskets is x + y\n        return x + y", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 7.0}}
{"question": "There were c0 dollars in Olivia's wallet. She spent c1 dollars at a supermarket.How much money does she have left?", "answer": [63.0], "response": "def Problem(c0, c1):\n    #there were originally c0 dollars in Olivia's wallet\n    money_before = c0\n\n    #she spent c1 dollars at the supermarket\n    spent = c1\n\n    #The amount of money she has left can be calculated by subtracting the amount she spent from the original amount of money\n    money_left = money_before - spent\n\n    return money_left", "mapping": {"c0": 78.0, "c1": 15.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and some more in the evening. If he received a total of c2 emails in the dayHow many emails did Jack receive in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning and c1 emails in the afternoon\n    morning_emails = c0\n    afternoon_emails = c1\n\n    #Jack received a total of c2 emails in the day\n    total_emails = c2\n\n    #The number of emails Jack received in the evening can be calculated by subtracting the total number of emails from the sum of morning and afternoon emails\n    evening_emails = total_emails - (morning_emails + afternoon_emails)\n\n    #The number of emails Jack received in the afternoon is simply c1\n    return afternoon_emails", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 10.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1. Then his friend have him $ c2 How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_cost = c1\n\n    #Dan's friend gave him c2 dollars\n    friend_gave = c2\n\n    #The amount of money Dan has left can be calculated by subtracting the cost of the candy bar from the original amount of money and adding the amount his friend gave him\n    money_after = money_before - candy_cost + friend_gave\n\n    return money_after", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 5.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If there were c1 visitors on that dayHow many visited the Buckingham palace within c2 days?", "answer": [949.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #c0 visitors came to the Buckingham palace on the previous day\n    visitors_previous_day = c0\n\n    #there were c1 visitors on the day Rachel visited\n    visitors_on_day = c1\n\n    #we need to calculate the total number of visitors within c2 days\n    total_visitors = visitors_previous_day + (visitors_on_day * c2)\n\n    return total_visitors", "mapping": {"c0": 703.0, "c1": 246.0, "c2": 25.0}}
{"question": "For Gwen's birthday she received c0 dollars from her dad. Her mom gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her mom than she did from her dad?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her dad\n    dad_money = c0\n\n    #Gwen's mom gave her c1 more dollars\n    mom_money = c0 + c1\n\n    #Gwen spent c2 dollars\n    spent_money = c2\n\n    #The difference between the money Gwen received from her mom and dad can be calculated by subtracting dad's money from mom's money\n    difference = mom_money - dad_money\n\n    return difference", "mapping": {"c0": 5.0, "c1": 7.0, "c2": 4.0}}
{"question": "There are c0 bananas and c1 oranges in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of oranges?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of bananas in each group\n    bananas_per_group = c0 // c2\n\n    #calculate the total number of oranges\n    total_oranges = c1\n\n    #calculate the number of groups of oranges\n    num_orange_groups = c3\n\n    #calculate the number of oranges in each group\n    oranges_per_group = total_oranges // num_orange_groups\n\n    return oranges_per_group", "mapping": {"c0": 142.0, "c1": 356.0, "c2": 47.0, "c3": 178.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the movies and watched c3 of the booksHow many more movies than books have you read?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of movies and books read\n    movies_read = c2\n    books_read = c3\n\n    #calculate the difference between the number of movies and books read\n    difference = movies_read - books_read\n\n    return difference", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 19.0, "c3": 16.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flourHow many cups of flour did she put in?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs c2 more cups of flour\n    needed_flour = c2\n\n    #Mary already put in some cups of flour\n    flour_before = c0 - needed_flour\n\n    #The amount of flour Mary put in can be calculated by subtracting the needed flour from the original amount of flour\n    flour_used = c0 - flour_before\n\n    return flour_used", "mapping": {"c0": 12.0, "c1": 5.0, "c2": 2.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers did danny find at the park?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    bottle_caps_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    wrappers_in_collection = c3\n    bottle_caps_in_collection = c2\n\n    #The difference between the number of bottle caps and wrappers that Danny found can be calculated by subtracting the number of wrappers found from the number of bottle caps found\n    difference = bottle_caps_found - wrappers_found\n\n    #The difference between the number of bottle caps and wrappers that Danny has in his collection can be calculated by subtracting the number of wrappers in his collection from the number of bottle caps in his collection\n    difference_in_collection = bottle_caps_in_collection - wrappers_in_collection\n\n    #The total difference between the number of bottle caps and wrappers that Danny found and has in his collection can be calculated by adding the two differences together\n    total_difference = difference + difference_in_collection\n\n    return total_difference", "mapping": {"c0": 46.0, "c1": 50.0, "c2": 21.0, "c3": 52.0}}
{"question": "Luke played c0 rounds of a trivia game. If he gained c1 points in each roundHow many points did he score in the game?", "answer": [8142.0], "response": "def trivia_score(c0, c1):\n    #Luke played c0 rounds of the trivia game\n    rounds_played = c0\n\n    #He gained c1 points in each round\n    points_per_round = c1\n\n    #The total score can be calculated by multiplying the number of rounds played by the points gained per round\n    total_score = rounds_played * points_per_round\n\n    return total_score", "mapping": {"c0": 177.0, "c1": 46.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many more birds than storks are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total = c0 + c1\n\n    #number of birds after c2 more birds join them\n    birds_after = c0 + c2\n\n    #number of storks remains the same\n    storks_after = c1\n\n    #difference between number of birds and storks after c2 more birds join them\n    diff = birds_after - storks_after\n\n    return diff", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The mouse jumped c1 inches lesser than the frog who jumped c2 inches farther than the grasshopper.How far did the mouse jump?", "answer": [39.0], "response": "def jumping_contest(c0, c1, c2):\n    #the grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #the frog jumped c2 inches farther than the grasshopper\n    frog_jump = c0 + c2\n\n    #the mouse jumped c1 inches lesser than the frog\n    mouse_jump = frog_jump - c1\n\n    return mouse_jump", "mapping": {"c0": 9.0, "c1": 3.0, "c2": 33.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many more push-ups than crunches did Zachary do?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zach_pushups = c0\n    zach_crunches = c1\n\n    #David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = zach_pushups + c2\n    david_crunches = zach_crunches - c3\n\n    #calculate the difference between push-ups and crunches that Zachary did\n    diff = zach_pushups - zach_crunches\n\n    return diff", "mapping": {"c0": 35.0, "c1": 3.0, "c2": 58.0, "c3": 87.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the afternoon and evening?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c1 emails in the afternoon and c2 emails in the evening\n    afternoon_and_evening = c1 + c2\n\n    return afternoon_and_evening", "mapping": {"c0": 4.0, "c1": 5.0, "c2": 8.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added some more action figures to the shelf and removed c1 of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he add to the shelf?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures on the shelf\n    initial_count = c0\n\n    #He added some more action figures to the shelf\n    added_count = c2 - initial_count + c1\n\n    return added_count", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 8.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday. She spent a total of c2 hours to play tag on both days.How many kids did she play with altogether?", "answer": [26.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday\n    kids_monday = c0\n\n    #Julia played tag with c1 kids on tuesday\n    kids_tuesday = c1\n\n    #Julia spent a total of c2 hours to play tag on both days\n    total_hours = c2\n\n    #Let's assume that Julia played with the same number of kids on both days\n    #We can calculate the number of kids she played with by dividing the total hours by the average number of kids she played with per hour\n    average_kids_per_hour = (kids_monday + kids_tuesday) / 2\n    total_kids = total_hours * average_kids_per_hour\n\n    return total_kids", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 34.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 baseball cards and Ace cards left.How many more baseball cards than Ace cards does Nell have?", "answer": [266.0], "response": "def Problem(c0, c1, c2):\n    #Nell had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some of her cards to Jeff and now has c2 baseball cards and Ace cards left\n    baseball_after = c2\n    ace_after = c2 - baseball_before + ace_before\n\n    #calculate the difference between the number of baseball cards and Ace cards Nell has now\n    difference = baseball_after - ace_after\n\n    return difference", "mapping": {"c0": 309.0, "c1": 356.0, "c2": 415.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 alligators were hidingHow many alligators were not hiding?", "answer": [57.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c1 alligators in the cage\n    alligators_before = c1\n\n    #c2 alligators are hiding\n    alligators_hiding = c2\n\n    #The number of alligators not hiding can be calculated by subtracting the number of hiding alligators from the original number of alligators\n    alligators_not_hiding = alligators_before - alligators_hiding\n\n    return alligators_not_hiding", "mapping": {"c0": 93.0, "c1": 97.0, "c2": 40.0}}
{"question": "You have read c0 books from the ' crazy silly school ' series. If there are a total of c1 different books in the ' crazy silly school ' seriesHow many more do you still have to read?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #c0 books have already been read\n    books_read = c0\n\n    #c1 is the total number of books in the series\n    total_books = c1\n\n    #The number of books left to read can be calculated by subtracting the number of books already read from the total number of books in the series\n    books_left = total_books - books_read\n\n    return books_left", "mapping": {"c0": 8.0, "c1": 14.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She had c1 beads and she was able to make c2 necklaces.How many beads did each necklace need?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Emily is making c2 necklaces for c0 friends\n    num_necklaces = c2\n    num_friends = c0\n\n    #Emily had c1 beads to make the necklaces\n    num_beads = c1\n\n    #Each necklace needs the same number of beads, so we can divide the total number of beads by the number of necklaces\n    beads_per_necklace = num_beads / num_necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 43.0, "c1": 20.0, "c2": 5.0}}
{"question": "Frank put c0 pieces of candy in each bag. If he had c1 pieces of candyHow many bags would he have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Frank put c0 pieces of candy in each bag\n    candy_per_bag = c0\n\n    #Frank had c1 pieces of candy\n    total_candy = c1\n\n    #The number of bags he would have can be calculated by dividing the total number of candy by the number of candy per bag\n    bags = total_candy // candy_per_bag\n\n    return bags", "mapping": {"c0": 11.0, "c1": 22.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers. Then he got c2 new customersHow many customers does he have now?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #the waiter originally had c0 customers\n    customers_before = c0\n\n    #after some customers left, he had c1 customers\n    customers_left = c1\n\n    #he then got c2 new customers\n    new_customers = c2\n\n    #The total number of customers he has now can be calculated by subtracting the number of customers who left from the original number of customers and then adding the number of new customers\n    customers_now = customers_before - customers_left + new_customers\n\n    return customers_now", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 10.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many tomatoes did he pick in all?", "answer": [204.0], "response": "def Problem(c0, c1, c2):\n    #the farmer had c0 tomatoes in his garden\n    tomatoes_before = c0\n\n    #he picked c1 tomatoes yesterday\n    picked_yesterday = c1\n\n    #he picked c2 tomatoes today\n    picked_today = c2\n\n    #The total number of tomatoes he picked can be calculated by adding the number of tomatoes he picked yesterday and today to the original number of tomatoes\n    total_picked = tomatoes_before + picked_yesterday + picked_today\n\n    return total_picked", "mapping": {"c0": 90.0, "c1": 154.0, "c2": 50.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many green and yellow peaches are in the basket?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 red peaches, c1 yellow peaches and c2 green peaches in the basket\n    #we only need to find out the number of green and yellow peaches\n    green_peaches = c2\n    yellow_peaches = c1\n\n    return green_peaches, yellow_peaches", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 6.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There were c0 bird families living near the mountain. If c1 bird families flew away for winterHow many more bird families flew away for the winter than those that stayed behind?", "answer": [31.0], "response": "def Problem(c0, c1):\n    #there were originally c0 bird families\n    before_migration = c0\n\n    #c1 bird families flew away for winter\n    migrated = c1\n\n    #The number of bird families that stayed behind can be calculated by subtracting the number of bird families that migrated from the original number of bird families\n    stayed_behind = before_migration - migrated\n\n    #The number of bird families that flew away for the winter can be calculated by subtracting the number of bird families that stayed behind from the number of bird families before migration\n    flew_away = before_migration - stayed_behind\n\n    return flew_away", "mapping": {"c0": 89.0, "c1": 60.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many more orchids than roses are there in the vase now?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of roses after Jessica cut some more\n    roses_after = c3 + (c3 - c0)\n\n    #calculate the total number of orchids after Jessica cut some more\n    orchids_after = c2 + (c2 - c1)\n\n    #calculate the difference between the number of orchids and roses\n    difference = orchids_after - roses_after\n\n    return difference", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 13.0, "c3": 3.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There were c0 paintings in the Buckingham palace. There, Rachel learned that c1 visitors came to the Buckingham palace that day. If there were c2 visitors the previous dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [61.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 paintings in the Buckingham palace\n    paintings_before = c0\n\n    #c1 visitors came to the Buckingham palace that day\n    visitors_today = c1\n\n    #c2 visitors came to the Buckingham palace the previous day\n    visitors_yesterday = c2\n\n    #The difference in visitors between today and yesterday can be calculated by subtracting the number of visitors yesterday from the number of visitors today\n    difference = visitors_today - visitors_yesterday\n\n    return difference", "mapping": {"c0": 39.0, "c1": 661.0, "c2": 600.0}}
{"question": "A waiter had c0 customers. While c1 customers left he got c2 new customers.How many customers does he still have?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #the waiter originally had c0 customers\n    customers_before = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #c2 new customers arrived\n    customers_arrived = c2\n\n    #The number of customers the waiter still has can be calculated by subtracting the number of customers who left from the original number of customers and then adding the number of new customers who arrived\n    customers_now = customers_before - customers_left + customers_arrived\n\n    return customers_now", "mapping": {"c0": 12.0, "c1": 15.0, "c2": 14.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She has c1 beads and each necklace takes c2 beads.How many necklaces can Emily make?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Emily has c1 beads\n    beads = c1\n\n    #Each necklace takes c2 beads\n    beads_per_necklace = c2\n\n    #The number of necklaces Emily can make can be calculated by dividing the total number of beads by the number of beads per necklace\n    necklaces = beads // beads_per_necklace\n\n    return necklaces", "mapping": {"c0": 72.0, "c1": 6.0, "c2": 3.0}}
{"question": "He also had c0 aquariums for saltwater animals. The aquarium had c1 saltwater animals in total and every aquarium had the same number of animals.How many saltwater animals does each aquarium have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #there are originally c0 aquariums for saltwater animals\n    aquariums = c0\n\n    #there are c1 saltwater animals in total\n    total_animals = c1\n\n    #The number of saltwater animals in each aquarium can be calculated by dividing the total number of animals by the number of aquariums\n    animals_per_aquarium = total_animals / aquariums\n\n    return animals_per_aquarium", "mapping": {"c0": 26.0, "c1": 52.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many cups of flour did she put in?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Mary needs c0 cups of flour and c1 cups of sugar for the recipe\n    flour_needed = c0\n    sugar_needed = c1\n\n    #Mary already put in some cups of flour\n    flour_used = c0 - c2\n\n    #Mary still needs c2 more cups of flour than sugar\n    sugar_used = c1\n    flour_needed = sugar_used + c2\n\n    #The number of cups of flour Mary put in can be calculated by subtracting the cups of flour used from the cups of flour needed\n    flour_put_in = flour_needed - flour_used\n\n    return flour_put_in", "mapping": {"c0": 11.0, "c1": 7.0, "c2": 2.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many cakes would baker still have?", "answer": [139.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate the number of cakes and pastries left after selling\n    cakes_left = cakes_made - cakes_sold\n    pastries_left = pastries_made - pastries_sold\n\n    return cakes_left", "mapping": {"c0": 149.0, "c1": 91.0, "c2": 10.0, "c3": 90.0}}
{"question": "Dave had c0 files and c1 apps on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many files did he delete?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 files and c1 apps on his phone\n    files_before = c0\n    apps_before = c1\n\n    #After deleting some apps and files he had c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of files he deleted can be calculated by subtracting the number of files and apps left from the original number of files and apps\n    files_deleted = files_before - files_after\n    apps_deleted = apps_before - apps_after\n\n    return files_deleted + apps_deleted", "mapping": {"c0": 24.0, "c1": 13.0, "c2": 17.0, "c3": 21.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work today?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #the machine made c0 shirts yesterday\n    shirts_yesterday = c0\n\n    #the machine made c1 shirts today\n    shirts_today = c1\n\n    #the machine can make c2 shirts a minute\n    shirts_per_minute = c2\n\n    #the total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = shirts_yesterday + shirts_today\n\n    #the number of minutes the machine worked today can be calculated by dividing the total number of shirts made by the number of shirts the machine can make per minute\n    minutes_worked = total_shirts / shirts_per_minute\n\n    return minutes_worked", "mapping": {"c0": 9.0, "c1": 8.0, "c2": 2.0}}
{"question": "Rebecca wants to split a collection of eggs into c0 groups. Rebecca has c1 marbles and c2 eggs.How many eggs will each group have?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca has c2 eggs\n    eggs = c2\n\n    #Rebecca wants to split the eggs into c0 groups\n    groups = c0\n\n    #Rebecca also has c1 marbles, which we don't need for this problem\n\n    #The number of eggs in each group can be calculated by dividing the total number of eggs by the number of groups\n    eggs_per_group = eggs / groups\n\n    return eggs_per_group", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 15.0}}
{"question": "Matthew had some crackers. If Matthew gave c0 crackers to each of his c1 friendsHow many crackers did Matthew have?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Matthew had some crackers\n    crackers_before = c0\n\n    #Matthew gave c0 crackers to each of his c1 friends\n    crackers_given = c0 * c1\n\n    #The number of crackers Matthew has left can be calculated by subtracting the crackers given from the original number of crackers\n    crackers_after = crackers_before - crackers_given\n\n    return crackers_after", "mapping": {"c0": 2.0, "c1": 11.0}}
{"question": "Olivia spent c0 dollars at a supermarket. If she has c1 dollars left with herHow much money did she have initially?", "answer": [111.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Olivia spent c0 dollars at the supermarket\n    spent = c0\n\n    #She has c1 dollars left with her\n    left = c1\n\n    #The amount of money she had initially can be calculated by adding the amount she spent to the amount she has left\n    initial = spent + left\n\n    return initial", "mapping": {"c0": 78.0, "c1": 33.0}}
{"question": "If Lewis earns $ c0 every week during the c1 weeks of a harvest season.How much money will he earn if he works for c2 harvest seasons?", "answer": [22090603.0], "response": "def harvest_earnings(c0, c1, c2):\n    #calculate the total number of weeks worked\n    total_weeks = c1 * c2\n\n    #calculate the total earnings by multiplying the weekly earnings by the total number of weeks worked\n    total_earnings = c0 * total_weeks\n\n    return total_earnings", "mapping": {"c0": 1357.0, "c1": 223.0, "c2": 73.0}}
{"question": "Because of the decision Sofia asked c0 students to suggest specific types of food. c1 students suggested adding mashed potatoes while others suggested adding bacon to the menu.How many students suggested bacon?", "answer": [125.0], "response": "def Problem(c0, c1):\n    #c0 students were asked to suggest specific types of food\n    total_students = c0\n\n    #c1 students suggested adding mashed potatoes\n    mashed_potatoes = c1\n\n    #The remaining students suggested adding bacon\n    bacon = total_students - mashed_potatoes\n\n    return bacon", "mapping": {"c0": 310.0, "c1": 185.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many emails did jack receive in the day?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    emails = c0 + c2\n\n    return emails", "mapping": {"c0": 3.0, "c1": 64.0, "c2": 5.0, "c3": 54.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many cookies did Paco have left?", "answer": [75.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #Paco ate c1 cookies\n    cookies_eaten = c1\n\n    #Paco bought c2 more cookies\n    cookies_bought = c2\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies eaten from the original number of cookies and then adding the number of cookies bought\n    cookies_left = cookies_before - cookies_eaten + cookies_bought\n\n    return cookies_left", "mapping": {"c0": 40.0, "c1": 2.0, "c2": 37.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes as well as bacon while c1 suggested adding only bacon to the menuHow many students suggested adding bacon?", "answer": [569.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes as well as bacon\n    #c1 students suggested adding only bacon\n    #we want to find out how many students suggested adding bacon in total\n\n    #let's add the number of students who suggested adding bacon from both groups\n    bacon_suggested = c0 + c1\n\n    return bacon_suggested", "mapping": {"c0": 218.0, "c1": 351.0}}
{"question": "If each bag has c0 cookies and you had c1 bags of cookiesHow many cookies would you have?", "answer": [2173.0], "response": "def Problem(c0, c1):\n    #each bag has c0 cookies\n    cookies_per_bag = c0\n\n    #you have c1 bags of cookies\n    num_bags = c1\n\n    #The total number of cookies can be calculated by multiplying the number of cookies per bag by the number of bags\n    total_cookies = cookies_per_bag * num_bags\n\n    return total_cookies", "mapping": {"c0": 41.0, "c1": 53.0}}
{"question": "Rachel had to complete c0 pages of reading homework and c1 pages of math homework.How many more pages of math homework than reading homework did she have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of reading homework\n    reading_homework = c0\n\n    #Rachel had to complete c1 pages of math homework\n    math_homework = c1\n\n    #The difference between the number of pages of math homework and reading homework can be calculated by subtracting the number of pages of reading homework from the number of pages of math homework\n    difference = math_homework - reading_homework\n\n    return difference", "mapping": {"c0": 2.0, "c1": 4.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many balloons did Allan bring to the park?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons and Jake brought c1 balloons to the park\n    allan_balloons = c0\n\n    #Allan then bought c2 more balloons at the park\n    allan_balloons += c2\n\n    return allan_balloons", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 3.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on tuesday than on wednesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    #Julia played with c1 kids on Tuesday\n    #Julia played with c2 kids on Wednesday\n\n    #The difference between the number of kids she played with on Tuesday and Wednesday can be calculated by subtracting c2 from c1\n    difference = c1 - c2\n\n    return difference", "mapping": {"c0": 8.0, "c1": 11.0, "c2": 9.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the t-shirts?", "answer": [4300.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts\n    tshirt_revenue = c1 * c2\n\n    return tshirt_revenue", "mapping": {"c0": 5.0, "c1": 215.0, "c2": 20.0, "c3": 64.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many more children got off the bus than those that got on?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    children_before = c0\n\n    #c1 children got off the bus\n    got_off = c1\n\n    #some more children got on the bus\n    got_on = c2 - children_before - got_off\n\n    #the number of children that got off the bus more than those that got on can be calculated by subtracting the number of children that got on from the number of children that got off\n    more_got_off = got_off - got_on\n\n    return more_got_off", "mapping": {"c0": 36.0, "c1": 68.0, "c2": 12.0}}
{"question": "Brenda's mother made c0 cookies for c1 guests. If each of them had the same number of cookiesHow many did each of them have?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Brenda's mother made c0 cookies for c1 guests\n    cookies = c0\n\n    #If each of them had the same number of cookies, we can divide the total number of cookies by the number of guests\n    per_guest = cookies / c1\n\n    return per_guest", "mapping": {"c0": 14.0, "c1": 2.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found some more bags worth of cans. If she had a total of c1 bags altogetherHow many bags did she find on the next day?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Tiffany had c0 bags of cans on Monday\n    bags_before = c0\n\n    #She found some more bags worth of cans the next day\n    found = c1 - bags_before\n\n    return found", "mapping": {"c0": 4.0, "c1": 6.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many more girls than boys does the school have?", "answer": [687.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 girls and c1 boys in the school\n    girls_before = c0\n    boys_before = c1\n\n    #c2 more girls joined the school\n    girls_joined = c2\n\n    #The number of girls after the new girls joined can be calculated by adding the original number of girls with the number of girls joined\n    girls_after = girls_before + girls_joined\n\n    #The number of boys after the new girls joined remains the same\n    boys_after = boys_before\n\n    #The difference between the number of girls and boys after the new girls joined is the answer\n    difference = girls_after - boys_after\n\n    return difference", "mapping": {"c0": 632.0, "c1": 410.0, "c2": 465.0}}
{"question": "Emily is making bead necklaces for her friends where each necklace takes c0 beads. She made c1 necklaces.How many beads did Emily have?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #each necklace takes c0 beads\n    beads_per_necklace = c0\n\n    #Emily made c1 necklaces\n    num_necklaces = c1\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces by the number of beads per necklace\n    total_beads = beads_per_necklace * num_necklaces\n\n    return total_beads", "mapping": {"c0": 5.0, "c1": 4.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a house and c2 blocks to build a tower.How many more blocks did he use to build the tower than he did to build the house?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    blocks_before = c0\n\n    #He uses c1 blocks to build a house\n    house_blocks = c1\n\n    #He uses c2 blocks to build a tower\n    tower_blocks = c2\n\n    #The difference between the number of blocks used to build the tower and the number of blocks used to build the house can be calculated by subtracting the number of house blocks from the number of tower blocks\n    difference = tower_blocks - house_blocks\n\n    return difference", "mapping": {"c0": 95.0, "c1": 20.0, "c2": 50.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total = c0 + c1\n\n    #number of birds after c2 more birds join\n    birds_after = c0 + c2\n\n    #number of storks after c2 more birds join\n    storks_after = c1\n\n    #calculate the difference between the number of storks and birds after c2 more birds join\n    difference = storks_after - birds_after\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 3.0}}
{"question": "The Razorback t-shirt shop made $ c0 dollars from selling c1 t-shirt during the Arkansas and Texas tech game they.What is the cost of each t-shirt?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #the shop made c0 dollars from selling c1 t-shirts\n    #the cost of each t-shirt can be calculated by dividing the total revenue by the number of t-shirts sold\n    cost_per_shirt = c0/c1\n\n    return cost_per_shirt", "mapping": {"c0": 51.0, "c1": 3.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many more cookies did he give to his friend than those he ate?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He ate c1 cookies\n    cookies_ate = c1\n\n    #He gave c2 cookies to his friend\n    cookies_given = c2\n\n    #The difference between the cookies he gave to his friend and those he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he gave to his friend\n    difference = cookies_given - cookies_ate\n\n    return difference", "mapping": {"c0": 12.0, "c1": 16.0, "c2": 21.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [22.0], "response": "def visitors_increase(c0, c1):\n    #calculate the difference between the number of visitors on the current day and the previous day\n    increase = c0 - c1\n    return increase", "mapping": {"c0": 317.0, "c1": 295.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles while he lost c2 marbles.How many more marbles did he find than those he lost?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He found c1 marbles\n    found = c1\n\n    #He lost c2 marbles\n    lost = c2\n\n    #The difference between the number of marbles he found and lost can be calculated by subtracting the number of lost marbles from the number of found marbles\n    difference = found - lost\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 5.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes while c1 suggested adding bacon to the menuHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [366.0], "response": "def Problem(c0, c1):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested bacon\n    bacon = c1\n\n    #calculate the difference between the number of students who suggested mashed potatoes and bacon\n    difference = mashed_potatoes - bacon\n\n    return difference", "mapping": {"c0": 408.0, "c1": 42.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many cookies did paco have left?", "answer": [22.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He ate c1 cookies\n    cookies_eaten = c1\n\n    #He gave c2 cookies to his friend\n    cookies_given = c2\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies he ate and gave away from the original number of cookies\n    cookies_left = cookies_before - cookies_eaten - cookies_given\n\n    return cookies_left", "mapping": {"c0": 40.0, "c1": 5.0, "c2": 13.0}}
{"question": "Paco had c0 cookies. He ate c1 cookies and gave c2 of them to his friend.How many more cookies did he eat than those he gave to his friend?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He ate c1 cookies\n    cookies_eaten = c1\n\n    #He gave c2 cookies to his friend\n    cookies_given = c2\n\n    #The number of cookies he ate more than those he gave to his friend can be calculated by subtracting the number of cookies given from the number of cookies eaten\n    cookies_difference = cookies_eaten - cookies_given\n\n    return cookies_difference", "mapping": {"c0": 17.0, "c1": 14.0, "c2": 13.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday. She spent a total of c2 hours to play tag on both days.How many more kids did she play with on monday than on tuesday?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday\n    kids_monday = c0\n\n    #She played tag with c1 kids on tuesday\n    kids_tuesday = c1\n\n    #She spent a total of c2 hours to play tag on both days\n    total_hours = c2\n\n    #The average number of kids she played with per hour can be calculated by dividing the total number of kids by the total number of hours\n    avg_kids_per_hour = (kids_monday + kids_tuesday) / total_hours\n\n    #The difference in the number of kids she played with on monday and tuesday can be calculated by subtracting the number of kids she played with on tuesday from the number of kids she played with on monday\n    diff_kids = kids_monday - kids_tuesday\n\n    #The number of kids she played with on monday more than on tuesday can be calculated by multiplying the difference in the number of kids by the average number of kids per hour\n    more_kids_monday = diff_kids * avg_kids_per_hour\n\n    return more_kids_monday", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 38.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money did he spend to buy chocolate than he did to buy candy bar?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 3 dollars\n    chocolate_price = 3\n\n    #The total amount of money Dan spent on candy and chocolate\n    total_spent = candy_price + chocolate_price\n\n    #The difference between the amount of money Dan spent on chocolate and candy\n    difference = total_spent - candy_price\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground.How many more marbles did Ed have than Doug then?", "answer": [12.0], "response": "def Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0\n\n    #Ed lost c1 of his marbles at the playground\n    ed_lost = c1\n\n    #The number of marbles Ed has now can be calculated by subtracting the number of marbles he lost from the original number of marbles he had\n    ed_now = ed_marbles - ed_lost\n\n    #The difference between Ed's current number of marbles and Doug's number of marbles is the answer\n    diff = ed_now - (ed_marbles - c0)\n\n    return diff", "mapping": {"c0": 29.0, "c1": 17.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How much farther did the mouse jump than the grasshopper?", "answer": [30.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse_jump = frog_jump + c2\n\n    #The difference between the mouse jump and the grasshopper jump is the answer\n    difference = mouse_jump - c0\n\n    return difference", "mapping": {"c0": 19.0, "c1": 10.0, "c2": 20.0}}
{"question": "Frank was reading through his favorite book. It took him c0 days to finish the book. If the book had c1 pagesHow many pages did he read per day?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Frank finished the book in c0 days\n    days = c0\n\n    #The book had c1 pages\n    pages = c1\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = pages / days\n\n    return pages_per_day", "mapping": {"c0": 16.0, "c1": 112.0}}
{"question": "There are c0 different books in the ' crazy silly school ' series. If you are yet to read c1 of the booksHow many books have you already read?", "answer": [15.0], "response": "def Problem(c0, c1):\n    #there are c0 books in the series\n    total_books = c0\n\n    #you have read c1 books in the series\n    read_books = c1\n\n    #The number of books you have not read can be calculated by subtracting the number of books you have read from the total number of books in the series\n    not_read_books = total_books - read_books\n\n    return not_read_books", "mapping": {"c0": 20.0, "c1": 5.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many balloons did Allan and Jake have in the park?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons and Jake brought c1 balloons to the park\n    allan_balloons = c0\n    jake_balloons = c1\n\n    #Allan then bought c2 more balloons at the park\n    allan_balloons += c2\n\n    #The total number of balloons in the park is the sum of Allan's and Jake's balloons\n    total_balloons = allan_balloons + jake_balloons\n\n    return total_balloons", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 2.0}}
{"question": "Josh lost c0 marbles. If he had c1 marbles in his collection earlierHow many marbles does he have now?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Josh had c1 marbles earlier\n    marbles_before = c1\n\n    #Josh lost c0 marbles\n    lost = c0\n\n    #The number of marbles Josh has now can be calculated by subtracting the number of lost marbles from the original number of marbles\n    marbles_after = marbles_before - lost\n\n    return marbles_after", "mapping": {"c0": 11.0, "c1": 19.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Jake brought c1 balloons and bought c2 more at the park\n    jake_balloons = c1 + c2\n\n    #The difference between the number of Jake's balloons and Allan's balloons is how many more balloons Jake had in the park\n    more_balloons = jake_balloons - allan_balloons\n\n    return more_balloons", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into c0 rows with c1 pencils in each row.How many pencils does she have?", "answer": [154.0], "response": "def Problem(c0, c1):\n    #Faye has c0 rows of pencils\n    rows = c0\n\n    #Each row has c1 pencils\n    pencils_per_row = c1\n\n    #The total number of pencils can be calculated by multiplying the number of rows by the number of pencils per row\n    total_pencils = rows * pencils_per_row\n\n    return total_pencils", "mapping": {"c0": 14.0, "c1": 11.0}}
{"question": "A grocery store had c0 bottles of regular soda and c1 bottles of diet soda.How many more bottles of diet soda than regular soda did they have?", "answer": [39.0], "response": "def Problem(c0, c1):\n    #number of regular soda bottles\n    regular_soda = c0\n\n    #number of diet soda bottles\n    diet_soda = c1\n\n    #calculate the difference between the number of diet soda and regular soda\n    difference = diet_soda - regular_soda\n\n    return difference", "mapping": {"c0": 22.0, "c1": 61.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many red peaches are in the baskets altogether?", "answer": [96.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #each basket has c1 red peaches and c2 green peaches\n    red_per_basket = c1\n\n    #The total number of red peaches can be calculated by multiplying the number of red peaches per basket by the number of baskets\n    total_red = red_per_basket * baskets\n\n    return total_red", "mapping": {"c0": 6.0, "c1": 16.0, "c2": 18.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the rest stay home. Lawrence county has c1 kids in all.About how many kids stayed home?", "answer": [28462.0], "response": "def Problem(c0, c1):\n    #c0 kids go to camp, so c1 - c0 kids stay home\n    stayed_home = c1 - c0\n\n    return stayed_home", "mapping": {"c0": 800059.0, "c1": 828521.0}}
{"question": "There are c0 pots. Each pot has c1 flowers and c2 sticks in it.How many flowers are there in all?", "answer": [10011.0], "response": "def count_flowers(c0, c1, c2):\n    #calculate the total number of flowers by multiplying the number of pots by the number of flowers in each pot\n    total_flowers = c0 * c1\n    return total_flowers", "mapping": {"c0": 141.0, "c1": 71.0, "c2": 91.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many more balloons did Allan have than Jake in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons and Jake brought c1 balloons to the park\n    allan_balloons = c0\n    jake_balloons = c1\n\n    #Allan then bought c2 more balloons at the park\n    allan_balloons += c2\n\n    #Calculate the difference between the number of balloons Allan has and the number of balloons Jake has\n    difference = allan_balloons - jake_balloons\n\n    return difference", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": "A chef had c0 apples. After making some pies, he had used 35.How many apples remained?", "answer": [23.0], "response": "def Problem(c0):\n    #the chef had c0 apples\n    apples_before = c0\n\n    #the chef used 35 apples to make pies\n    used = 35\n\n    #the number of apples remaining can be calculated by subtracting the number of used apples from the original number of apples\n    apples_after = apples_before - used\n\n    return apples_after", "mapping": {"c0": 58.0}}
{"question": "You had c0 bags with equal number of cookies. If you had c1 candies and c2 cookies in totalHow many cookies does each bag have?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each bag has an equal number of cookies\n    cookies_per_bag = c2 // c0\n\n    #total number of cookies is c2\n    total_cookies = c2\n\n    #total number of candies is c1\n    total_candies = c1\n\n    #we can use the total number of cookies and candies to calculate the number of bags\n    total_bags = (total_cookies - total_candies) // cookies_per_bag\n\n    return cookies_per_bag", "mapping": {"c0": 26.0, "c1": 15.0, "c2": 52.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many sacks of oranges will they have after c2 days of harvest?", "answer": [1862.0], "response": "def Problem(c0, c1, c2):\n    #each day they harvest c0 sacks of oranges\n    sacks_per_day = c0\n\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest for c2 days\n    days_of_harvest = c2\n\n    #the total number of sacks harvested can be calculated by multiplying the number of sacks per day by the number of days of harvest\n    total_sacks = sacks_per_day * days_of_harvest\n\n    #the total number of oranges can be calculated by multiplying the number of oranges per sack by the total number of sacks\n    total_oranges = total_sacks * oranges_per_sack\n\n    return total_sacks", "mapping": {"c0": 38.0, "c1": 42.0, "c2": 49.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many orchids did she cut?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c3 - roses_before\n    orchids_cut = c2 - orchids_before\n\n    #The number of orchids she cut can be calculated by subtracting the original number of orchids from the current number of orchids\n    return orchids_cut", "mapping": {"c0": 16.0, "c1": 3.0, "c2": 7.0, "c3": 13.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the afternoon than in the evening?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c1 emails in the afternoon and c2 emails in the evening\n    afternoon_emails = c1\n    evening_emails = c2\n\n    #The difference between the number of emails received in the afternoon and evening can be calculated by subtracting the number of evening emails from the number of afternoon emails\n    difference = afternoon_emails - evening_emails\n\n    return difference", "mapping": {"c0": 10.0, "c1": 5.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. She had c1 packs of pencils each one having c2 pencils.How many pencils does she have?", "answer": [84.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 packs of pencils\n    packs = c1\n\n    #each pack has c2 pencils\n    pencils_per_pack = c2\n\n    #Faye placed her pencils into rows with c0 pencils in each row\n    rows = c0\n\n    #The total number of pencils Faye has can be calculated by multiplying the number of packs by the number of pencils per pack and adding the number of pencils in the rows\n    total_pencils = (packs * pencils_per_pack) + (rows * c0)\n\n    return total_pencils", "mapping": {"c0": 22.0, "c1": 6.0, "c2": 14.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many did he have left after yesterday's picking?", "answer": [104.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 tomatoes in the garden\n    tomatoes_before = c0\n\n    #yesterday the farmer picked c1 tomatoes\n    picked_yesterday = c1\n\n    #today the farmer picked c2 tomatoes\n    picked_today = c2\n\n    #The number of tomatoes left after yesterday's picking can be calculated by subtracting the number of tomatoes picked yesterday from the original number of tomatoes\n    tomatoes_left = tomatoes_before - picked_yesterday\n\n    return tomatoes_left", "mapping": {"c0": 160.0, "c1": 56.0, "c2": 41.0}}
{"question": "Each pot has c0 flowers in it. There are c1 flowers in total.How many pots are there in all?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #each pot has c0 flowers\n    flowers_per_pot = c0\n\n    #there are c1 flowers in total\n    total_flowers = c1\n\n    #The number of pots can be calculated by dividing the total number of flowers by the number of flowers per pot\n    pots = total_flowers // flowers_per_pot\n\n    return pots", "mapping": {"c0": 40.0, "c1": 400.0}}
{"question": "c0 campers went rowing in the morning. Some more campers went rowing in the afternoon. If a total of c1 campers went rowing that dayHow many campers went rowing in the afternoon?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #c0 campers went rowing in the morning\n    morning_campers = c0\n\n    #total number of campers who went rowing that day is c1\n    total_campers = c1\n\n    #number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing that day\n    afternoon_campers = total_campers - morning_campers\n\n    return afternoon_campers", "mapping": {"c0": 15.0, "c1": 32.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes while c1 suggested adding bacon to the menuHow many more students suggested bacon than those that suggested mashed potatoes?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested bacon\n    bacon = c1\n\n    #calculate the difference between the number of students who suggested bacon and mashed potatoes\n    difference = bacon - mashed_potatoes\n\n    return difference", "mapping": {"c0": 479.0, "c1": 489.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles did Doug have initially?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    # Ed had c2 marbles\n    ed_marbles = c2\n\n    # Ed had c0 more marbles than Doug\n    ed_more = c0\n    doug_marbles = ed_marbles - ed_more\n\n    # Doug lost c1 of his marbles at the playground\n    doug_lost = c1\n    doug_marbles -= doug_lost\n\n    return doug_marbles\n\n# The initial number of marbles Doug had can be calculated by subtracting the number of marbles Ed had more than Doug from the number of marbles Ed had. Then, we subtract the number of marbles Doug lost at the playground to get the final answer.", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 27.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of math homework than reading homeworkHow many pages of reading homework did she have to complete?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #She had to complete c1 more pages of math homework than reading homework\n    math_more = c1\n\n    #Let's assume she had to complete r pages of reading homework\n    reading_homework = r\n\n    #The total number of pages of homework she had to complete is the sum of math and reading homework\n    total_homework = math_homework + reading_homework\n\n    #According to the problem, math homework is c1 more than reading homework\n    #So we can write an equation: math_homework = reading_homework + c1\n    #Substituting this equation into the total_homework equation, we get:\n    total_homework = reading_homework + c1 + reading_homework\n\n    #Simplifying the equation, we get:\n    total_homework = 2 * reading_homework + c1\n\n    #Solving for reading_homework, we get:\n    reading_homework = (total_homework - c1) / 2\n\n    return reading_homework", "mapping": {"c0": 7.0, "c1": 4.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies yesterday and c1 raisin cookies and c2 chocolate chip cookies this morning.How many more chocolate chip cookies than raisin cakes did Helen bake?", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #Helen baked c0 chocolate chip cookies yesterday\n    choco_yesterday = c0\n\n    #Helen baked c1 raisin cookies this morning\n    raisin_today = c1\n\n    #Helen baked c2 chocolate chip cookies this morning\n    choco_today = c2\n\n    #The number of chocolate chip cookies Helen baked can be calculated by adding the number of chocolate chip cookies she baked yesterday and today\n    choco_total = choco_yesterday + choco_today\n\n    #The number of raisin cookies Helen baked can be calculated by the number of raisin cookies she baked today\n    raisin_total = raisin_today\n\n    #The difference between the number of chocolate chip cookies and raisin cookies can be calculated by subtracting the number of raisin cookies from the number of chocolate chip cookies\n    diff = choco_total - raisin_total\n\n    return diff", "mapping": {"c0": 19.0, "c1": 231.0, "c2": 237.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had some bags of cans. The next day she found c0 more bags worth of cans. If she had a total of c1 bags altogetherHow many bags did she have on monday?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Tiffany had some bags of cans on Monday\n    bags_on_monday = c1 - c0\n\n    return bags_on_monday\n\n#Explanation: We know that on Tuesday, Tiffany found c0 more bags worth of cans. So, if we subtract c0 from the total number of bags on Tuesday (c1), we can get the number of bags she had on Monday.", "mapping": {"c0": 4.0, "c1": 8.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny throw away than those he found at the park?", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #Danny threw away c1 old bottle caps\n    thrown_away = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total = c2\n\n    #The difference between the number of bottle caps thrown away and the number found can be calculated by subtracting the number found from the total number of bottle caps\n    difference = total - (found - thrown_away)\n\n    return difference", "mapping": {"c0": 30.0, "c1": 63.0, "c2": 42.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of sugar.How many more cups of flour than cups of sugar does she need to add now?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Mary already put in c2 cups of sugar\n    sugar_added = c2\n\n    #She needs to add c1 cups of flour\n    flour_needed = c1\n\n    #She still needs to add this many cups of sugar\n    sugar_needed = c0 - sugar_added\n\n    #She needs to add this many more cups of flour than cups of sugar\n    flour_difference = flour_needed - sugar_needed\n\n    return flour_difference", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 10.0}}
{"question": "Kelly has c0 nintendo games.How many does she need to buy so that she will have c1 games left?", "answer": [118.0], "response": "def Problem(c0, c1):\n    #Kelly has c0 nintendo games\n    games_before = c0\n\n    #She wants to have c1 games left after buying some more\n    games_after = c1\n\n    #The number of games she needs to buy can be calculated by subtracting the original number of games from the desired number of games\n    games_needed = games_after - games_before\n\n    return games_needed", "mapping": {"c0": 22.0, "c1": 140.0}}
{"question": "Mom buys c0 white t - shirts in total. If white t - shirts can be purchased in packages and mom buys c1 packagesHow many white t - shirts does each package have?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are c0 white t-shirts in total\n    total_shirts = c0\n\n    #mom buys c1 packages of white t-shirts\n    packages = c1\n\n    #To find out how many shirts are in each package, we can divide the total number of shirts by the number of packages\n    shirts_per_package = total_shirts / packages\n\n    return shirts_per_package", "mapping": {"c0": 70.0, "c1": 14.0}}
{"question": "A farmer had c0 tomatoes in his garden. If he picked c1 of them yesterday and c2 today.How many will he have left after today?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 tomatoes in the garden\n    tomatoes_before = c0\n\n    #c1 tomatoes were picked yesterday\n    picked_yesterday = c1\n\n    #c2 tomatoes were picked today\n    picked_today = c2\n\n    #The number of tomatoes left can be calculated by subtracting the total number of tomatoes picked from the original number of tomatoes\n    tomatoes_left = tomatoes_before - picked_yesterday - picked_today\n\n    return tomatoes_left", "mapping": {"c0": 171.0, "c1": 134.0, "c2": 30.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Over the weekend Fred delivered newspapers earning c2 dollars and washed cars earning c3 dollars.How much money does Fred have now?", "answer": [192.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred originally had c0 dollars\n    fred_money = c0\n\n    #Jason originally had c1 dollars\n    jason_money = c1\n\n    #Fred earned c2 dollars delivering newspapers\n    fred_money += c2\n\n    #Fred earned c3 dollars washing cars\n    fred_money += c3\n\n    #The total amount of money Fred has now is the sum of his original money and the money he earned\n    total_money = fred_money\n\n    return total_money", "mapping": {"c0": 47.0, "c1": 99.0, "c2": 111.0, "c3": 34.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of flour does she need to add?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c1 cups of flour in total\n    flour_needed = c1\n\n    #Mary has already added c2 cups of flour\n    flour_added = c2\n\n    #Mary needs to add this many more cups of flour\n    flour_remaining = flour_needed - flour_added\n\n    return flour_remaining", "mapping": {"c0": 6.0, "c1": 14.0, "c2": 7.0, "c3": 60.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many more orchids than roses are there in the vase now?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of roses after Jessica cut some more\n    roses_after = c0 + (c2 - c0)\n\n    #calculate the number of orchids after Jessica cut some more\n    orchids_after = c1 + (c3 - c1)\n\n    #calculate the difference between the number of orchids and roses\n    difference = orchids_after - roses_after\n\n    return difference", "mapping": {"c0": 7.0, "c1": 12.0, "c2": 11.0, "c3": 20.0}}
{"question": "After Jessie started to go jogging everyday she lost c0 kilograms. She weighed c1 kilograms before beginning jogging.How much does she weigh now?", "answer": [34.0], "response": "def Problem(c0, c1):\n    #Jessie weighed c1 kilograms before beginning jogging\n    weight_before = c1\n\n    #After jogging everyday, she lost c0 kilograms\n    weight_lost = c0\n\n    #Her current weight can be calculated by subtracting the weight lost from her original weight\n    weight_now = weight_before - weight_lost\n\n    return weight_now", "mapping": {"c0": 35.0, "c1": 69.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many children got off the bus at the bus stop?", "answer": [60.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    children_before = c0\n\n    #c1 children got on the bus at the stop\n    children_on = children_before + c1\n\n    #some children got off the bus, leaving c2 children on the bus\n    children_off = children_on - c2\n\n    return children_off\n\n#The number of children who got off the bus can be calculated by subtracting the number of children on the bus after the stop from the number of children on the bus before the stop.", "mapping": {"c0": 22.0, "c1": 40.0, "c2": 2.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies have you read?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books read\n    books_read = c2\n\n    #calculate the number of movies watched\n    movies_watched = c3\n\n    #calculate the difference between the number of books and movies read\n    difference = books_read - movies_watched\n\n    return difference", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 13.0, "c3": 12.0}}
{"question": "Emily is making bead necklaces for her friends. She made c0 necklaces and each necklace takes c1 beads.How many beads did Emily have?", "answer": [308.0], "response": "def Problem(c0, c1):\n    #Emily made c0 necklaces\n    necklaces = c0\n\n    #Each necklace takes c1 beads\n    beads_per_necklace = c1\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces by the number of beads per necklace\n    total_beads = necklaces * beads_per_necklace\n\n    return total_beads", "mapping": {"c0": 11.0, "c1": 28.0}}
{"question": "A farmer had c0 tomatoes and c1 potatoes in his garden. If he picked c2 potatoesHow many tomatoes and potatoes does he have left?", "answer": [80.0], "response": "def Problem(c0, c1, c2):\n    #the farmer had c0 tomatoes and c1 potatoes\n    tomatoes_before = c0\n    potatoes_before = c1\n\n    #the farmer picked c2 potatoes\n    potatoes_picked = c2\n\n    #the number of tomatoes left can be calculated by subtracting the number of potatoes picked from the original number of tomatoes\n    tomatoes_after = tomatoes_before - potatoes_picked\n\n    #the number of potatoes left can be calculated by subtracting the number of potatoes picked from the original number of potatoes\n    potatoes_after = potatoes_before - potatoes_picked\n\n    return tomatoes_after, potatoes_after", "mapping": {"c0": 175.0, "c1": 77.0, "c2": 172.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars. Jason delivered newspapers and now has c3 dollars.How much money did they earn by washing cars?", "answer": [4.0], "response": "def money_earned(c0, c1, c2, c3):\n    #Fred had c0 dollars and now has c2 dollars, so he earned c2-c0 dollars\n    fred_earned = c2 - c0\n\n    #Jason had c1 dollars and now has c3 dollars, so he earned c3-c1 dollars\n    jason_earned = c3 - c1\n\n    #The total money earned by washing cars is the sum of money earned by Fred and Jason\n    total_earned = fred_earned + jason_earned\n\n    return total_earned", "mapping": {"c0": 111.0, "c1": 40.0, "c2": 115.0, "c3": 44.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each block. If there are c1 houses on a blockHow many pieces of junk mail should he give in each block?", "answer": [180.0], "response": "def Problem(c0, c1):\n    #the mailman has to give c0 pieces of junk mail to each house\n    pieces_per_house = c0\n\n    #there are c1 houses on a block\n    num_houses = c1\n\n    #The total number of pieces of junk mail to give in each block can be calculated by multiplying the number of houses by the number of pieces per house\n    total_pieces = pieces_per_house * num_houses\n\n    return total_pieces", "mapping": {"c0": 9.0, "c1": 20.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many cakes did each person eat?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    #So, each friend got c1/c0 crackers and c2/c0 cakes\n    crackers_per_person = c1/c0\n    cakes_per_person = c2/c0\n\n    #Each person ate the same number of cakes, so we can just return the number of cakes per person\n    return cakes_per_person", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 8.0}}
{"question": "Jessica cut some roses from her flower garden to put in her vase. There are now c0 roses in the vase. If there were c1 roses in the vase initiallyHow many roses did she cut?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #there are currently c0 roses in the vase\n    roses_now = c0\n\n    #there were c1 roses in the vase initially\n    roses_initial = c1\n\n    #The number of roses Jessica cut can be calculated by subtracting the current number of roses from the initial number of roses\n    roses_cut = roses_initial - roses_now\n\n    return roses_cut", "mapping": {"c0": 19.0, "c1": 3.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got on the bus while some got off the bus. Then there were c2 children altogether on the bus.How many more children got off the bus than those that got on?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    children_before = c0\n\n    #c1 children got on the bus\n    children_on = c1\n\n    #c2 children were on the bus after some got off\n    children_after = c2\n\n    #The number of children that got off the bus can be calculated by subtracting the number of children on the bus from the total number of children after some got off\n    got_off = children_after - children_on\n\n    #The number of children that got on the bus can be calculated by subtracting the original number of children on the bus from the number of children on the bus after some got off\n    got_on = children_on - children_before\n\n    #The difference between the number of children that got off and the number of children that got on is the answer to the problem\n    answer = got_off - got_on\n\n    return answer", "mapping": {"c0": 23.0, "c1": 24.0, "c2": 8.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many pages does the book have altogether?", "answer": [125.0], "response": "def total_pages(c0, c1, c2, c3):\n    #calculate the total number of pages by adding the number of pages in each chapter\n    total = c1 + c2 + c3\n\n    #multiply the total number of pages by the number of chapters to get the total number of pages in the book\n    total *= c0\n\n    return total", "mapping": {"c0": 3.0, "c1": 66.0, "c2": 35.0, "c3": 24.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many peaches are in the basket?", "answer": [30.0], "response": "def count_peaches(c0, c1, c2):\n    #add up the number of peaches in each color\n    total_peaches = c0 + c1 + c2\n    return total_peaches", "mapping": {"c0": 7.0, "c1": 15.0, "c2": 8.0}}
{"question": "Paige was helping her mom plant flowers and they put c0 seeds in each flower bed. If they planted c1 seeds altogtherHow many flower beds did they have?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #each flower bed has c0 seeds\n    seeds_per_bed = c0\n\n    #they planted c1 seeds altogether\n    total_seeds = c1\n\n    #the number of flower beds can be calculated by dividing the total number of seeds by the number of seeds per bed\n    flower_beds = total_seeds // seeds_per_bed\n\n    return flower_beds", "mapping": {"c0": 10.0, "c1": 60.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [137.0], "response": "def Problem(c0, c1, c2):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested bacon\n    bacon = c1\n\n    #number of students who suggested tomatoes\n    tomatoes = c2\n\n    #calculate the difference between the number of students who suggested mashed potatoes and bacon\n    difference = mashed_potatoes - bacon\n\n    return difference", "mapping": {"c0": 257.0, "c1": 120.0, "c2": 97.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls and c3 more boys joined the school.How many boys are there in the school now?", "answer": [1124.0], "response": "def boys_in_school(c0, c1, c2, c3):\n    #total number of girls in the school\n    girls = c0 + c2\n    #total number of boys in the school\n    boys = c1 + c3\n    return boys", "mapping": {"c0": 135.0, "c1": 214.0, "c2": 496.0, "c3": 910.0}}
{"question": "After resting they decided to go for a swim. If the depth of the water is c0 times Dean's height and he stands at c1 feetHow much deeper is the water than Dean's height?", "answer": [81.0], "response": "def Problem(c0, c1):\n    #the depth of the water is c0 times Dean's height\n    water_depth = c0 * c1\n\n    #calculate how much deeper the water is than Dean's height\n    difference = water_depth - c1\n\n    return difference", "mapping": {"c0": 10.0, "c1": 9.0}}
{"question": "Next on his checklist is wax to stick the feathers together. He needs c0 g of wax more. If the feathers require a total of c1 g of waxHow many grams of wax does he already have?", "answer": [469.0], "response": "def Problem(c0, c1):\n    #he needs c0 g of wax more\n    wax_needed = c0\n\n    #the feathers require a total of c1 g of wax\n    total_wax = c1\n\n    #the amount of wax he already has can be calculated by subtracting the needed wax from the total wax\n    wax_have = total_wax - wax_needed\n\n    return wax_have", "mapping": {"c0": 159.0, "c1": 628.0}}
{"question": "Frank was reading through his favorite book. He read c0 pages per day. If the book had c1 pagesHow many days did he take to finish the book?", "answer": [72.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Frank reads c0 pages per day\n    pages_per_day = c0\n\n    #The book has c1 pages\n    total_pages = c1\n\n    #The number of days it takes Frank to finish the book can be calculated by dividing the total number of pages by the number of pages he reads per day\n    days_to_finish = total_pages / pages_per_day\n\n    return days_to_finish", "mapping": {"c0": 8.0, "c1": 576.0}}
{"question": "There are a total of c0 peaches in a basket. If there are c1 red peaches and some more green peaches in the basket.How many green peaches are in the basket?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #there are c1 red peaches in the basket\n    red_peaches = c1\n\n    #the number of green peaches can be calculated by subtracting the number of red peaches from the total number of peaches\n    green_peaches = c0 - red_peaches\n\n    return green_peaches", "mapping": {"c0": 16.0, "c1": 13.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. Dean is c1 feet shorter than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Dean's height is c1 feet shorter than Ron's height\n    ron_height = c2\n    dean_height = ron_height - c1\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * dean_height\n\n    return water_depth", "mapping": {"c0": 2.0, "c1": 8.0, "c2": 14.0}}
{"question": "There are c0 pots in each of the c1 gardens. Each pot has c2 flowers in it.How many flowers are there in all?", "answer": [174080.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pots in each garden\n    pots_per_garden = c0\n\n    #there are c1 gardens\n    num_gardens = c1\n\n    #each pot has c2 flowers in it\n    flowers_per_pot = c2\n\n    #total number of flowers can be calculated by multiplying the number of pots per garden, the number of gardens, and the number of flowers per pot\n    total_flowers = pots_per_garden * num_gardens * flowers_per_pot\n\n    return total_flowers", "mapping": {"c0": 544.0, "c1": 10.0, "c2": 32.0}}
{"question": "Paige was helping her mom plant flowers and together they planted some seeds. They put c0 seeds in each flower bed. If there are c1 flowerbedsHow many seeds did they plant?", "answer": [450.0], "response": "def Problem(c0, c1):\n    #each flower bed has c0 seeds\n    seeds_per_bed = c0\n\n    #there are c1 flower beds\n    num_beds = c1\n\n    #The total number of seeds planted can be calculated by multiplying the number of seeds per bed by the number of flower beds\n    total_seeds_planted = seeds_per_bed * num_beds\n\n    return total_seeds_planted", "mapping": {"c0": 10.0, "c1": 45.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. Marco's strawberries weighed c1 pounds.How much more did his strawberries weigh than his dad's?", "answer": [34.0], "response": "def Problem(c0, c1):\n    #total weight of strawberries picked\n    total_weight = c0\n\n    #weight of Marco's strawberries\n    marco_weight = c1\n\n    #weight of his dad's strawberries can be calculated by subtracting Marco's weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    #the difference in weight can be calculated by subtracting his dad's weight from Marco's weight\n    weight_difference = marco_weight - dad_weight\n\n    return weight_difference", "mapping": {"c0": 4.0, "c1": 19.0}}
{"question": "Julia played tag with c0 kids on wednesday. She had played with c1 kids on monday and c2 kids on tuesday.How many more kids did she play with on monday than on wednesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Wednesday\n    wednesday = c0\n\n    #Julia played with c1 kids on Monday\n    monday = c1\n\n    #Julia played with c2 kids on Tuesday\n    tuesday = c2\n\n    #The difference between the number of kids Julia played with on Monday and Wednesday can be calculated by subtracting the number of kids on Wednesday from the number of kids on Monday\n    difference = monday - wednesday\n\n    return difference", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 17.0}}
{"question": "Carol was sending out birthday invitations to c0 friends. If each package of invitations she bought had c1 invitations in itHow many packs does she need so that no friend gets left out?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #each package has c1 invitations\n    invitations_per_pack = c1\n\n    #to make sure no friend gets left out, Carol needs to buy enough packs to cover all her friends\n    packs_needed = c0 // invitations_per_pack\n\n    #if there are any remaining friends, Carol needs to buy an additional pack\n    if c0 % invitations_per_pack != 0:\n        packs_needed += 1\n\n    return packs_needed", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "A grocery store had c0 apples, c1 bottles of regular soda and c2 bottles of diet soda.How many more bottles than apple did they have?", "answer": [98.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of bottles\n    total_bottles = c1 + c2\n\n    #calculate the difference between the total number of bottles and the number of apples\n    difference = total_bottles - c0\n\n    return difference", "mapping": {"c0": 36.0, "c1": 80.0, "c2": 54.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The mouse jumped c1 inches lesser than the frog who jumped c2 inches farther than the grasshopper.How much farther did the mouse jump than the grasshopper?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #mouse jumped c1 inches lesser than the frog\n    mouse_jump = c2 - c1\n\n    #frog jumped c2 inches farther than the grasshopper\n    frog_jump = c2\n\n    #the difference between the mouse and the grasshopper's jump can be calculated by subtracting the grasshopper's jump from the mouse's jump\n    difference = mouse_jump - grasshopper_jump\n\n    return difference", "mapping": {"c0": 14.0, "c1": 16.0, "c2": 37.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many pencils and crayons does she have altogether?", "answer": [638.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c1 pencils in each row\n    pencils = c0 * c1\n\n    #Faye has c2 crayons in each row\n    crayons = c0 * c2\n\n    #The total number of pencils and crayons Faye has can be calculated by adding the number of pencils and crayons\n    total = pencils + crayons\n\n    return total", "mapping": {"c0": 11.0, "c1": 31.0, "c2": 27.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school with each classroom having the same number of students. If there are c2 seats on each school bus.How many buses are needed to take the trip?", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of students in the school\n    total_students = c0 * c1\n\n    #calculate the number of buses needed by dividing the total number of students by the number of seats on each bus\n    buses_needed = total_students // c2\n\n    #if there are any remaining students, add an extra bus\n    if total_students % c2 != 0:\n        buses_needed += 1\n\n    return buses_needed", "mapping": {"c0": 87.0, "c1": 58.0, "c2": 2.0}}
{"question": "Emily is making bead necklaces for her friends. She had c0 beads and she was able to make c1 necklaces.How many beads did each necklace need?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #Emily had c0 beads\n    beads = c0\n\n    #Emily made c1 necklaces\n    necklaces = c1\n\n    #The number of beads needed for each necklace can be calculated by dividing the total number of beads by the number of necklaces\n    beads_per_necklace = beads // necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 2.0, "c1": 32.0}}
{"question": "Paige raised c0 goldfish and c1 catfish in the pond but stray cats loved eating them. Now she has c2 left.How many fishes disappeared?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 goldfish and c1 catfish\n    total_fish_before = c0 + c1\n\n    #Now she has c2 fish left\n    total_fish_after = c2\n\n    #The number of fish that disappeared can be calculated by subtracting the number of fish left from the original number of fish\n    disappeared = total_fish_before - total_fish_after\n\n    return disappeared", "mapping": {"c0": 7.0, "c1": 12.0, "c2": 15.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 salty cookies and c3 sweet cookies.How many more salty cookies than sweet cookies did he eat?", "answer": [13.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #He ate c2 salty cookies and c3 sweet cookies\n    eaten_salty = c2\n    eaten_sweet = c3\n\n    #Calculate how many more salty cookies than sweet cookies he ate\n    difference = (salty_cookies - eaten_salty) - (sweet_cookies - eaten_sweet)\n\n    return difference", "mapping": {"c0": 40.0, "c1": 25.0, "c2": 28.0, "c3": 15.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven and c2 more peaches than Jill.How many peaches does Jill have?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven_peaches = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = steven_peaches - c1\n\n    #Jake has c2 more peaches than Jill\n    jill_peaches = jake_peaches - c2\n\n    return jill_peaches", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 3.0}}
{"question": "Paul had c0 books. He sold c1 books in a garage sale.How many books does he have left with him?", "answer": [37.0], "response": "def books_left(c0, c1):\n    #Paul had c0 books\n    books_before = c0\n\n    #He sold c1 books in a garage sale\n    sold = c1\n\n    #The number of books left with him can be calculated by subtracting the number of books sold from the original number of books\n    books_left = books_before - sold\n\n    return books_left", "mapping": {"c0": 115.0, "c1": 78.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work in all?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #the machine made c0 shirts yesterday\n    shirts_yesterday = c0\n\n    #the machine made c1 shirts today\n    shirts_today = c1\n\n    #the machine can make c2 shirts a minute\n    shirts_per_minute = c2\n\n    #total number of shirts made\n    total_shirts = shirts_yesterday + shirts_today\n\n    #total time the machine worked in minutes\n    total_time = total_shirts / shirts_per_minute\n\n    return total_time", "mapping": {"c0": 13.0, "c1": 3.0, "c2": 8.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. Then she bought c2 extra invitations.How many friends can she invite?", "answer": [95.0], "response": "def Problem(c0, c1, c2):\n    #each package has c0 invitations\n    invitations_per_pack = c0\n\n    #she bought c1 packs\n    packs_bought = c1\n\n    #she also bought c2 extra invitations\n    extra_invitations = c2\n\n    #the total number of invitations she has is the product of the number of packs and the number of invitations per pack, plus the extra invitations\n    total_invitations = (invitations_per_pack * packs_bought) + extra_invitations\n\n    return total_invitations", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 11.0}}
{"question": "An industrial machine can make c0 shirts per minute. It made c1 shirts in all.How many minutes was the machine working?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #the machine can make c0 shirts per minute\n    shirts_per_minute = c0\n\n    #the machine made c1 shirts in total\n    total_shirts = c1\n\n    #the number of minutes the machine worked can be calculated by dividing the total number of shirts by the number of shirts made per minute\n    minutes_worked = total_shirts / shirts_per_minute\n\n    return minutes_worked", "mapping": {"c0": 3.0, "c1": 6.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #He threw away c1 old ones\n    thrown_away = c1\n\n    #Now he has c2 bottle caps in his collection\n    collection = c2\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of bottle caps he found to the number of old ones he threw away, and then subtracting that from the number of bottle caps he has now in his collection\n    initial = collection - (found - thrown_away)\n\n    return initial", "mapping": {"c0": 63.0, "c1": 51.0, "c2": 33.0}}
{"question": "A grocery store had c0 bottles of regular soda and c1 bottles of diet soda.How many more bottles of regular soda than diet soda did they have?", "answer": [58.0], "response": "def Problem(c0, c1):\n    #there are originally c0 bottles of regular soda\n    regular_soda = c0\n\n    #there are c1 bottles of diet soda\n    diet_soda = c1\n\n    #The difference between the number of regular soda and diet soda can be calculated by subtracting the number of diet soda from the number of regular soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 67.0, "c1": 9.0}}
{"question": "During summer break c0 kids from Lawrence county stayed home and the other c1 kids went to camp. An additional c2 kids from outside the county attended the camp.How many kids are in Lawrence county?", "answer": [1538832.0], "response": "def Problem(c0, c1, c2):\n    #c0 kids stayed home during summer break\n    stayed_home = c0\n\n    #c1 kids went to camp during summer break\n    went_to_camp = c1\n\n    #c2 kids from outside the county attended the camp\n    outside_county = c2\n\n    #The total number of kids in Lawrence county can be calculated by adding the number of kids who stayed home and the number of kids who went to camp, and then adding the number of kids from outside the county who attended the camp\n    total_kids = stayed_home + went_to_camp + outside_county\n\n    return total_kids", "mapping": {"c0": 644997.0, "c1": 893835.0, "c2": 78.0}}
{"question": "Faye was placing c0 pencils into rows with c1 pencils in each row.How many rows could she make?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Faye is placing c0 pencils into rows with c1 pencils in each row\n    pencils = c0\n    per_row = c1\n\n    #The number of rows Faye can make can be calculated by dividing the total number of pencils by the number of pencils in each row\n    rows = pencils // per_row\n\n    return rows", "mapping": {"c0": 30.0, "c1": 5.0}}
{"question": "Frank had some pieces of candy. If he put them into c0 bags with c1 pieces in each bagHow many pieces of candy did he have?", "answer": [858.0], "response": "def Problem(c0, c1):\n    #Frank had some pieces of candy\n    candy_pieces = c0 * c1\n\n    return candy_pieces", "mapping": {"c0": 26.0, "c1": 33.0}}
{"question": "A grocery store had a total of c0 bottles of which c1 were bottles of regular soda and the rest were bottles of diet soda. They also had c2 apple.How many bottles of diet soda did they have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #total number of bottles is c0\n    total_bottles = c0\n\n    #number of regular soda bottles is c1\n    regular_soda = c1\n\n    #number of apple is c2\n    apple = c2\n\n    #number of diet soda bottles can be calculated by subtracting the number of regular soda bottles and apple from the total number of bottles\n    diet_soda = total_bottles - regular_soda - apple\n\n    return diet_soda", "mapping": {"c0": 17.0, "c1": 9.0, "c2": 29.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Jake have than Jill?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Jill has c1 more peaches than Jill\n    jill_peaches = steven_peaches - c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = jill_peaches - c0\n\n    #The difference between Jake's and Jill's peaches can be calculated by subtracting Jill's peaches from Jake's peaches\n    difference = jake_peaches - jill_peaches\n\n    return difference", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 5.0}}
{"question": "Josh had c0 marbles in his collection. He gave c1 marbles to Jack.How many marbles does Josh have now?", "answer": [18.0], "response": "def Problem(c0, c1):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #Josh gave c1 marbles to Jack\n    marbles_given = c1\n\n    #The number of marbles Josh has now can be calculated by subtracting the number of marbles given to Jack from the original number of marbles\n    marbles_after = marbles_before - marbles_given\n\n    return marbles_after", "mapping": {"c0": 20.0, "c1": 2.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven who has c2 more peaches than Jill.How many peaches does Jake have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven_peaches = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = steven_peaches - c1\n\n    #Steven has c2 more peaches than Jill\n    jill_peaches = steven_peaches - c2\n\n    #Jake has c1 fewer peaches than Steven who has c2 more peaches than Jill\n    jake_peaches = jill_peaches + c2 - c1\n\n    return jake_peaches", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 67.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts during the arkansas game?", "answer": [8722.0], "response": "def Problem(c0, c1, c2):\n    #they sold c2 t-shirts during the Arkansas game\n    sold_arkansas = c2\n\n    #they sold a total of c1 t-shirts during both games\n    sold_total = c1\n\n    #the number of t-shirts sold during the Texas Tech game can be calculated by subtracting the number of t-shirts sold during the Arkansas game from the total number of t-shirts sold\n    sold_tech = sold_total - sold_arkansas\n\n    #the amount of money made from selling t-shirts during the Arkansas game can be calculated by multiplying the number of t-shirts sold during the Arkansas game by the profit per t-shirt\n    profit_arkansas = sold_arkansas * c0\n\n    return profit_arkansas", "mapping": {"c0": 98.0, "c1": 163.0, "c2": 89.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the day?", "answer": [14.0], "response": "def total_emails(c0, c1, c2):\n    #add up the number of emails received in the morning, afternoon, and evening\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 5.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If Jill has c2 peachesHow many more peaches does Jake have than Jill?", "answer": [13.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jill has c2 peaches\n    jill_peaches = c2\n\n    #Steven has c1 more peaches than Jill\n    steven_peaches = jill_peaches + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #The difference between Jake's and Jill's peaches can be calculated by subtracting Jill's peaches from Jake's peaches\n    difference = jake_peaches - jill_peaches\n\n    return difference", "mapping": {"c0": 5.0, "c1": 18.0, "c2": 87.0}}
{"question": "For the walls of the house he would use c0 large planks of wood. If each plank of wood needs c1 pieces of nails to be secured and in addition c2 nails are needed for some smaller planks.How many nails does John need for the house wall?", "answer": [229.0], "response": "def Problem(c0, c1, c2):\n    #each large plank needs c1 nails to be secured\n    nails_for_large_planks = c0 * c1\n\n    #in addition, c2 nails are needed for some smaller planks\n    nails_for_small_planks = c2\n\n    #total number of nails needed is the sum of nails for large planks and nails for small planks\n    total_nails = nails_for_large_planks + nails_for_small_planks\n\n    return total_nails", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 8.0}}
{"question": "A grocery store had c0 bottles of diet soda, c1 bottles of regular soda and c2 apples.How many more bottles of regular soda than diet soda did they have?", "answer": [29.0], "response": "def Problem(c0, c1, c2):\n    #number of bottles of diet soda\n    diet_soda = c0\n\n    #number of bottles of regular soda\n    regular_soda = c1\n\n    #difference between number of regular soda and diet soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 54.0, "c1": 83.0, "c2": 12.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding bacon c1 suggested adding mashed potatoes to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested bacon?", "answer": [61.0], "response": "def Problem(c0, c1, c2):\n    #number of students who suggested adding bacon\n    bacon_suggesters = c0\n\n    #number of students who suggested adding mashed potatoes\n    mashed_potato_suggesters = c1\n\n    #number of students who suggested adding tomatoes\n    tomato_suggesters = c2\n\n    #calculate the difference between the number of students who suggested mashed potatoes and those who suggested bacon\n    difference = mashed_potato_suggesters - bacon_suggesters\n\n    return difference", "mapping": {"c0": 269.0, "c1": 330.0, "c2": 76.0}}
{"question": "Brenda's mother made cookies for c0. If each of them had c1 cookiesHow many cookies did she prepare?", "answer": [420.0], "response": "def Problem(c0, c1):\n    #Brenda's mother made c0 batches of cookies\n    batches = c0\n\n    #Each batch has c1 cookies\n    cookies_per_batch = c1\n\n    #The total number of cookies can be calculated by multiplying the number of batches by the number of cookies per batch\n    total_cookies = batches * cookies_per_batch\n\n    return total_cookies", "mapping": {"c0": 14.0, "c1": 30.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many more apps did he delete than he added?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dave had c0 apps on his phone\n    apps_before = c0\n\n    #He added c1 new apps\n    added = c1\n\n    #After deleting some he had c2 left\n    apps_after = c2\n\n    #The number of apps he deleted can be calculated by subtracting the number of apps after deleting from the sum of the original number of apps and the number of apps added\n    deleted = (apps_before + added) - apps_after\n\n    #The number of apps he deleted more than he added can be calculated by subtracting the number of apps added from the number of apps deleted\n    more_deleted = deleted - added\n\n    return more_deleted", "mapping": {"c0": 15.0, "c1": 71.0, "c2": 14.0}}
{"question": "Kelly has c0 nintendo games.How many will she have left if she gives away c1 games?", "answer": [42.0], "response": "def Problem(c0, c1):\n    #Kelly has c0 nintendo games\n    games_before = c0\n\n    #Kelly gives away c1 games\n    games_given_away = c1\n\n    #The number of games Kelly will have left can be calculated by subtracting the number of games given away from the original number of games\n    games_left = games_before - games_given_away\n\n    return games_left", "mapping": {"c0": 106.0, "c1": 64.0}}
{"question": "Matthew had c0 crackers. If Matthew gave equal numbers of crackers to his c1 friends and still had c2 crackers leftHow many crackers did each friend eat?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef crackers_per_friend(c0, c1, c2):\n    #Matthew had c0 crackers\n    crackers_before = c0\n\n    #Matthew gave equal numbers of crackers to his c1 friends\n    num_friends = c1\n\n    #Matthew still had c2 crackers left\n    crackers_left = c2\n\n    #The total number of crackers given to friends can be calculated by subtracting the number of crackers left from the original number of crackers\n    crackers_given = crackers_before - crackers_left\n\n    #The number of crackers each friend ate can be calculated by dividing the total number of crackers given by the number of friends\n    crackers_per_friend = crackers_given / num_friends\n\n    return crackers_per_friend", "mapping": {"c0": 15.0, "c1": 5.0, "c2": 10.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. They washed cars over the weekend and now Fred has c2 dollars and Jason has c3 dollars.How much money did Jason make over the weekend?", "answer": [56.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Now Fred has c2 dollars\n    fred_after = c2\n\n    #Now Jason has c3 dollars\n    jason_after = c3\n\n    #The amount of money Jason made over the weekend can be calculated by subtracting his original amount of money from his current amount of money\n    jason_made = jason_after - jason_before\n\n    return jason_made", "mapping": {"c0": 114.0, "c1": 22.0, "c2": 21.0, "c3": 78.0}}
{"question": "Frank had c0 pieces of candy. If he put them equally into c1 bagsHow many pieces of candy are in each bag?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #Frank has c0 pieces of candy\n    candy = c0\n\n    #He puts them equally into c1 bags\n    bags = c1\n\n    #The number of pieces of candy in each bag can be calculated by dividing the total number of candy by the number of bags\n    candy_per_bag = candy / bags\n\n    return candy_per_bag", "mapping": {"c0": 42.0, "c1": 2.0}}
{"question": "Jack received c0 emails in the morning and c1 emails in the afternoon.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #The difference between the number of morning emails and afternoon emails can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning_emails - afternoon_emails\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 pastries and c3 cakesHow many more pastries than cakes did baker sell?", "answer": [76.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 pastries and c3 cakes\n    pastries_sold = c2\n    cakes_sold = c3\n\n    #Calculate the difference between the number of pastries sold and cakes sold\n    difference = pastries_sold - cakes_sold\n\n    return difference", "mapping": {"c0": 43.0, "c1": 114.0, "c2": 154.0, "c3": 78.0}}
{"question": "Haley has c0 marbles. In her class c1 boys love to play marbles. If she distributes her marbles equallyHow many will each of the boys receive?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Haley has c0 marbles\n    haley_marbles = c0\n\n    #There are c1 boys in the class\n    num_boys = c1\n\n    #If Haley distributes her marbles equally, each boy will receive the same number of marbles\n    marbles_per_boy = haley_marbles // num_boys\n\n    return marbles_per_boy", "mapping": {"c0": 20.0, "c1": 2.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. If a total of c2 people will attend the partyHow many more chairs will they have to buy?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of chairs they currently have\n    total_chairs = c0 * c1\n\n    #calculate the number of chairs they need to buy\n    chairs_needed = c2 - total_chairs\n\n    return chairs_needed", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 14.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. They washed cars over the weekend and now Fred has c2 dollars and Jason has c3 dollars.How much money did Fred earn over the weekend?", "answer": [21.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Fred has c2 dollars now\n    fred_after = c2\n\n    #Jason has c3 dollars now\n    jason_after = c3\n\n    #Fred's earnings can be calculated by subtracting his initial amount from his current amount\n    fred_earnings = fred_after - fred_before\n\n    return fred_earnings", "mapping": {"c0": 19.0, "c1": 16.0, "c2": 40.0, "c3": 69.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many more cookies did he eat than those he bought?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He ate c1 of them\n    cookies_eaten = c1\n\n    #He bought c2 more cookies\n    cookies_bought = c2\n\n    #The number of cookies he has now can be calculated by subtracting the number of cookies eaten from the sum of the original number of cookies and the number of cookies bought\n    cookies_after = cookies_before + cookies_bought - cookies_eaten\n\n    #The number of cookies he ate more than those he bought can be calculated by subtracting the number of cookies bought from the number of cookies eaten\n    more_cookies_eaten = cookies_eaten - cookies_bought\n\n    return more_cookies_eaten", "mapping": {"c0": 25.0, "c1": 5.0, "c2": 3.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from each of her trees. Now the trees have a total c2 apples still on them.How many apples did Rachel pick in all?", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #Rachel has c0 apple trees and picked c1 apples from each tree\n    apples_picked = c0 * c1\n\n    #The total number of apples still on the trees is c2\n    apples_left = c2\n\n    #The total number of apples Rachel picked can be calculated by subtracting the number of apples left on the trees from the total number of apples picked\n    total_apples_picked = apples_picked - apples_left\n\n    return total_apples_picked", "mapping": {"c0": 4.0, "c1": 7.0, "c2": 29.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 apples and c3 peaches.How many more peaches than apples does Steven have?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c3 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c2 + c1\n\n    #Steven has c3 peaches and c2 apples\n    steven_peaches = c3\n    steven_apples = c2\n\n    #Steven has more peaches than apples\n    difference = steven_peaches - steven_apples\n\n    return difference", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 11.0, "c3": 18.0}}
{"question": "A grocery store had a total of c0 bottles of which c1 were bottles of regular soda and the rest were bottles of diet soda.How many bottles of diet soda did they have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #c1 bottles are regular soda, so the rest of the bottles are diet soda\n    diet_soda = c0 - c1\n\n    return diet_soda", "mapping": {"c0": 30.0, "c1": 28.0}}
{"question": "The Ferris wheel in paradise park has c0 small seats and c1 large seats. Each small seat can hold c2 people and large seat can hold c3 people.How many people can ride the Ferris wheel on small seats?", "answer": [28.0], "response": "def FerrisWheelSmallSeats(c0, c1, c2, c3):\n    #calculate the total number of people that can ride on small seats\n    small_seats_capacity = c0 * c2\n\n    return small_seats_capacity", "mapping": {"c0": 2.0, "c1": 23.0, "c2": 14.0, "c3": 54.0}}
{"question": "Debby bought c0 soda bottles and c1 water bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the soda bottles last?", "answer": [40.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Debby bought c0 soda bottles and c1 water bottles\n    soda_bottles = c0\n    water_bottles = c1\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_per_day = c2\n    soda_per_day = c3\n\n    #Calculate how many days the soda bottles would last\n    days_of_soda = soda_bottles // soda_per_day\n\n    return days_of_soda", "mapping": {"c0": 360.0, "c1": 162.0, "c2": 122.0, "c3": 9.0}}
{"question": "A grocery store had c0 bottles of diet soda. If they had c1 more bottles of regular soda than diet sodaHow many bottles of regular soda did they have?", "answer": [83.0], "response": "def Problem(c0, c1):\n    #there are originally c0 bottles of diet soda\n    diet_soda = c0\n\n    #there are c1 more bottles of regular soda than diet soda\n    regular_soda = diet_soda + c1\n\n    return regular_soda", "mapping": {"c0": 4.0, "c1": 79.0}}
{"question": "During the Arkansas and Texas tech game the Razorback t-shirt shop made $ c0 by selling t-shirts. If they make $ c1 dollars off each t-shirt soldHow many t-shirts did they sell?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #the Razorback t-shirt shop made c0 dollars by selling t-shirts\n    revenue = c0\n\n    #they make c1 dollars off each t-shirt sold\n    price_per_tshirt = c1\n\n    #The number of t-shirts sold can be calculated by dividing the revenue by the price per t-shirt\n    num_tshirts_sold = revenue // price_per_tshirt\n\n    return num_tshirts_sold", "mapping": {"c0": 60.0, "c1": 10.0}}
{"question": "Frank was reading through his favorite book. He read c0 pages per day and it took him c1 days to finish the book.How many pages are there in the book?", "answer": [12518.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Frank reads c0 pages per day\n    pages_per_day = c0\n\n    #It takes him c1 days to finish the book\n    days_to_finish = c1\n\n    #The total number of pages in the book can be calculated by multiplying the number of pages Frank reads per day by the number of days it takes him to finish the book\n    total_pages = pages_per_day * days_to_finish\n\n    return total_pages", "mapping": {"c0": 22.0, "c1": 569.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. c0 bird families flew away for the winter from near a mountain. If there were c1 bird families living near the mountain initiallyHow many more bird families flew away for the winter than those that stayed behind?", "answer": [127.0], "response": "def Problem(c0, c1):\n    #c0 bird families flew away for the winter from near a mountain\n    flew_away = c0\n\n    #c1 bird families were living near the mountain initially\n    initially = c1\n\n    #The number of bird families that stayed behind can be calculated by subtracting the number of bird families that flew away from the initial number of bird families\n    stayed_behind = initially - flew_away\n\n    #The number of bird families that flew away for the winter than those that stayed behind can be calculated by subtracting the number of bird families that stayed behind from the number of bird families that flew away\n    more_flew_away = flew_away - stayed_behind\n\n    return more_flew_away", "mapping": {"c0": 86.0, "c1": 45.0}}
{"question": "Allan brought c0 balloons to the park and then bought c1 more balloons there. If Jake brought c2 balloons to the parkHow many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons to the park and then bought c1 more balloons there\n    allan_balloons = c0 + c1\n\n    #Jake brought c2 balloons to the park\n    jake_balloons = c2\n\n    #The difference between the number of balloons Jake brought and the number of balloons Allan brought can be calculated by subtracting Allan's balloons from Jake's balloons\n    difference = jake_balloons - allan_balloons\n\n    return difference", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 6.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many magazines does he have in total?", "answer": [460.0], "response": "def total_magazines(c0, c1, c2):\n    #calculate the total number of magazines by multiplying the number of magazines in each bookshelf by the number of bookshelves and adding them together\n    total = c1 * c2\n    return total", "mapping": {"c0": 9.0, "c1": 46.0, "c2": 10.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of math and biology homework did she have to complete?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    #Rachel had to complete c2 more pages of biology homework\n    bio_pages = c2\n\n    #The total number of pages of math and biology homework can be calculated by adding the number of math pages to the number of biology pages\n    total_pages = math_pages + bio_pages\n\n    return total_pages", "mapping": {"c0": 8.0, "c1": 7.0, "c2": 3.0}}
{"question": "Every day Ryan spends c0 hours on learning english, c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning chinese than he does on learning spanish?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #Ryan spends c2 hours on learning spanish\n    spanish_hours = c2\n\n    #The difference between the hours spent on learning chinese and spanish can be calculated by subtracting the spanish hours from the chinese hours\n    difference = chinese_hours - spanish_hours\n\n    return difference", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 4.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many more birds than storks are sitting on the fence?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 birds on the fence\n    birds_before = c0\n\n    #c1 more birds and c2 more storks came to join them\n    birds_after = birds_before + c1\n    storks_after = c2\n\n    #calculate the difference between the number of birds and storks on the fence\n    difference = birds_after - storks_after\n\n    return difference", "mapping": {"c0": 2.0, "c1": 5.0, "c2": 4.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many more cookies did he give to his friend than those he ate?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He gave c1 cookies to his friend\n    cookies_given = c1\n\n    #He ate c2 cookies\n    cookies_ate = c2\n\n    #The difference between the cookies he gave to his friend and those he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he gave to his friend\n    difference = cookies_given - cookies_ate\n\n    return difference", "mapping": {"c0": 6.0, "c1": 30.0, "c2": 23.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many more cakes did baker sell than those he bought?", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #Baker bought c2 new cakes\n    cakes_bought = c2\n\n    #The difference between the number of cakes sold and the number of cakes bought can be calculated by subtracting the number of cakes bought from the number of cakes sold\n    difference = cakes_sold - cakes_bought\n\n    return difference", "mapping": {"c0": 170.0, "c1": 78.0, "c2": 31.0}}
{"question": "Shirley sold c0 cases of boxes of trefoils.How many boxes of trefoils does she need to deliver if each case has c1 boxes?", "answer": [350.0], "response": "def Problem(c0, c1):\n    #each case has c1 boxes\n    boxes_per_case = c1\n\n    #Shirley sold c0 cases of boxes\n    cases_sold = c0\n\n    #The total number of boxes she needs to deliver can be calculated by multiplying the number of cases sold by the number of boxes per case\n    boxes_to_deliver = cases_sold * boxes_per_case\n\n    return boxes_to_deliver", "mapping": {"c0": 25.0, "c1": 14.0}}
{"question": "We ordered c0 pizzas. Each pizza has c1 slices. If there are c2 of usHow many slices of pizza are there altogether?", "answer": [68.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pizzas ordered\n    pizzas = c0\n\n    #each pizza has c1 slices\n    slices_per_pizza = c1\n\n    #there are c2 of us\n    people = c2\n\n    #The total number of slices can be calculated by multiplying the number of pizzas by the number of slices per pizza and then dividing by the number of people\n    total_slices = (pizzas * slices_per_pizza) / people\n\n    return total_slices", "mapping": {"c0": 17.0, "c1": 4.0, "c2": 25.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many orchids did she cut?", "answer": [19.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c2 - roses_before\n    orchids_cut = c3 - orchids_before\n\n    #The number of orchids she cut can be calculated by subtracting the original number of orchids from the current number of orchids\n    return orchids_cut", "mapping": {"c0": 12.0, "c1": 2.0, "c2": 10.0, "c3": 21.0}}
{"question": "White t - shirts can be purchased in packages. If mom buys c0 white t - shirts where each package has c1 white t - shirts.How many packages will she have?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #each package has c1 white t-shirts\n    package_size = c1\n\n    #mom buys c0 white t-shirts\n    total_shirts = c0\n\n    #the number of packages she will have can be calculated by dividing the total number of shirts by the package size\n    num_packages = total_shirts // package_size\n\n    return num_packages", "mapping": {"c0": 66.0, "c1": 3.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of sugar does she need to add?", "answer": [12.0], "response": "def sugar_needed(c0, c1, c2, c3):\n    #calculate the amount of sugar already added\n    sugar_added = c3\n\n    #calculate the amount of sugar needed\n    sugar_needed = c1 - sugar_added\n\n    return sugar_needed", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 10.0, "c3": 2.0}}
{"question": "Mom buys c0 white t - shirts. If white t - shirts can be purchased in packages of c1 How many packages will she have?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #calculate the number of packages by dividing the number of white t-shirts by the number of t-shirts in each package\n    packages = c0 // c1\n\n    return packages", "mapping": {"c0": 51.0, "c1": 3.0}}
{"question": "Adam could fit c0 action figures and c1 cabinets on each shelf in his room. His room has c2 shelves.How many total items could his shelves hold?", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #Adam can fit c0 action figures and c1 cabinets on each shelf\n    items_per_shelf = c0 + c1\n\n    #Adam's room has c2 shelves\n    num_shelves = c2\n\n    #The total number of items his shelves can hold can be calculated by multiplying the number of items per shelf by the number of shelves\n    total_items = items_per_shelf * num_shelves\n\n    return total_items", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 4.0}}
{"question": "We ordered c0 pizzas. Each pizza has the same number of slices. If there were a total of c1 slicesHow many slices are there in each pizza?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #total number of slices is c1\n    total_slices = c1\n\n    #number of pizzas is c0\n    num_pizzas = c0\n\n    #number of slices in each pizza can be calculated by dividing the total number of slices by the number of pizzas\n    slices_per_pizza = total_slices / num_pizzas\n\n    return slices_per_pizza", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Baker made c0 cakes. He sold c1 of them. Then he made c2 more cakes.How many more cakes did baker make than those he sold?", "answer": [184.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #Baker made c2 more cakes\n    cakes_more = c2\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of cakes sold from the sum of the number of cakes made and the number of cakes made more\n    cakes_difference = (cakes_made + cakes_more) - cakes_sold\n\n    return cakes_difference", "mapping": {"c0": 144.0, "c1": 71.0, "c2": 111.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour does she need to add?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c0 cups of flour in total\n    flour_needed = c0\n\n    #Mary has already added c3 cups of flour\n    flour_added = c3\n\n    #The number of cups of flour Mary still needs to add can be calculated by subtracting the amount of flour already added from the total amount needed\n    flour_remaining = flour_needed - flour_added\n\n    return flour_remaining", "mapping": {"c0": 12.0, "c1": 5.0, "c2": 49.0, "c3": 11.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts during the Texas tech game?", "answer": [1092.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of t-shirts sold during the Texas tech game\n    tshirts_tech = c1 - c2\n\n    #calculate the money made from selling the t-shirts during the Texas tech game\n    money_tech = tshirts_tech * c0\n\n    return money_tech", "mapping": {"c0": 78.0, "c1": 186.0, "c2": 172.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books do you still have to read?", "answer": [15.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books already read\n    books_read = c2\n\n    #calculate the total number of books in the series\n    total_books = c0\n\n    #calculate the number of books left to read\n    books_left = total_books - books_read\n\n    return books_left", "mapping": {"c0": 62.0, "c1": 19.0, "c2": 4.0, "c3": 34.0}}
{"question": "We ordered some pizzas. Each pizza has c0 slices. If there were a total of c1 slicesHow many pizzas did we order?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #each pizza has c0 slices\n    slices_per_pizza = c0\n\n    #there were a total of c1 slices\n    total_slices = c1\n\n    #The number of pizzas we ordered can be calculated by dividing the total number of slices by the number of slices per pizza\n    pizzas_ordered = total_slices // slices_per_pizza\n\n    return pizzas_ordered", "mapping": {"c0": 2.0, "c1": 28.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 bananas c2 eggs and c3 marbles.How many groups will be created?", "answer": [3.0], "response": "def egg_groups(c0, c1, c2, c3):\n    # calculate the total number of eggs\n    total_eggs = c2 + (c1 * 12)\n\n    # calculate the number of groups that can be created\n    groups = total_eggs // c0\n\n    return groups", "mapping": {"c0": 3.0, "c1": 99.0, "c2": 9.0, "c3": 27.0}}
{"question": "c0 children were riding on the bus. At the bus stop some children got off the bus. Then there were c1 children left on the bus.How many more children were on the bus before the bus stop than there are now?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #there were originally c0 children on the bus\n    children_before = c0\n\n    #some children got off the bus and now there are c1 children left\n    children_after = c1\n\n    #The number of children who got off the bus can be calculated by subtracting the number of children left on the bus from the original number of children\n    children_got_off = children_before - children_after\n\n    #The number of children on the bus before the bus stop can be calculated by adding the number of children who got off the bus to the number of children left on the bus\n    children_before_stop = children_after + children_got_off\n\n    #The difference between the number of children on the bus before the bus stop and the number of children left on the bus is the number of children who got off the bus\n    difference = children_before_stop - children_after\n\n    return difference", "mapping": {"c0": 41.0, "c1": 18.0}}
{"question": "In Haley's class some boys love to play marbles. Haley gives c0 marbles to each boy. If she had c1 marblesHow many boys did she give the marbles to?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Haley gives c0 marbles to each boy\n    marbles_per_boy = c0\n\n    #Haley had c1 marbles in total\n    total_marbles = c1\n\n    #The number of boys she gave marbles to can be calculated by dividing the total number of marbles by the number of marbles per boy\n    num_boys = total_marbles // marbles_per_boy\n\n    return num_boys", "mapping": {"c0": 2.0, "c1": 28.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many crackers and cakes did each person eat?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Matthew had c0 crackers and c1 cakes\n    crackers = c0\n    cakes = c1\n\n    #Matthew gave equal numbers of crackers and cakes to his c2 friends\n    friends = c2\n\n    #Calculate how many crackers and cakes each person ate\n    crackers_per_person = crackers // (friends + 1)\n    cakes_per_person = cakes // (friends + 1)\n\n    return crackers_per_person, cakes_per_person", "mapping": {"c0": 14.0, "c1": 21.0, "c2": 7.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 cookies yesterday c1 cookies this morning and c2 cookies the day before yesterday.How many cookies did Helen bake till last night?", "answer": [450.0], "response": "def total_cookies(c0, c1, c2):\n    #Helen baked c0 cookies yesterday\n    cookies_yesterday = c0\n\n    #Helen baked c1 cookies this morning\n    cookies_this_morning = c1\n\n    #Helen baked c2 cookies the day before yesterday\n    cookies_day_before_yesterday = c2\n\n    #The total number of cookies Helen baked till last night can be calculated by adding the number of cookies baked yesterday, this morning, and the day before yesterday\n    total = cookies_yesterday + cookies_this_morning + cookies_day_before_yesterday\n\n    return total", "mapping": {"c0": 31.0, "c1": 270.0, "c2": 419.0}}
{"question": "For the walls of the house he would use c0 nails in all to secure large planks of wood. If each plank of wood needs c1 pieces of nails to be securedHow many planks does John need for the house wall?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #calculate the total number of nails needed for the wall\n    total_nails = c0\n\n    #calculate the number of planks needed by dividing the total number of nails by the number of nails needed per plank\n    planks_needed = total_nails // c1\n\n    return planks_needed", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers did danny find at the park?", "answer": [16.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    bottle_caps_found = c0\n    wrappers_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    bottle_caps_total = c2\n    wrappers_total = c3\n\n    #Danny found x more bottle caps than wrappers, where x is the difference between the number of bottle caps found and the number of wrappers found\n    difference = bottle_caps_found - wrappers_found\n\n    return difference", "mapping": {"c0": 30.0, "c1": 14.0, "c2": 7.0, "c3": 86.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges do they harvest per day?", "answer": [280.0], "response": "def oranges_harvested(c0, c1):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #total oranges harvested per day can be calculated by multiplying the number of sacks by the number of oranges per sack\n    total_oranges = oranges_per_sack * sacks_per_day\n\n    return total_oranges", "mapping": {"c0": 8.0, "c1": 35.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 19.How much more did Edward spend on books than pens?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 on books and c1 on pens\n    spent_on_books = c0\n    spent_on_pens = c1\n\n    #Edward has $19 now\n    total_money = 19\n\n    #The difference between the amount spent on books and pens can be calculated by subtracting the amount spent on pens from the amount spent on books\n    difference = spent_on_books - spent_on_pens\n\n    #The amount spent on pens and books should add up to the total money Edward has\n    if spent_on_books + spent_on_pens == total_money:\n        return difference\n    else:\n        return \"Error: The total amount of money does not match the amount spent on books and pens.\"", "mapping": {"c0": 16.0, "c1": 8.0}}
{"question": "Emily is making bead necklaces for her friends. Each necklace takes c0 beads and she has c1 beads.How many necklaces can Emily make?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each necklace takes c0 beads\n    beads_per_necklace = c0\n\n    #Emily has c1 beads\n    total_beads = c1\n\n    #The number of necklaces Emily can make can be calculated by dividing the total number of beads by the number of beads per necklace\n    necklaces = total_beads // beads_per_necklace\n\n    return necklaces", "mapping": {"c0": 8.0, "c1": 16.0}}
{"question": "Dan has $ c0. He had $ c1 left with him after he bought a candy bar.How much did the candy bar cost?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dan had c1 left after buying the candy bar\n    money_left = c1\n\n    #The amount spent on the candy bar can be calculated by subtracting the money left from the original amount\n    spent = c0 - money_left\n\n    return spent", "mapping": {"c0": 4.0, "c1": 3.0}}
{"question": "Paul got a box of c0 crayons for his birthday. By the end of the school year he had either lost or given away c1 of them.How many crayons did he have left by the end of the school year?", "answer": [183.0], "response": "def Problem(c0, c1):\n    #Paul originally had c0 crayons\n    crayons_before = c0\n\n    #By the end of the school year, he had either lost or given away c1 of them\n    lost_or_given = c1\n\n    #The number of crayons he had left can be calculated by subtracting the number of lost or given away crayons from the original number of crayons\n    crayons_after = crayons_before - lost_or_given\n\n    return crayons_after", "mapping": {"c0": 253.0, "c1": 70.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many raisin cookies did Helen bake?", "answer": [482.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #Helen baked c2 raisin cookies and c3 chocolate chip cookies this morning\n    raisin_today = c2\n\n    #The total number of raisin cookies Helen baked can be calculated by adding the number of raisin cookies she baked yesterday and today\n    total_raisin = raisin_yesterday + raisin_today\n\n    return total_raisin", "mapping": {"c0": 144.0, "c1": 397.0, "c2": 85.0, "c3": 403.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 apples still on it. If c2 of those are ripe and the rest are unripeHow many ripe apples did the tree have to begin with?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #the number of ripe apples Rachel picked is c0\n    picked = c0\n\n    #the number of apples still on the tree is c1\n    remaining = c1\n\n    #the number of ripe apples still on the tree is c2\n    ripe_on_tree = c2\n\n    #the total number of ripe apples before Rachel picked any can be calculated by adding the number of ripe apples she picked to the number of ripe apples still on the tree\n    total_ripe = picked + ripe_on_tree\n\n    return total_ripe", "mapping": {"c0": 2.0, "c1": 7.0, "c2": 6.0}}
{"question": "An industrial machine made c0 shirts yesterday and c1 shirts today. It can make c2 shirts a minute.How many minutes did the machine work yesterday?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #the machine made c0 shirts yesterday\n    shirts_yesterday = c0\n\n    #the machine made c1 shirts today\n    shirts_today = c1\n\n    #the machine can make c2 shirts a minute\n    shirts_per_minute = c2\n\n    #the total number of shirts made by the machine\n    total_shirts = shirts_yesterday + shirts_today\n\n    #the number of minutes the machine worked yesterday can be calculated by dividing the total number of shirts by the number of shirts made per minute\n    minutes_worked_yesterday = total_shirts / shirts_per_minute\n\n    return minutes_worked_yesterday", "mapping": {"c0": 9.0, "c1": 44.0, "c2": 3.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than David.How many push-ups did John do?", "answer": [69.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Zachary did c0 push-ups\n    zachary = c0\n\n    #David did c1 more push-ups than Zachary\n    david = zachary + c1\n\n    #John did c2 push-ups less than David\n    john = david - c2\n\n    return john", "mapping": {"c0": 51.0, "c1": 22.0, "c2": 4.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many more raisin cookies did Helen bake yesterday compared to today?", "answer": [20.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #Helen baked c2 raisin cookies and c3 chocolate chip cookies this morning\n    raisin_today = c2\n\n    #The difference in the number of raisin cookies baked yesterday and today can be calculated by subtracting the number of raisin cookies baked today from the number baked yesterday\n    difference = raisin_yesterday - raisin_today\n\n    return difference", "mapping": {"c0": 519.0, "c1": 300.0, "c2": 280.0, "c3": 359.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many more bottles of regular soda did they have than diet soda?", "answer": [21.0], "response": "def Problem(c0, c1, c2):\n    #number of regular soda bottles\n    regular = c0\n\n    #number of diet soda bottles\n    diet = c1\n\n    #calculate the difference between regular and diet soda bottles\n    difference = regular - diet\n\n    return difference", "mapping": {"c0": 81.0, "c1": 60.0, "c2": 60.0}}
{"question": "Randy has some blocks. He uses c0 blocks to build a tower. If there are c1 blocks leftHow many blocks did he have at the start?", "answer": [90.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Randy used c0 blocks to build a tower\n    used_blocks = c0\n\n    #There are c1 blocks left after building the tower\n    left_blocks = c1\n\n    #The number of blocks Randy had at the start can be calculated by adding the number of used blocks to the number of left blocks\n    start_blocks = used_blocks + left_blocks\n\n    return start_blocks", "mapping": {"c0": 52.0, "c1": 38.0}}
{"question": "Edward had $ c0. He spent some money. Now he has $ 3.How much money did Edward spend?", "answer": [10.0], "response": "def Problem(c0):\n    #Edward had c0 dollars\n    initial_money = c0\n\n    #Now he has 3 dollars\n    final_money = 3\n\n    #The amount of money he spent can be calculated by subtracting the final amount from the initial amount\n    money_spent = initial_money - final_money\n\n    return money_spent", "mapping": {"c0": 13.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost some of his marbles at the playground. Now Ed has c1 more marbles than doug.How many marbles did Ed lose?", "answer": [11.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0 + doug_marbles\n\n    #Ed lost some of his marbles at the playground\n    ed_marbles_lost = ed_marbles - c1\n\n    #Now Ed has c1 more marbles than Doug\n    doug_marbles = ed_marbles_lost - c1\n\n    #The number of marbles Ed lost can be calculated by subtracting the number of marbles he has now from the number he had before losing some\n    ed_marbles_lost = ed_marbles - ed_marbles_lost\n\n    return ed_marbles_lost", "mapping": {"c0": 19.0, "c1": 8.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. There are also c2 chairs extra.How many chairs do they have for the guests?", "answer": [174.0], "response": "def Problem(c0, c1, c2):\n    #each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #they have c0 sets of tables\n    num_tables = c0\n\n    #they also have c2 extra chairs\n    extra_chairs = c2\n\n    #The total number of chairs they have for the guests can be calculated by multiplying the number of tables by the number of chairs per table and adding the extra chairs\n    total_chairs = (num_tables * chairs_per_table) + extra_chairs\n\n    return total_chairs", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 6.0}}
{"question": "The Ferris wheel in paradise park has c0 small seats and c1 large seats. Each small seat can hold c2 people and large seat can hold c3 people.How many people can ride the Ferris wheel on large seats?", "answer": [84.0], "response": "def FerrisWheel(c0, c1, c2, c3):\n    #calculate the total number of people that can ride on small seats\n    small_capacity = c0 * c2\n\n    #calculate the total number of people that can ride on large seats\n    large_capacity = c1 * c3\n\n    return large_capacity", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 16.0, "c3": 12.0}}
{"question": "There are c0 houses in a block. If a mailman has to give c1 pieces of junk mail to each house in each blockHow many pieces of junk mail should he give each block?", "answer": [640.0], "response": "def Problem(c0, c1):\n    #there are c0 houses in the block\n    houses = c0\n\n    #the mailman has to give c1 pieces of junk mail to each house\n    mail_per_house = c1\n\n    #the total number of pieces of junk mail the mailman has to give to the block can be calculated by multiplying the number of houses by the number of pieces of junk mail per house\n    total_mail = houses * mail_per_house\n\n    return total_mail", "mapping": {"c0": 20.0, "c1": 32.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many more bottles than apple did they have?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of bottles\n    total_bottles = c0 + c1\n\n    #calculate the difference between the total number of bottles and the number of apples\n    difference = total_bottles - c2\n\n    return difference", "mapping": {"c0": 72.0, "c1": 32.0, "c2": 78.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many green peaches are in the baskets altogether?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #each basket has c1 red peaches and c2 green peaches\n    green_per_basket = c2\n\n    #The total number of green peaches can be calculated by multiplying the number of baskets by the number of green peaches per basket\n    total_green = baskets * green_per_basket\n\n    return total_green", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 2.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. c1 new bird families came to live near the mountain from the arctic while c2 bird families flew away further south for winter.How many bird families were left near the mountain?", "answer": [27.0], "response": "def bird_families(c0, c1, c2):\n    #calculate the total number of bird families near the mountain after migration\n    total_bird_families = c0 + c1 - c2\n    return total_bird_families", "mapping": {"c0": 3.0, "c1": 26.0, "c2": 2.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested mashed potatoes than those that suggested tomatoes?", "answer": [65.0], "response": "def Problem(c0, c1, c2):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested tomatoes\n    tomatoes = c2\n\n    #difference between the number of students who suggested mashed potatoes and tomatoes\n    difference = mashed_potatoes - tomatoes\n\n    return difference", "mapping": {"c0": 144.0, "c1": 467.0, "c2": 79.0}}
{"question": "Jesse's rooms are c0 feet long and c1 feet wide. If she has c2 rooms in allHow much carpet does she need to cover the floors of all rooms?", "answer": [6840.0], "response": "def Problem(c0, c1, c2):\n    #calculate the area of one room\n    room_area = c0 * c1\n\n    #calculate the total area of all rooms\n    total_area = room_area * c2\n\n    return total_area", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 20.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of reading homework than math homeworkHow many pages did she have to complete in all?", "answer": [23.0], "response": "def total_homework(c0, c1):\n    # Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    # Rachel had to complete c1 more pages of reading homework than math homework\n    reading_homework = c0 + c1\n\n    # The total number of pages Rachel had to complete is the sum of math and reading homework\n    total_pages = math_homework + reading_homework\n\n    return total_pages", "mapping": {"c0": 10.0, "c1": 3.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more boys than girlsHow many pupils are there in that school?", "answer": [1542.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #the rest of the pupils are boys\n    boys = total - girls\n\n    #there are c1 more boys than girls\n    boys_more = c1\n\n    #the total number of pupils can be calculated by adding the number of girls and boys\n    total = girls + boys\n\n    #the number of boys can be calculated by adding the number of girls and the number of boys more than girls\n    boys = girls + boys_more\n\n    #the total number of pupils can be calculated again by adding the number of girls and the number of boys\n    total = girls + boys\n\n    return total", "mapping": {"c0": 700.0, "c1": 142.0}}
{"question": "A waiter had c0 customers. c1 customers left.How many customers does he still have?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #there are originally c0 customers\n    customers_before = c0\n\n    #c1 customers left\n    customers_left = c1\n\n    #The number of customers still remaining can be calculated by subtracting the number of customers left from the original number of customers\n    customers_remaining = customers_before - customers_left\n\n    return customers_remaining", "mapping": {"c0": 14.0, "c1": 5.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and c1 packs of cake. In the end she had c2 amount of change remaining.How many packs of groceries did she buy in all?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Lucy bought c0 packs of cookie\n    cookies = c0\n\n    #Lucy bought c1 packs of cake\n    cakes = c1\n\n    #Lucy had c2 amount of change remaining\n    change = c2\n\n    #The total amount spent on groceries can be calculated by subtracting the change from the total cost of groceries\n    total_cost = (cookies + cakes) - change\n\n    return total_cost\n\n#Alternatively, we can calculate the total number of packs of groceries bought by adding the number of packs of cookies and cakes\ndef Problem(c0, c1, c2):\n    #Lucy bought c0 packs of cookie\n    cookies = c0\n\n    #Lucy bought c1 packs of cake\n    cakes = c1\n\n    #Lucy had c2 amount of change remaining\n    change = c2\n\n    #The total number of packs of groceries bought can be calculated by adding the number of packs of cookies and cakes\n    total_packs = cookies + cakes\n\n    return total_packs", "mapping": {"c0": 2.0, "c1": 12.0, "c2": 56.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of sugar does she need to add?", "answer": [1.0], "response": "def sugar_needed(c0, c1, c2, c3):\n    #calculate how much sugar is already added\n    sugar_added = c3\n\n    #calculate how much sugar is needed\n    sugar_needed = c0 - sugar_added\n\n    return sugar_needed", "mapping": {"c0": 11.0, "c1": 9.0, "c2": 12.0, "c3": 10.0}}
{"question": "Marco and his dad went strawberry picking. His strawberries weighed c0 pounds while his dad's strawberries weighed c1 pounds.Together how much did their strawberries weigh?", "answer": [40.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #His dad's strawberries weighed c1 pounds\n    dad_weight = c1\n\n    #The total weight of their strawberries can be calculated by adding Marco's and his dad's strawberry weights\n    total_weight = marco_weight + dad_weight\n\n    return total_weight", "mapping": {"c0": 8.0, "c1": 32.0}}
{"question": "Kelly gives away c0 nintendo games.How many did she have initially if she still has c1 games left?", "answer": [183.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Kelly gives away c0 nintendo games\n    games_given_away = c0\n\n    #Kelly still has c1 games left\n    games_left = c1\n\n    #The number of games Kelly initially had can be calculated by adding the number of games given away to the number of games left\n    initial_games = games_given_away + games_left\n\n    return initial_games", "mapping": {"c0": 91.0, "c1": 92.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow many t-shirts did they sell during the Texas tech game?", "answer": [127.0], "response": "def Problem(c0, c1, c2):\n    #they sold c2 t-shirts during the Arkansas game\n    sold_arkansas = c2\n\n    #they sold a total of c1 t-shirts during both games\n    total_sold = c1\n\n    #the number of t-shirts sold during the Texas tech game can be calculated by subtracting the number of t-shirts sold during the Arkansas game from the total number of t-shirts sold\n    sold_texas = total_sold - sold_arkansas\n\n    return sold_texas", "mapping": {"c0": 106.0, "c1": 242.0, "c2": 115.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas and Texas tech game they made $ c1 by selling t-shirts.How many t-shirts did they sell?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #each t-shirt sold makes c0 dollars\n    revenue_per_shirt = c0\n\n    #the total revenue made during the game is c1 dollars\n    total_revenue = c1\n\n    #The number of t-shirts sold can be calculated by dividing the total revenue by the revenue per shirt\n    shirts_sold = total_revenue / revenue_per_shirt\n\n    return shirts_sold", "mapping": {"c0": 23.0, "c1": 230.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a house and c2 blocks to build a tower.How many more blocks did he use to build the house than he did to build the tower?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    blocks_before = c0\n\n    #He uses c1 blocks to build a house\n    house_blocks = c1\n\n    #He uses c2 blocks to build a tower\n    tower_blocks = c2\n\n    #The difference between the number of blocks used to build the house and the number of blocks used to build the tower can be calculated by subtracting the number of tower blocks from the number of house blocks\n    difference = house_blocks - tower_blocks\n\n    return difference", "mapping": {"c0": 90.0, "c1": 89.0, "c2": 63.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Jake brought c1 balloons\n    jake_balloons = c1\n\n    #The difference between the number of balloons Jake brought and the number Allan brought is the number of balloons Jake had more than Allan\n    more_balloons = jake_balloons - allan_balloons\n\n    return more_balloons", "mapping": {"c0": 2.0, "c1": 3.0}}
{"question": "Every day Ryan spends c0 hours on learning english, c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning english than he does on learning spanish?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c2 hours on learning spanish\n    spanish_hours = c2\n\n    #The difference between the hours spent on learning english and spanish can be calculated by subtracting the spanish hours from the english hours\n    difference = english_hours - spanish_hours\n\n    return difference", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 4.0}}
{"question": "Robin has c0 packages of gum. There are c1 pieces in each package. Robin has c2 extra pieces of gum.How many pieces of gum does Robin have?", "answer": [997.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum\n    packages = c0\n\n    #There are c1 pieces in each package\n    pieces_per_package = c1\n\n    #Robin has c2 extra pieces of gum\n    extra_pieces = c2\n\n    #The total number of pieces of gum Robin has can be calculated by multiplying the number of packages by the number of pieces per package and adding the extra pieces\n    total_pieces = (packages * pieces_per_package) + extra_pieces\n\n    return total_pieces", "mapping": {"c0": 43.0, "c1": 23.0, "c2": 8.0}}
{"question": "Paul had c0 books. After selling some books in a garage sale and giving c1 books to his friend he had c2 books left.How many books did he sell in the garage sale?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Paul had c0 books\n    books_before = c0\n\n    #After selling some books in a garage sale and giving c1 books to his friend he had c2 books left\n    books_after = c2\n\n    #The number of books he sold in the garage sale can be calculated by subtracting the number of books he gave to his friend and the number of books he had left from the original number of books\n    sold = books_before - books_after + c1\n\n    return sold", "mapping": {"c0": 108.0, "c1": 35.0, "c2": 62.0}}
{"question": "For the walls of the house he would use c0 large planks of wood and c1 small planks. If each large plank of wood needs c2 pieces of nails to be secured and each small plank needs c3 nails.How many planks does John need for the house wall?", "answer": [29.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of planks needed by adding the number of large and small planks\n    total_planks = c0 + c1\n\n    #calculate the total number of nails needed by multiplying the number of large planks by the number of nails per large plank and adding it to the number of small planks multiplied by the number of nails per small plank\n    total_nails = (c0 * c2) + (c1 * c3)\n\n    return total_planks, total_nails", "mapping": {"c0": 12.0, "c1": 17.0, "c2": 14.0, "c3": 25.0}}
{"question": "Melissa played c0 games and scored a total of c1 points scoring the same for each game.How many points did she score in each game?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa played c0 games\n    games_played = c0\n\n    #Melissa scored a total of c1 points\n    total_points = c1\n\n    #To find out how many points she scored in each game, we can divide the total points by the number of games played\n    points_per_game = total_points / games_played\n\n    return points_per_game", "mapping": {"c0": 3.0, "c1": 81.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 baseball cards and c3 Ace cards left.How many more Ace cards than baseball cards does Nell have?", "answer": [91.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some of her cards to Jeff and now has c2 baseball cards and c3 Ace cards left\n    baseball_after = c2\n    ace_after = c3\n\n    #calculate how many cards Nell gave to Jeff\n    baseball_gave = baseball_before - baseball_after\n    ace_gave = ace_before - ace_after\n\n    #calculate how many more Ace cards than baseball cards Nell has\n    difference = ace_after - baseball_after\n\n    return difference", "mapping": {"c0": 246.0, "c1": 214.0, "c2": 404.0, "c3": 495.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf and removed c2 old ones.How many action figures were on his shelf in all?", "answer": [7.0], "response": "def total_action_figures(c0, c1, c2):\n    # Jerry had c0 action figures on the shelf\n    initial_figures = c0\n\n    # Jerry added c1 more action figures to the shelf\n    added_figures = c1\n\n    # Jerry removed c2 old action figures from the shelf\n    removed_figures = c2\n\n    # The total number of action figures on the shelf can be calculated by adding the initial figures and the added figures, and then subtracting the removed figures\n    total_figures = initial_figures + added_figures - removed_figures\n\n    return total_figures", "mapping": {"c0": 8.0, "c1": 4.0, "c2": 5.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds in c1 flowerbeds. If they put same number of seeds in each flower bedHow many seeds did they plant in each flowerbed?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #they planted c0 seeds in c1 flowerbeds\n    seeds_planted = c0\n    flowerbeds = c1\n\n    #To find out how many seeds they planted in each flowerbed, we can divide the total number of seeds by the number of flowerbeds\n    seeds_per_flowerbed = seeds_planted / flowerbeds\n\n    return seeds_per_flowerbed", "mapping": {"c0": 45.0, "c1": 9.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each of the c1 blocks. If there are c2 houses in each blockHow many pieces of junk mail should he give in each block?", "answer": [48.0], "response": "def Problem(c0, c1, c2):\n    #the mailman has to give c0 pieces of junk mail to each house\n    mail_per_house = c0\n\n    #there are c1 blocks\n    blocks = c1\n\n    #there are c2 houses in each block\n    houses_per_block = c2\n\n    #The total number of pieces of junk mail that the mailman should give in each block can be calculated by multiplying the number of houses per block by the number of pieces of junk mail per house\n    total_mail_per_block = mail_per_house * houses_per_block\n\n    return total_mail_per_block", "mapping": {"c0": 4.0, "c1": 81.0, "c2": 12.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make per day in the remaining c4 days at the carnival?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3, c4):\n    #calculate the total amount made in all days\n    total_amount = c0 + c2\n\n    #calculate the number of days in total\n    total_days = c1 + c3\n\n    #calculate the amount made per day in total\n    amount_per_day = total_amount / total_days\n\n    #calculate the amount made per day in the remaining days\n    remaining_days = c4\n    amount_per_day_remaining = c2 / remaining_days\n\n    return amount_per_day_remaining", "mapping": {"c0": 325.0, "c1": 154.0, "c2": 114.0, "c3": 57.0, "c4": 57.0}}
{"question": "Brenda's mother made cookies for c0 guests but c1 guests did not come. If she prepared c2 cookies and each guest had the same number of cookiesHow many did each of them have?", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of guests who actually came\n    guests_came = c0 - c1\n\n    #calculate the number of cookies each guest had\n    cookies_per_guest = c2 // guests_came\n\n    return cookies_per_guest", "mapping": {"c0": 10.0, "c1": 9.0, "c2": 18.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of salt does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate how many cups of flour Mary needs to add\n    flour_needed = c1 - c3\n\n    #calculate how many cups of salt Mary needs to add\n    salt_needed = c2\n\n    #calculate the difference between the amount of flour and salt needed\n    difference = flour_needed - salt_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 4.0, "c3": 2.0}}
{"question": "Baker made some cakes. He sold c0 of them. If he still has c1 cakes leftHow many cakes did baker make?", "answer": [217.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Baker made some cakes\n    cakes_made = c0\n\n    #He sold c0 of them and still has c1 cakes left\n    cakes_left = c1\n\n    #The total number of cakes he made can be calculated by adding the number of cakes he sold to the number of cakes he still has\n    total_cakes = cakes_made + cakes_left\n\n    return total_cakes", "mapping": {"c0": 145.0, "c1": 72.0}}
{"question": "Jesse needs a carpet of size c0 square feet to cover her room. If her room is c1 feet wideWhat is the length of her room?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #the area of the room is c0 square feet\n    room_area = c0\n\n    #the width of the room is c1 feet\n    room_width = c1\n\n    #the length of the room can be calculated by dividing the area by the width\n    room_length = room_area / room_width\n\n    return room_length", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "There are some bananas in Philip's banana collection. If the bananas are organized into c0 groups of size c1 How many bananas does he have in his collection?", "answer": [26180.0], "response": "def Problem(c0, c1):\n    #each group has c1 bananas\n    bananas_per_group = c1\n\n    #there are c0 groups\n    num_groups = c0\n\n    #total number of bananas is the product of bananas per group and number of groups\n    total_bananas = bananas_per_group * num_groups\n\n    return total_bananas", "mapping": {"c0": 140.0, "c1": 187.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 eggs c2 bananas and c3 marbles.How many groups will be created?", "answer": [3.0], "response": "def egg_groups(c0, c1, c2, c3):\n    #calculate the number of egg groups that can be created\n    egg_groups = c1 // c0\n    \n    return egg_groups", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 72.0, "c3": 66.0}}
{"question": "Jessie currently weighs c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much did she weigh before starting to jog?", "answer": [211.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jessie currently weighs c0 kilograms\n    current_weight = c0\n\n    #She lost c1 kilograms in the first week\n    first_week_loss = c1\n\n    #She lost c2 kilograms in the second week\n    second_week_loss = c2\n\n    #Her weight before starting to jog can be calculated by adding the total weight loss to her current weight\n    starting_weight = current_weight + first_week_loss + second_week_loss\n\n    return starting_weight", "mapping": {"c0": 9.0, "c1": 62.0, "c2": 140.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 seats on each school bus. If there are a total of c2 students in the schoolHow many buses are needed to take the trip?", "answer": [37.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of seats available on all the buses\n    total_seats = c0 * c1\n\n    #calculate the number of buses needed by dividing the total number of students by the total number of seats available on all the buses\n    buses_needed = c2 // total_seats\n\n    #if there are any remaining students, add one more bus\n    if c2 % total_seats != 0:\n        buses_needed += 1\n\n    return buses_needed", "mapping": {"c0": 72.0, "c1": 3.0, "c2": 111.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many campers went rowing in all?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The total number of campers who went rowing can be calculated by adding the number of campers who went rowing in the morning and afternoon\n    total_rowing = rowing_morning + rowing_afternoon\n\n    return total_rowing", "mapping": {"c0": 13.0, "c1": 59.0, "c2": 21.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added c1 more action figures to the shelf. If he also has c2 books on the shelfHow many more action figures than books were on his shelf?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of action figures on the shelf after Jerry added more\n    total_action_figures = c0 + c1\n\n    #calculate the difference between the total number of action figures and the number of books on the shelf\n    difference = total_action_figures - c2\n\n    return difference", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 10.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles ones while he lost c2 marbles.How many marbles does he have now?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He found c1 marbles\n    found = c1\n\n    #He lost c2 marbles\n    lost = c2\n\n    #The number of marbles he has now can be calculated by adding the number of marbles found and subtracting the number of marbles lost from the original number of marbles\n    marbles_now = marbles_before + found - lost\n\n    return marbles_now", "mapping": {"c0": 22.0, "c1": 13.0, "c2": 5.0}}
{"question": "For the walls of the house he would use c0 large planks of wood and c1 small planks. If large planks together need c2 pieces of nails to be secured and small planks together need c3 nails.How many nails does John need for the house wall?", "answer": [20.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of nails needed for large planks\n    large_nails = c0 * c2\n\n    #number of nails needed for small planks\n    small_nails = c1 * c3\n\n    #total number of nails needed\n    total_nails = large_nails + small_nails\n\n    return total_nails", "mapping": {"c0": 12.0, "c1": 10.0, "c2": 15.0, "c3": 5.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many more crayons did he give to his friends than those he lost?", "answer": [410.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    crayons_before = c0\n\n    #During the school year he gave c1 crayons to his friends\n    given = c1\n\n    #he lost c2 crayons\n    lost = c2\n\n    #The difference between the number of crayons given to friends and the number of crayons lost can be calculated by subtracting the number of lost crayons from the number of given crayons\n    difference = given - lost\n\n    return difference", "mapping": {"c0": 589.0, "c1": 571.0, "c2": 161.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the morning than in the evening?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c2 emails in the evening\n    evening_emails = c2\n\n    #The difference in the number of emails between morning and evening can be calculated by subtracting the number of evening emails from the number of morning emails\n    difference = morning_emails - evening_emails\n\n    return difference", "mapping": {"c0": 9.0, "c1": 10.0, "c2": 7.0}}
{"question": "Jack received c0 emails in the morning and c1 emails in the afternoon.How many more emails did Jack receive in the afternoon than in the morning?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #The difference between the number of emails in the afternoon and morning can be calculated by subtracting the number of morning emails from the number of afternoon emails\n    difference = afternoon_emails - morning_emails\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There were c0 paintings in the Buckingham palace. There, Rachel learned that c1 visitors came to the Buckingham palace that day. If there were c2 visitors the previous dayHow many visited the Buckingham palace within c3 days?", "answer": [745.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #there were originally c0 paintings in the Buckingham palace\n    paintings_before = c0\n\n    #c1 visitors came to the Buckingham palace that day\n    visitors_today = c1\n\n    #c2 visitors came to the Buckingham palace the previous day\n    visitors_yesterday = c2\n\n    #To calculate the total number of visitors within c3 days, we need to add the visitors from today, yesterday, and the previous c3-2 days\n    visitors_total = visitors_today + visitors_yesterday\n\n    for i in range(c3-2):\n        #assuming the same number of visitors came to the Buckingham palace each day, we can add the visitors from the previous day to the total number of visitors\n        visitors_total += visitors_yesterday\n\n    #finally, we need to add the number of visitors on the first day (which is not included in the loop)\n    visitors_total += visitors_today\n\n    return visitors_total", "mapping": {"c0": 71.0, "c1": 557.0, "c2": 188.0, "c3": 57.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many more chocolate chip cookies did Helen bake yesterday compared to today?", "answer": [131.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies yesterday\n    choco_yesterday = c0\n\n    #Helen baked c1 raisin cookies yesterday\n    raisin_yesterday = c1\n\n    #Helen baked c2 raisin cookies this morning\n    raisin_today = c2\n\n    #Helen baked c3 chocolate chip cookies this morning\n    choco_today = c3\n\n    #The number of chocolate chip cookies Helen baked yesterday compared to today can be calculated by subtracting the number of chocolate chip cookies baked today from the number baked yesterday\n    choco_difference = choco_yesterday - choco_today\n\n    return choco_difference", "mapping": {"c0": 197.0, "c1": 46.0, "c2": 75.0, "c3": 66.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jill have?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #Steven has c1 more peaches than Jill\n    jill_peaches = steven_peaches - c1\n\n    return jill_peaches\n\n#The function takes in three arguments: c0, c1, and c2\n#It first calculates how many peaches Jake has by subtracting c0 from Steven's number of peaches\n#Then it calculates how many peaches Jill has by subtracting c1 from Steven's number of peaches\n#Finally, it returns the number of peaches Jill has.", "mapping": {"c0": 18.0, "c1": 13.0, "c2": 19.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and some packs of cake. In total she had c1 packs of groceryHow many packs of cake did she buy in all?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Lucy bought c0 packs of cookie\n    cookie_packs = c0\n\n    #In total she had c1 packs of grocery\n    total_packs = c1\n\n    #The number of packs of cake she bought can be calculated by subtracting the number of cookie packs from the total number of grocery packs\n    cake_packs = total_packs - cookie_packs\n\n    return cake_packs", "mapping": {"c0": 23.0, "c1": 27.0}}
{"question": "Every day Ryan spends c0 hours on learning english c1 hours on learning chinese and c2 hours on learning spanish.How many more hours does he spend on learning english than he does on learning chinese?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #The difference between the hours spent on learning english and chinese can be calculated by subtracting the number of chinese hours from the number of english hours\n    difference = english_hours - chinese_hours\n\n    return difference", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 58.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. The second chapter is c2 pages long.How many more pages does the first chapter have than the second chapter?", "answer": [37.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of pages in the book\n    total_pages = 0\n    for i in range(c0):\n        if i == 0:\n            total_pages += c1\n        else:\n            total_pages += c2\n\n    #calculate the difference in pages between the first and second chapter\n    diff = c1 - c2\n\n    return diff", "mapping": {"c0": 2.0, "c1": 48.0, "c2": 11.0}}
{"question": "c0 green peaches, c1 yellow peaches and c2 red peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #number of green peaches\n    green = c0\n    #number of yellow peaches\n    yellow = c1\n    #number of red peaches\n    red = c2\n\n    #calculate the difference between the number of green and red peaches\n    difference = green - red\n\n    return difference", "mapping": {"c0": 6.0, "c1": 60.0, "c2": 2.0}}
{"question": "Debby drinks c0 bottles a day. If she bought a total of c1 water bottlesHow many days would they last her?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Debby drinks c0 bottles a day\n    daily_consumption = c0\n\n    #She bought a total of c1 water bottles\n    total_bottles = c1\n\n    #The number of days the water bottles would last her can be calculated by dividing the total number of bottles by her daily consumption\n    days_last = total_bottles / daily_consumption\n\n    return days_last", "mapping": {"c0": 6.0, "c1": 12.0}}
{"question": "There were c0 parents in the program and c1 people in total.How many pupils were present in the program?", "answer": [654.0], "response": "def calculate_pupils(c0, c1):\n    # calculate the number of pupils by subtracting the number of parents from the total number of people\n    pupils = c1 - c0\n    return pupils", "mapping": {"c0": 22.0, "c1": 676.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with altogether?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    kids_monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    kids_tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    kids_wednesday = c2\n\n    #The total number of kids Julia played with can be calculated by adding the number of kids she played with on each day\n    total_kids = kids_monday + kids_tuesday + kids_wednesday\n\n    return total_kids", "mapping": {"c0": 17.0, "c1": 15.0, "c2": 2.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How far did the mouse jump?", "answer": [45.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse_jump = frog_jump + c2\n\n    return mouse_jump", "mapping": {"c0": 25.0, "c1": 18.0, "c2": 2.0}}
{"question": "Next on his checklist is wax to stick the feathers together and colors to paint them. He needs a total of c0 g of colors to paint them. If the feathers require c1 g of wax and right now he just needs c2 gHow many grams of wax does he already have?", "answer": [28.0], "response": "def Problem(c0, c1, c2):\n    #he needs c0 g of colors to paint the feathers\n    colors_needed = c0\n\n    #the feathers require c1 g of wax\n    wax_required = c1\n\n    #he just needs c2 g of wax right now\n    wax_current = c2\n\n    #The grams of wax he already has can be calculated by subtracting the wax required from the current wax\n    wax_owned = wax_current - wax_required\n\n    return wax_owned", "mapping": {"c0": 49.0, "c1": 288.0, "c2": 260.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs to add c0 - c2 cups of flour\n    flour_needed = c0 - c2\n\n    #Mary needs to add c1 cups of sugar\n    sugar_needed = c1\n\n    #The difference between the amount of flour needed and the amount of sugar needed is the answer\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 14.0, "c1": 6.0, "c2": 5.0}}
{"question": "Jake has c0 more apples and c1 fewer peaches than Steven. Steven has c2 peaches and c3 apples.How many apples does Jake have?", "answer": [25.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Jake has c0 more apples and c1 fewer peaches than Steven\n    jake_apples = steven_apples + c0\n    jake_peaches = steven_peaches - c1\n\n    #The number of apples Jake has can be calculated by adding the number of apples Steven has with the additional apples Jake has\n    total_apples = jake_apples\n\n    return total_apples", "mapping": {"c0": 13.0, "c1": 17.0, "c2": 8.0, "c3": 12.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Jill have than Jake?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Jill has c1 more peaches than Steven\n    jill_peaches = steven_peaches + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #The difference between Jill's and Jake's peaches can be calculated by subtracting Jake's peaches from Jill's peaches\n    difference = jill_peaches - jake_peaches\n\n    return difference", "mapping": {"c0": 12.0, "c1": 11.0, "c2": 4.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars and Jason did not work.How much money do they have together now?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Fred now has c2 dollars after washing cars\n    fred_after = c2\n\n    #The total amount of money they have together now can be calculated by adding Fred's current money and Jason's previous money\n    total_money = fred_after + jason_before\n\n    return total_money", "mapping": {"c0": 86.0, "c1": 5.0, "c2": 9.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many peaches does Jake have?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Steven has c3 apples\n    steven_apples = c3\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = steven_apples + c1\n\n    return jake_peaches\n\n#The function takes in four arguments: c0, c1, c2, and c3. These represent the number of peaches Jake has fewer than Steven, the number of apples Jake has more than Steven, the number of peaches Steven has, and the number of apples Steven has, respectively.\n\n#We first assign the number of peaches and apples Steven has to variables steven_peaches and steven_apples.\n\n#We then calculate the number of peaches Jake has by subtracting c0 from steven_peaches.\n\n#Finally, we return the number of peaches Jake has.", "mapping": {"c0": 12.0, "c1": 79.0, "c2": 19.0, "c3": 14.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the movies and watched c3 of the booksHow many more books than movies have you read?", "answer": [5.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books read\n    books_read = c3\n\n    #calculate the number of movies watched\n    movies_watched = c2\n\n    #calculate the difference between the number of books and movies\n    difference = books_read - movies_watched\n\n    return difference", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 14.0, "c3": 19.0}}
{"question": "Debby bought c0 water bottles when they were on sale. If she drank c1 bottles a day for some days. If she has c2 bottles leftHow many days did she drink for?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Debby bought c0 water bottles\n    bottles_bought = c0\n\n    #Debby drank c1 bottles a day for some days\n    bottles_drunk_per_day = c1\n\n    #Debby has c2 bottles left\n    bottles_left = c2\n\n    #The number of days Debby drank for can be calculated by subtracting the number of bottles left from the number of bottles bought, then dividing by the number of bottles drunk per day\n    days_drunk = (bottles_bought - bottles_left) / bottles_drunk_per_day\n\n    return days_drunk", "mapping": {"c0": 301.0, "c1": 144.0, "c2": 157.0}}
{"question": "He also had c0 aquariums for saltwater animals and c1 aquariums for freshwater animals. Each aquarium has c2 animals in it.How many saltwater animals does Tyler have?", "answer": [2184.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 aquariums for saltwater animals\n    saltwater_aquariums = c0\n\n    #there are c1 aquariums for freshwater animals\n    freshwater_aquariums = c1\n\n    #each aquarium has c2 animals in it\n    animals_per_aquarium = c2\n\n    #The total number of saltwater animals can be calculated by multiplying the number of saltwater aquariums by the number of animals per aquarium\n    saltwater_animals = saltwater_aquariums * animals_per_aquarium\n\n    return saltwater_animals", "mapping": {"c0": 56.0, "c1": 10.0, "c2": 39.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. She found c1 bags of cans on the next day and c2 bags of cans the day after that.How many bags did she have altogether?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    bags_monday = c0\n\n    #She found c1 bags of cans on the next day\n    bags_tuesday = c1\n\n    #She found c2 bags of cans the day after that\n    bags_wednesday = c2\n\n    #The total number of bags she has altogether can be calculated by adding the number of bags she had on Monday, Tuesday, and Wednesday\n    total_bags = bags_monday + bags_tuesday + bags_wednesday\n\n    return total_bags", "mapping": {"c0": 10.0, "c1": 3.0, "c2": 7.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches and the frog jumped c1 inches.How much did they jump altogether?", "answer": [66.0], "response": "def jumping_contest(c0, c1):\n    #calculate the total distance jumped by adding the distances jumped by the grasshopper and the frog\n    total_distance = c0 + c1\n    return total_distance", "mapping": {"c0": 31.0, "c1": 35.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much did she spend?", "answer": [89.0], "response": "def Problem(c0, c1, c2):\n    #Olivia had c0 dollars in her wallet\n    initial_money = c0\n\n    #She collected c1 more dollars from an atm\n    collected_money = c1\n\n    #After visiting the supermarket, she had c2 dollars left\n    remaining_money = c2\n\n    #The amount she spent can be calculated by subtracting the remaining money from the total money she had initially and collected\n    spent_money = initial_money + collected_money - remaining_money\n\n    return spent_money", "mapping": {"c0": 100.0, "c1": 148.0, "c2": 159.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers.How many more customers left than those that stayed behind?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #there were originally c0 customers\n    customers_before = c0\n\n    #after some left, there are c1 customers remaining\n    customers_after = c1\n\n    #the number of customers that left can be calculated by subtracting the number of customers remaining from the original number of customers\n    left = customers_before - customers_after\n\n    #the number of customers that stayed behind can be calculated by subtracting the number of customers that left from the original number of customers\n    stayed = customers_before - left\n\n    #the number of customers that left more than those that stayed behind can be calculated by subtracting the number of customers that stayed from the number of customers that left\n    more_left = left - stayed\n\n    return more_left", "mapping": {"c0": 11.0, "c1": 3.0}}
{"question": "Katie had c0 ds games and her friends had c1 games.How many more games does Katie have than her friends?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Katie has c0 games\n    katie_games = c0\n\n    #Katie's friends have c1 games\n    friends_games = c1\n\n    #The difference between the number of games Katie has and her friends have can be calculated by subtracting the number of her friends' games from Katie's games\n    difference = katie_games - friends_games\n\n    return difference", "mapping": {"c0": 81.0, "c1": 59.0}}
{"question": "Frank put some pieces of candy equally into c0 bags. If he had c1 pieces of candyHow many pieces of candy are in each bag?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Frank put c1 pieces of candy into c0 bags equally\n    candy_per_bag = c1 // c0\n\n    return candy_per_bag", "mapping": {"c0": 2.0, "c1": 16.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes in c2 days.How many drums of grapes would be filled in each day?", "answer": [18.0], "response": "def Problem(c0, c1, c2):\n    #c1 drums of grapes are filled in c2 days\n    drums_per_day = c1/c2\n\n    return drums_per_day", "mapping": {"c0": 266.0, "c1": 90.0, "c2": 5.0}}
{"question": "Julia played tag with c0 kids on tuesday. She had played tag with c1 kids on monday.How many more kids did she play with on monday than on tuesday?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on tuesday\n    tuesday_kids = c0\n\n    #Julia played tag with c1 kids on monday\n    monday_kids = c1\n\n    #The difference between the number of kids she played with on monday and tuesday can be calculated by subtracting the number of kids on tuesday from the number of kids on monday\n    difference = monday_kids - tuesday_kids\n\n    return difference", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "Julia played tag with a total of c0 kids. She played with c1 kids on monday and yet with some more kids on tuesday.How many kids did she play with on tuesday?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Julia played with c1 kids on Monday\n    played_monday = c1\n\n    #The total number of kids she played with is c0\n    total_played = c0\n\n    #To find out how many kids she played with on Tuesday, we need to subtract the number of kids she played with on Monday from the total number of kids she played with\n    played_tuesday = total_played - played_monday\n\n    return played_tuesday", "mapping": {"c0": 18.0, "c1": 4.0}}
{"question": "Jerry had c0 books and c1 action figures on a shelf in his room. Later he added c2 more action figures to the shelf.How many more action figures than books were on his shelf?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 books and c1 action figures on a shelf in his room\n    books = c0\n    action_figures_before = c1\n\n    #Later he added c2 more action figures to the shelf\n    added_action_figures = c2\n\n    #The total number of action figures on the shelf after the addition can be calculated by adding the original number of action figures and the added action figures\n    action_figures_after = action_figures_before + added_action_figures\n\n    #The difference between the number of action figures and books can be calculated by subtracting the number of books from the number of action figures\n    difference = action_figures_after - books\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "There are c0 houses on a block. If a mailman has to give c1 pieces of junk mail to each blockHow many pieces of junk mail should he give in each house?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #there are c0 houses on the block\n    houses = c0\n\n    #the mailman has to give c1 pieces of junk mail to each block\n    mail_per_block = c1\n\n    #to find out how many pieces of junk mail the mailman should give in each house, we need to divide the total number of pieces of junk mail by the number of houses\n    mail_per_house = mail_per_block / houses\n\n    return mail_per_house", "mapping": {"c0": 6.0, "c1": 24.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many more files than apps does he have left on the phone?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of apps left after deleting some\n    apps_left = c2\n\n    #calculate the number of files left after deleting some\n    files_left = c3\n\n    #calculate the difference between the number of files and apps left\n    difference = files_left - apps_left\n\n    return difference", "mapping": {"c0": 19.0, "c1": 18.0, "c2": 6.0, "c3": 15.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many more cakes did baker buy than those he sold?", "answer": [78.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    made = c0\n\n    #Baker bought c1 new cakes\n    bought = c1\n\n    #Baker sold c2 cakes\n    sold = c2\n\n    #The difference between the number of cakes bought and sold can be calculated by subtracting the number of cakes sold from the number of cakes bought\n    difference = bought - sold\n\n    return difference", "mapping": {"c0": 99.0, "c1": 167.0, "c2": 89.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many birds and storks are sitting on the fence?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 birds and c1 storks sitting on the fence\n    birds_before = c0\n    storks_before = c1\n\n    #c2 more storks came to join them\n    storks_arrived = c2\n\n    #The number of birds and storks sitting on the fence can be calculated by adding the original number of birds and storks with the number of storks arrived\n    birds_after = birds_before\n    storks_after = storks_before + storks_arrived\n\n    return (birds_after, storks_after)", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 6.0}}
{"question": "David did c0 push-ups in gym class today. David did c1 more push-ups than Zachary.How many push-ups did Zachary do?", "answer": [35.0], "response": "def zachary_pushups(c0, c1):\n    # David did c0 push-ups\n    david_pushups = c0\n\n    # David did c1 more push-ups than Zachary\n    david_extra_pushups = c1\n\n    # Zachary did c0 - c1 push-ups\n    zachary_pushups = david_pushups - david_extra_pushups\n\n    return zachary_pushups", "mapping": {"c0": 44.0, "c1": 9.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 19.How much did Edward have before he spent his money?", "answer": [41.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 on books and c1 on pens\n    spent = c0 + c1\n\n    #Now he has $19 left\n    remaining = 19\n\n    #The amount Edward had before he spent his money can be calculated by adding the amount he spent to the amount he has left\n    total = spent + remaining\n\n    return total", "mapping": {"c0": 6.0, "c1": 16.0}}
{"question": "Bryan took a look at his books as well. Each bookshelf contains c0 books. If he has a total of c1 booksHow many bookshelves does he have?", "answer": [19.0], "response": "def Problem(c0, c1):\n    #each bookshelf contains c0 books\n    books_per_shelf = c0\n\n    #he has a total of c1 books\n    total_books = c1\n\n    #the number of bookshelves he has can be calculated by dividing the total number of books by the number of books per shelf\n    num_shelves = total_books // books_per_shelf\n\n    return num_shelves", "mapping": {"c0": 2.0, "c1": 38.0}}
{"question": "There were c0 roses in the vase. Jessica cut some more roses from her flower garden which had a total of c1 roses. There are now c2 roses in the vase.How many roses did she cut?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica cut some more roses from her flower garden which had a total of c1 roses\n    roses_cut = c1 - roses_before\n\n    #There are now c2 roses in the vase\n    roses_after = c2\n\n    #The number of roses Jessica cut can be calculated by subtracting the number of roses in the vase after from the number of roses in the vase before\n    roses_cut = roses_before - roses_after\n\n    return roses_cut", "mapping": {"c0": 7.0, "c1": 59.0, "c2": 20.0}}
{"question": "Luke played a trivia game and gained c0 points in each round of a game. If he scored c1 points in the trivia gameHow many rounds did he play?", "answer": [26.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Luke gained c0 points in each round of the game\n    points_per_round = c0\n\n    #Luke scored c1 points in the trivia game\n    total_points = c1\n\n    #The number of rounds Luke played can be calculated by dividing the total points by the points per round\n    rounds_played = total_points // points_per_round\n\n    return rounds_played", "mapping": {"c0": 3.0, "c1": 78.0}}
{"question": "Baker made c0 cakes. He sold c1 of them and bought c2 new cakes.How many more cakes did baker buy than those he sold?", "answer": [63.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #Baker bought c2 new cakes\n    cakes_bought = c2\n\n    #The difference between the number of cakes bought and sold can be calculated by subtracting the number of cakes sold from the number of cakes bought\n    difference = cakes_bought - cakes_sold\n\n    return difference", "mapping": {"c0": 13.0, "c1": 91.0, "c2": 154.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many more sacks of unripe oranges than ripe oranges are harvested per day?", "answer": [11.0], "response": "def Problem(c0, c1):\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c0\n\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c1\n\n    #calculate the difference between the number of sacks of unripe oranges and ripe oranges harvested per day\n    difference = unripe_oranges - ripe_oranges\n\n    return difference", "mapping": {"c0": 71.0, "c1": 60.0}}
{"question": "At the zoo, a cage had snakes and alligators. The total number of animals in the cage was c0. If c1 snakes and c2 alligators were hidingHow many animals were not hiding in all?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the total number of animals in the cage is c0\n    total_animals = c0\n\n    #c1 snakes were hiding\n    snakes_hiding = c1\n\n    #c2 alligators were hiding\n    alligators_hiding = c2\n\n    #The number of animals not hiding can be calculated by subtracting the number of hiding animals from the total number of animals\n    animals_not_hiding = total_animals - snakes_hiding - alligators_hiding\n\n    return animals_not_hiding", "mapping": {"c0": 79.0, "c1": 24.0, "c2": 51.0}}
{"question": "Danny has c0 bottle caps in his collection. He found some more bottle caps at the park. If he has c1 bottle caps nowHow many bottle caps did he find at the park?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #Danny originally has c0 bottle caps\n    original_caps = c0\n\n    #Danny now has c1 bottle caps\n    current_caps = c1\n\n    #The number of bottle caps Danny found at the park can be calculated by subtracting the original number of bottle caps from the current number of bottle caps\n    found_caps = current_caps - original_caps\n\n    return found_caps", "mapping": {"c0": 21.0, "c1": 53.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters each with c1 pages. It took frank c2 days to finish the book.How many chapters did he read per day?", "answer": [332.0], "response": "def Problem(c0, c1, c2):\n    #total number of pages in the book\n    total_pages = c0 * c1\n\n    #number of chapters in the book\n    num_chapters = c0\n\n    #number of days it took Frank to finish the book\n    num_days = c2\n\n    #number of pages Frank read per day\n    pages_per_day = total_pages / num_days\n\n    #number of chapters Frank read per day\n    chapters_per_day = num_chapters / num_days\n\n    return chapters_per_day", "mapping": {"c0": 2.0, "c1": 405.0, "c2": 664.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many roses did she cut?", "answer": [25.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    roses_thrown = c1\n\n    #there are now c2 roses in the vase\n    roses_after = c2\n\n    #The number of roses she cut can be calculated by subtracting the number of roses thrown away from the difference between the original number of roses and the current number of roses\n    roses_cut = (roses_before - roses_after) + roses_thrown\n\n    return roses_cut", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 23.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of reading and biology homework did she have to complete?", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c1 pages of reading homework\n    reading = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology = c2\n\n    #The total number of pages of reading and biology homework Rachel had to complete can be calculated by adding the number of pages of reading homework and the number of pages of biology homework\n    total = reading + biology\n\n    return total", "mapping": {"c0": 5.0, "c1": 10.0, "c2": 6.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many more action figures than books were on his shelf?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures = c0\n    books = c1\n\n    #Later he added c2 more books to the shelf\n    added_books = c2\n\n    #Calculate the difference between the number of action figures and the number of books\n    difference = action_figures - (books + added_books)\n\n    return difference", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 4.0}}
{"question": "In a school there are c0 girls and c1 boys.How many more boys than girls does the school have?", "answer": [807.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 boys in the school\n    boys = c1\n\n    #The difference between the number of boys and girls can be calculated by subtracting the number of girls from the number of boys\n    difference = boys - girls\n\n    return difference", "mapping": {"c0": 34.0, "c1": 841.0}}
{"question": "Bobby ate some pieces of candy. Then he ate c0 more. If he ate a total of c1 pieces of candyHow many pieces of candy had he eaten at the start?", "answer": [18.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Bobby ate some pieces of candy\n    candy_before = c1 - c0\n\n    #The total number of candy he ate can be calculated by adding the number of candy he ate before and the number of candy he ate later\n    candy_after = c1\n\n    #The number of candy he ate at the start can be calculated by subtracting the number of candy he ate before from the total number of candy he ate\n    candy_start = candy_after - candy_before\n\n    return candy_start", "mapping": {"c0": 25.0, "c1": 43.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day.How many days will it take to harvest c1 sacks of oranges?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #they need to harvest c1 sacks\n    total_sacks = c1\n\n    #The number of days it will take to harvest c1 sacks can be calculated by dividing the total number of sacks by the number of sacks harvested per day\n    days_needed = total_sacks / sacks_per_day\n\n    return days_needed", "mapping": {"c0": 8.0, "c1": 24.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the morning than in the evening?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #number of campers who went rowing in the morning\n    morning = c0\n\n    #number of campers who went rowing in the evening\n    evening = c2\n\n    #calculate the difference between the number of campers who went rowing in the morning and evening\n    difference = morning - evening\n\n    return difference", "mapping": {"c0": 53.0, "c1": 48.0, "c2": 49.0}}
{"question": "Jack received c0 emails in the afternoon, c1 emails in the morning and c2 emails in the evening.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the afternoon\n    afternoon_emails = c0\n\n    #Jack received c1 emails in the morning\n    morning_emails = c1\n\n    #Jack received c2 emails in the evening\n    evening_emails = c2\n\n    #The difference between the number of morning emails and afternoon emails can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning_emails - afternoon_emails\n\n    return difference", "mapping": {"c0": 3.0, "c1": 5.0, "c2": 16.0}}
{"question": "Dan has $ c0. For a total of $ c1 he bought c2 candy bar each one costing the same amount of money.How much did each candy bar cost?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan spent c1 dollars in total\n    money_spent = c1\n\n    #Dan bought c2 candy bars\n    candy_bars = c2\n\n    #The cost of each candy bar can be calculated by dividing the total amount spent by the number of candy bars bought\n    cost_per_candy_bar = money_spent / candy_bars\n\n    return cost_per_candy_bar", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 2.0}}
{"question": "Rachel had to complete c0 pages of math homework and c1 pages of reading homework.How many more pages of reading homework than math homework did she have?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_homework = c1\n\n    #The difference between the number of pages of reading homework and math homework can be calculated by subtracting the number of math homework pages from the number of reading homework pages\n    difference = reading_homework - math_homework\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. The second chapter is c2 pages long.How many more pages does the second chapter have than the first chapter?", "answer": [43.0], "response": "def Problem(c0, c1, c2):\n    #the first chapter is c1 pages long\n    first_chapter = c1\n\n    #the second chapter is c2 pages long\n    second_chapter = c2\n\n    #calculate the difference in pages between the second chapter and the first chapter\n    difference = second_chapter - first_chapter\n\n    return difference", "mapping": {"c0": 2.0, "c1": 37.0, "c2": 80.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies do you still have to watch?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of movies and books in the series\n    total_movies = c0\n    total_books = c1\n\n    #calculate the number of movies and books already consumed\n    consumed_movies = c3\n    consumed_books = c2\n\n    #calculate the number of movies left to watch\n    remaining_movies = total_movies - consumed_movies\n\n    #return the result\n    return remaining_movies", "mapping": {"c0": 8.0, "c1": 21.0, "c2": 7.0, "c3": 4.0}}
{"question": "Haley grew some trees in her backyard. After a typhoon c0 died. If c1 trees were leftHow many trees did she grow?", "answer": [17.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Haley grew some trees in her backyard\n    trees_grown = c0\n\n    #After a typhoon c0 trees died and c1 trees were left\n    trees_left = c1\n\n    #The number of trees she grew can be calculated by adding the number of trees left to the number of trees that died\n    trees_grown = trees_left + c0 - trees_left\n\n    return trees_grown", "mapping": {"c0": 5.0, "c1": 12.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a t-shirt cost than a jersey?", "answer": [158.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts and jerseys\n    revenue_tshirts = c0 * c2\n    revenue_jerseys = c1 * c3\n\n    #calculate the difference in revenue between selling a t-shirt and a jersey\n    difference = revenue_tshirts - revenue_jerseys\n\n    #calculate the difference in cost between a t-shirt and a jersey\n    cost_difference = c0 - c1\n\n    #calculate the cost difference per item\n    cost_per_item = difference / (c2 + c3)\n\n    #calculate the difference in cost between a t-shirt and a jersey per item\n    difference_per_item = cost_difference - cost_per_item\n\n    return difference_per_item", "mapping": {"c0": 192.0, "c1": 34.0, "c2": 157.0, "c3": 19.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies and c1 raisin cookies yesterday. And she baked c2 raisin cookies and c3 chocolate chip cookies this morning.How many chocolate chip cookies did Helen bake?", "answer": [1081.0], "response": "def Problem(c0, c1, c2, c3):\n    #Helen baked c0 chocolate chip cookies yesterday and c3 chocolate chip cookies this morning\n    chocolate_chip = c0 + c3\n\n    return chocolate_chip", "mapping": {"c0": 527.0, "c1": 86.0, "c2": 86.0, "c3": 554.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco ' dad found c1 more pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh now?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the total weight of strawberries collected by Marco and his dad is c0 pounds\n    total_weight = c0\n\n    #Marco's dad found c1 more pounds of strawberries\n    dad_weight_increase = c1\n\n    #After the increase in weight, Marco's strawberries weighed c2 pounds\n    marco_weight = c2\n\n    #The weight of his dad's strawberries can be calculated by subtracting Marco's weight from the total weight and then adding his weight increase\n    dad_weight = total_weight - marco_weight + dad_weight_increase\n\n    return dad_weight", "mapping": {"c0": 22.0, "c1": 30.0, "c2": 36.0}}
{"question": "c0 red peaches, and some more green peaches are in the basket. If there are c1 more green peaches than red peaches in the basketHow many green peaches are in the basket?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #there are originally c0 red peaches in the basket\n    red_peaches = c0\n\n    #there are c1 more green peaches than red peaches in the basket\n    green_peaches = red_peaches + c1\n\n    return green_peaches", "mapping": {"c0": 3.0, "c1": 10.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many more trees died in the typhoon than those that survived?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #initially, there were c1 trees in Haley's backyard\n    initial_trees = c1\n\n    #c0 trees died in the typhoon\n    trees_died = c0\n\n    #the number of trees that survived can be calculated by subtracting the number of trees that died from the initial number of trees\n    trees_survived = initial_trees - trees_died\n\n    #the number of trees that died more than those that survived can be calculated by subtracting the number of trees that survived from the number of trees that died\n    more_trees_died = trees_died - trees_survived\n\n    return more_trees_died", "mapping": {"c0": 13.0, "c1": 3.0}}
{"question": "Josh had c0 marbles in his collection. He lost some marbles. If he has c1 marbles nowHow many marbles did he lose?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He now has c1 marbles in his collection\n    marbles_after = c1\n\n    #The number of marbles he lost can be calculated by subtracting the number of marbles he has now from the original number of marbles\n    lost = marbles_before - marbles_after\n\n    return lost", "mapping": {"c0": 9.0, "c1": 4.0}}
{"question": "They decided to hold the party in their backyard. They have c0 chairs for each set of table. If they have c1 sets of tablesHow many more chairs than tables do they have?", "answer": [117.0], "response": "def Problem(c0, c1):\n    #each set of table has c0 chairs\n    chairs_per_table = c0\n\n    #there are c1 sets of tables\n    num_tables = c1\n\n    #The total number of chairs they have is the product of chairs per table and number of tables\n    total_chairs = chairs_per_table * num_tables\n\n    #The difference between the total number of chairs and the number of tables is the number of extra chairs they have\n    extra_chairs = total_chairs - num_tables\n\n    return extra_chairs", "mapping": {"c0": 14.0, "c1": 9.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day.How many oranges do they harvest per day if each sack contains c1 oranges?", "answer": [1848.0], "response": "def oranges_per_day(c0, c1):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #The number of oranges they harvest per day can be calculated by multiplying the number of sacks by the number of oranges per sack\n    oranges_per_day = oranges_per_sack * sacks_per_day\n\n    return oranges_per_day", "mapping": {"c0": 66.0, "c1": 28.0}}
{"question": "At the arcade Dave had won some tickets. He used c0 tickets to buy some toys. If he still has c1 tickets leftHow many tickets did Dave win at the arcade?", "answer": [26.0], "response": "def Problem(c0, c1):\n    #Dave won some tickets and used c0 tickets to buy some toys\n    tickets_spent = c0\n\n    #He still has c1 tickets left\n    tickets_left = c1\n\n    #The number of tickets Dave won can be calculated by adding the number of tickets he spent to the number of tickets he has left\n    tickets_won = tickets_spent + tickets_left\n\n    return tickets_won", "mapping": {"c0": 12.0, "c1": 14.0}}
{"question": "Adam could fit c0 action figures on each shelf in his room. His room has could hold c1 action figures.How many total shelves did his room have?", "answer": [80.0], "response": "def Problem(c0, c1):\n    #Adam could fit c0 action figures on each shelf\n    action_figures_per_shelf = c0\n\n    #His room could hold c1 action figures\n    total_action_figures = c1\n\n    #The number of shelves needed can be calculated by dividing the total number of action figures by the number of action figures that can fit on each shelf\n    shelves_needed = total_action_figures // action_figures_per_shelf\n\n    return shelves_needed", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Marco and his dad went strawberry picking. Together they collected strawberries that weighed c0 pounds. On the way back Marco lost c1 pounds of strawberries. Marco's strawberries now weighed c2 pounds.How much did his dad's strawberries weigh?", "answer": [12.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the total weight of strawberries collected by Marco and his dad is c0 pounds\n    total_weight = c0\n\n    #Marco lost c1 pounds of strawberries on the way back\n    marco_weight = c0 - c1\n\n    #Now Marco's strawberries weigh c2 pounds\n    marco_weight_now = c2\n\n    #The weight of his dad's strawberries can be calculated by subtracting Marco's current weight from the total weight\n    dad_weight = total_weight - marco_weight_now\n\n    return dad_weight", "mapping": {"c0": 24.0, "c1": 9.0, "c2": 3.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of sugar.How many more cups of sugar does she need to add?", "answer": [11.0], "response": "def sugar_needed(c0, c1, c2):\n    #the recipe calls for c1 cups of sugar\n    sugar_required = c1\n\n    #Mary already put in c2 cups of sugar\n    sugar_added = c2\n\n    #The amount of sugar needed to be added can be calculated by subtracting the amount of sugar already added from the required amount of sugar\n    sugar_needed = sugar_required - sugar_added\n\n    return sugar_needed", "mapping": {"c0": 12.0, "c1": 13.0, "c2": 2.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many more bird families flew away to asia than those that flew away to africa?", "answer": [47.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families living near the mountain\n    bird_families_before = c0\n\n    #c1 bird families flew away to africa\n    flew_to_africa = c1\n\n    #c2 bird families flew away to asia\n    flew_to_asia = c2\n\n    #The difference between the number of bird families that flew to asia and those that flew to africa can be calculated by subtracting the number of bird families that flew to africa from the number of bird families that flew to asia\n    difference = flew_to_asia - flew_to_africa\n\n    return difference", "mapping": {"c0": 38.0, "c1": 47.0, "c2": 94.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many more peaches does Steven have than Jill?", "answer": [27.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake has c1 more peaches than Jill\n    jill_peaches = jake_peaches - c1\n\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #The difference between Steven's and Jill's peaches can be calculated by subtracting Jill's peaches from Steven's peaches\n    difference = steven_peaches - jill_peaches\n\n    return difference\n\n#Example usage:\nprint(Problem(2, 3, 10)) #Output: 5", "mapping": {"c0": 9.0, "c1": 18.0, "c2": 16.0}}
{"question": "Zachary did c0 push-ups and David did c1 push-ups in gym class today.How many more push-ups did Zachary do than David?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Zachary did c0 push-ups\n    zachary_pushups = c0\n\n    #David did c1 push-ups\n    david_pushups = c1\n\n    #The difference in push-ups can be calculated by subtracting David's push-ups from Zachary's push-ups\n    difference = zachary_pushups - david_pushups\n\n    return difference", "mapping": {"c0": 51.0, "c1": 44.0}}
{"question": "c0 people can ride the Ferris wheel in paradise park at the same time. If the Ferris wheel has c1 seatsHow many people can each seat hold?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #c0 people can ride the Ferris wheel at the same time\n    num_riders = c0\n\n    #the Ferris wheel has c1 seats\n    num_seats = c1\n\n    #each seat can hold a certain number of people, which can be calculated by dividing the number of riders by the number of seats\n    riders_per_seat = num_riders / num_seats\n\n    return riders_per_seat", "mapping": {"c0": 16.0, "c1": 4.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of sugar than cups of salt does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary already put in c3 cups of flour\n    flour = c3\n\n    #She needs to add c0 - c3 cups of flour\n    remaining_flour = c0 - c3\n\n    #She needs to add c1 cups of sugar\n    sugar = c1\n\n    #She needs to add c2 cups of salt\n    salt = c2\n\n    #She needs to add sugar - salt cups of sugar than cups of salt\n    difference = sugar - salt\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 7.0, "c3": 5.0}}
{"question": "Paige raised c0 goldfish and c1 catfish in the pond but stray cats loved eating them. Now she has c2 left.How many goldfish disappeared?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Paige originally had c0 goldfish and c1 catfish in the pond\n    total_fish = c0 + c1\n\n    #Now she has c2 fish left\n    remaining_fish = c2\n\n    #The number of fish that disappeared can be calculated by subtracting the remaining fish from the total fish\n    disappeared_fish = total_fish - remaining_fish\n\n    #The number of disappeared fish includes the number of catfish that were eaten, so we need to subtract the number of catfish from the total disappeared fish\n    disappeared_goldfish = disappeared_fish - c1\n\n    return disappeared_goldfish", "mapping": {"c0": 16.0, "c1": 71.0, "c2": 2.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 apples still on it. If c2 of those are ripe and the rest are unripeHow many unripe apples does the tree have now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples, so the tree had c0+c1 apples before picking\n    total_apples_before = c0 + c1\n\n    #c2 of those apples are ripe, so the tree has c1-c2 unripe apples left\n    unripe_apples = c1 - c2\n\n    return unripe_apples", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 3.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than zachary.How many push-ups did Zachary and David do altogether?", "answer": [146.0], "response": "def push_ups_total(c0, c1):\n    # Zachary did c0 push-ups\n    zachary_push_ups = c0\n\n    # David did c1 more push-ups than Zachary\n    david_push_ups = c0 + c1\n\n    # Total push-ups done by both Zachary and David\n    total_push_ups = zachary_push_ups + david_push_ups\n\n    return total_push_ups", "mapping": {"c0": 44.0, "c1": 58.0}}
{"question": "If Lewis earns a total of $ c0 during c1 weeks of harvestHow much money does he earn each week?", "answer": [92.0], "response": "def Problem(c0, c1):\n    #Lewis earns a total of c0 during c1 weeks of harvest\n    total_earnings = c0\n    weeks = c1\n\n    #The amount of money he earns each week can be calculated by dividing the total earnings by the number of weeks\n    earnings_per_week = total_earnings / weeks\n\n    return earnings_per_week", "mapping": {"c0": 460.0, "c1": 5.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many more students suggested bacon than those that suggested tomatoes?", "answer": [314.0], "response": "def Problem(c0, c1, c2):\n    #number of students who suggested mashed potatoes\n    mashed_potatoes = c0\n\n    #number of students who suggested adding bacon\n    bacon = c1\n\n    #number of students who suggested adding tomatoes\n    tomatoes = c2\n\n    #calculate the difference between the number of students who suggested bacon and those who suggested tomatoes\n    difference = bacon - tomatoes\n\n    return difference", "mapping": {"c0": 228.0, "c1": 337.0, "c2": 23.0}}
{"question": "Edward spent $ c0 to buy books and $ c1 to buy pens. Now he has $ 12.How much did Edward spend on books and pens?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Edward spent c0 on books and c1 on pens\n    spent_on_books = c0\n    spent_on_pens = c1\n\n    #Edward has $12 now, so the total amount he spent is the sum of what he spent on books and pens\n    total_spent = spent_on_books + spent_on_pens\n\n    return total_spent", "mapping": {"c0": 4.0, "c1": 3.0}}
{"question": "Edward spent $ c0. Then he received $ c1 from his friend. Now he has $ 7.How much did Edward have before he spent his money?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars\n    spent = c0\n\n    #Edward received c1 dollars from his friend\n    received = c1\n\n    #Now Edward has 7 dollars\n    total = 7\n\n    #The amount Edward had before he spent his money can be calculated by subtracting the money he spent and adding the money he received from the total amount he has now\n    before_spending = total - received + spent\n\n    return before_spending", "mapping": {"c0": 17.0, "c1": 10.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday than on tuesday?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on monday\n    monday = c0\n\n    #Julia played with c1 kids on tuesday\n    tuesday = c1\n\n    #The difference between the number of kids she played with on monday and tuesday can be calculated by subtracting the number of kids on tuesday from the number of kids on monday\n    difference = monday - tuesday\n\n    return difference", "mapping": {"c0": 9.0, "c1": 7.0, "c2": 96.0}}
{"question": "In a school there are c0 more girls than boys. If there are c1 girlsHow many boys are there in that school?", "answer": [337.0], "response": "def Problem(c0, c1):\n    #there are c0 more girls than boys\n    girls_more = c0\n\n    #there are c1 girls in the school\n    girls_total = c1\n\n    #The number of boys can be calculated by subtracting the number of girls from the total number of students and then dividing by 2 (since there are equal number of boys and girls in the school)\n    boys_total = (girls_total - girls_more) / 2\n    return boys_total", "mapping": {"c0": 402.0, "c1": 739.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much money did she still have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen originally received c0 dollars from her mom\n    money_before = c0\n\n    #Her dad gave her c1 more dollars\n    additional_money = c1\n\n    #She spent c2 dollars\n    money_spent = c2\n\n    #The amount of money she still has can be calculated by subtracting the money spent from the total amount of money she received\n    money_after = money_before + additional_money - money_spent\n\n    return money_after", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 3.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many red and green peaches are in the basket?", "answer": [22.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 red peaches and c2 green peaches in the basket\n    red_and_green = c0 + c2\n\n    return red_and_green", "mapping": {"c0": 6.0, "c1": 90.0, "c2": 16.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many more blocks did he use to build the tower than he did to build the house?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    blocks_before = c0\n\n    #He uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #He uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The difference between the number of blocks used to build the tower and the number of blocks used to build the house can be calculated by subtracting the number of house blocks from the number of tower blocks\n    difference = tower_blocks - house_blocks\n\n    return difference", "mapping": {"c0": 37.0, "c1": 33.0, "c2": 13.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the jerseys?", "answer": [152.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling jerseys\n    jersey_revenue = c3 * c0\n\n    return jersey_revenue", "mapping": {"c0": 76.0, "c1": 204.0, "c2": 158.0, "c3": 2.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many more cakes did baker sell than those he bought?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    made = c0\n\n    #Baker bought c1 new cakes\n    bought = c1\n\n    #Baker sold c2 cakes\n    sold = c2\n\n    #The difference between the number of cakes sold and the number of cakes bought can be calculated by subtracting the number of cakes bought from the number of cakes sold\n    difference = sold - bought\n\n    return difference", "mapping": {"c0": 8.0, "c1": 139.0, "c2": 145.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many more letters did Jack receive in the morning than in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails and c1 letters in the morning\n    morning_letters = c1\n\n    #He then received c2 emails and c3 letters in the afternoon\n    afternoon_letters = c3\n\n    #The number of letters Jack received in the morning than in the afternoon can be calculated by subtracting the number of afternoon letters from the number of morning letters\n    difference = morning_letters - afternoon_letters\n\n    return difference", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 2.0, "c3": 7.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many more apples than peaches does Steven have?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c3 + c1\n\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #calculate the difference between Steven's apples and peaches\n    difference = steven_apples - steven_peaches\n\n    return difference", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 12.0, "c3": 15.0}}
{"question": "Rachel had to complete c0 pages of math homework and c1 pages of reading homework.How many more pages of math homework than reading homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #The difference between the number of pages of math homework and reading homework can be calculated by subtracting the number of pages of reading homework from the number of pages of math homework\n    diff = math_hw - reading_hw\n\n    return diff", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters, each with the same number of pages. It has a total of c1 pages. It took Frank c2 days to finish the book.How many pages did he read per day?", "answer": [15.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each chapter has the same number of pages\n    pages_per_chapter = c1/c0\n\n    #Frank finished the book in c2 days\n    days = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = c1/c2\n\n    return pages_per_day", "mapping": {"c0": 41.0, "c1": 450.0, "c2": 30.0}}
{"question": "Jesse's room is c0 feet wide and c1 feet long.How much longer is her room than it is wide?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet wide\n    width = c0\n\n    #Jesse's room is c1 feet long\n    length = c1\n\n    #The difference between the length and width of Jesse's room is how much longer it is than it is wide\n    difference = length - width\n\n    return difference", "mapping": {"c0": 19.0, "c1": 20.0}}
{"question": "Frank was reading through some books. Each book had c0 pages and it took Frank c1 days to finish each book.How many pages did he read per day?", "answer": [83.0], "response": "def Problem(c0, c1):\n    #each book has c0 pages\n    pages_per_book = c0\n\n    #it took Frank c1 days to finish each book\n    days_per_book = c1\n\n    #The number of pages Frank read per day can be calculated by dividing the number of pages per book by the number of days it took to finish the book\n    pages_per_day = pages_per_book / days_per_book\n\n    return pages_per_day", "mapping": {"c0": 249.0, "c1": 3.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 crayons left while not having lost a single eraser.How many more erasers than crayons did he have left?", "answer": [70.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons and c1 erasers for his birthday\n    crayons = c0\n    erasers = c1\n\n    #At the end of the school year he only had c2 crayons left while not having lost a single eraser\n    crayons_left = c2\n\n    #To find out how many erasers he has left, we subtract the number of crayons left from the original number of erasers\n    erasers_left = erasers - crayons_left\n\n    #To find out how many more erasers than crayons he has left, we subtract the number of crayons left from the number of erasers left\n    more_erasers = erasers_left - crayons_left\n\n    return more_erasers", "mapping": {"c0": 601.0, "c1": 406.0, "c2": 336.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make per day in the first c4 days at the carnival?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3, c4):\n    #calculate the total amount made in the first c4 days\n    total_amount = c0 * c1 + c2 * c3\n\n    #calculate the average amount made per day in the first c4 days\n    average_amount = total_amount / c4\n\n    return average_amount", "mapping": {"c0": 120.0, "c1": 20.0, "c2": 66.0, "c3": 16.0, "c4": 20.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour.How many more cups of sugar than cups of flour does she need to add now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #calculate how many cups of flour Mary still needs to add\n    flour_needed = c1 - c2\n\n    #calculate how many cups of sugar Mary needs to add\n    sugar_needed = c0 - c1\n\n    #calculate the difference between the cups of sugar and flour needed\n    difference = sugar_needed - flour_needed\n\n    return difference", "mapping": {"c0": 5.0, "c1": 14.0, "c2": 11.0}}
{"question": "Emily is making bead necklaces for her c0 friends. She made c1 necklaces and each necklace takes c2 beads.How many beads did Emily have?", "answer": [52.0], "response": "def Problem(c0, c1, c2):\n    #Emily made c1 necklaces for her c0 friends\n    necklaces_made = c1\n\n    #Each necklace takes c2 beads\n    beads_per_necklace = c2\n\n    #The total number of beads Emily used can be calculated by multiplying the number of necklaces made by the number of beads per necklace\n    total_beads_used = necklaces_made * beads_per_necklace\n\n    return total_beads_used", "mapping": {"c0": 44.0, "c1": 26.0, "c2": 2.0}}
{"question": "Melissa scored a total of c0 points playing some games. Is she scored c1 points in each game.How many games did she play?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Melissa scored a total of c0 points playing some games\n    total_points = c0\n\n    #If she scored c1 points in each game, we can calculate the number of games she played by dividing the total points by the points per game\n    points_per_game = c1\n    num_games = total_points // points_per_game\n\n    return num_games", "mapping": {"c0": 21.0, "c1": 7.0}}
{"question": "Adam has c0 apples. Jackie has c1 apples.How many more apples does Adam have than Jackie?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Adam has c0 apples\n    adam_apples = c0\n\n    #Jackie has c1 apples\n    jackie_apples = c1\n\n    #The difference in the number of apples can be calculated by subtracting Jackie's apples from Adam's apples\n    difference = adam_apples - jackie_apples\n\n    return difference", "mapping": {"c0": 10.0, "c1": 2.0}}
{"question": "Debby bought c0 water bottles and c1 soda bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the soda bottles last?", "answer": [64.0], "response": "def soda_days(c0, c1, c2, c3):\n    #calculate the total number of soda bottles Debby has\n    total_soda = c1 - c3\n\n    #calculate the number of days the soda bottles will last\n    days = total_soda // c3\n\n    return days", "mapping": {"c0": 200.0, "c1": 256.0, "c2": 312.0, "c3": 4.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many more books than action figures were on his shelf?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures = c0\n    books = c1\n\n    #Later he added c2 more books to the shelf\n    added_books = c2\n\n    #The total number of books on the shelf after adding c2 more books\n    total_books = books + added_books\n\n    #The difference between the total number of books and the number of action figures\n    difference = total_books - action_figures\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 9.0}}
{"question": "Robin's hair was c0 inches long. If he grew c1 more inchesHow long is his hair now?", "answer": [37.0], "response": "def Problem(c0, c1):\n    #Robin's hair was originally c0 inches long\n    hair_before = c0\n\n    #Robin grew c1 more inches of hair\n    grew = c1\n\n    #The length of Robin's hair now can be calculated by adding the length of hair he grew to his original hair length\n    hair_after = hair_before + grew\n\n    return hair_after", "mapping": {"c0": 19.0, "c1": 18.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many bottle caps did danny have at first?", "answer": [13.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    caps_found = c1\n\n    #Now he has c2 bottle caps and c3 wrappers in his collection\n    total_caps = c2\n    total_wrappers = c3\n\n    #Danny gets a bottle cap for every c wrappers he turns in\n    caps_from_wrappers = total_wrappers // c\n\n    #Danny had c1 bottle caps to start with, so the total number of bottle caps he has is the sum of the bottle caps he found and the bottle caps he got from turning in wrappers\n    total_caps_at_start = caps_found + caps_from_wrappers\n\n    return total_caps_at_start", "mapping": {"c0": 82.0, "c1": 29.0, "c2": 42.0, "c3": 61.0}}
{"question": "If you had c0 bags with equal number of cookies and c1 cookies in totalHow many cookies does each bag have?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #each bag has an equal number of cookies\n    cookies_per_bag = c1 // c0\n\n    return cookies_per_bag\n\n#We can use integer division to calculate the number of cookies per bag by dividing the total number of cookies by the number of bags.", "mapping": {"c0": 4.0, "c1": 36.0}}
{"question": "White t - shirts can be purchased in packages of c0. If mom buys c1 white t - shirtsHow many packages will she have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #mom buys c1 white t-shirts\n    shirts_bought = c1\n\n    #each package contains c0 white t-shirts\n    shirts_per_package = c0\n\n    #the number of packages mom will have can be calculated by dividing the number of shirts bought by the number of shirts per package\n    packages = shirts_bought // shirts_per_package\n\n    return packages", "mapping": {"c0": 13.0, "c1": 39.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many pupils are there in the school now?", "answer": [1346.0], "response": "def total_pupils(c0, c1, c2):\n    #total number of girls in the school\n    girls = c0 + c2\n\n    #total number of boys in the school\n    boys = c1\n\n    #total number of pupils in the school\n    pupils = girls + boys\n\n    return pupils", "mapping": {"c0": 706.0, "c1": 222.0, "c2": 418.0}}
{"question": "For the walls of the house John would use large planks of wood. Each plank needs c0 pieces of nails to be secured and he would use c1 planks.How many nails does John need for the house wall?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #each plank needs c0 pieces of nails\n    nails_per_plank = c0\n\n    #John would use c1 planks\n    planks_used = c1\n\n    #The total number of nails needed can be calculated by multiplying the number of nails per plank by the number of planks used\n    total_nails = nails_per_plank * planks_used\n\n    return total_nails", "mapping": {"c0": 2.0, "c1": 16.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many more tickets did Dave use to buy clothes than he did to buy toys?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Dave had c0 tickets\n    tickets_before = c0\n\n    #Dave used c1 tickets to buy toys\n    toys = c1\n\n    #Dave used c2 tickets to buy clothes\n    clothes = c2\n\n    #The difference between the number of tickets used to buy clothes and toys can be calculated by subtracting the number of tickets used to buy toys from the number of tickets used to buy clothes\n    difference = clothes - toys\n\n    return difference", "mapping": {"c0": 13.0, "c1": 8.0, "c2": 18.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. Marco's strawberries weighed c1 pounds.How much more did his dad's strawberries weigh than his?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #total weight of strawberries picked\n    total_weight = c0\n\n    #weight of Marco's strawberries\n    marco_weight = c1\n\n    #weight of dad's strawberries can be calculated by subtracting Marco's weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    #difference in weight can be calculated by subtracting Marco's weight from dad's weight\n    weight_difference = dad_weight - marco_weight\n\n    return weight_difference", "mapping": {"c0": 35.0, "c1": 13.0}}
{"question": "An industrial machine can make c0 shirts a minute. It made c1 shirts yesterday and c2 shirts today.How many minutes did the machine work in all?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #the machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #yesterday, the machine made c1 shirts\n    shirts_yesterday = c1\n\n    #today, the machine made c2 shirts\n    shirts_today = c2\n\n    #The total number of shirts made can be calculated by adding the number of shirts made yesterday and today\n    total_shirts = shirts_yesterday + shirts_today\n\n    #The total time the machine worked can be calculated by dividing the total number of shirts by the number of shirts made per minute\n    total_time = total_shirts / shirts_per_minute\n\n    return total_time", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 8.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more red peaches than yellow peaches are in the basket?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #number of red peaches\n    red = c0\n    #number of yellow peaches\n    yellow = c1\n    #number of green peaches\n    green = c2\n\n    #calculate the difference between the number of red and yellow peaches\n    difference = red - yellow\n\n    return difference", "mapping": {"c0": 19.0, "c1": 11.0, "c2": 12.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her mom than she did from her dad?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her mom\n    mom_gift = c0\n\n    #Gwen's dad gave her c1 more dollars\n    dad_gift = c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The total amount of money Gwen has now is the sum of her mom's gift and her dad's gift minus what she spent\n    total_money = mom_gift + dad_gift - spent\n\n    #The difference between what Gwen received from her mom and her dad is simply c1\n    difference = c1\n\n    return difference", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 4.0}}
{"question": "The ring toss game at the carnival made the same amount of money each day. In total in c0 days they earned c1 dollars. Together with game they earned c2 dollars.How much did ring toss game make per day?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the ring toss game made c1 dollars in c0 days\n    game_money = c1\n\n    #together with the game they earned c2 dollars\n    total_money = c2\n\n    #the amount of money the game made per day can be calculated by dividing the total game money by the number of days\n    game_per_day = game_money / c0\n\n    return game_per_day", "mapping": {"c0": 30.0, "c1": 420.0, "c2": 22.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many apps did he delete?", "answer": [11.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files he had c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of apps and files he deleted can be calculated by subtracting the number of apps and files left from the original number of apps and files\n    apps_deleted = apps_before - apps_after\n    files_deleted = files_before - files_after\n\n    return apps_deleted", "mapping": {"c0": 16.0, "c1": 77.0, "c2": 5.0, "c3": 23.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 salty cookies and c3 sweet cookies.How many more sweet cookies than salty cookies did he eat?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco ate c2 salty cookies and c3 sweet cookies\n    salty_cookies_eaten = c2\n    sweet_cookies_eaten = c3\n\n    #He had c0 sweet cookies and c1 salty cookies\n    sweet_cookies_before = c0\n    salty_cookies_before = c1\n\n    #Calculate how many sweet and salty cookies he has left after eating\n    sweet_cookies_after = sweet_cookies_before - sweet_cookies_eaten\n    salty_cookies_after = salty_cookies_before - salty_cookies_eaten\n\n    #Calculate how many more sweet cookies than salty cookies he ate\n    more_sweet_cookies = sweet_cookies_eaten - salty_cookies_eaten\n\n    return more_sweet_cookies", "mapping": {"c0": 39.0, "c1": 6.0, "c2": 23.0, "c3": 32.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died.How many more trees survived the typhoon than those that died?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Haley originally grew c0 trees\n    trees_before = c0\n\n    #After the typhoon, c1 trees died\n    trees_died = c1\n\n    #The number of trees that survived the typhoon can be calculated by subtracting the number of trees that died from the original number of trees\n    trees_survived = trees_before - trees_died\n\n    #The number of trees that survived the typhoon more than those that died can be calculated by subtracting the number of trees that died from the number of trees that survived\n    more_survived = trees_survived - trees_died\n\n    return more_survived", "mapping": {"c0": 13.0, "c1": 6.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday.How many more kids did she play with on monday than on tuesday?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday_kids = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday_kids = c1\n\n    #The difference in the number of kids she played with on Monday and Tuesday can be calculated by subtracting the number of kids she played with on Tuesday from the number of kids she played with on Monday\n    difference = monday_kids - tuesday_kids\n\n    return difference", "mapping": {"c0": 18.0, "c1": 10.0}}
{"question": "Kelly has c0 nintendo games and c1 sony games.How many sony games does she need to give away so that she will have c2 sony games left?", "answer": [101.0], "response": "def Problem(c0, c1, c2):\n    #Kelly has c0 nintendo games and c1 sony games\n    nintendo_games = c0\n    sony_games = c1\n\n    #She needs to give away some sony games to have c2 sony games left\n    sony_games_left = c2\n\n    #The number of sony games she needs to give away can be calculated by subtracting the desired number of sony games from the original number of sony games\n    sony_games_to_give_away = sony_games - sony_games_left\n\n    return sony_games_to_give_away", "mapping": {"c0": 46.0, "c1": 132.0, "c2": 31.0}}
{"question": "c0 red peaches and c1 green peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #there are c0 red peaches in the basket\n    red_peaches = c0\n\n    #there are c1 green peaches in the basket\n    green_peaches = c1\n\n    #the difference between the number of green and red peaches can be calculated by subtracting the number of red peaches from the number of green peaches\n    difference = green_peaches - red_peaches\n\n    return difference", "mapping": {"c0": 5.0, "c1": 11.0}}
{"question": "Nell collects baseball cards. She gave c0 of her cards to Jeff and now has c1 cards left..How many cards did Nell have initially?", "answer": [455.0], "response": "def Problem(c0, c1):\n    #Nell gave c0 cards to Jeff\n    cards_given = c0\n\n    #Nell now has c1 cards left\n    cards_left = c1\n\n    #The number of cards Nell initially had can be calculated by adding the number of cards given to Jeff by the number of cards left\n    initial_cards = cards_given + cards_left\n\n    return initial_cards", "mapping": {"c0": 301.0, "c1": 154.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on monday and tuesday?", "answer": [33.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on monday\n    kids_monday = c0\n\n    #Julia played with c1 kids on tuesday\n    kids_tuesday = c1\n\n    #The total number of kids Julia played with on monday and tuesday can be calculated by adding the number of kids she played with on each day\n    total_kids = kids_monday + kids_tuesday\n\n    return total_kids", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 97.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of math homework than reading homework did she have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    bio_hw = c2\n\n    #The difference between the number of math homework pages and reading homework pages can be calculated by subtracting the number of reading homework pages from the number of math homework pages\n    diff = math_hw - reading_hw\n\n    return diff", "mapping": {"c0": 9.0, "c1": 2.0, "c2": 96.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many campers went rowing in all?", "answer": [98.0], "response": "def Problem(c0, c1, c2):\n    #the number of campers who went rowing in the morning is c0\n    morning = c0\n\n    #the number of campers who went rowing in the afternoon is c1\n    afternoon = c1\n\n    #the number of campers who went rowing in the evening is c2\n    evening = c2\n\n    #The total number of campers who went rowing can be calculated by adding the number of campers in each session\n    total = morning + afternoon + evening\n\n    return total", "mapping": {"c0": 36.0, "c1": 13.0, "c2": 49.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many more marbles did he lose than those he found?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He lost c1 marbles\n    lost = c1\n\n    #He found c2 new ones\n    found = c2\n\n    #The difference between the number of marbles lost and found can be calculated by subtracting the number of found marbles from the number of lost marbles\n    difference = lost - found\n\n    return difference", "mapping": {"c0": 4.0, "c1": 16.0, "c2": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps did danny find at the park?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    bottle_caps_found = c0\n    wrappers_found = c1\n\n    #Danny now has c2 bottle caps and c3 wrappers in his collection\n    bottle_caps_in_collection = c2\n    wrappers_in_collection = c3\n\n    #Danny found x more wrappers than bottle caps at the park\n    wrappers_more_than_bottle_caps = wrappers_found - bottle_caps_found\n\n    return wrappers_more_than_bottle_caps", "mapping": {"c0": 11.0, "c1": 28.0, "c2": 68.0, "c3": 51.0}}
{"question": "Dave had c0 files and c1 apps on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many apps did he delete?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 files and c1 apps on his phone\n    files_before = c0\n    apps_before = c1\n\n    #After deleting some apps and files he had c2 apps and c3 files left\n    files_after = c3\n    apps_after = c2\n\n    #The number of apps he deleted can be calculated by subtracting the number of apps left from the original number of apps\n    apps_deleted = apps_before - apps_after\n\n    return apps_deleted", "mapping": {"c0": 59.0, "c1": 15.0, "c2": 12.0, "c3": 30.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many more books did he buy than he sold?", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #Paul had c0 books\n    books_before = c0\n\n    #He sold some books and bought c1 new ones\n    sold = books_before - c1\n\n    #Now he has c2 books\n    books_after = c2\n\n    #The number of books he bought can be calculated by subtracting the number of books before from the number of books after\n    bought = books_after - books_before\n\n    #The number of books he sold can be calculated by subtracting the number of books after from the number of books before\n    sold = books_before - books_after\n\n    #The difference between the number of books he bought and sold is the answer\n    difference = bought - sold\n\n    return difference", "mapping": {"c0": 71.0, "c1": 38.0, "c2": 116.0}}
{"question": "Allan brought c0 balloons and c1 balls while Jake brought c2 balloons and c3 balls to the park.How many balls did Allan and Jake have in the park?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Allan brought c0 balloons and c1 balls\n    allan_balloons = c0\n    allan_balls = c1\n\n    #Jake brought c2 balloons and c3 balls\n    jake_balloons = c2\n    jake_balls = c3\n\n    #The total number of balls they have in the park can be calculated by adding the number of balls Allan brought with the number of balls Jake brought\n    total_balls = allan_balls + jake_balls\n\n    return total_balls", "mapping": {"c0": 7.0, "c1": 5.0, "c2": 6.0, "c3": 4.0}}
{"question": "You have c0 dollars.How many packs of dvds can you buy if each pack costs c1 dollars?", "answer": [4.0], "response": "def buy_dvds(c0, c1):\n    #calculate how many packs of dvds can be bought by dividing the total amount of money by the cost of each pack\n    packs = c0 // c1\n    return packs", "mapping": {"c0": 104.0, "c1": 26.0}}
{"question": "Kelly has c0 nintendo games and c1 sony games.How many nintendo games does she need to give away so that she will have c2 nintendo games left?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Kelly has c0 nintendo games and c1 sony games\n    nintendo_games = c0\n\n    #She wants to have c2 nintendo games left\n    desired_nintendo_games = c2\n\n    #She needs to give away some nintendo games to reach her desired number\n    nintendo_games_to_give_away = nintendo_games - desired_nintendo_games + c1\n\n    return nintendo_games_to_give_away", "mapping": {"c0": 20.0, "c1": 70.0, "c2": 12.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with c1 kids on tuesday.How many more kids did she play with on tuesday than on monday?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday_kids = c0\n\n    #Julia played tag with c1 kids on tuesday\n    tuesday_kids = c1\n\n    #The difference between the number of kids she played with on tuesday and monday can be calculated by subtracting the number of kids on monday from the number of kids on tuesday\n    difference = tuesday_kids - monday_kids\n\n    return difference", "mapping": {"c0": 11.0, "c1": 12.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags worth of cans.How many more bags did she have on monday than she found on the next day?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Tiffany had c0 bags of cans on Monday\n    bags_monday = c0\n\n    #She found c1 more bags worth of cans the next day\n    bags_tuesday = c0 + c1\n\n    #The difference between the number of bags on Monday and the number of bags found on Tuesday is the answer\n    difference = bags_monday - bags_tuesday\n\n    return difference", "mapping": {"c0": 8.0, "c1": 7.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers. If the erasers are organized into c2 groupsHow big is each group?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #there are c1 erasers in Steven's collection\n    erasers = c1\n\n    #the erasers are organized into c2 groups\n    groups = c2\n\n    #the total number of erasers in each group can be calculated by dividing the total number of erasers by the number of groups\n    erasers_per_group = erasers / groups\n\n    return erasers_per_group", "mapping": {"c0": 3941.0, "c1": 4950.0, "c2": 495.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. c0 students suggested adding mashed potatoes while others suggested adding bacon to the menu. If c1 more students suggested adding mashed potatoes than those that suggested baconHow many students suggested bacon?", "answer": [394.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 more students suggested adding mashed potatoes than those that suggested bacon\n    bacon_diff = c1\n\n    #The number of students that suggested bacon can be calculated by subtracting the difference from the number of students that suggested mashed potatoes\n    bacon = mashed_potatoes - bacon_diff\n\n    return bacon", "mapping": {"c0": 457.0, "c1": 63.0}}
{"question": "The Razorback t-shirt shop sells each t-shirt for $ c0 dollars. During the Arkansas and Texas tech game they offered a discount of $ c1 per t-shirt and sold c2 t-shirts.How much money did they make from selling the t-shirts?", "answer": [5590.0], "response": "def Problem(c0, c1, c2):\n    #each t-shirt is sold for c0 dollars\n    price_per_shirt = c0\n\n    #there is a discount of c1 dollars per t-shirt\n    discount_per_shirt = c1\n\n    #c2 t-shirts were sold\n    num_shirts_sold = c2\n\n    #the total revenue can be calculated by multiplying the number of shirts sold by the discounted price per shirt\n    total_revenue = (price_per_shirt - discount_per_shirt) * num_shirts_sold\n\n    return total_revenue", "mapping": {"c0": 51.0, "c1": 8.0, "c2": 130.0}}
{"question": "c0 storks and c1 birds were sitting on the fence. c2 more birds came to join them.How many more birds than storks are sitting on the fence?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total = c0 + c1\n\n    #number of birds after c2 more birds join\n    birds_after = c1 + c2\n\n    #number of storks remains the same\n    storks = c0\n\n    #calculate the difference between the number of birds and storks\n    difference = birds_after - storks\n\n    return difference", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 4.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many cakes did each person eat?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #Matthew had c0 crackers and c1 cakes\n    crackers = c0\n    cakes = c1\n\n    #Matthew gave equal numbers of crackers and cakes to his c2 friends\n    friends = c2\n\n    #The total number of cakes each person ate can be calculated by dividing the number of cakes by the number of friends\n    cakes_per_person = cakes // friends\n\n    return cakes_per_person", "mapping": {"c0": 29.0, "c1": 30.0, "c2": 2.0}}
{"question": "There were c0 roses in the vase. Jessica cut c1 more roses from her flower garden and put them in the vase.How many roses are there in the vase now?", "answer": [18.0], "response": "def Problem(c0, c1):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica cut c1 more roses from her garden\n    cut_roses = c1\n\n    #The number of roses in the vase now can be calculated by adding the number of roses cut to the original number of roses\n    roses_after = roses_before + cut_roses\n\n    return roses_after", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many pages are in each chapter?", "answer": [111.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the book has c0 pages\n    total_pages = c0\n\n    #the pages are equally distributed over c1 chapters\n    chapters = c1\n\n    #it took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages in each chapter can be calculated by dividing the total number of pages by the number of chapters\n    pages_per_chapter = total_pages / chapters\n\n    return pages_per_chapter", "mapping": {"c0": 555.0, "c1": 5.0, "c2": 220.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many sweet cookies did Paco have left?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies\n    sweet_cookies_before = c0\n\n    #Paco had c1 salty cookies\n    salty_cookies_before = c1\n\n    #Paco ate c2 sweet cookies\n    sweet_cookies_eaten = c2\n\n    #Paco ate c3 salty cookies\n    salty_cookies_eaten = c3\n\n    #The number of sweet cookies Paco has left can be calculated by subtracting the number of sweet cookies eaten from the original number of sweet cookies\n    sweet_cookies_left = sweet_cookies_before - sweet_cookies_eaten\n\n    return sweet_cookies_left", "mapping": {"c0": 22.0, "c1": 75.0, "c2": 15.0, "c3": 54.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour and c3 cups of sugar.How many more cups of flour does she need to add?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3):\n    #Mary needs to add c0 cups of flour in total\n    flour_needed = c0\n\n    #Mary has already added c2 cups of flour\n    flour_added = c2\n\n    #Mary needs to add the difference between the total amount of flour needed and the amount already added\n    flour_remaining = flour_needed - flour_added\n\n    return flour_remaining", "mapping": {"c0": 9.0, "c1": 5.0, "c2": 3.0, "c3": 62.0}}
{"question": "Each pack of dvds costs c0 dollars. If there is a discount of c1 dollars on each packHow many packs of dvds can you buy with c2 dollars?", "answer": [93.0], "response": "def Problem(c0, c1, c2):\n    #calculate the discounted price of each pack of dvds\n    discounted_price = c0 - c1\n\n    #calculate the maximum number of packs that can be bought with c2 dollars\n    max_packs = c2 // discounted_price\n\n    return max_packs", "mapping": {"c0": 107.0, "c1": 106.0, "c2": 93.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books are there in the ' crazy silly school ' series?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the difference between the number of movies and books\n    diff = c3 - c2\n\n    return diff", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 19.0, "c3": 61.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many pieces of candy and chocolate did Bobby eat altogether?", "answer": [51.0], "response": "def candy_and_chocolate(c0, c1, c2):\n    # Bobby ate c0 pieces of candy\n    candy = c0\n\n    # Bobby ate c1 more pieces of candy\n    candy += c1\n\n    # Bobby ate c2 pieces of chocolate\n    chocolate = c2\n\n    # Bobby ate candy and chocolate altogether\n    total = candy + chocolate\n\n    return total", "mapping": {"c0": 33.0, "c1": 4.0, "c2": 14.0}}
{"question": "Bryan took a look at his books as well. He has c0 bookshelves with each having the same number of books. If he has a total of c1 booksHow many books are there in each bookshelf?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are c0 bookshelves\n    num_shelves = c0\n\n    #there are c1 books in total\n    num_books = c1\n\n    #The number of books in each bookshelf can be calculated by dividing the total number of books by the number of bookshelves\n    books_per_shelf = num_books / num_shelves\n\n    return books_per_shelf", "mapping": {"c0": 7.0, "c1": 28.0}}
{"question": "Melissa scored c0 points in each game. If she scored a total of c1 pointsHow many games did she play?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa scored c0 points in each game\n    points_per_game = c0\n\n    #Melissa scored a total of c1 points\n    total_points = c1\n\n    #The number of games Melissa played can be calculated by dividing the total points by the points per game\n    games_played = total_points // points_per_game\n\n    return games_played", "mapping": {"c0": 12.0, "c1": 36.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of reading homework than math homeworkHow many pages of reading homework did she have to complete?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #She had to complete c1 more pages of reading homework than math homework\n    reading_homework = math_homework + c1\n\n    return reading_homework - math_homework", "mapping": {"c0": 8.0, "c1": 6.0}}
{"question": "Jack received c0 emails and sent c1 letters in the morning. He then received c2 emails and sent c3 letters in the afternoon.How many emails did Jack receive in the day?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    emails_received = c0 + c2\n\n    return emails_received", "mapping": {"c0": 6.0, "c1": 91.0, "c2": 2.0, "c3": 74.0}}
{"question": "At the arcade Dave had won c0 tickets. He used some tickets to buy toys. If he still has c1 tickets leftHow many tickets did Dave use to buy toys?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Dave had originally won c0 tickets\n    tickets_before = c0\n\n    #After buying toys, he has c1 tickets left\n    tickets_after = c1\n\n    #The number of tickets he used to buy toys can be calculated by subtracting the number of tickets left from the original number of tickets\n    tickets_used = tickets_before - tickets_after\n\n    return tickets_used", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "Every day Ryan spends c0 hours on learning english and some more hours on learning chinese. If he spends c1 hours more on learning english than on learning chineseHow many hours does he spend on learning chinese?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours more on learning english than on learning chinese\n    #So, the total hours he spends on learning chinese is c0 - c1\n    chinese_hours = english_hours - c1\n\n    return chinese_hours", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "Katie had c0 ds games and her new friends had c1 games and old friends had c2 games.How many games do her friends have in all?", "answer": [141.0], "response": "def total_games(c0, c1, c2):\n    #Katie has c0 games, new friends have c1 games, and old friends have c2 games\n    katie_games = c0\n    new_friends_games = c1\n    old_friends_games = c2\n\n    #The total number of games her friends have can be calculated by adding the number of games of all her friends\n    total = katie_games + new_friends_games + old_friends_games\n\n    return total", "mapping": {"c0": 91.0, "c1": 88.0, "c2": 53.0}}
{"question": "Paul got a box of some crayons for his birthday. During the school year he gave c0 crayons to his friends while he lost c1 crayons. If he only had c2 crayons leftHow many crayons had been lost or given away?", "answer": [587.0], "response": "def Problem(c0, c1, c2):\n    #Paul had c0 crayons initially\n    initial_crayons = c0\n\n    #He gave away c0 crayons to his friends\n    given_away = c0\n\n    #He also lost c1 crayons\n    lost = c1\n\n    #The number of crayons he has left is c2\n    remaining = c2\n\n    #The total number of crayons lost or given away can be calculated by subtracting the remaining crayons from the initial number of crayons\n    lost_or_given_away = initial_crayons - remaining\n\n    return lost_or_given_away", "mapping": {"c0": 52.0, "c1": 535.0, "c2": 492.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes per day and c2 drums of raspberries per day.How many drums of grapes would be filled in c3 days?", "answer": [35624.0], "response": "def grapevine_drums(c0, c1, c2, c3):\n    #c0 pickers fill c1 drums of grapes per day and c2 drums of raspberries per day\n    grapes_per_day = c0 * c1\n\n    #The number of drums of grapes filled in c3 days can be calculated by multiplying the number of days by the number of drums filled per day\n    total_grapes = grapes_per_day * c3\n\n    return total_grapes", "mapping": {"c0": 294.0, "c1": 244.0, "c2": 47.0, "c3": 146.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jill have?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake also has c1 more peaches than Jill\n    jill_peaches = jake_peaches - c1\n\n    return jill_peaches\n\n#The function takes in three arguments: c0, c1, and c2\n#It first calculates how many peaches Jake has by subtracting c0 from c2\n#Then it calculates how many peaches Jill has by subtracting c1 from Jake's number of peaches\n#Finally, it returns the number of peaches Jill has.", "mapping": {"c0": 7.0, "c1": 8.0, "c2": 17.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more green peaches than yellow peaches are in the basket?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #number of green peaches\n    green = c2\n    #number of yellow peaches\n    yellow = c1\n    #difference between green and yellow peaches\n    diff = green - yellow\n    return diff", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 14.0}}
{"question": "A book has c0 chapters. Each chapter is c1 pages long.How many pages does the book have altogether?", "answer": [1891.0], "response": "def Problem(c0, c1):\n    #there are c0 chapters in the book\n    chapters = c0\n\n    #each chapter is c1 pages long\n    pages_per_chapter = c1\n\n    #The total number of pages in the book can be calculated by multiplying the number of chapters by the number of pages per chapter\n    total_pages = chapters * pages_per_chapter\n\n    return total_pages", "mapping": {"c0": 31.0, "c1": 61.0}}
{"question": "Brenda's mother made cookies for guests. Each guest had c0 cookies. If she prepared a total of c1 cookiesHow many guests did she prepare cookies for?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #each guest had c0 cookies\n    cookies_per_guest = c0\n\n    #total number of cookies prepared is c1\n    total_cookies = c1\n\n    #number of guests can be calculated by dividing the total number of cookies by the number of cookies per guest\n    num_guests = total_cookies // cookies_per_guest\n\n    return num_guests", "mapping": {"c0": 2.0, "c1": 10.0}}
{"question": "Every day Ryan spends a total of c0 hours on learning english and chinese. If he spends c1 hours on learning english everydayHow many hours does he spend on learning chinese?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends a total of c0 hours on learning english and chinese\n    total_hours = c0\n\n    #Ryan spends c1 hours on learning english everyday\n    english_hours = c1\n\n    #The number of hours Ryan spends on learning chinese can be calculated by subtracting the number of hours he spends on learning english from the total number of hours he spends on both languages\n    chinese_hours = total_hours - english_hours\n\n    return chinese_hours", "mapping": {"c0": 3.0, "c1": 2.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of raspberries per day and c2 drums of grapes per day.How many drums of grapes would be filled in c3 days?", "answer": [17017.0], "response": "def grape_drums(c0, c1, c2, c3):\n    #c0 pickers fill c1 drums of raspberries per day and c2 drums of grapes per day\n    rasp_drums = c0 * c1\n    grape_drums = c0 * c2\n\n    #calculate the total number of grape drums filled in c3 days\n    total_grape_drums = grape_drums * c3\n\n    return total_grape_drums", "mapping": {"c0": 235.0, "c1": 100.0, "c2": 221.0, "c3": 77.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many more pieces of candy than chocolate did Bobby eat?", "answer": [58.0], "response": "def candy_vs_chocolate(c0, c1, c2):\n    # Bobby ate c0 pieces of candy\n    candy_before = c0\n\n    # Bobby ate c1 more pieces of candy\n    candy_after = candy_before + c1\n\n    # Bobby ate c2 pieces of chocolate\n    chocolate = c2\n\n    # The difference between the number of candy and chocolate Bobby ate can be calculated by subtracting the number of chocolate from the number of candy\n    candy_diff = candy_after - chocolate\n\n    return candy_diff", "mapping": {"c0": 38.0, "c1": 36.0, "c2": 16.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvested c0 sacks of oranges.How many days did it take to harvest them if they harvested c1 sacks of oranges per day?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #they harvested c0 sacks of oranges\n    sacks_harvested = c0\n\n    #they harvested c1 sacks of oranges per day\n    sacks_per_day = c1\n\n    #The number of days it took to harvest all the oranges can be calculated by dividing the total number of sacks by the number of sacks harvested per day\n    days_to_harvest = sacks_harvested / sacks_per_day\n\n    return days_to_harvest", "mapping": {"c0": 54.0, "c1": 18.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each block. If he gives c1 mails to each house in a blockHow many houses are there in a block?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #the mailman gives c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #the mailman gives c1 mails to each house in a block\n    mail_per_house = c1\n\n    #the number of houses in a block can be calculated by dividing the number of mails per block by the number of mails per house\n    houses_per_block = mail_per_block / mail_per_house\n\n    return houses_per_block", "mapping": {"c0": 25.0, "c1": 5.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers. Then he got c2 new customersHow many customers left?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #the waiter originally had c0 customers\n    customers_before = c0\n\n    #after some customers left, he had c1 customers\n    customers_after_leaving = c1\n\n    #then he got c2 new customers\n    new_customers = c2\n\n    #the number of customers who left can be calculated by subtracting the number of customers after leaving from the sum of the original customers and the new customers\n    customers_left = customers_before + new_customers - customers_after_leaving\n\n    return customers_left", "mapping": {"c0": 8.0, "c1": 5.0, "c2": 99.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 apples and c3 peaches.How many more apples than peaches does Steven have?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c3 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c2 + c1\n\n    #Steven has c2 apples and c3 peaches\n    steven_apples = c2\n    steven_peaches = c3\n\n    #Steven has more apples than peaches\n    more_apples = steven_apples - steven_peaches\n\n    return more_apples", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 19.0, "c3": 15.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese.How many more hours does he spend on learning chinese than he does on learning english?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #The difference between the hours spent on learning chinese and english can be calculated by subtracting the number of hours spent on learning english from the number of hours spent on learning chinese\n    difference = chinese_hours - english_hours\n\n    return difference", "mapping": {"c0": 6.0, "c1": 7.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many birds are sitting on the fence?", "answer": [10.0], "response": "def birds_on_fence(c0, c1, c2):\n    #calculate the total number of birds before the new ones arrived\n    total_birds = c0 + c1\n    #add the number of new birds to the total\n    total_birds += c2\n    #return the final number of birds on the fence\n    return total_birds", "mapping": {"c0": 4.0, "c1": 46.0, "c2": 6.0}}
{"question": "Paco had c0 cookies. He ate some of them and had c1 cookies left.How many cookies did Paco eat?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #Paco ate some cookies and had c1 cookies left\n    cookies_after = c1\n\n    #The number of cookies Paco ate can be calculated by subtracting the number of cookies left from the original number of cookies\n    cookies_eaten = cookies_before - cookies_after\n\n    return cookies_eaten", "mapping": {"c0": 28.0, "c1": 7.0}}
{"question": "Matthew had c0 crackers to give to friends. If Matthew gave c1 crackers to each his friendsHow many friends did he give crackers to?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Matthew had c0 crackers to give to friends\n    crackers = c0\n\n    #Matthew gave c1 crackers to each of his friends\n    per_friend = c1\n\n    #The number of friends he gave crackers to can be calculated by dividing the total number of crackers by the number of crackers given to each friend\n    friends = crackers // per_friend\n\n    return friends", "mapping": {"c0": 8.0, "c1": 2.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many campers went rowing and hiking in all?", "answer": [71.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The total number of campers who went rowing is the sum of those who went rowing in the morning and afternoon\n    total_rowing = rowing_morning + rowing_afternoon\n\n    #The total number of campers who went hiking and rowing is the sum of those who went hiking in the morning and those who went rowing in the morning and afternoon\n    total_hiking_rowing = hiking_morning + total_rowing\n\n    return total_hiking_rowing", "mapping": {"c0": 41.0, "c1": 4.0, "c2": 26.0}}
{"question": "Paco had c0 cookies. He ate c1 of them. Then he bought c2 more cookiesHow many more cookies did he buy than those he ate?", "answer": [34.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He ate c1 of them\n    cookies_ate = c1\n\n    #He bought c2 more cookies\n    cookies_bought = c2\n\n    #The number of cookies he has now can be calculated by subtracting the number of cookies he ate from the original number of cookies and then adding the number of cookies he bought\n    cookies_after = cookies_before - cookies_ate + cookies_bought\n\n    #The number of cookies he bought more than those he ate can be calculated by subtracting the number of cookies he ate from the number of cookies he bought\n    more_cookies_bought = cookies_bought - cookies_ate\n\n    return more_cookies_bought", "mapping": {"c0": 13.0, "c1": 2.0, "c2": 36.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than david.How many push-ups did David do?", "answer": [58.0], "response": "Let's think about it step by step:\n\ndef David_pushups(c0, c1, c2):\n    # Zachary did c0 push-ups\n    zachary_pushups = c0\n\n    # David did c1 more push-ups than Zachary\n    david_pushups = zachary_pushups + c1\n\n    # John did c2 push-ups less than David\n    john_pushups = david_pushups - c2\n\n    return john_pushups", "mapping": {"c0": 19.0, "c1": 39.0, "c2": 13.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of salt does she need to add now?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate how many more cups of flour Mary needs to add\n    flour_needed = c0 - c3\n\n    #calculate how many cups of salt Mary needs to add\n    salt_needed = c2\n\n    #calculate the difference between the cups of flour needed and cups of salt needed\n    difference = flour_needed - salt_needed\n\n    return difference", "mapping": {"c0": 12.0, "c1": 14.0, "c2": 7.0, "c3": 2.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many more roses did she cut than those she threw away?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    roses_thrown = c1\n\n    #there are now c2 roses in the vase\n    roses_after = c2\n\n    #The number of roses she cut can be calculated by subtracting the number of roses before from the number of roses after, and then subtracting the number of roses thrown away\n    roses_cut = roses_after - roses_before - roses_thrown\n\n    return roses_cut", "mapping": {"c0": 15.0, "c1": 33.0, "c2": 17.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Fred washed cars over the weekend and now has c2 dollars. Jason delivered newspapers and now has c3 dollars.How much money did Jason earn by delivering newspapers?", "answer": [60.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Fred now has c2 dollars after washing cars\n    fred_after = c2\n\n    #Jason now has c3 dollars after delivering newspapers\n    jason_after = c3\n\n    #Jason's earnings can be calculated by subtracting his initial amount from his current amount\n    jason_earnings = jason_after - jason_before\n\n    return jason_earnings", "mapping": {"c0": 49.0, "c1": 3.0, "c2": 112.0, "c3": 63.0}}
{"question": "Jake has c0 fewer peaches than Steven and c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jake have?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Jake has c0 fewer peaches than Steven\n    jake = c2 - c0\n\n    #Jake has c1 more peaches than Jill\n    jake = jake + c1\n\n    return jake", "mapping": {"c0": 7.0, "c1": 9.0, "c2": 16.0}}
{"question": "c0 campers went rowing on a day. c1 campers went rowing in the morning and some more campers went rowing in the afternoon.How many campers went rowing in the afternoon?", "answer": [3.0], "response": "def afternoon_campers(c0, c1):\n    #c0 campers went rowing on a day\n    #c1 campers went rowing in the morning\n    morning_campers = c1\n\n    #The number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing on the day\n    afternoon_campers = c0 - morning_campers\n\n    return afternoon_campers", "mapping": {"c0": 46.0, "c1": 43.0}}
{"question": "The ring toss game at the carnival made c0 dollars in the first c1 days and c2 dollars in the remaining c3 days.How much did they make in all?", "answer": [756.0], "response": "def carnival_income(c0, c1, c2, c3):\n    #calculate the income from the first c1 days\n    income_first_days = c0 * c1\n\n    #calculate the income from the remaining c3 days\n    income_remaining_days = c2 * c3\n\n    #calculate the total income by adding the income from the first c1 days and the income from the remaining c3 days\n    total_income = income_first_days + income_remaining_days\n\n    return total_income", "mapping": {"c0": 382.0, "c1": 44.0, "c2": 374.0, "c3": 10.0}}
{"question": "A book has c0 chapters. The second chapter is c1 pages long. If there are a total of c2 pages in the bookHow many pages are in the first chapter?", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #the second chapter is c1 pages long\n    second_chapter = c1\n\n    #there are a total of c2 pages in the book\n    total_pages = c2\n\n    #the number of pages in the first chapter can be calculated by subtracting the number of pages in the second chapter from the total number of pages in the book, and then dividing by the number of chapters minus one\n    first_chapter = (total_pages - second_chapter) / (c0 - 1)\n\n    return first_chapter", "mapping": {"c0": 2.0, "c1": 36.0, "c2": 67.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. If she wants to invite c2 friendsHow many extra invitations will she need to buy?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #each package has c0 invitations\n    invitations_per_pack = c0\n\n    #she bought c1 packs\n    packs_bought = c1\n\n    #she wants to invite c2 friends\n    friends_invited = c2\n\n    #The total number of invitations she has is the number of packs bought multiplied by the number of invitations per pack\n    total_invitations = invitations_per_pack * packs_bought\n\n    #The number of extra invitations she needs to buy is the difference between the total number of invitations and the number of friends she wants to invite\n    extra_invitations = total_invitations - friends_invited\n\n    return extra_invitations", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 9.0}}
{"question": "Zachary did c0 push-ups in gym class today. David did c1 more push-ups than Zachary. John did c2 push-ups less than David.How many more push-ups did Zachary do than John?", "answer": [30.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    # Zachary did c0 push-ups\n    zachary = c0\n\n    # David did c1 more push-ups than Zachary\n    david = zachary + c1\n\n    # John did c2 push-ups less than David\n    john = david - c2\n\n    # The difference between Zachary's push-ups and John's push-ups can be calculated by subtracting John's push-ups from Zachary's push-ups\n    difference = zachary - john\n\n    return difference", "mapping": {"c0": 15.0, "c1": 39.0, "c2": 9.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost some of his marbles at the playground. Now Ed has c1 more marbles than doug.How many marbles did Doug lose?", "answer": [17.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0 + doug_marbles\n\n    #Now Ed has c1 more marbles than Doug\n    doug_marbles = ed_marbles - c1\n\n    #Doug lost some of his marbles at the playground\n    lost_marbles = ed_marbles - doug_marbles - c0\n\n    return lost_marbles\n\n#We can simplify the code by combining the first two steps:\n\ndef Problem(c0, c1):\n    #Ed had c0 more marbles than Doug\n    #Now Ed has c1 more marbles than Doug\n    #Therefore, Doug has c1 - c0 fewer marbles than Ed\n    lost_marbles = (c1 - c0) / 2\n\n    return lost_marbles", "mapping": {"c0": 2.0, "c1": 19.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers and c2 scales. If the skittles are organized into c3 groupsHow big is each group?", "answer": [112.0], "response": "def Problem(c0, c1, c2, c3):\n    #total number of skittles, erasers, and scales\n    total_items = c0 + c1 + c2\n\n    #size of each group can be calculated by dividing the total number of skittles by the number of groups\n    group_size = total_items // c3\n\n    return group_size", "mapping": {"c0": 896.0, "c1": 517.0, "c2": 90.0, "c3": 8.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 marbles and c2 eggs.How many groups will be created?", "answer": [3.0], "response": "def egg_groups(c0, c1, c2):\n    #calculate the maximum number of groups that can be created based on the number of eggs and the desired group size\n    max_groups = c2 // c0\n    \n    #check if there are enough marbles to create the maximum number of groups\n    if max_groups <= c1:\n        return max_groups\n    else:\n        #if there are not enough marbles, calculate the maximum number of groups that can be created with the available marbles\n        available_groups = c1\n        return available_groups", "mapping": {"c0": 5.0, "c1": 10.0, "c2": 15.0}}
{"question": "Paul had c0 pens and c1 books. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many books did he sell in the garage sale?", "answer": [140.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul had c0 pens and c1 books\n    pens_before = c0\n    books_before = c1\n\n    #After selling some books and pens in a garage sale he had c2 books and c3 pens left\n    books_after = c2\n    pens_after = c3\n\n    #The number of books sold can be calculated by subtracting the number of books left after the sale from the original number of books\n    books_sold = books_before - books_after\n\n    return books_sold", "mapping": {"c0": 95.0, "c1": 153.0, "c2": 13.0, "c3": 23.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many pages did he read per day?", "answer": [102.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the book has c0 pages\n    total_pages = c0\n\n    #the book has c1 chapters\n    total_chapters = c1\n\n    #Frank finished the book in c2 days\n    total_days = c2\n\n    #The number of pages Frank read per day can be calculated by dividing the total number of pages by the number of days it took him to finish the book\n    pages_per_day = total_pages / total_days\n\n    return pages_per_day", "mapping": {"c0": 612.0, "c1": 24.0, "c2": 6.0}}
{"question": "There are c0 peaches distributed equally in some baskets. If each basket has c1 red peaches and c2 green peachesHow many baskets of peaches are there?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c1 red peaches and c2 green peaches\n    peaches_per_basket = c1 + c2\n\n    #the total number of baskets can be calculated by dividing the total number of peaches by the number of peaches per basket\n    total_baskets = c0 / peaches_per_basket\n\n    return total_baskets", "mapping": {"c0": 10.0, "c1": 4.0, "c2": 6.0}}
{"question": "Lewis earns $ c0 every week during the harvest. If he earns a total of $ c1 How many weeks did the harvest last?", "answer": [89.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Lewis earns c0 every week during the harvest\n    weekly_earnings = c0\n\n    #Lewis earns a total of c1 during the harvest\n    total_earnings = c1\n\n    #The number of weeks the harvest lasted can be calculated by dividing the total earnings by the weekly earnings\n    weeks = total_earnings / weekly_earnings\n\n    return weeks", "mapping": {"c0": 2.0, "c1": 178.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny throw away than those he found at the park?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Danny threw away c0 bottle caps and found c1 new ones\n    thrown_away = c0\n    found = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total = c2\n\n    #The difference between the number of bottle caps thrown away and the number of new ones found can be calculated by subtracting found from thrown_away\n    difference = thrown_away - found\n\n    return difference", "mapping": {"c0": 54.0, "c1": 48.0, "c2": 52.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of unripe oranges will they have after c2 days of harvest?", "answer": [1080.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day\n    ripe_oranges_per_day = c0\n    unripe_oranges_per_day = c1\n\n    #after c2 days of harvest, how many sacks of unripe oranges will they have?\n    total_unripe_oranges = unripe_oranges_per_day * c2\n\n    return total_unripe_oranges", "mapping": {"c0": 31.0, "c1": 24.0, "c2": 45.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog.How much did they jump altogether?", "answer": [66.0], "response": "def jumping_contest(c0, c1):\n    # The grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    # The grasshopper jumped c1 inches farther than the frog\n    frog_jump = grasshopper_jump - c1\n\n    # They jumped altogether by adding the grasshopper's jump and the frog's jump\n    total_jump = grasshopper_jump + frog_jump\n\n    return total_jump", "mapping": {"c0": 35.0, "c1": 4.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the jerseys?", "answer": [25740.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling jerseys\n    revenue_jerseys = c1 * c3\n\n    return revenue_jerseys", "mapping": {"c0": 67.0, "c1": 165.0, "c2": 74.0, "c3": 156.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Ron's height. Dean is c1 feet shorter than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Ron's height is c2 feet\n    ron_height = c2\n\n    #Dean is c1 feet shorter than Ron\n    dean_height = ron_height - c1\n\n    #The depth of the water is c0 times Ron's height\n    water_depth = c0 * ron_height\n\n    return water_depth", "mapping": {"c0": 5.0, "c1": 11.0, "c2": 12.0}}
{"question": "There are c0 pots. Each pot has c1 flowers and c2 sticks in it.How many flowers and sticks are there in all?", "answer": [109044.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 pots\n    pots = c0\n\n    #each pot has c1 flowers\n    flowers_per_pot = c1\n\n    #each pot has c2 sticks\n    sticks_per_pot = c2\n\n    #total number of flowers can be calculated by multiplying the number of pots by the number of flowers per pot\n    total_flowers = pots * flowers_per_pot\n\n    #total number of sticks can be calculated by multiplying the number of pots by the number of sticks per pot\n    total_sticks = pots * sticks_per_pot\n\n    return total_flowers, total_sticks", "mapping": {"c0": 466.0, "c1": 53.0, "c2": 181.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many more crayons did he lose than those he gave to his friends?", "answer": [322.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    crayons_before = c0\n\n    #During the school year he gave c1 crayons to his friends\n    given_away = c1\n\n    #he lost c2 crayons\n    lost = c2\n\n    #The difference between the number of crayons lost and the number of crayons given away can be calculated by subtracting the number of crayons given away from the number of crayons lost\n    difference = lost - given_away\n\n    return difference", "mapping": {"c0": 110.0, "c1": 90.0, "c2": 412.0}}
{"question": "In a school there are c0 girls and c1 boys.How many more girls than boys does the school have?", "answer": [333.0], "response": "def Problem(c0, c1):\n    #number of girls in the school\n    girls = c0\n\n    #number of boys in the school\n    boys = c1\n\n    #calculate the difference between the number of girls and boys\n    diff = girls - boys\n\n    return diff", "mapping": {"c0": 569.0, "c1": 236.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many sacks of unripe oranges will they have after c2 days of harvest?", "answer": [390.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of unripe oranges per day\n    unripe_per_day = c0\n\n    #they harvest c1 sacks of ripe oranges per day\n    ripe_per_day = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #The total number of unripe oranges after c2 days can be calculated by multiplying the number of unripe oranges harvested per day by the number of days and adding it to the original number of unripe oranges\n    unripe_after = (unripe_per_day * days) + c0\n\n    return unripe_after", "mapping": {"c0": 65.0, "c1": 46.0, "c2": 6.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. Each seat can hold c1 people. If there are c2 people on the wheel right nowHow many more people can join the wheel?", "answer": [68.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of people that can fit on the Ferris wheel\n    total_capacity = c0 * c1\n\n    #calculate the number of people currently on the Ferris wheel\n    current_people = c2\n\n    #calculate the number of people that can still fit on the Ferris wheel\n    remaining_capacity = total_capacity - current_people\n\n    return remaining_capacity", "mapping": {"c0": 6.0, "c1": 14.0, "c2": 16.0}}
{"question": "Debby bought c0 water bottles when they were on sale. She drank the same number of bottles each day. If the bottles lasted for c1 daysHow many bottles did she drink each day?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Debby bought c0 water bottles\n    bottles_bought = c0\n\n    #The bottles lasted for c1 days\n    days_lasted = c1\n\n    #Debby drank the same number of bottles each day\n    bottles_per_day = bottles_bought // days_lasted\n\n    return bottles_per_day\n\n#We use integer division (//) to get the whole number of bottles Debby drank each day.", "mapping": {"c0": 153.0, "c1": 17.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces of candies does Robin have?", "answer": [405.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum and c1 packages of candy\n    candy_packages = c1\n\n    #There are c2 pieces in each package of candy\n    pieces_per_package = c2\n\n    #The total number of pieces of candy can be calculated by multiplying the number of candy packages by the number of pieces per package\n    total_candy_pieces = candy_packages * pieces_per_package\n\n    return total_candy_pieces", "mapping": {"c0": 21.0, "c1": 45.0, "c2": 9.0}}
{"question": "After Olivia visited a supermarket there were c0 dollars left. If there were c1 dollars in her wallet initiallyHow much did she spend?", "answer": [25.0], "response": "def Problem(c0, c1):\n    #Olivia had c1 dollars initially\n    initial_wallet = c1\n\n    #After visiting the supermarket, she had c0 dollars left\n    remaining_wallet = c0\n\n    #The amount she spent can be calculated by subtracting the remaining amount from the initial amount\n    spent = initial_wallet - remaining_wallet\n\n    return spent", "mapping": {"c0": 29.0, "c1": 54.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 trees were left.How many trees died in the typhoon?", "answer": [16.0], "response": "def Problem(c0, c1):\n    #Haley grew c0 trees in her backyard\n    trees_before = c0\n\n    #After the typhoon c1 trees were left\n    trees_after = c1\n\n    #The number of trees that died in the typhoon can be calculated by subtracting the number of trees left after the typhoon from the original number of trees\n    trees_died = trees_before - trees_after\n\n    return trees_died", "mapping": {"c0": 20.0, "c1": 4.0}}
{"question": "Jake has c0 fewer peaches than Steven who has c1 more peaches than Jill. Steven has c2 peaches.How many peaches does Jake have?", "answer": [8.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Jill has c1 more peaches than Jill\n    jill_peaches = steven_peaches - c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = jill_peaches - c0\n\n    return jake_peaches", "mapping": {"c0": 7.0, "c1": 14.0, "c2": 15.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money will have at the end of the harvest season?", "answer": [324775.0], "response": "Let's think about it step by step:\n\ndef harvest_profit(c0, c1, c2):\n    #Lewis earns c0 every week during the harvest season\n    weekly_earnings = c0\n\n    #The harvest season lasts for c1 weeks\n    weeks_of_harvest = c1\n\n    #Lewis has to pay c2 rent every week\n    weekly_rent = c2\n\n    #Calculate the total earnings during the harvest season\n    total_earnings = weekly_earnings * weeks_of_harvest\n\n    #Calculate the total rent paid during the harvest season\n    total_rent = weekly_rent * weeks_of_harvest\n\n    #Calculate the profit at the end of the harvest season\n    profit = total_earnings - total_rent\n\n    return profit", "mapping": {"c0": 491.0, "c1": 1181.0, "c2": 216.0}}
{"question": "Paul had c0 books and c1 pens. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many pens did he sell in the garage sale?", "answer": [92.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul had c1 pens before the garage sale\n    pens_before = c1\n\n    #Paul had c3 pens left after the garage sale\n    pens_after = c3\n\n    #The number of pens sold can be calculated by subtracting the number of pens left after the garage sale from the number of pens before the garage sale\n    pens_sold = pens_before - pens_after\n\n    return pens_sold", "mapping": {"c0": 51.0, "c1": 106.0, "c2": 82.0, "c3": 14.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many crunches did David do?", "answer": [4.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    #David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = c0 + c2\n    david_crunches = c1 - c3\n\n    #The number of crunches David did can be calculated by subtracting the number of crunches he did from the number of crunches Zachary did\n    crunches_david = zachary_crunches - david_crunches\n\n    return crunches_david", "mapping": {"c0": 44.0, "c1": 17.0, "c2": 29.0, "c3": 13.0}}
{"question": "Paul had c0 pens and c1 books. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many pens did he sell in the garage sale?", "answer": [23.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul had c0 pens and c1 books\n    pens_before = c0\n    books_before = c1\n\n    #After selling some books and pens in a garage sale he had c2 books and c3 pens left\n    books_after = c2\n    pens_after = c3\n\n    #The number of pens he sold can be calculated by subtracting the number of pens left after the garage sale from the original number of pens\n    pens_sold = pens_before - pens_after\n\n    return pens_sold", "mapping": {"c0": 42.0, "c1": 143.0, "c2": 113.0, "c3": 19.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more bottle caps than wrappers does danny have now?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers\n    bottle_caps_after = c2\n    wrappers_after = c3\n\n    #Calculate the difference between the number of bottle caps and wrappers\n    difference = bottle_caps_after - bottle_caps_before - (wrappers_after - wrappers_before)\n\n    return difference", "mapping": {"c0": 71.0, "c1": 24.0, "c2": 28.0, "c3": 16.0}}
{"question": "Dan has $ c0. He bought c1 candy bar for $ c2 each one costing the same amount of money.How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought c1 candy bars for c2 dollars each\n    spent = c1 * c2\n\n    #The amount of money left can be calculated by subtracting the amount spent from the original amount of money\n    money_after = money_before - spent\n\n    return money_after", "mapping": {"c0": 4.0, "c1": 99.0, "c2": 3.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many more children got on the bus than those that got off?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    children_before = c0\n\n    #c1 children got off the bus\n    children_off = c1\n\n    #c2 children were left on the bus\n    children_after = c2\n\n    #The number of children that got on the bus can be calculated by subtracting the number of children before from the number of children after, and then subtracting the number of children that got off\n    children_on = children_after - children_before - children_off\n\n    return children_on", "mapping": {"c0": 5.0, "c1": 63.0, "c2": 14.0}}
{"question": "Debby bought c0 soda bottles and c1 water bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the water bottles last?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Debby bought c0 soda bottles and c1 water bottles\n    water_bottles = c1\n\n    #Debby drank c2 water bottles a day\n    water_per_day = c2\n\n    #Calculate how many days the water bottles would last\n    days_of_water = water_bottles // water_per_day\n\n    return days_of_water", "mapping": {"c0": 95.0, "c1": 180.0, "c2": 15.0, "c3": 54.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many cups of flour did she put in?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the recipe calls for c0 cups of sugar and c1 cups of flour\n    sugar = c0\n    flour = c1\n\n    #Mary already put in some cups of flour\n    flour_used = flour - c2\n\n    #She still needs c2 more cups of flour than sugar\n    sugar_needed = sugar\n    flour_needed = sugar_needed + c2\n\n    #The number of cups of flour Mary put in can be calculated by subtracting the amount of flour still needed from the original amount of flour\n    flour_put_in = flour - flour_needed\n\n    return flour_put_in", "mapping": {"c0": 3.0, "c1": 10.0, "c2": 5.0}}
{"question": "Faye had c0 packs of pencils each one having c1 pencils. She was placing her pencils into rows with c2 pencils in each row.How many rows could she make?", "answer": [70.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of pencils Faye has\n    total_pencils = c0 * c1\n\n    #calculate the number of rows she can make by dividing the total number of pencils by the number of pencils in each row\n    rows = total_pencils // c2\n\n    return rows", "mapping": {"c0": 35.0, "c1": 4.0, "c2": 2.0}}
{"question": "Each Ferris wheel in paradise park has c0 seats. Each seat in a Ferris wheel can hold c1 people.How many people can ride c2 Ferris wheels at the same time?", "answer": [5700.0], "response": "def Problem(c0, c1, c2):\n    #each Ferris wheel has c0 seats\n    seats_per_wheel = c0\n\n    #each seat can hold c1 people\n    people_per_seat = c1\n\n    #we want to know how many people can ride c2 Ferris wheels at the same time\n    num_wheels = c2\n\n    #the total number of people that can ride c2 Ferris wheels at the same time can be calculated by multiplying the number of seats per wheel by the number of people per seat and then multiplying that by the number of wheels\n    total_people = seats_per_wheel * people_per_seat * num_wheels\n\n    return total_people", "mapping": {"c0": 19.0, "c1": 15.0, "c2": 20.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy.How many pieces of candy does he still have left?", "answer": [17.0], "response": "def candy_left(c0, c1):\n    # Bobby had c0 pieces of candy\n    candy_before = c0\n\n    # Bobby ate c1 pieces of candy\n    candy_eaten = c1\n\n    # The number of candy left can be calculated by subtracting the number of candy eaten from the original number of candy\n    candy_left = candy_before - candy_eaten\n\n    return candy_left", "mapping": {"c0": 19.0, "c1": 2.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy. Then he ate c2 more.How many pieces of candy did Bobby eat?", "answer": [52.0], "response": "def Problem(c0, c1, c2):\n    #Bobby had c0 pieces of candy\n    candy_before = c0\n\n    #Bobby ate c1 pieces of candy\n    candy_eaten1 = c1\n\n    #Bobby ate c2 more pieces of candy\n    candy_eaten2 = c2\n\n    #The total number of candy Bobby ate can be calculated by adding the first and second amount of candy eaten\n    candy_eaten_total = candy_eaten1 + candy_eaten2\n\n    return candy_eaten_total", "mapping": {"c0": 20.0, "c1": 34.0, "c2": 18.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many more visitors visited the Buckingham palace on that day than on the previous c3 days?", "answer": [57.0], "response": "def Problem(c0, c1, c2):\n    #total number of visitors in the previous c3 days\n    total_previous_visitors = c1 + c2\n\n    #number of visitors on the current day minus the total number of visitors in the previous c3 days\n    visitors_difference = c0 - total_previous_visitors\n\n    return visitors_difference", "mapping": {"c0": 705.0, "c1": 191.0, "c2": 457.0, "c3": 245.0}}
{"question": "Paul had c0 books and c1 pens. After selling some books and pens in a garage sale he had c2 books and c3 pens left.How many books did he sell in the garage sale?", "answer": [42.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paul had c0 books and c1 pens\n    books_before = c0\n    pens_before = c1\n\n    #After selling some books and pens in a garage sale he had c2 books and c3 pens left\n    books_after = c2\n    pens_after = c3\n\n    #The number of books he sold can be calculated by subtracting the number of books left after the garage sale from the original number of books\n    books_sold = books_before - books_after\n\n    return books_sold", "mapping": {"c0": 108.0, "c1": 55.0, "c2": 66.0, "c3": 59.0}}
{"question": "Marco and his dad went strawberry picking. Marco's dad's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much did Marco's strawberries weigh?", "answer": [19.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Marco's dad's strawberries weighed c0 pounds\n    dad_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #Marco's strawberries weigh can be calculated by subtracting his dad's strawberries weight from the total weight\n    marco_weight = total_weight - dad_weight\n\n    return marco_weight", "mapping": {"c0": 11.0, "c1": 30.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on monday and wednesday?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday and c2 kids on Wednesday\n    kids_on_monday = c0\n    kids_on_wednesday = c2\n\n    #return the sum of kids played with on Monday and Wednesday\n    return kids_on_monday + kids_on_wednesday", "mapping": {"c0": 5.0, "c1": 9.0, "c2": 15.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much did his dad's strawberries weigh?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #His dad's strawberries weigh can be calculated by subtracting Marco's strawberries weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    return dad_weight", "mapping": {"c0": 15.0, "c1": 37.0}}
{"question": "Shirley sold c0 boxes of trefoils.How many boxes are in each case if she needs to deliver c1 cases of boxes?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Shirley sold c0 boxes of trefoils\n    boxes_sold = c0\n\n    #She needs to deliver c1 cases of boxes\n    cases_delivered = c1\n\n    #To find out how many boxes are in each case, we can divide the total number of boxes sold by the number of cases delivered\n    boxes_per_case = boxes_sold / cases_delivered\n\n    return boxes_per_case", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 left while not having lost a single erasers.How many crayons had been lost or given away?", "answer": [367.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons and c1 erasers for his birthday\n    crayons_before = c0\n\n    #At the end of the school year he only had c2 left while not having lost a single eraser\n    crayons_after = c2\n    erasers = c1\n\n    #The number of crayons lost or given away can be calculated by subtracting the number of crayons left from the original number of crayons, and then subtracting the number of erasers\n    lost_or_given_away = crayons_before - crayons_after - erasers\n\n    return lost_or_given_away", "mapping": {"c0": 521.0, "c1": 66.0, "c2": 154.0}}
{"question": "David did c0 more push-ups than Zachary in gym class today. If David did c1 push-upsHow many push-ups did Zachary and David do altogether?", "answer": [20.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #David did c1 push-ups\n    david_pushups = c1\n\n    #Zachary did c0 less push-ups than David\n    zachary_pushups = david_pushups - c0\n\n    #The total number of push-ups they did altogether can be calculated by adding David's push-ups to Zachary's push-ups\n    total_pushups = david_pushups + zachary_pushups\n\n    return total_pushups", "mapping": {"c0": 56.0, "c1": 38.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many more wrappers than bottle caps does danny have now?", "answer": [16.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 bottle caps and c3 wrappers\n    bottle_caps_after = c2\n    wrappers_after = c3\n\n    #Danny has more wrappers than bottle caps if the number of wrappers after collecting minus the number of wrappers before collecting is greater than the number of bottle caps after collecting minus the number of bottle caps before collecting\n    if (wrappers_after - wrappers_before) > (bottle_caps_after - bottle_caps_before):\n        return (wrappers_after - wrappers_before) - (bottle_caps_after - bottle_caps_before)\n    else:\n        return 0", "mapping": {"c0": 10.0, "c1": 62.0, "c2": 27.0, "c3": 43.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. She found c1 bags of cans on the next day and c2 bags of cans the day after that.How many bags did she find after monday?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    bags_monday = c0\n\n    #She found c1 bags of cans on the next day\n    bags_tuesday = c1\n\n    #She found c2 bags of cans the day after that\n    bags_wednesday = c2\n\n    #The total number of bags she found after Monday can be calculated by adding the number of bags she found on Tuesday and Wednesday to the number of bags she had on Monday\n    total_bags = bags_monday + bags_tuesday + bags_wednesday\n\n    return total_bags", "mapping": {"c0": 8.0, "c1": 10.0, "c2": 4.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. She had c1 packs of pencils each one having c2 pencils.How many rows could she make?", "answer": [42.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of pencils Faye has\n    total_pencils = c1 * c2\n\n    #calculate the number of rows Faye can make by dividing the total number of pencils by the number of pencils in each row\n    rows = total_pencils // c0\n\n    return rows", "mapping": {"c0": 16.0, "c1": 28.0, "c2": 24.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many more storks than birds are sitting on the fence?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds and storks sitting on the fence\n    total = c0 + c1\n\n    #number of storks after c2 more storks join\n    storks_after = c1 + c2\n\n    #number of birds remains the same\n    birds_after = c0\n\n    #difference between number of storks and birds after c2 more storks join\n    diff = storks_after - birds_after\n\n    return diff", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 6.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much does she weigh now?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Jessie originally weighed c0 kilograms\n    weight_before = c0\n\n    #She lost c1 kilograms in the first week and c2 kilograms in the second week\n    weight_loss = c1 + c2\n\n    #Her current weight can be calculated by subtracting the weight loss from her original weight\n    weight_after = weight_before - weight_loss\n\n    return weight_after", "mapping": {"c0": 114.0, "c1": 50.0, "c2": 60.0}}
{"question": "c0 packs of dvds can be bought with c1 dollars.How much does each pack cost?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #each pack of dvds costs c1 divided by c0\n    cost_per_pack = c1 / c0\n\n    return cost_per_pack", "mapping": {"c0": 6.0, "c1": 120.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday than on wednesday?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c0 kids on Monday\n    monday = c0\n\n    #Julia played with c1 kids on Tuesday\n    tuesday = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday = c2\n\n    #The difference between the number of kids she played with on Monday and Wednesday can be calculated by subtracting the number of kids on Wednesday from the number of kids on Monday\n    difference = monday - wednesday\n\n    return difference", "mapping": {"c0": 14.0, "c1": 2.0, "c2": 8.0}}
{"question": "There were c0 parents, c1 pupils and c2 teachers in the program.How many people were present in the program?", "answer": [1541.0], "response": "def Problem(c0, c1, c2):\n    #there were c0 parents\n    parents = c0\n\n    #there were c1 pupils\n    pupils = c1\n\n    #there were c2 teachers\n    teachers = c2\n\n    #The total number of people present in the program can be calculated by adding the number of parents, pupils, and teachers\n    total = parents + pupils + teachers\n\n    return total", "mapping": {"c0": 73.0, "c1": 724.0, "c2": 744.0}}
{"question": "At the stop c0 more people got on the train. Initially there were c1 people on the train.How many people are there on the train now?", "answer": [19.0], "response": "def Problem(c0, c1):\n    #initially there were c1 people on the train\n    people_before = c1\n\n    #c0 more people got on the train\n    got_on = c0\n\n    #The number of people on the train now can be calculated by adding the number of people who got on to the initial number of people\n    people_now = people_before + got_on\n\n    return people_now", "mapping": {"c0": 8.0, "c1": 11.0}}
{"question": "Frank had c0 pieces of candy. He lost c1 of them. If he put the remaining pieces into bags with c2 pieces in each bagHow many bags would he have?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Frank had c0 pieces of candy\n    candy_before = c0\n\n    #He lost c1 of them\n    candy_lost = c1\n\n    #The number of remaining pieces of candy can be calculated by subtracting the lost candy from the original number of candy\n    candy_after = candy_before - candy_lost\n\n    #The number of bags can be calculated by dividing the remaining candy by the number of pieces in each bag\n    bags = candy_after // c2\n\n    return bags", "mapping": {"c0": 33.0, "c1": 24.0, "c2": 9.0}}
{"question": "Bryan took a look at his books as well. If he has c0 books distributed equally in c1 bookshelvesHow many books are there in each bookshelf?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #calculate the number of books in each bookshelf by dividing the total number of books by the number of bookshelves\n    books_per_shelf = c0 // c1\n\n    return books_per_shelf", "mapping": {"c0": 34.0, "c1": 2.0}}
{"question": "A waiter had c0 customers. After some more arrived he had c1 customers.How many new customers arrived?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #there were originally c0 customers\n    customers_before = c0\n\n    #after some more arrived, there are c1 customers\n    customers_after = c1\n\n    #the number of new customers can be calculated by subtracting the original number of customers from the number of customers afterward\n    new_customers = customers_after - customers_before\n\n    return new_customers", "mapping": {"c0": 3.0, "c1": 8.0}}
{"question": "Brenda's mother made cookies for guests. If she prepared c0 cookies and each of them had c1 cookiesHow many guests did she prepare cookies for?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each guest gets c1 cookies\n    cookies_per_guest = c1\n\n    #total number of guests can be calculated by dividing the total number of cookies by the number of cookies per guest\n    guests = c0 // cookies_per_guest\n\n    return guests", "mapping": {"c0": 38.0, "c1": 19.0}}
{"question": "They decided to hold the party in their backyard. They have some sets of tables, each having the c0 chairs. If there are a total of c1 chairs in the backyardHow many sets of tables do they have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #each set of tables has c0 chairs\n    chairs_per_table = c0\n\n    #there are c1 chairs in total\n    total_chairs = c1\n\n    #The number of sets of tables can be calculated by dividing the total number of chairs by the number of chairs per table\n    num_tables = total_chairs // chairs_per_table\n\n    return num_tables", "mapping": {"c0": 3.0, "c1": 9.0}}
{"question": "Luke played a trivia game and scored c0 points. If he gained the c1 points in each roundHow many rounds did he play?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Luke scored c0 points in the game\n    points = c0\n\n    #He gained c1 points in each round\n    points_per_round = c1\n\n    #The number of rounds he played can be calculated by dividing the total points by the points gained per round\n    rounds_played = points // points_per_round\n\n    return rounds_played", "mapping": {"c0": 154.0, "c1": 11.0}}
{"question": "Jack received c0 emails in the afternoon, c1 emails in the morning and some more in the evening. If he received a total of c2 emails in the dayHow many emails did jack receive in the evening?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the afternoon and c1 emails in the morning\n    total_before_evening = c0 + c1\n\n    #Jack received a total of c2 emails in the day\n    total_emails = c2\n\n    #The number of emails Jack received in the evening can be calculated by subtracting the total number of emails before the evening from the total number of emails in the day\n    evening_emails = total_emails - total_before_evening\n\n    return evening_emails", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 10.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many peaches are in each basket?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #each basket has c1 red peaches and c2 green peaches\n    #the total number of peaches in each basket is the sum of red and green peaches\n    total_peaches = c1 + c2\n\n    #the number of peaches in each basket can be calculated by dividing the total number of peaches by the number of baskets\n    peaches_per_basket = total_peaches / c0\n\n    return peaches_per_basket", "mapping": {"c0": 65.0, "c1": 7.0, "c2": 3.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 seats on each school bus. If c3 students do n't want to go for the tripHow many students are going on the trip?", "answer": [3.0], "response": "def field_trip_students(c0, c1, c2, c3):\n    #calculate the total number of seats available on all the buses\n    total_seats = c0 * c2\n\n    #calculate the number of students who want to go on the trip\n    students_going = c1 - c3\n\n    #if there are more students than seats, only the number of students that can fit on the buses will go on the trip\n    if students_going > total_seats:\n        students_going = total_seats\n\n    return students_going", "mapping": {"c0": 102.0, "c1": 11.0, "c2": 99.0, "c3": 8.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide. If she already has c2 square feet of carpetHow much more carpet does she need to cover the whole floor?", "answer": [149.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total area of the room\n    room_area = c0 * c1\n\n    #calculate the remaining area to be covered by carpet\n    remaining_area = room_area - c2\n\n    return remaining_area", "mapping": {"c0": 11.0, "c1": 15.0, "c2": 16.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many more peaches than apples does Steven have?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c2 - c0\n\n    #Jake has c1 more apples than Steven\n    jake_apples = c3 + c1\n\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Steven has c3 apples\n    steven_apples = c3\n\n    #Steven has more peaches than apples\n    difference = steven_peaches - steven_apples\n\n    return difference\n\n#The answer is the difference between the number of peaches and apples that Steven has.", "mapping": {"c0": 6.0, "c1": 8.0, "c2": 17.0, "c3": 16.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [69.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Danny threw away c0 old bottle caps\n    old_caps = c0\n\n    #Danny found c1 new bottle caps\n    new_caps = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total_caps = c2\n\n    #The number of bottle caps Danny had at first can be calculated by subtracting the number of old caps he threw away and the number of new caps he found from the total number of caps he has now\n    initial_caps = total_caps - old_caps - new_caps\n\n    return initial_caps", "mapping": {"c0": 60.0, "c1": 58.0, "c2": 67.0}}
{"question": "Nell collects baseball cards. She had c0 cards. She gave c1 cards to John and yet some more to Jeff. Now she has c2 cards left.How many cards did Nell give to Jeff?", "answer": [168.0], "response": "def Problem(c0, c1, c2):\n    #Nell had c0 cards\n    cards_before = c0\n\n    #Nell gave c1 cards to John\n    cards_to_john = c1\n\n    #Nell gave some more cards to Jeff\n    cards_to_jeff = c0 - c1 - c2\n\n    return cards_to_jeff", "mapping": {"c0": 573.0, "c1": 195.0, "c2": 210.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If he currently has c0 g of wax and the feathers require a total of c1 g of waxHow many more grams of wax does he need?", "answer": [481.0], "response": "def Problem(c0, c1):\n    #he currently has c0 g of wax\n    wax_before = c0\n\n    #the feathers require a total of c1 g of wax\n    wax_needed = c1\n\n    #The additional amount of wax he needs can be calculated by subtracting the current amount of wax from the required amount of wax\n    wax_needed_more = wax_needed - wax_before\n\n    return wax_needed_more", "mapping": {"c0": 11.0, "c1": 492.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. c1 bird families flew away for winter and c2 new bird families came to live near the mountain from the arctic.How many bird families were left near the mountain?", "answer": [14.0], "response": "def bird_families_left(c0, c1, c2):\n    #calculate the number of bird families that left\n    left = c0 - c1\n\n    #calculate the total number of bird families after new ones arrived\n    total = left + c2\n\n    return total", "mapping": {"c0": 49.0, "c1": 59.0, "c2": 24.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven and c2 more peaches than Jill.How many peaches does Jake have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = c0 - c1\n\n    #Jake has c2 more peaches than Jill\n    jill_peaches = jake_peaches - c2\n\n    #The number of peaches Jake has can be calculated by adding the number of peaches Jill has to the number of peaches fewer than Steven\n    jake_total_peaches = jill_peaches + c1\n\n    return jake_total_peaches", "mapping": {"c0": 19.0, "c1": 12.0, "c2": 72.0}}
{"question": "Josh had some marbles in his collection. He lost c0 marbles. If he has c1 marbles nowHow many marbles did he have in his collection?", "answer": [33.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Josh had some marbles in his collection\n    #Let's call the original number of marbles \"x\"\n    x = ?\n\n    #He lost c0 marbles\n    #So the number of marbles he had after losing some is x - c0\n    marbles_after_loss = x - c0\n\n    #If he has c1 marbles now, we can set up an equation:\n    #marbles_after_loss + c1 = x\n    #Solving for x, we get:\n    x = marbles_after_loss + c1\n\n    return x\n\nWe need to know the original number of marbles Josh had in order to solve this problem. If we are given that information, we can plug it into the function and get the answer. If we are not given that information, we cannot solve the problem.", "mapping": {"c0": 21.0, "c1": 12.0}}
{"question": "He had c0 aquariums for saltwater animals and c1 aquariums for freshwater animals. Each aquarium has c2 animals in it.How many animals does he have in total?", "answer": [1463.0], "response": "def total_animals(c0, c1, c2):\n    #calculate the total number of animals in saltwater aquariums\n    saltwater_animals = c0 * c2\n\n    #calculate the total number of animals in freshwater aquariums\n    freshwater_animals = c1 * c2\n\n    #calculate the total number of animals\n    total = saltwater_animals + freshwater_animals\n\n    return total", "mapping": {"c0": 15.0, "c1": 62.0, "c2": 19.0}}
{"question": "Jessie currently weighs c0 kilograms. After she started to go jogging everyday she lost c1 kilograms.How much did she weigh before starting to jog?", "answer": [128.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Jessie currently weighs c0 kilograms\n    current_weight = c0\n\n    #After she started to go jogging everyday she lost c1 kilograms\n    lost_weight = c1\n\n    #Her weight before starting to jog can be calculated by adding the lost weight to her current weight\n    weight_before_jogging = current_weight + lost_weight\n\n    return weight_before_jogging", "mapping": {"c0": 27.0, "c1": 101.0}}
{"question": "Dan has $ c0 left with him after he bought a candy bar for $ 2.How much money did he have initially?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef initial_money(c0):\n    # Dan has c0 left after buying a candy bar for $2\n    candy_bar_cost = 2\n    money_left = c0\n\n    # We can calculate how much money Dan had initially by adding the cost of the candy bar to the money he has left\n    initial_money = money_left + candy_bar_cost\n\n    return initial_money", "mapping": {"c0": 3.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many push-ups and crunches did Zachary do?", "answer": [67.0], "response": "def zachary_workout(c0, c1, c2, c3):\n    # Zachary did c0 push-ups and c1 crunches\n    zachary_pushups = c0\n    zachary_crunches = c1\n\n    # David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = c0 + c2\n    david_crunches = c1 - c3\n\n    # Return Zachary's workout\n    return zachary_pushups, zachary_crunches", "mapping": {"c0": 53.0, "c1": 14.0, "c2": 17.0, "c3": 10.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the first chapter have than the second chapter?", "answer": [68.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of pages in the book\n    total_pages = c1 + c2 + c3\n\n    #calculate the average number of pages per chapter\n    avg_pages = total_pages / c0\n\n    #calculate the number of pages in the second chapter\n    second_chapter_pages = avg_pages * 2\n\n    #calculate the number of pages in the first chapter\n    first_chapter_pages = c1\n\n    #calculate the difference in pages between the first and second chapter\n    difference = first_chapter_pages - second_chapter_pages\n\n    return difference", "mapping": {"c0": 3.0, "c1": 91.0, "c2": 23.0, "c3": 25.0}}
{"question": "Danny collects bottle caps. He found c0 bottle caps at the park while he threw away c1 old ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny find at the park than those he threw away?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Danny found c0 bottle caps at the park\n    found = c0\n\n    #Danny threw away c1 old bottle caps\n    thrown_away = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total = c2\n\n    #The difference between the number of bottle caps Danny found and the number he threw away can be calculated by subtracting the number thrown away from the number found\n    difference = found - thrown_away\n\n    #The number of bottle caps Danny found more than those he threw away can be calculated by subtracting the total number of bottle caps from the difference\n    more_found = difference - total\n\n    return more_found", "mapping": {"c0": 36.0, "c1": 35.0, "c2": 22.0}}
{"question": "Dan has $ c0. For a total of $ c1 he bought c2 candy bar each one costing the same amount of money.How much money is left?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan spent c1 dollars on c2 candy bars\n    spent = c1\n    candy_bars = c2\n\n    #The cost of one candy bar can be calculated by dividing the total amount spent by the number of candy bars bought\n    cost_per_candy_bar = spent / candy_bars\n\n    #The amount of money left can be calculated by subtracting the total amount spent from the original amount of money Dan had\n    money_left = money_before - spent\n\n    return money_left", "mapping": {"c0": 4.0, "c1": 3.0, "c2": 10.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #calculate the difference between the cups of flour needed and the cups of flour already added\n    flour_difference = c1 - c2\n\n    #calculate the difference between the cups of sugar needed and the cups of sugar already added\n    sugar_difference = c0\n\n    #calculate the difference between the cups of flour and the cups of sugar needed\n    difference = flour_difference - sugar_difference\n\n    return difference", "mapping": {"c0": 6.0, "c1": 9.0, "c2": 2.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 snakes were hidingHow many snakes were not hiding?", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 snakes in the cage\n    snakes_before = c0\n\n    #there are c1 alligators in the cage\n    alligators = c1\n\n    #c2 snakes are hiding\n    snakes_hiding = c2\n\n    #The number of snakes not hiding can be calculated by subtracting the number of hiding snakes from the original number of snakes\n    snakes_not_hiding = snakes_before - snakes_hiding\n\n    return snakes_not_hiding", "mapping": {"c0": 95.0, "c1": 61.0, "c2": 64.0}}
{"question": "Emily is making bead necklaces for her friends. She was able to make c0 necklaces and she had c1 beads.How many beads did each necklace need?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Emily made c0 necklaces\n    necklaces = c0\n\n    #Emily had c1 beads\n    beads = c1\n\n    #The number of beads needed for each necklace can be calculated by dividing the total number of beads by the number of necklaces\n    beads_per_necklace = beads / necklaces\n\n    return beads_per_necklace", "mapping": {"c0": 6.0, "c1": 18.0}}
{"question": "Tiffany was collecting cans for recycling. On monday she had c0 bags of cans. The next day she found c1 more bags of cans and c2 bags of bottles.How many bags of cans did she have altogether?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Tiffany had c0 bags of cans on Monday\n    cans_monday = c0\n\n    #She found c1 more bags of cans the next day\n    cans_tuesday = c1\n\n    #She also found c2 bags of bottles the next day, but we only care about the cans\n    cans_wednesday = c2\n\n    #The total number of bags of cans she has is the sum of the bags she had on Monday and the bags she found on Tuesday\n    total_cans = cans_monday + cans_tuesday\n\n    return total_cans", "mapping": {"c0": 3.0, "c1": 7.0, "c2": 44.0}}
{"question": "Robin has some packages of gum. There are c0 pieces in each package. Robin has c1 extra pieces of gum. In all the number of pieces of gums robin has is 41.How many packages does Robin have?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #each package has c0 pieces of gum\n    pieces_per_package = c0\n\n    #Robin has c1 extra pieces of gum\n    extra_pieces = c1\n\n    #the total number of pieces of gum Robin has is 41\n    total_pieces = 41\n\n    #the number of packages Robin has can be calculated by dividing the total number of pieces by the number of pieces per package\n    num_packages = (total_pieces - extra_pieces) // pieces_per_package\n\n    return num_packages", "mapping": {"c0": 7.0, "c1": 6.0}}
{"question": "Baker made c0 cakes. If his friend bought c1 cakes from himHow many cakes would baker still have?", "answer": [15.0], "response": "def Problem(c0, c1):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #His friend bought c1 cakes from him\n    cakes_sold = c1\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes sold from the original number of cakes\n    cakes_after = cakes_before - cakes_sold\n\n    return cakes_after", "mapping": {"c0": 155.0, "c1": 140.0}}
{"question": "c0 children were riding on the bus. At the bus stop some more children got on the bus. Then there were c1 children altogether on the bus.How many more children are on the bus now than there were before the bus stop?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #there were originally c0 children on the bus\n    children_before = c0\n\n    #some more children got on the bus, now there are c1 children altogether\n    children_after = c1\n\n    #the number of children that got on the bus can be calculated by subtracting the original number of children from the number of children now\n    children_added = children_after - children_before\n\n    return children_added", "mapping": {"c0": 2.0, "c1": 10.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many bottle caps did danny have at first?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 bottle caps and c1 wrappers at the park\n    found_caps = c0\n    found_wrappers = c1\n\n    #Now he has c2 bottle caps and c3 wrappers in his collection\n    total_caps = c2\n    total_wrappers = c3\n\n    #We can use the ratio of found bottle caps to found wrappers to calculate how many bottle caps Danny had at first\n    ratio = found_caps / found_wrappers\n    initial_caps = (total_caps - (total_wrappers * ratio)) / (1 - ratio)\n\n    return initial_caps", "mapping": {"c0": 22.0, "c1": 8.0, "c2": 28.0, "c3": 63.0}}
{"question": "For the walls of the house he would use c0 large planks of wood. If each plank of wood needs c1 pieces of nails to be securedHow many planks does John need for the house wall?", "answer": [8.0], "response": "def Problem(c0, c1):\n    #each plank of wood needs c1 pieces of nails to be secured\n    nails_per_plank = c1\n\n    #John needs to secure the planks of wood for the house wall\n    planks_needed = c0\n\n    #The total number of nails needed can be calculated by multiplying the number of planks needed by the number of nails per plank\n    total_nails_needed = nails_per_plank * planks_needed\n\n    return planks_needed", "mapping": {"c0": 8.0, "c1": 74.0}}
{"question": "Paco ate c0 cookies. If he had c1 cookies initiallyHow many cookies did Paco have left?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Paco had c1 cookies initially\n    initial_cookies = c1\n\n    #Paco ate c0 cookies\n    ate_cookies = c0\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies he ate from the initial number of cookies\n    cookies_left = initial_cookies - ate_cookies\n\n    return cookies_left", "mapping": {"c0": 36.0, "c1": 37.0}}
{"question": "Bobby had c0 pieces of candy. He ate c1 pieces of candy. Then he ate c2 more.How many pieces of candy does he still have left?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Bobby had c0 pieces of candy\n    candy_before = c0\n\n    #Bobby ate c1 pieces of candy\n    candy_eaten1 = c1\n\n    #Bobby ate c2 more pieces of candy\n    candy_eaten2 = c2\n\n    #The number of candy pieces Bobby has left can be calculated by subtracting the total number of candy pieces he ate from the original number of candy pieces\n    candy_left = candy_before - candy_eaten1 - candy_eaten2\n\n    return candy_left", "mapping": {"c0": 21.0, "c1": 5.0, "c2": 9.0}}
{"question": "Baker made c0 cakes. He sold some of them. If he still has c1 cakes leftHow many cakes did baker sell?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #He still has c1 cakes left\n    cakes_left = c1\n\n    #The number of cakes he sold can be calculated by subtracting the number of cakes left from the number of cakes made\n    cakes_sold = cakes_made - cakes_left\n\n    return cakes_sold", "mapping": {"c0": 54.0, "c1": 13.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home.How many more kids spent their summer break at the camp compared to those who stayed home?", "answer": [150780.0], "response": "def Problem(c0, c1):\n    #c0 kids go to camp\n    campers = c0\n\n    #c1 kids stay home\n    stay_home = c1\n\n    #The difference between the number of campers and the number of kids who stayed home is the number of kids who spent their summer break at the camp compared to those who stayed home\n    difference = campers - stay_home\n\n    return difference", "mapping": {"c0": 819058.0, "c1": 668278.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many blocks are left?", "answer": [54.0], "response": "def blocks_left(c0, c1, c2):\n    # Randy starts with c0 blocks\n    blocks_start = c0\n\n    # Randy uses c1 blocks to build a tower\n    blocks_tower = c1\n\n    # Randy uses c2 blocks to build a house\n    blocks_house = c2\n\n    # The number of blocks left can be calculated by subtracting the total number of blocks used from the starting number of blocks\n    blocks_left = blocks_start - (blocks_tower + blocks_house)\n\n    return blocks_left", "mapping": {"c0": 79.0, "c1": 14.0, "c2": 11.0}}
{"question": "Every day Ryan spends c0 hours on learning english c1 hours on learning chinese and c2 hours on learning spanish.How many hours does he spend on learning english, chinese and spanish in all?", "answer": [16.0], "response": "def total_hours(c0, c1, c2):\n    #calculate the total hours spent on learning all three languages\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 3.0}}
{"question": "c0 birds were sitting on the fence. Some more birds came to join them. If there are a total of c1 birds on the fence nowHow many more birds had come to sit on the fence?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #there are originally c0 birds on the fence\n    birds_before = c0\n\n    #there are c1 birds on the fence now\n    birds_after = c1\n\n    #The number of birds that came to join can be calculated by subtracting the original number of birds from the total number of birds now\n    joined = birds_after - birds_before\n\n    return joined", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more boys than girlsHow many boys are there in that school?", "answer": [1145.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #the rest of the students are boys\n    boys = total_students - girls\n\n    #there are c1 more boys than girls\n    boys_more = c1\n\n    #the number of boys can be calculated by adding the number of girls to the number of boys more than girls\n    total_boys = boys_more + boys\n\n    return total_boys", "mapping": {"c0": 635.0, "c1": 510.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide.How much longer is her room than it is wide?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet long\n    length = c0\n\n    #Jesse's room is c1 feet wide\n    width = c1\n\n    #The difference between the length and width of Jesse's room is how much longer it is than it is wide\n    difference = length - width\n\n    return difference", "mapping": {"c0": 12.0, "c1": 11.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies are there in the ' crazy silly school ' series?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left after reading c2 books\n    books_left = c0 - c2\n\n    #calculate the number of movies left after watching c3 movies\n    movies_left = c1 - c3\n\n    #calculate the difference between the number of books and movies left\n    difference = books_left - movies_left\n\n    return difference", "mapping": {"c0": 16.0, "c1": 14.0, "c2": 19.0, "c3": 13.0}}
{"question": "You had c0 bags with equal number of cookies. If you had c1 cookies and c2 candies in totalHow many bags of cookies do you have?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of cookies and candies\n    total = c1 + c2\n\n    #calculate the number of bags needed to hold all the cookies\n    bags_needed = total // c0\n\n    return bags_needed", "mapping": {"c0": 14.0, "c1": 28.0, "c2": 86.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many more books than action figures were on his shelf?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures = c0\n    books = c1\n\n    #Later he added c2 more action figures to the shelf\n    added_figures = c2\n\n    #The number of books more than action figures can be calculated by subtracting the number of action figures from the sum of books and added figures\n    more_books = (books + added_figures) - action_figures\n\n    return more_books", "mapping": {"c0": 2.0, "c1": 10.0, "c2": 4.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in some cups of flour. If she still needs c2 more cups of flourHow many cups of flour did she put in?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Mary needs c2 more cups of flour\n    needed_flour = c2\n\n    #Mary already put in c1 cups of flour\n    flour_before = c1\n\n    #The total amount of flour needed can be calculated by adding the amount of flour already put in to the amount of flour still needed\n    total_flour_needed = flour_before + needed_flour\n\n    return total_flour_needed", "mapping": {"c0": 5.0, "c1": 13.0, "c2": 12.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages of math and reading homework did she have to complete?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    bio_hw = c2\n\n    #The total number of pages of math and reading homework can be calculated by adding the number of pages of math and reading homework\n    total_hw = math_hw + reading_hw\n\n    return total_hw", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 29.0}}
{"question": "Paige was helping her mom plant flowers in c0 flowerbeds. They planted c1 seeds altogether. If they put same number of seeds in each flower bedHow many seeds did they plant in each flowerbed?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #they planted c1 seeds altogether\n    seeds_planted = c1\n\n    #they planted the same number of seeds in each flower bed\n    seeds_per_bed = seeds_planted / c0\n\n    return seeds_per_bed", "mapping": {"c0": 8.0, "c1": 32.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many sacks of ripe oranges will they have after c2 days of harvest?", "answer": [365.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day\n    unripe_oranges = c0\n    ripe_oranges = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #The number of sacks of ripe oranges after c2 days of harvest can be calculated by multiplying the number of days by the number of ripe oranges harvested per day and adding it to the number of ripe oranges they had before\n    total_ripe_oranges = (ripe_oranges * days) + c1\n\n    return total_ripe_oranges", "mapping": {"c0": 25.0, "c1": 5.0, "c2": 73.0}}
{"question": "Paul had c0 books. After giving c1 books to his friend and selling some books in a garage sale he had c2 books left.How many books did he sell in the garage sale?", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #Paul had c0 books\n    books_before = c0\n\n    #Paul gave c1 books to his friend\n    given = c1\n\n    #Paul had c2 books left after giving some to his friend and selling some in a garage sale\n    books_after = c2\n\n    #The number of books Paul sold in the garage sale can be calculated by subtracting the number of books he gave to his friend and the number of books he had left after from the original number of books he had\n    sold = books_before - given - books_after\n\n    return sold", "mapping": {"c0": 134.0, "c1": 39.0, "c2": 68.0}}
{"question": "Paco had c0 salty cookies and c1 sweet cookies. He ate c2 sweet cookies and c3 salty cookies.How many sweet cookies did Paco have left?", "answer": [19.0], "response": "def sweet_cookies_left(c0, c1, c2, c3):\n    #Paco had c1 sweet cookies and ate c2 sweet cookies\n    sweet_cookies_before = c1\n    sweet_cookies_eaten = c2\n\n    #Paco had c0 salty cookies and ate c3 salty cookies\n    salty_cookies_before = c0\n    salty_cookies_eaten = c3\n\n    #Calculate the number of sweet cookies left by subtracting the number of cookies eaten from the original number of sweet cookies\n    sweet_cookies_left = sweet_cookies_before - sweet_cookies_eaten\n\n    return sweet_cookies_left", "mapping": {"c0": 97.0, "c1": 34.0, "c2": 15.0, "c3": 56.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. c1 school buses are fully filled with c2 seats on each school bus.How many students are in the school?", "answer": [11210.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 classrooms in the school\n    classrooms = c0\n\n    #there are c1 school buses fully filled with c2 seats on each school bus\n    buses = c1\n    seats_per_bus = c2\n\n    #The total number of students can be calculated by multiplying the number of buses by the number of seats per bus and then multiplying that by the number of classrooms\n    total_students = buses * seats_per_bus * classrooms\n\n    return total_students", "mapping": {"c0": 84.0, "c1": 95.0, "c2": 118.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 crayons and c2 pencils in each row.How many pencils does she have?", "answer": [720.0], "response": "def count_pencils(c0, c1, c2):\n    #calculate the total number of rows\n    total_rows = c0\n\n    #calculate the total number of pencils\n    total_pencils = total_rows * c2\n\n    return total_pencils", "mapping": {"c0": 30.0, "c1": 71.0, "c2": 24.0}}
{"question": "Faye was placing c0 pencils equally into c1 rows.How many pencils did she place in each row?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Faye placed c0 pencils equally into c1 rows\n    pencils_per_row = c0 // c1\n\n    return pencils_per_row", "mapping": {"c0": 12.0, "c1": 3.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many more kids did she play with on monday and tuesday than on wednesday?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of kids played with on Monday and Tuesday\n    total_mon_tue = c0 + c1\n\n    #calculate the difference between the total number of kids played with on Monday and Tuesday and the number of kids played with on Wednesday\n    difference = total_mon_tue - c2\n\n    return difference", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 7.0}}
{"question": "Baker made c0 cakes. If he sold c1 of themHow many more cakes did baker make than those he sold?", "answer": [82.0], "response": "def Problem(c0, c1):\n    #Baker made c0 cakes\n    cakes_made = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #The number of cakes that Baker made more than those he sold can be calculated by subtracting the number of cakes sold from the number of cakes made\n    more_cakes = cakes_made - cakes_sold\n\n    return more_cakes", "mapping": {"c0": 133.0, "c1": 51.0}}
{"question": "There are c0 bananas in Philip's banana collection. If the bananas are organized into groups of size c1 How many groups are there?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #there are c0 bananas in the collection\n    bananas = c0\n\n    #the bananas are organized into groups of size c1\n    group_size = c1\n\n    #the number of groups can be calculated by dividing the total number of bananas by the group size\n    groups = bananas // group_size\n\n    return groups", "mapping": {"c0": 18.0, "c1": 2.0}}
{"question": "Olivia spent c0 dollars at a supermarket. If there were c1 dollars in her wallet initiallyHow much money does she have left?", "answer": [90.0], "response": "def Problem(c0, c1):\n    #Olivia spent c0 dollars at the supermarket\n    spent = c0\n\n    #Olivia had c1 dollars in her wallet initially\n    initial_wallet = c1\n\n    #The amount of money Olivia has left can be calculated by subtracting the amount she spent from her initial wallet\n    remaining = initial_wallet - spent\n\n    return remaining", "mapping": {"c0": 38.0, "c1": 128.0}}
{"question": "Baker sold c0 cakes. If he had made c1 cakes initiallyHow many cakes would baker still have?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Baker sold c0 cakes\n    cakes_sold = c0\n\n    #Baker initially made c1 cakes\n    cakes_initial = c1\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes sold from the initial number of cakes\n    cakes_left = cakes_initial - cakes_sold\n\n    return cakes_left", "mapping": {"c0": 44.0, "c1": 48.0}}
{"question": "Every day Ryan spends c0 hours on learning chinese and some more hours on learning english. If he spends c1 hours more on learning english than on learning chineseHow many hours does he spend on learning english?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning chinese\n    chinese_hours = c0\n\n    #Ryan spends c1 hours more on learning english than on learning chinese\n    english_hours = chinese_hours + c1\n\n    return english_hours", "mapping": {"c0": 5.0, "c1": 2.0}}
{"question": "Rachel had to complete c0 pages of math homework. If she had to complete c1 more pages of math homework than reading homeworkHow many pages did she have to complete in all?", "answer": [13.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_homework = c0\n\n    #She had to complete c1 more pages of math homework than reading homework\n    reading_homework = math_homework - c1\n\n    #The total number of pages she had to complete can be calculated by adding the number of pages of math and reading homework\n    total_homework = math_homework + reading_homework\n\n    return total_homework", "mapping": {"c0": 8.0, "c1": 3.0}}
{"question": "Dan has $ c0. He bought a chocolate for $ c1 and a candy bar for $ 7.How much money did he spend to buy candy bar than he did to buy chocolate?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a chocolate for c1 dollars\n    chocolate_cost = c1\n\n    #Dan also bought a candy bar for 7 dollars\n    candy_cost = 7\n\n    #The difference in cost between the candy bar and the chocolate can be calculated by subtracting the cost of the chocolate from the cost of the candy bar\n    difference = candy_cost - chocolate_cost\n\n    return difference", "mapping": {"c0": 5.0, "c1": 3.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms in the first week and c2 kilograms in the second week.How much did she weigh after the first week of jogging?", "answer": [36.0], "response": "def Problem(c0, c1, c2):\n    #Jessie weighed c0 kilograms originally\n    weight_before = c0\n\n    #She lost c1 kilograms in the first week of jogging\n    weight_loss_week1 = c1\n\n    #She lost c2 kilograms in the second week of jogging\n    weight_loss_week2 = c2\n\n    #Her weight after the first week of jogging can be calculated by subtracting the weight loss in the first week from her original weight\n    weight_after_week1 = weight_before - weight_loss_week1\n\n    return weight_after_week1", "mapping": {"c0": 92.0, "c1": 56.0, "c2": 99.0}}
{"question": "Julia played tag with c0 kids on monday, c1 kids on tuesday and c2 kids on wednesday.How many kids did she play with on tuesday and wednesday?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #Julia played with c1 kids on Tuesday\n    tuesday_kids = c1\n\n    #Julia played with c2 kids on Wednesday\n    wednesday_kids = c2\n\n    #The total number of kids Julia played with on Tuesday and Wednesday can be calculated by adding the number of kids on Tuesday and Wednesday\n    total_kids = tuesday_kids + wednesday_kids\n\n    return total_kids", "mapping": {"c0": 2.0, "c1": 14.0, "c2": 16.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 children got off the bus while some more got on the bus. Then there were c2 children altogether on the bus.How many children got on the bus at the bus stop?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 children were originally on the bus\n    children_before = c0\n\n    #c1 children got off the bus at the stop\n    children_off = c1\n\n    #c2 children were left on the bus after some more got on\n    children_after = c2\n\n    #The number of children who got on the bus can be calculated by subtracting the number of children who got off from the original number of children and then subtracting that from the final number of children\n    children_on = children_after - children_before + children_off\n\n    return children_on", "mapping": {"c0": 21.0, "c1": 10.0, "c2": 16.0}}
{"question": "Baker made c0 cakes. Then he made c1 more cakes. He sold c2 of them.How many cakes would baker still have?", "answer": [67.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker made c1 more cakes\n    more_cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #The number of cakes baker would still have can be calculated by subtracting the number of sold cakes from the total number of cakes he made\n    cakes_after = cakes_before + more_cakes - sold_cakes\n\n    return cakes_after", "mapping": {"c0": 62.0, "c1": 149.0, "c2": 144.0}}
{"question": "Paul got a box of some crayons for his birthday. By the end of the school year he only had c0 crayons left since he had either lost or given away c1 of them.How many crayons did he get for his birthday?", "answer": [606.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Paul got a box of crayons for his birthday\n    crayons_at_start = c0\n\n    #By the end of the school year, he only had c0 crayons left since he had either lost or given away c1 of them\n    crayons_at_end = c1\n\n    #The number of crayons he got for his birthday can be calculated by adding the number of crayons he had at the end of the school year to the number of crayons he lost or gave away\n    crayons_at_start = crayons_at_end + crayons_at_lost_or_given_away\n\n    return crayons_at_start", "mapping": {"c0": 291.0, "c1": 315.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many letters did jack receive in the day?", "answer": [13.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c1 letters in the morning and c3 letters in the afternoon\n    total_letters = c1 + c3\n\n    return total_letters", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 9.0, "c3": 7.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money does he earn during harvest season?", "answer": [93899.0], "response": "def harvest_earnings(c0, c1, c2):\n    #calculate the total earnings by multiplying the weekly earnings by the number of weeks\n    total_earnings = c0 * c1\n\n    #calculate the total rent by multiplying the weekly rent by the number of weeks\n    total_rent = c2 * c1\n\n    #calculate the net earnings by subtracting the total rent from the total earnings\n    net_earnings = total_earnings - total_rent\n\n    return net_earnings", "mapping": {"c0": 403.0, "c1": 233.0, "c2": 49.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many days will it take to harvest c2 sacks of oranges?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #each day they harvest c0 sacks of oranges\n    sacks_per_day = c0\n\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they need to harvest c2 sacks of oranges\n    total_sacks = c2\n\n    #the total number of oranges they need to harvest can be calculated by multiplying the number of sacks by the number of oranges per sack\n    total_oranges = total_sacks * oranges_per_sack\n\n    #the number of days it will take to harvest all the oranges can be calculated by dividing the total number of oranges by the number of oranges harvested per day\n    days_to_harvest = total_oranges // sacks_per_day\n\n    return days_to_harvest", "mapping": {"c0": 16.0, "c1": 57.0, "c2": 80.0}}
{"question": "Robin has some packages of gum. There are c0 pieces in each package and a total of c1 pieces of gum.How many packages does Robin have?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #each package has c0 pieces of gum\n    pieces_per_package = c0\n\n    #there are c1 pieces of gum in total\n    total_pieces = c1\n\n    #The number of packages Robin has can be calculated by dividing the total number of pieces by the number of pieces per package\n    num_packages = total_pieces // pieces_per_package\n\n    return num_packages", "mapping": {"c0": 3.0, "c1": 42.0}}
{"question": "During the Arkansas and Texas tech game the Razorback t-shirt shop made $ c0 by selling c1 t-shirts.What is the cost of each t-shirt?", "answer": [43.0], "response": "def Problem(c0, c1):\n    #the Razorback t-shirt shop made c0 dollars by selling c1 t-shirts\n    cost_per_tshirt = c0/c1\n\n    return cost_per_tshirt", "mapping": {"c0": 215.0, "c1": 5.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How far did the mouse jump?", "answer": [31.0], "response": "def jumping_contest(c0, c1, c2):\n    #the grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #the frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #the mouse jumped c2 inches lesser than the frog\n    mouse_jump = frog_jump - c2\n\n    return mouse_jump", "mapping": {"c0": 25.0, "c1": 32.0, "c2": 26.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and discard c1 of them.How many oranges do they harvest per day if each sack contains c2 oranges?", "answer": [600.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each sack contains c2 oranges\n    oranges_per_sack = c2\n\n    #they harvest c0 sacks per day\n    sacks_harvested = c0\n\n    #they discard c1 sacks per day\n    sacks_discarded = c1\n\n    #The number of oranges harvested per day can be calculated by multiplying the number of sacks harvested by the number of oranges per sack, and then subtracting the number of oranges in the discarded sacks\n    oranges_harvested = (sacks_harvested * oranges_per_sack) - (sacks_discarded * oranges_per_sack)\n\n    return oranges_harvested", "mapping": {"c0": 76.0, "c1": 64.0, "c2": 50.0}}
{"question": "Jesse's room is c0 feet wide. If she needs a carpet of size c1 square feetWhat is the length of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #the area of the room is the width times the length\n    #so we can solve for the length by dividing the area by the width\n    length = c1 / c0\n\n    return length", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english in all?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english every day\n    english_hours_per_day = c0\n\n    #Ryan spends c1 hours on learning chinese every day\n    chinese_hours_per_day = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total number of hours Ryan spends on learning english can be calculated by multiplying the number of hours he spends per day by the number of days he learns\n    total_english_hours = english_hours_per_day * days\n\n    return total_english_hours", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 2.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many more marbles did Ed have than Doug then?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0 + doug_marbles\n\n    #Doug lost c1 of his marbles at the playground\n    doug_marbles -= c1\n\n    #If Ed had c2 marbles, how many more marbles did Ed have than Doug then?\n    difference = ed_marbles - doug_marbles\n\n    return difference\n\n#Note: We need to know the initial number of marbles Doug had to calculate the number of marbles Ed had. If that information is not given, we cannot solve the problem.", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 45.0}}
{"question": "Carol was sending out birthday invitations to her friends. Each package of invitations she bought had c0 invitations in it and she bought c1 packs. If she sends invitations to only c2 friendsHow many invitations will be left?", "answer": [68.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each package has c0 invitations\n    invitations_per_pack = c0\n\n    #Carol bought c1 packs\n    packs_bought = c1\n\n    #Carol sent invitations to c2 friends\n    friends_invited = c2\n\n    #The total number of invitations she had is the product of the number of packs and the number of invitations per pack\n    total_invitations = invitations_per_pack * packs_bought\n\n    #The number of invitations left is the total number of invitations minus the number of friends invited\n    invitations_left = total_invitations - friends_invited\n\n    return invitations_left", "mapping": {"c0": 10.0, "c1": 7.0, "c2": 2.0}}
{"question": "Rachel's tree had c0 apples initially. She picked some apples and now there are c1 apples left on the tree.How many apples did rachel pick?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel initially had c0 apples on the tree\n    initial_apples = c0\n\n    #Now there are c1 apples left on the tree\n    remaining_apples = c1\n\n    #The number of apples Rachel picked can be calculated by subtracting the remaining apples from the initial apples\n    picked_apples = initial_apples - remaining_apples\n\n    return picked_apples", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. He also ate c2 pieces of chocolate.How many pieces of candy did Bobby eat?", "answer": [70.0], "response": "def candy_eaten(c0, c1, c2):\n    # Bobby ate c0 pieces of candy initially\n    candy_before = c0\n\n    # Bobby ate c1 more pieces of candy\n    candy_more = c1\n\n    # Bobby ate a total of candy_before + candy_more pieces of candy\n    candy_total = candy_before + candy_more\n\n    # Return the total number of pieces of candy Bobby ate\n    return candy_total", "mapping": {"c0": 28.0, "c1": 42.0, "c2": 63.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a jersey cost than a t-shirt?", "answer": [90.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling jerseys\n    jersey_revenue = c3 * c0\n\n    #calculate the total revenue from selling t-shirts\n    tshirt_revenue = c2 * c1\n\n    #calculate the difference in revenue between a jersey and a t-shirt\n    revenue_difference = jersey_revenue - tshirt_revenue\n\n    #calculate the difference in cost between a jersey and a t-shirt\n    cost_difference = c0 - c1\n\n    #calculate how many more dollars a jersey costs than a t-shirt\n    price_difference = revenue_difference / cost_difference\n\n    return price_difference", "mapping": {"c0": 115.0, "c1": 25.0, "c2": 113.0, "c3": 78.0}}
{"question": "Bobby had c0 pieces of candy. He ate some pieces of candy. Then he ate c1 more. If he still has c2 pieces of candy leftHow many pieces of candy had he eaten at the start?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Bobby had c0 pieces of candy\n    candy_before = c0\n\n    #He ate some pieces of candy\n    ate = candy_before - c2\n\n    #Then he ate c1 more\n    ate += c1\n\n    #If he still has c2 pieces of candy left, then the total number of candy he had eaten at the start can be calculated by subtracting the number of candy he has left from the number of candy he had before eating\n    candy_eaten = candy_before - c2\n\n    return candy_eaten", "mapping": {"c0": 22.0, "c1": 5.0, "c2": 8.0}}
{"question": "If each pack costs c0 dollarsHow much will it cost to buy c1 packs of dvds?", "answer": [2673.0], "response": "def Problem(c0, c1):\n    #each pack costs c0 dollars\n    cost_per_pack = c0\n\n    #we want to buy c1 packs of dvds\n    num_packs = c1\n\n    #the total cost can be calculated by multiplying the cost per pack by the number of packs\n    total_cost = cost_per_pack * num_packs\n\n    return total_cost", "mapping": {"c0": 81.0, "c1": 33.0}}
{"question": "There were c0 parents in the program and c1 pupils too. The program could seat c2 peopleHow many people were present in the program?", "answer": [238.0], "response": "def Problem(c0, c1, c2):\n    #there were c0 parents and c1 pupils present in the program\n    total_present = c0 + c1\n\n    #the program could seat c2 people\n    capacity = c2\n\n    #the number of people present in the program is either the total number of people or the capacity, whichever is smaller\n    present_in_program = min(total_present, capacity)\n\n    return present_in_program", "mapping": {"c0": 61.0, "c1": 177.0, "c2": 44.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english and chinese each day?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c0 hours on learning english and c1 hours on learning chinese every day\n    english_hours = c0\n    chinese_hours = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The number of hours Ryan spends on learning english and chinese each day can be calculated by dividing the total number of hours by the number of days\n    english_per_day = english_hours / days\n    chinese_per_day = chinese_hours / days\n\n    return english_per_day, chinese_per_day", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 86.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker make?", "answer": [78.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate how many cakes and pastries are left after selling\n    cakes_left = cakes_made - cakes_sold\n    pastries_left = pastries_made - pastries_sold\n\n    #Calculate the difference between the number of cakes and pastries left\n    difference = cakes_left - pastries_left\n\n    return difference", "mapping": {"c0": 126.0, "c1": 48.0, "c2": 115.0, "c3": 81.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many more tickets did Dave use to buy toys than he did to buy clothes?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Dave had c0 tickets\n    tickets_before = c0\n\n    #Dave used c1 tickets to buy toys\n    toys_tickets = c1\n\n    #Dave used c2 tickets to buy clothes\n    clothes_tickets = c2\n\n    #The difference between the number of tickets used to buy toys and clothes can be calculated by subtracting the number of clothes tickets from the number of toys tickets\n    difference = toys_tickets - clothes_tickets\n\n    return difference", "mapping": {"c0": 19.0, "c1": 12.0, "c2": 7.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many bottles did they have total?", "answer": [38.0], "response": "def total_items(c0, c1, c2):\n    #calculate the total number of bottles by adding the number of regular and diet soda bottles\n    total_bottles = c0 + c1\n    #calculate the total number of items by adding the total number of bottles to the number of apples\n    total_items = total_bottles + c2\n    return total_items", "mapping": {"c0": 30.0, "c1": 8.0, "c2": 41.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and c2 green peaches.How many peaches are in the baskets altogether?", "answer": [308.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 baskets of peaches\n    baskets = c0\n\n    #each basket has c1 red peaches and c2 green peaches\n    red_peaches = c1\n    green_peaches = c2\n\n    #The total number of peaches can be calculated by multiplying the number of baskets by the sum of red and green peaches in each basket\n    total_peaches = baskets * (red_peaches + green_peaches)\n\n    return total_peaches", "mapping": {"c0": 11.0, "c1": 10.0, "c2": 18.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many crayons did he have left?", "answer": [223.0], "response": "def Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons for his birthday\n    crayons_before = c0\n\n    #During the school year he gave c1 crayons to his friends\n    given_away = c1\n\n    #he lost c2 crayons\n    lost = c2\n\n    #The number of crayons he has left can be calculated by subtracting the number of crayons given away and lost from the original number of crayons\n    crayons_after = crayons_before - given_away - lost\n\n    return crayons_after", "mapping": {"c0": 440.0, "c1": 111.0, "c2": 106.0}}
{"question": "Some campers went rowing in the morning while c0 campers went rowing in the afternoon. If a total of c1 campers went rowing that dayHow many campers went rowing in the morning?", "answer": [53.0], "response": "def Problem(c0, c1):\n    #c0 campers went rowing in the morning\n    morning_campers = c0\n\n    #c1 campers went rowing in total\n    total_campers = c1\n\n    #the number of campers who went rowing in the afternoon can be calculated by subtracting the number of morning campers from the total number of campers\n    afternoon_campers = total_campers - morning_campers\n\n    return morning_campers", "mapping": {"c0": 7.0, "c1": 60.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and discard c1 of them.How many sacks of oranges will they have after c2 days of harvest?", "answer": [153.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #they discard c1 sacks per day\n    discarded_per_day = c1\n\n    #they harvest for c2 days\n    days_of_harvest = c2\n\n    #the total number of sacks harvested can be calculated by multiplying the sacks per day by the number of days of harvest\n    total_harvested = sacks_per_day * days_of_harvest\n\n    #the total number of discarded sacks can be calculated by multiplying the discarded sacks per day by the number of days of harvest\n    total_discarded = discarded_per_day * days_of_harvest\n\n    #the final number of sacks of oranges will be the total harvested minus the total discarded\n    final_sacks = total_harvested - total_discarded\n\n    return final_sacks", "mapping": {"c0": 74.0, "c1": 71.0, "c2": 51.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If he has c0 g of wax and right now he just needs c1 gTotal how many grams of wax do the feathers require?", "answer": [574.0], "response": "def Problem(c0, c1):\n    #he has c0 g of wax\n    wax_before = c0\n\n    #he needs c1 g of wax\n    wax_needed = c1\n\n    #The amount of wax required can be calculated by subtracting the amount of wax he has from the amount of wax he needs\n    wax_required = wax_needed - wax_before\n\n    return wax_required", "mapping": {"c0": 557.0, "c1": 17.0}}
{"question": "Jerry had c0 books and c1 action figures on a shelf in his room. Later he added c2 more action figures to the shelf.How many more books than action figures were on his shelf?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 books and c1 action figures on a shelf in his room\n    books = c0\n    action_figures = c1\n\n    #Later he added c2 more action figures to the shelf\n    added_action_figures = c2\n\n    #The difference between the number of books and the number of action figures can be calculated by subtracting the number of action figures from the sum of the original number of books and the added number of action figures\n    difference = books + added_action_figures - action_figures\n\n    return difference", "mapping": {"c0": 7.0, "c1": 3.0, "c2": 2.0}}
{"question": "Matthew gave c0 crackers to each his friends. If he had c1 crackersHow many friends did he give crackers to?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Matthew gave c0 crackers to each of his friends\n    crackers_per_friend = c0\n\n    #Matthew had c1 crackers in total\n    total_crackers = c1\n\n    #The number of friends he gave crackers to can be calculated by dividing the total number of crackers by the number of crackers per friend\n    num_friends = total_crackers // crackers_per_friend\n\n    return num_friends", "mapping": {"c0": 6.0, "c1": 36.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games.How many more games does Katie have than her friends?", "answer": [62.0], "response": "def Problem(c0, c1, c2):\n    #Katie has c0 new games and c1 old games\n    katie_games = c0 + c1\n\n    #Katie's friends have c2 new games\n    friends_games = c2\n\n    #The difference between the number of games Katie has and her friends have can be calculated by subtracting the number of games her friends have from the number of games Katie has\n    difference = katie_games - friends_games\n\n    return difference", "mapping": {"c0": 57.0, "c1": 39.0, "c2": 34.0}}
{"question": "c0 children were riding on the bus. At the bus stop c1 more children got on the bus.How many children are on the bus now?", "answer": [64.0], "response": "def Problem(c0, c1):\n    #there are originally c0 children on the bus\n    children_before = c0\n\n    #c1 more children got on the bus at the bus stop\n    children_added = c1\n\n    #The total number of children on the bus now can be calculated by adding the number of children before and the number of children added\n    children_now = children_before + children_added\n\n    return children_now", "mapping": {"c0": 26.0, "c1": 38.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles.How many marbles does he have now?", "answer": [28.0], "response": "def Problem(c0, c1):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He found c1 marbles\n    found = c1\n\n    #The total number of marbles he has now can be calculated by adding the number of marbles he had before to the number of marbles he found\n    marbles_now = marbles_before + found\n\n    return marbles_now", "mapping": {"c0": 21.0, "c1": 7.0}}
{"question": "Jake brought c0 balloons to the park. If Jake brought c1 more balloons than the number of balloons that Allan broughtHow many balloons did Allan bring to the park?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jake brought c0 balloons to the park\n    jake_balloons = c0\n\n    #Jake brought c1 more balloons than Allan\n    jake_more = c1\n\n    #Allan brought c2 balloons\n    allan_balloons = jake_balloons - jake_more\n\n    return allan_balloons", "mapping": {"c0": 6.0, "c1": 4.0}}
{"question": "At the arcade Dave had won c0 tickets and lost c1 tickets. If he used c2 to buy some toysHow many tickets did Dave have left?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Dave had originally won c0 tickets\n    tickets_won = c0\n\n    #Dave had lost c1 tickets\n    tickets_lost = c1\n\n    #Dave used c2 tickets to buy some toys\n    tickets_spent = c2\n\n    #The number of tickets Dave has left can be calculated by subtracting the number of tickets lost and the number of tickets spent from the number of tickets won\n    tickets_left = tickets_won - tickets_lost - tickets_spent\n\n    return tickets_left", "mapping": {"c0": 14.0, "c1": 2.0, "c2": 10.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home. An additional c2 kids from outside the county attended the camp.About how many kids are in Lawrence county?", "answer": [1201565.0], "response": "def Problem(c0, c1, c2):\n    #c0 kids from Lawrence county go to camp\n    campers = c0\n\n    #the other c1 kids stay home\n    stay_home = c1\n\n    #an additional c2 kids from outside the county attended the camp\n    outside_campers = c2\n\n    #the total number of kids in Lawrence county can be estimated by adding the number of campers, stay-at-home kids, and outside campers\n    total_kids = campers + stay_home + outside_campers\n\n    return total_kids", "mapping": {"c0": 610769.0, "c1": 590796.0, "c2": 22.0}}
{"question": "Edward had $ c0. He spent $ 16.How much money does Edward have now?", "answer": [2.0], "response": "def Problem(c0):\n    #Edward originally had c0 dollars\n    money_before = c0\n\n    #Edward spent 16 dollars\n    spent = 16\n\n    #The amount of money Edward has now can be calculated by subtracting the amount he spent from the original amount\n    money_after = money_before - spent\n\n    return money_after", "mapping": {"c0": 18.0}}
{"question": "For Gwen's birthday she received c0 dollars from her dad. Her mom gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her dad than she did from her mom?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her dad\n    dad_money = c0\n\n    #Gwen's mom gave her c1 more dollars\n    mom_money = c1\n\n    #Gwen spent c2 dollars\n    spent_money = c2\n\n    #Calculate how much money Gwen has left after spending\n    remaining_money = dad_money + mom_money - spent_money\n\n    #Calculate how much more money Gwen received from her dad than from her mom\n    difference = dad_money - mom_money\n\n    return difference", "mapping": {"c0": 5.0, "c1": 2.0, "c2": 6.0}}
{"question": "Robin's hair was c0 inches long. It grew by c1 inches. Then he cut off c2 inches.How long is his hair now?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Robin's hair was originally c0 inches long\n    hair_before = c0\n\n    #His hair grew by c1 inches\n    hair_grew = c1\n\n    #He then cut off c2 inches\n    hair_cut = c2\n\n    #The length of his hair now can be calculated by adding the amount it grew and subtracting the amount he cut off from the original length\n    hair_now = hair_before + hair_grew - hair_cut\n\n    return hair_now", "mapping": {"c0": 14.0, "c1": 8.0, "c2": 20.0}}
{"question": "Edward spent $ c0 to buy c1 books each book costing him the same amount of money. Now he has $ 6.How much did Edward have before he spent his money?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars to buy c1 books\n    spent = c0\n\n    #Each book costs the same amount of money\n    cost_per_book = spent / c1\n\n    #Now Edward has $6\n    remaining_money = 6\n\n    #The total amount of money Edward had before he spent his money can be calculated by adding the money he has now to the money he spent\n    total_money = remaining_money + spent\n\n    return total_money", "mapping": {"c0": 16.0, "c1": 92.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home. An additional c2 kids from outside the county attended the camp.How many kids in total attended the camp?", "answer": [458988.0], "response": "def summer_camp(c0, c1, c2):\n    #c0 kids from Lawrence county go to camp\n    #c1 kids from Lawrence county stay home\n    #c2 kids from outside the county attended the camp\n    total_attendees = c0 + c1 + c2\n\n    return total_attendees", "mapping": {"c0": 34044.0, "c1": 134867.0, "c2": 424944.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 pastries and c3 cakesHow many more cakes than pastries did baker sell?", "answer": [89.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 pastries and c3 cakes\n    pastries_sold = c2\n    cakes_sold = c3\n\n    #Calculate the difference between the number of cakes and pastries sold\n    difference = cakes_sold - pastries_sold\n\n    return difference", "mapping": {"c0": 14.0, "c1": 153.0, "c2": 8.0, "c3": 97.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many trees does she have left?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #Haley initially had c1 trees\n    initial_trees = c1\n\n    #After the typhoon, c0 trees died\n    dead_trees = c0\n\n    #The number of trees Haley has left can be calculated by subtracting the number of dead trees from the initial number of trees\n    remaining_trees = initial_trees - dead_trees\n\n    return remaining_trees", "mapping": {"c0": 2.0, "c1": 12.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many more salty cookies than sweet cookies did he eat?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies and c1 salty cookies\n    sweet_cookies = c0\n    salty_cookies = c1\n\n    #He ate c2 sweet cookies and c3 salty cookies\n    sweet_cookies_eaten = c2\n    salty_cookies_eaten = c3\n\n    #Calculate how many more salty cookies than sweet cookies he ate\n    difference = salty_cookies_eaten - sweet_cookies_eaten\n\n    return difference", "mapping": {"c0": 8.0, "c1": 6.0, "c2": 20.0, "c3": 34.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 apples.How many more bottles of regular soda than diet soda did they have?", "answer": [26.0], "response": "def Problem(c0, c1, c2):\n    #number of regular soda bottles\n    reg_soda = c0\n\n    #number of diet soda bottles\n    diet_soda = c1\n\n    #calculate the difference between regular soda and diet soda bottles\n    diff = reg_soda - diet_soda\n\n    return diff", "mapping": {"c0": 79.0, "c1": 53.0, "c2": 42.0}}
{"question": "Carol was sending out birthday invitations to c0 friends. She bought c1 packs each one having the same number of invitations.How many invitations are in each pack?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Carol is sending out invitations to c0 friends\n    num_friends = c0\n\n    #She bought c1 packs of invitations\n    num_packs = c1\n\n    #To find out how many invitations are in each pack, we need to divide the total number of invitations by the number of packs\n    invitations_per_pack = num_friends / num_packs\n\n    return invitations_per_pack", "mapping": {"c0": 12.0, "c1": 3.0}}
{"question": "Jake has c0 fewer peaches and c1 more apples than Steven. Steven has c2 peaches and c3 apples.How many apples does Jake have?", "answer": [11.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches and c3 apples\n    steven_peaches = c2\n    steven_apples = c3\n\n    #Jake has c0 fewer peaches and c1 more apples than Steven\n    jake_peaches = steven_peaches - c0\n    jake_apples = steven_apples + c1\n\n    #The number of apples Jake has can be calculated by adding the number of apples Steven has with the additional apples Jake has and then subtracting the number of peaches Jake has\n    total_apples = jake_apples + steven_apples - jake_peaches\n\n    return total_apples", "mapping": {"c0": 13.0, "c1": 3.0, "c2": 9.0, "c3": 8.0}}
{"question": "Josh had c0 marbles in his collection. Jack gave him c1 marbles.How many marbles does Josh have now?", "answer": [42.0], "response": "def Problem(c0, c1):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #Jack gave him c1 marbles\n    marbles_given = c1\n\n    #The total number of marbles Josh has now can be calculated by adding the number of marbles he had before to the number of marbles given by Jack\n    marbles_after = marbles_before + marbles_given\n\n    return marbles_after", "mapping": {"c0": 22.0, "c1": 20.0}}
{"question": "Faye had c0 packs of pencils each one having c1 pencils. She was placing her pencils into rows with c2 pencils in each row.How many pencils does she have?", "answer": [186.0], "response": "def Problem(c0, c1, c2):\n    #Faye has c0 packs of pencils, each pack having c1 pencils\n    total_pencils = c0 * c1\n\n    #She is placing her pencils into rows with c2 pencils in each row\n    rows = total_pencils // c2\n\n    #The total number of pencils she has can be calculated by multiplying the number of rows by the number of pencils in each row\n    total_pencils = rows * c2\n\n    return total_pencils", "mapping": {"c0": 31.0, "c1": 6.0, "c2": 19.0}}
{"question": "Jake has c0 more apples and c1 fewer peaches than Steven. Steven has c2 peaches and c3 apples.How many peaches does Jake have?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Steven has c2 peaches\n    steven_peaches = c2\n\n    #Steven has c3 apples\n    steven_apples = c3\n\n    #Jake has c0 more apples than Steven\n    jake_apples = steven_apples + c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = steven_peaches - c1\n\n    return jake_peaches\n\n#The function takes in four arguments: c0, c1, c2, and c3. These represent the number of extra apples Jake has, the number of fewer peaches Jake has, the number of peaches Steven has, and the number of apples Steven has, respectively.\n\n#The function first assigns the number of peaches and apples Steven has to variables.\n\n#Then, it calculates the number of apples Jake has by adding c0 to the number of apples Steven has.\n\n#Finally, it calculates the number of peaches Jake has by subtracting c1 from the number of peaches Steven has.\n\n#The function returns the number of peaches Jake has.", "mapping": {"c0": 84.0, "c1": 10.0, "c2": 13.0, "c3": 52.0}}
{"question": "Rebecca wants to split a collection of eggs into c0 groups. Rebecca has c1 eggs and c2 marbles.How many eggs will each group have?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Rebecca has c1 eggs\n    eggs = c1\n\n    #Rebecca wants to split the eggs into c0 groups\n    groups = c0\n\n    #Rebecca also has c2 marbles, which we don't need for this problem\n\n    #The number of eggs in each group can be calculated by dividing the total number of eggs by the number of groups\n    eggs_per_group = eggs // groups\n\n    return eggs_per_group", "mapping": {"c0": 4.0, "c1": 8.0, "c2": 6.0}}
{"question": "Jack received c0 emails and sent c1 letters in the morning. He then received c2 emails and sent c3 letters in the afternoon.How many emails did Jack send in the day?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails in the morning and c2 emails in the afternoon\n    emails_received = c0 + c2\n\n    #Jack sent c1 letters in the morning and c3 letters in the afternoon\n    letters_sent = c1 + c3\n\n    #The number of emails Jack sent in the day can be calculated by subtracting the number of emails received from the number of letters sent\n    emails_sent = letters_sent - emails_received\n\n    return emails_sent", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 6.0, "c3": 8.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of reading homework than biology homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology_hw = c1 + c2\n\n    #The difference between the number of pages of reading homework and biology homework can be calculated by subtracting the number of pages of biology homework from the number of pages of reading homework\n    diff = reading_hw - biology_hw\n\n    return diff", "mapping": {"c0": 7.0, "c1": 11.0, "c2": 8.0}}
{"question": "Dan has $ c0. He bought some candy bar for $ c1 each one costing $ 3.How many candy bar did he buy?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money = c0\n\n    #each candy bar costs c1 dollars\n    cost = 3\n\n    #the number of candy bars Dan can buy can be calculated by dividing his money by the cost of each candy bar\n    candy_bars = money // cost\n\n    return candy_bars", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie, c1 packs of cake and c2 packs of chocolate.How many packs of groceries did she buy in all?", "answer": [42.0], "response": "def total_packs(c0, c1, c2):\n    #calculate the total number of packs by adding the number of packs of each item\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 4.0, "c1": 22.0, "c2": 16.0}}
{"question": "The school has c0 grades and each grade has c1 studentsHow many students were there in total?", "answer": [22800.0], "response": "def total_students(c0, c1):\n    #calculate the total number of students by multiplying the number of grades by the number of students in each grade\n    total = c0 * c1\n    return total", "mapping": {"c0": 304.0, "c1": 75.0}}
{"question": "The cave is c0 feet deep and they are already at c1 feet. If they are travelling at speed of c2 How much farther until they reach the end of the cave?", "answer": [369.0], "response": "def Problem(c0, c1, c2):\n    #the cave is c0 feet deep\n    cave_depth = c0\n\n    #they are already at c1 feet\n    current_depth = c1\n\n    #they are travelling at speed of c2\n    speed = c2\n\n    #The distance they still need to travel can be calculated by subtracting the current depth from the cave depth and dividing by their speed\n    distance_left = (cave_depth - current_depth) / speed\n\n    return distance_left", "mapping": {"c0": 1218.0, "c1": 849.0, "c2": 17.0}}
{"question": "Bobby had c0 pieces of candy. He ate some pieces of candy. If he has c1 pieces of candy leftHow many pieces of candy did Bobby eat?", "answer": [12.0], "response": "def Problem(c0, c1):\n    #Bobby had c0 pieces of candy\n    candy_before = c0\n\n    #Bobby has c1 pieces of candy left\n    candy_after = c1\n\n    #The number of pieces of candy Bobby ate can be calculated by subtracting the number of pieces of candy left from the original number of pieces of candy\n    eaten = candy_before - candy_after\n\n    return eaten", "mapping": {"c0": 32.0, "c1": 20.0}}
{"question": "Baker sold c0 cakes. If he had made c1 cakes initiallyHow many more cakes did baker make than those he sold?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #Baker initially made c1 cakes\n    initial_cakes = c1\n\n    #Baker sold c0 cakes\n    sold_cakes = c0\n\n    #The number of cakes that Baker made more than those he sold can be calculated by subtracting the number of sold cakes from the initial number of cakes\n    more_cakes = initial_cakes - sold_cakes\n\n    return more_cakes", "mapping": {"c0": 8.0, "c1": 40.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many visited the Buckingham palace before that day?", "answer": [522.0], "response": "def Problem(c0, c1, c2):\n    #the number of visitors before that day can be calculated by subtracting the number of visitors on the current day and the previous day from the total number of visitors before that day\n    visitors_before = c0 - c1 - c2\n\n    return visitors_before", "mapping": {"c0": 92.0, "c1": 419.0, "c2": 103.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If there were c1 visitors on that dayHow many more visitors visited the Buckingham palace on that day than on the previous day?", "answer": [566.0], "response": "def Problem(c0, c1):\n    #c0 visitors came to the Buckingham palace on the previous day\n    visitors_previous = c0\n\n    #c1 visitors visited the Buckingham palace on that day\n    visitors_today = c1\n\n    #The difference between the number of visitors today and the number of visitors on the previous day gives us the number of additional visitors\n    additional_visitors = visitors_today - visitors_previous\n\n    return additional_visitors", "mapping": {"c0": 100.0, "c1": 666.0}}
{"question": "In Haley's class c0 are boys who love to play marbles. If Haley has c1 marbles and wants to keep c2 marbles for herselfHow many will each of the boys receive?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 boys who love to play marbles\n    boys = c0\n\n    #Haley has c1 marbles\n    marbles = c1\n\n    #Haley wants to keep c2 marbles for herself\n    keep = c2\n\n    #The number of marbles each boy will receive can be calculated by dividing the remaining marbles after Haley keeps some by the number of boys\n    marbles_per_boy = (marbles - keep) / boys\n\n    return marbles_per_boy", "mapping": {"c0": 4.0, "c1": 23.0, "c2": 15.0}}
{"question": "Matthew had c0 crackers and c1 cakes. If Matthew gave equal numbers of crackers and cakes to his c2 friendsHow many crackers did each person eat?", "answer": [2.0], "response": "def crackers_per_person(c0, c1, c2):\n    #calculate the total number of items (crackers + cakes)\n    total_items = c0 + c1\n    \n    #calculate the number of items each friend will receive\n    items_per_friend = total_items // c2\n    \n    #calculate the number of crackers each person will receive\n    crackers_per_person = c0 // items_per_friend\n    \n    return crackers_per_person", "mapping": {"c0": 22.0, "c1": 34.0, "c2": 11.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from each of her trees. Now the trees have a total c2 apples still on them.How many apples were there on all trees initially?", "answer": [33.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Rachel has c0 apple trees\n    apple_trees = c0\n\n    #She picked c1 apples from each of her trees\n    picked_apples = c1\n\n    #The total number of apples picked can be calculated by multiplying the number of trees by the number of apples picked from each tree\n    total_picked = apple_trees * picked_apples\n\n    #Now the trees have a total c2 apples still on them\n    remaining_apples = c2\n\n    #The number of apples on all trees initially can be calculated by adding the total number of picked apples to the remaining apples\n    initial_apples = total_picked + remaining_apples\n\n    return initial_apples", "mapping": {"c0": 3.0, "c1": 8.0, "c2": 9.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of flour.How many more cups of sugar than cups of flour does she need to add now?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #Mary already put in c2 cups of flour\n    flour_added = c2\n\n    #Mary needs to add c0 - c2 cups of flour\n    flour_needed = c0 - flour_added\n\n    #Mary needs to add c1 cups of sugar\n    sugar_needed = c1\n\n    #The difference between the amount of sugar needed and the amount of flour needed is the answer\n    difference = sugar_needed - flour_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 11.0, "c2": 4.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 school buses and a total of c2 students in the school. If all buses are fullHow many seats are in each bus?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #there are c0 classrooms in the school\n    classrooms = c0\n\n    #there are c1 school buses available\n    buses = c1\n\n    #there are c2 students in the school\n    students = c2\n\n    #calculate the total number of seats in all buses\n    total_seats = buses * 50\n\n    #calculate the number of students that can fit in all classrooms\n    classroom_capacity = classrooms * 30\n\n    #calculate the number of students that need to be transported by the buses\n    students_to_transport = students - classroom_capacity\n\n    #calculate the number of seats needed for all students\n    seats_needed = students_to_transport\n\n    #calculate the number of seats in each bus\n    seats_per_bus = seats_needed / buses\n\n    return seats_per_bus\n\nNote: We assume that each bus has 50 seats.", "mapping": {"c0": 17.0, "c1": 46.0, "c2": 92.0}}
{"question": "For Gwen's birthday she received some dollars. She spent c0 dollars and has c1 dollars left with her.How much money did Gwen receive for her birthday?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #Gwen received some dollars for her birthday\n    received = c0 + c1\n\n    return received", "mapping": {"c0": 8.0, "c1": 6.0}}
{"question": "Danny collects bottle caps. He lost c0 bottle caps at the park. Now he has c1 bottle caps in his collection.How many bottle caps did danny have at first?", "answer": [91.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Danny lost c0 bottle caps at the park\n    lost_caps = c0\n\n    #Danny now has c1 bottle caps in his collection\n    current_caps = c1\n\n    #The number of bottle caps Danny had at first can be calculated by adding the number of lost caps to the current number of caps\n    initial_caps = current_caps + lost_caps\n\n    return initial_caps", "mapping": {"c0": 66.0, "c1": 25.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If jill has c2 peachesHow many peaches does Jake have?", "answer": [17.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jill has c2 peaches\n    jill_peaches = c2\n\n    #Steven has c1 more peaches than Jill\n    steven_peaches = jill_peaches + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    return jake_peaches", "mapping": {"c0": 6.0, "c1": 18.0, "c2": 5.0}}
{"question": "During summer break c0 kids from Lawrence county stay home and the other c1 kids go to camp.About how many kids are in Lawrence county?", "answer": [1363293.0], "response": "def Problem(c0, c1):\n    #the total number of kids in Lawrence county can be calculated by adding the number of kids who stayed home and the number of kids who went to camp\n    total_kids = c0 + c1\n\n    return total_kids", "mapping": {"c0": 907611.0, "c1": 455682.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more books to the shelf.How many books were on his shelf in all?", "answer": [19.0], "response": "def total_books(c0, c1, c2):\n    #calculate the total number of books by adding the number of books initially on the shelf and the number of books added later\n    total = c1 + c2\n    return total", "mapping": {"c0": 8.0, "c1": 9.0, "c2": 10.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many storks are sitting on the fence?", "answer": [8.0], "response": "def storks_on_fence(c0, c1, c2):\n    #total number of birds and storks on the fence\n    total = c0 + c1\n\n    #number of storks after c2 more storks join\n    storks_after = c1 + c2\n\n    return storks_after", "mapping": {"c0": 4.0, "c1": 6.0, "c2": 2.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many more balloons did Allan have than Jake in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Jake brought c1 balloons\n    jake_balloons = c1\n\n    #Jake bought c2 more balloons at the park\n    jake_bought = c2\n\n    #The total number of balloons Jake has at the park is the sum of the balloons he brought and the ones he bought\n    jake_total = jake_balloons + jake_bought\n\n    #The difference between the number of balloons Allan has and the number of balloons Jake has is the answer\n    difference = allan_balloons - jake_total\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 3.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many pencils does she have?", "answer": [76.0], "response": "def count_pencils(c0, c1, c2):\n    #calculate the total number of pencils by multiplying the number of rows by the number of pencils in each row\n    total_pencils = c0 * c1\n\n    return total_pencils", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 27.0}}
{"question": "The Razorback t-shirt shop sells each t-shirt for $ c0 dollars. During the Arkansas and Texas tech game they increased the prices by $ c1 per t-shirt and sold c2 t-shirts.How much money did they make from selling the t-shirts?", "answer": [5852.0], "response": "def Problem(c0, c1, c2):\n    #original price of each t-shirt is c0 dollars\n    original_price = c0\n\n    #price increase per t-shirt is c1 dollars\n    price_increase = c1\n\n    #number of t-shirts sold is c2\n    num_tshirts_sold = c2\n\n    #total revenue can be calculated by multiplying the new price per t-shirt with the number of t-shirts sold\n    total_revenue = (original_price + price_increase) * num_tshirts_sold\n\n    return total_revenue", "mapping": {"c0": 201.0, "c1": 217.0, "c2": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles does Doug have now?", "answer": [5.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    # Ed had c0 more marbles than Doug\n    ed_marbles = c2 + c1\n\n    # Doug had c0 less marbles than Ed\n    doug_marbles = ed_marbles - c0\n\n    return doug_marbles\n\n# The function takes in three arguments: c0 (the difference in marbles between Ed and Doug), c1 (the number of marbles Ed lost), and c2 (the number of marbles Ed had after losing some at the playground).\n# We first calculate how many marbles Ed has now by adding c1 to c2.\n# Then we calculate how many marbles Doug has by subtracting c0 from Ed's current number of marbles.\n# Finally, we return the number of marbles Doug has.", "mapping": {"c0": 12.0, "c1": 20.0, "c2": 17.0}}
{"question": "Lawrence county has c0 kids. During summer break c1 kids stay home and the rest go to camp.How many kids go to the camp during the break?", "answer": [38608.0], "response": "def summer_camp(c0, c1):\n    #calculate the number of kids staying home\n    staying_home = c1\n\n    #calculate the number of kids going to camp\n    going_to_camp = c0 - staying_home\n\n    return going_to_camp", "mapping": {"c0": 313473.0, "c1": 274865.0}}
{"question": "The Razorback shop makes $ c0 dollars off each jersey and $ c1 off each t-shirt. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a t-shirt cost than a jersey?", "answer": [30.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts and jerseys\n    revenue_tshirts = c0 * c2\n    revenue_jerseys = c1 * c3\n\n    #calculate the difference in revenue between a t-shirt and a jersey\n    difference = revenue_tshirts - revenue_jerseys\n\n    #calculate the difference in cost between a t-shirt and a jersey\n    cost_difference = c0 - c1\n\n    #calculate the cost per item difference\n    per_item_difference = difference / (c2 + c3)\n\n    #calculate the cost difference per item\n    cost_per_item_difference = cost_difference / (c2 + c3)\n\n    #calculate the total cost difference\n    total_cost_difference = per_item_difference - cost_per_item_difference\n\n    return total_cost_difference", "mapping": {"c0": 210.0, "c1": 240.0, "c2": 177.0, "c3": 23.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 6.How much money did he spend buying the candy bar and chocolate?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 6 dollars\n    chocolate_price = 6\n\n    #The total amount of money Dan spent can be calculated by adding the price of the candy bar and the chocolate\n    total_spent = candy_price + chocolate_price\n\n    return total_spent", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many action figures were on his shelf in all?", "answer": [10.0], "response": "def total_action_figures(c0, c1, c2):\n    #calculate the total number of action figures by adding the original number of action figures and the additional ones\n    total = c0 + c2\n    return total", "mapping": {"c0": 4.0, "c1": 22.0, "c2": 6.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and some more cups of flour. She already put in c1 cups of flour. If she still needs to add c2 more cups of flourHow many cups of flour did the recipe require?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #the recipe calls for c0 cups of sugar and some more cups of flour\n    sugar = c0\n\n    #Mary already put in c1 cups of flour\n    flour_before = c1\n\n    #Mary still needs to add c2 more cups of flour\n    flour_needed = c2\n\n    #The total amount of flour required by the recipe can be calculated by adding the amount of flour Mary already put in with the amount of flour she still needs to add\n    flour_total = flour_before + flour_needed\n\n    return flour_total", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 6.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker sell?", "answer": [24.0], "response": "def pastry_cake_difference(c0, c1, c2, c3):\n    #calculate the number of cakes sold\n    cakes_sold = c2\n\n    #calculate the number of pastries sold\n    pastries_sold = c3\n\n    #calculate the difference between the number of pastries and cakes sold\n    pastry_cake_diff = pastries_sold - cakes_sold\n\n    return pastry_cake_diff", "mapping": {"c0": 54.0, "c1": 143.0, "c2": 68.0, "c3": 92.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more birds came to join them.How many birds and storks are sitting on the fence?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 birds and c1 storks sitting on the fence\n    birds_before = c0\n    storks_before = c1\n\n    #c2 more birds came to join them\n    birds_joined = c2\n\n    #The number of birds and storks sitting on the fence can be calculated by adding the number of birds and storks before with the number of birds joined\n    birds_after = birds_before + birds_joined\n    storks_after = storks_before\n\n    return (birds_after, storks_after)", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 5.0}}
{"question": "Julia played tag with c0 kids on monday and c1 kids on tuesday. She played cards wtih c2 kids on wednesday.How many kids did she play tag with altogether?", "answer": [20.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on monday and c1 kids on tuesday\n    tag_kids = c0 + c1\n\n    #She played cards with c2 kids on wednesday\n    card_kids = c2\n\n    #The total number of kids she played with can be calculated by adding the number of kids she played tag with and the number of kids she played cards with\n    total_kids = tag_kids + card_kids\n\n    return total_kids", "mapping": {"c0": 7.0, "c1": 13.0, "c2": 20.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes per day.How many days will it take to fill c2 drums of grapes?", "answer": [30.0], "response": "def Problem(c0, c1, c2):\n    #each day, c0 pickers fill c1 drums of grapes\n    drums_per_day = c0 * c1\n\n    #to fill c2 drums, we need to divide the total number of drums by the number of drums filled per day\n    days_needed = c2 / drums_per_day\n\n    return days_needed", "mapping": {"c0": 36.0, "c1": 8.0, "c2": 240.0}}
{"question": "Bobby ate c0 pieces of candy. If he initially had c1 pieces of candyHow many pieces of candy does he still have left?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Bobby initially had c1 pieces of candy\n    initial_candy = c1\n\n    #Bobby ate c0 pieces of candy\n    eaten_candy = c0\n\n    #The number of pieces of candy Bobby still has left can be calculated by subtracting the number of pieces he ate from the initial number of pieces he had\n    remaining_candy = initial_candy - eaten_candy\n\n    return remaining_candy", "mapping": {"c0": 23.0, "c1": 30.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. Each seat can hold c1 people. If c2 seats are brokenHow many people can ride the Ferris wheel at the same time?", "answer": [120.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of functional seats\n    functional_seats = c0 - c2\n\n    #calculate the maximum number of people that can ride the Ferris wheel at the same time\n    max_riders = functional_seats * c1\n\n    return max_riders", "mapping": {"c0": 18.0, "c1": 15.0, "c2": 10.0}}
{"question": "Robin's hair was c0 inches long. He cut off c1 inches. Then it again grew by c2 inches.How long is his hair now?", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #Robin's hair was originally c0 inches long\n    hair_length = c0\n\n    #He cut off c1 inches\n    hair_length -= c1\n\n    #His hair grew by c2 inches\n    hair_length += c2\n\n    return hair_length", "mapping": {"c0": 16.0, "c1": 11.0, "c2": 12.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages equally distributed over c1 chapters. It took Frank c2 days to finish the book.How many chapters did he read per day?", "answer": [44.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #the book has c0 pages\n    pages = c0\n\n    #the book has c1 chapters\n    chapters = c1\n\n    #Frank finished the book in c2 days\n    days = c2\n\n    #The number of chapters Frank read per day can be calculated by dividing the total number of chapters by the number of days it took him to finish the book\n    chapters_per_day = chapters / days\n\n    return chapters_per_day", "mapping": {"c0": 193.0, "c1": 15.0, "c2": 660.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How far did the frog jump?", "answer": [15.0], "response": "def jumping_contest(c0, c1, c2):\n    #the grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #the grasshopper jumped c1 inches farther than the frog\n    frog_jump = (c0 - c1)\n\n    #the mouse jumped c2 inches lesser than the frog\n    mouse_jump = (frog_jump - c2)\n\n    return frog_jump", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 44.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many bird families flew away for the winter?", "answer": [118.0], "response": "def bird_migration(c0, c1, c2):\n    #calculate the total number of bird families that flew away\n    flew_away = c1 + c2\n\n    return flew_away", "mapping": {"c0": 18.0, "c1": 38.0, "c2": 80.0}}
{"question": "Matthew had c0 crackers. He has c1 crackers left after he gave equal numbers of crackers to his c2 friends.How many crackers did each friend eat?", "answer": [6.0], "response": "def crackers_per_friend(c0, c1, c2):\n    #Matthew had c0 crackers\n    crackers_before = c0\n\n    #He has c1 crackers left after giving equal numbers of crackers to his c2 friends\n    crackers_after = c1\n\n    #The total number of crackers given to his friends can be calculated by subtracting the number of crackers left from the original number of crackers\n    crackers_given = crackers_before - crackers_after\n\n    #The number of crackers each friend ate can be calculated by dividing the total number of crackers given by the number of friends\n    crackers_per_friend = crackers_given / c2\n\n    return crackers_per_friend", "mapping": {"c0": 23.0, "c1": 11.0, "c2": 2.0}}
{"question": "Rachel's tree had c0 apples. She picked c1 apples from her tree. Thereafter c2 new apples grew on the tree.How many apples are there on the tree now?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Rachel's tree originally had c0 apples\n    apples_before = c0\n\n    #She picked c1 apples from the tree\n    picked = c1\n\n    #c2 new apples grew on the tree\n    new_apples = c2\n\n    #The number of apples on the tree now can be calculated by subtracting the number of apples picked from the original number of apples and then adding the number of new apples that grew on the tree\n    apples_now = apples_before - picked + new_apples\n\n    return apples_now", "mapping": {"c0": 4.0, "c1": 2.0, "c2": 3.0}}
{"question": "Summer is almost here and most animals are migrating back to cooler countries. There are c0 bird families living near a mountain. If c1 new bird families joined themHow many bird families live near the mountain now?", "answer": [105.0], "response": "def bird_families(c0, c1):\n    #there are originally c0 bird families living near the mountain\n    original_families = c0\n\n    #c1 new bird families joined them\n    new_families = c1\n\n    #The total number of bird families living near the mountain now can be calculated by adding the original number of families with the new families\n    total_families = original_families + new_families\n\n    return total_families", "mapping": {"c0": 87.0, "c1": 18.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 wrappers and c3 bottle caps in his collection.How many more wrappers than bottle caps does danny have now?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 wrappers and c3 bottle caps\n    bottle_caps_after = c3\n    wrappers_after = c2\n\n    #Danny has x more wrappers than bottle caps\n    x = wrappers_after - wrappers_before - (bottle_caps_after - bottle_caps_before)\n\n    return x", "mapping": {"c0": 15.0, "c1": 18.0, "c2": 67.0, "c3": 35.0}}
{"question": "Melissa scored a total of c0 points in c1 games scoring the same for each game.How many points did she score in each game?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Melissa scored a total of c0 points in c1 games\n    total_points = c0\n    num_games = c1\n\n    #To find out how many points she scored in each game, we can divide the total points by the number of games\n    points_per_game = total_points / num_games\n\n    return points_per_game", "mapping": {"c0": 91.0, "c1": 13.0}}
{"question": "Robin's hair was c0 inches long. He cut off some inches of her hair. If his hair is now c1 inches longHow much of his hair did he cut?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Robin's hair was originally c0 inches long\n    hair_before = c0\n\n    #Robin's hair is now c1 inches long\n    hair_after = c1\n\n    #The amount of hair Robin cut can be calculated by subtracting the length of his hair now from the original length\n    hair_cut = hair_before - hair_after\n\n    return hair_cut", "mapping": {"c0": 17.0, "c1": 13.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many pastries would baker still have?", "answer": [27.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries and c1 cakes\n    pastries_made = c0\n    cakes_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate the number of pastries baker still has by subtracting the number of pastries sold from the number of pastries made\n    pastries_left = pastries_made - pastries_sold\n\n    return pastries_left", "mapping": {"c0": 56.0, "c1": 124.0, "c2": 104.0, "c3": 29.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in each classroom in the school. If there are c2 seats on each school busHow many buses are needed to take the trip?", "answer": [737.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of students in the school\n    total_students = c0 * c1\n\n    #calculate the number of buses needed by dividing the total number of students by the number of seats on each bus\n    buses_needed = total_students // c2\n\n    #if there are any remaining students, add one more bus\n    if total_students % c2 != 0:\n        buses_needed += 1\n\n    return buses_needed", "mapping": {"c0": 67.0, "c1": 66.0, "c2": 6.0}}
{"question": "The Razorback t-shirt shop makes $ c0 dollars off each t-shirt sold. During the Arkansas game and the Texas tech game they sold a total of c1 t-shirts. If they sold c2 t-shirts during the Arkansas gameHow much money did they make from selling the t-shirts?", "answer": [8265.0], "response": "def Problem(c0, c1, c2):\n    #they make c0 dollars off each t-shirt sold\n    price_per_shirt = c0\n\n    #they sold a total of c1 t-shirts during both games\n    total_sold = c1\n\n    #they sold c2 t-shirts during the Arkansas game\n    sold_at_arkansas_game = c2\n\n    #The total amount of money they made can be calculated by multiplying the price per shirt by the total number of shirts sold\n    total_money = price_per_shirt * total_sold\n\n    #The amount of money they made from selling t-shirts during the Arkansas game can be calculated by multiplying the price per shirt by the number of shirts sold at the Arkansas game\n    arkansas_money = price_per_shirt * sold_at_arkansas_game\n\n    #The total amount of money they made from selling t-shirts is the sum of the money made at both games\n    total_tshirt_money = arkansas_money + (total_money - arkansas_money)\n\n    return total_tshirt_money", "mapping": {"c0": 87.0, "c1": 95.0, "c2": 47.0}}
{"question": "c0 birds were sitting on the fence. c1 more birds and c2 more storks came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #c0 birds were sitting on the fence\n    birds_before = c0\n\n    #c1 more birds came to join them\n    birds_after = birds_before + c1\n\n    #c2 more storks came to join them\n    storks_after = birds_after + c2\n\n    #calculate the difference between the number of storks and birds\n    difference = storks_after - birds_after\n\n    return difference", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 6.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 school buses. If all buses are fullHow many seats are in each bus?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #there are c0 classrooms in the school\n    classrooms = c0\n\n    #there are c1 students in the school\n    students = c1\n\n    #there are c2 school buses\n    buses = c2\n\n    #if all buses are full, the total number of seats is the number of buses multiplied by the number of seats per bus\n    seats = students / buses\n\n    return seats\n\n#Note: We assume that all buses have the same number of seats. If this is not the case, we would need to know the number of seats per bus to calculate the answer.", "mapping": {"c0": 21.0, "c1": 98.0, "c2": 7.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many blocks did he use to build the tower and the house altogether?", "answer": [80.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    blocks_before = c0\n\n    #He uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #He uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The total number of blocks used can be calculated by adding the number of blocks used to build the tower and the number of blocks used to build the house\n    total_blocks = tower_blocks + house_blocks\n\n    return total_blocks", "mapping": {"c0": 58.0, "c1": 27.0, "c2": 53.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning chinese in all?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #Ryan spends c1 hours on learning chinese every day\n    chinese_hours_per_day = c1\n\n    #Ryan learns for c2 days\n    days = c2\n\n    #The total hours Ryan spends on learning chinese can be calculated by multiplying the number of hours he spends on learning chinese every day by the number of days he learns\n    total_chinese_hours = chinese_hours_per_day * days\n\n    return total_chinese_hours", "mapping": {"c0": 5.0, "c1": 4.0, "c2": 6.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much more does a jersey cost than a t-shirt?", "answer": [146.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts and jerseys\n    revenue_tshirts = c0 * c2\n    revenue_jerseys = c1 * c3\n\n    #calculate the difference in revenue between selling a jersey and a t-shirt\n    difference = revenue_jerseys - revenue_tshirts\n\n    #calculate the difference in cost between a jersey and a t-shirt\n    cost_difference = c1 - c0\n\n    #calculate the cost difference per item\n    cost_per_item = difference / (c3 - c2)\n\n    return cost_per_item", "mapping": {"c0": 86.0, "c1": 232.0, "c2": 254.0, "c3": 43.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 wrappers and c1 bottle caps at the park. Now he has c2 bottle caps and c3 wrappers in his collection.How many wrappers did danny have at first?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Danny found c0 wrappers and c1 bottle caps at the park\n    wrappers_found = c0\n    caps_found = c1\n\n    #Now he has c2 bottle caps and c3 wrappers in his collection\n    wrappers_collected = c3\n    caps_collected = c2\n\n    #Danny had some number of wrappers at first, which we'll call x\n    #We can set up two equations based on the information we have:\n    #x + wrappers_found - wrappers_collected = c3\n    #caps_found + x - caps_collected = c2\n\n    #We can solve for x by rearranging the first equation to get x = c3 - wrappers_found + wrappers_collected\n    #Then we substitute that into the second equation and solve for x:\n    x = c2 - caps_found + caps_collected + c0 - c3\n\n    return x", "mapping": {"c0": 66.0, "c1": 39.0, "c2": 16.0, "c3": 68.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died.How many more trees died in the typhoon than those that survived?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Haley grew c0 trees in her backyard\n    trees_before = c0\n\n    #After the typhoon, c1 trees died\n    trees_died = c1\n\n    #The number of trees that survived can be calculated by subtracting the number of trees that died from the original number of trees\n    trees_survived = trees_before - trees_died\n\n    #The number of trees that died more than those that survived can be calculated by subtracting the number of trees that survived from the number of trees that died\n    more_died = trees_died - trees_survived\n\n    return more_died", "mapping": {"c0": 14.0, "c1": 9.0}}
{"question": "He has c0 apples more than Adam and Jackie together do. Adam and Jackie have c1 apples between them.How many apples does He have?", "answer": [16.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Adam and Jackie have c1 apples between them\n    aj_apples = c1\n\n    #He has c0 apples more than Adam and Jackie together do\n    he_apples = aj_apples + c0\n\n    return he_apples", "mapping": {"c0": 9.0, "c1": 7.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 files and c3 apps left.How many more files than apps does he have left on the phone?", "answer": [22.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files he had c2 files and c3 apps left\n    apps_after = c3\n    files_after = c2\n\n    #Calculate the number of apps and files deleted\n    apps_deleted = apps_before - apps_after\n    files_deleted = files_before - files_after\n\n    #Calculate the difference between the number of files and apps left\n    difference = files_after - apps_after\n\n    return difference", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 24.0, "c3": 2.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. If each group has c1 eggsHow many eggs does Rebecca have?", "answer": [22.0], "response": "def Problem(c0, c1):\n    #Rebecca wants to split a collection of eggs into groups of c0\n    groups = c0\n\n    #If each group has c1 eggs, then the total number of eggs can be calculated by multiplying the number of groups by the number of eggs in each group\n    total_eggs = groups * c1\n\n    return total_eggs", "mapping": {"c0": 11.0, "c1": 2.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #The difference between the number of emails in the morning and afternoon can be calculated by subtracting the number of afternoon emails from the number of morning emails\n    difference = morning_emails - afternoon_emails\n\n    return difference", "mapping": {"c0": 10.0, "c1": 7.0, "c2": 17.0}}
{"question": "Adam could fit c0 action figures on each shelf in his room. His room has c1 shelves and c2 cabinets.How many total action figures could his shelves hold?", "answer": [44.0], "response": "def Problem(c0, c1, c2):\n    #Adam could fit c0 action figures on each shelf\n    action_figures_per_shelf = c0\n\n    #Adam's room has c1 shelves\n    num_of_shelves = c1\n\n    #Adam's room has c2 cabinets\n    num_of_cabinets = c2\n\n    #The total number of action figures that Adam's shelves could hold can be calculated by multiplying the number of shelves by the number of action figures that can fit on each shelf\n    total_action_figures_on_shelves = action_figures_per_shelf * num_of_shelves\n\n    return total_action_figures_on_shelves", "mapping": {"c0": 11.0, "c1": 4.0, "c2": 40.0}}
{"question": "Lucy went to the grocery store. She bought c0 packs of cookie and c1 packs of cake.How many more packs of cookie did she buy over cake?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Lucy bought c0 packs of cookie\n    cookie_packs = c0\n\n    #Lucy bought c1 packs of cake\n    cake_packs = c1\n\n    #The difference between the number of cookie packs and cake packs is the number of extra cookie packs Lucy bought\n    extra_cookie_packs = cookie_packs - cake_packs\n\n    return extra_cookie_packs", "mapping": {"c0": 10.0, "c1": 4.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese.How many more hours does he spend on learning english than he does on learning chinese?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends c1 hours on learning chinese\n    chinese_hours = c1\n\n    #The difference between the hours spent on learning english and chinese can be calculated by subtracting the number of hours spent on learning chinese from the number of hours spent on learning english\n    difference = english_hours - chinese_hours\n\n    return difference", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many crunches did David do?", "answer": [45.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #Zachary did c2 push-ups and c3 crunches\n    zachary_pushups = c2\n    zachary_crunches = c3\n\n    #David did c0 more push-ups than Zachary\n    david_pushups = zachary_pushups + c0\n\n    #David did c1 less crunches than Zachary\n    david_crunches = zachary_crunches - c1\n\n    return david_crunches\n\n#The function takes in four arguments: c0, c1, c2, and c3\n#It calculates the number of push-ups and crunches David did based on the information given\n#It returns the number of crunches David did", "mapping": {"c0": 40.0, "c1": 17.0, "c2": 34.0, "c3": 62.0}}
{"question": "The grasshopper and the frog had a jumping contest. The frog jumped c0 inches and the grasshopper jumped c1 inches.How much farther did the frog jump than the grasshopper?", "answer": [22.0], "response": "def jumping_contest(c0, c1):\n    #calculate the difference between the distances jumped by the frog and the grasshopper\n    difference = c0 - c1\n\n    return difference", "mapping": {"c0": 39.0, "c1": 17.0}}
{"question": "Paul had c0 books. After buying some in a garage sale he had c1 left.How many books did he buy?", "answer": [101.0], "response": "def Problem(c0, c1):\n    #Paul had c0 books\n    books_before = c0\n\n    #After buying some in a garage sale, he had c1 left\n    books_after = c1\n\n    #The number of books he bought can be calculated by subtracting the number of books he had after the garage sale from the number of books he had before\n    bought = books_before - books_after\n\n    return bought", "mapping": {"c0": 50.0, "c1": 151.0}}
{"question": "If they are already at c0 feet and the cave is c1 feet deepHow much farther until they reach the end of the cave?", "answer": [103.0], "response": "def Problem(c0, c1):\n    #they are already at c0 feet\n    current_depth = c0\n\n    #the cave is c1 feet deep\n    total_depth = c1\n\n    #the remaining depth can be calculated by subtracting the current depth from the total depth\n    remaining_depth = total_depth - current_depth\n\n    return remaining_depth", "mapping": {"c0": 659.0, "c1": 762.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games.How many new games do they have together?", "answer": [126.0], "response": "def Problem(c0, c1, c2):\n    #Katie has c0 new games and c1 old games\n    katie_new = c0\n\n    #Katie's friends have c2 new games\n    friends_new = c2\n\n    #The total number of new games they have together can be calculated by adding Katie's new games and her friends' new games\n    total_new = katie_new + friends_new\n\n    return total_new", "mapping": {"c0": 78.0, "c1": 86.0, "c2": 48.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many marbles does he have now?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He lost c1 marbles\n    lost = c1\n\n    #He found c2 new ones\n    found = c2\n\n    #The number of marbles he has now can be calculated by subtracting the lost marbles from the original number of marbles and adding the found marbles\n    marbles_after = marbles_before - lost + found\n\n    return marbles_after", "mapping": {"c0": 19.0, "c1": 11.0, "c2": 5.0}}
{"question": "Jerry had c0 action figures on a shelf in his room. Later he added some more action figures to the shelf. If there are a total of c1 action figures on his shelf nowHow many action figures did he add to the shelf?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #there were originally c0 action figures on the shelf\n    before = c0\n\n    #now there are c1 action figures on the shelf\n    after = c1\n\n    #the number of action figures added can be calculated by subtracting the original number from the current number\n    added = after - before\n\n    return added", "mapping": {"c0": 4.0, "c1": 8.0}}
{"question": "Rachel has c0 apple trees. She picked c1 apples from c2 of her trees. Now the tree has c3 apples still on it.How many apples did the tree have to begin with?", "answer": [9.0], "response": "def Problem(c0, c1, c2, c3):\n    #Rachel picked c1 apples from c2 trees, so she picked c1/c2 apples per tree\n    apples_per_tree = c1/c2\n\n    #The total number of apples on all of Rachel's trees before she picked any can be calculated by multiplying the number of trees by the average number of apples per tree\n    total_apples_before = c0 * apples_per_tree\n\n    #The tree now has c3 apples still on it, so the total number of apples it had to begin with can be calculated by adding c3 to the total number of apples on all the other trees\n    total_apples_beginning = total_apples_before + c3\n\n    return total_apples_beginning", "mapping": {"c0": 52.0, "c1": 2.0, "c2": 1.0, "c3": 7.0}}
{"question": "We ordered c0 pizzas. Each pizza has c1 slices. If there are c2 of usHow many slices of pizza does each of us get if distributed equally?", "answer": [45.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of slices\n    total_slices = c0 * c1\n\n    #calculate the number of slices each person gets\n    slices_per_person = total_slices // c2\n\n    return slices_per_person", "mapping": {"c0": 9.0, "c1": 10.0, "c2": 2.0}}
{"question": "Jack received a total of c0 emails in the day. If he received c1 emails in the morning and some more in the afternoonHow many emails did Jack receive in the afternoon?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jack received c1 emails in the morning\n    morning_emails = c1\n\n    #The number of emails Jack received in the afternoon can be calculated by subtracting the number of morning emails from the total number of emails\n    afternoon_emails = c0 - morning_emails\n\n    return afternoon_emails", "mapping": {"c0": 9.0, "c1": 7.0}}
{"question": "A grocery store had c0 bottles of diet soda and c1 bottles of regular soda.How many more bottles of regular soda than diet soda did they have?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #number of bottles of diet soda\n    diet_soda = c0\n\n    #number of bottles of regular soda\n    regular_soda = c1\n\n    #calculate the difference between regular soda and diet soda\n    difference = regular_soda - diet_soda\n\n    return difference", "mapping": {"c0": 19.0, "c1": 60.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the second chapter have than the third chapter?", "answer": [15.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of pages in the book\n    total_pages = c1 + c2 + c3\n\n    #calculate the average number of pages per chapter\n    avg_pages = total_pages / c0\n\n    #calculate the number of pages in the third chapter\n    third_chapter_pages = c3 * avg_pages\n\n    #calculate the number of pages in the second chapter\n    second_chapter_pages = c2 * avg_pages\n\n    #calculate the difference in pages between the second and third chapters\n    difference = second_chapter_pages - third_chapter_pages\n\n    return difference", "mapping": {"c0": 3.0, "c1": 35.0, "c2": 18.0, "c3": 3.0}}
{"question": "Randy has c0 blocks. He uses some blocks to build a tower. If there are c1 blocks leftHow many blocks did he use to build the tower?", "answer": [25.0], "response": "def Problem(c0, c1):\n    #there are originally c0 blocks\n    blocks_before = c0\n\n    #after building a tower, there are c1 blocks left\n    blocks_left = c1\n\n    #The number of blocks used to build the tower can be calculated by subtracting the number of blocks left from the original number of blocks\n    used_blocks = blocks_before - blocks_left\n\n    return used_blocks", "mapping": {"c0": 97.0, "c1": 72.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. c0 students suggested adding mashed potatoes while others suggested adding bacon to the menu. If c1 more students suggested adding bacon than those that suggested mashed potatoesHow many students suggested bacon?", "answer": [348.0], "response": "def Problem(c0, c1):\n    #c0 students suggested adding mashed potatoes\n    mashed_potatoes = c0\n\n    #c1 more students suggested adding bacon than those that suggested mashed potatoes\n    bacon_diff = c1\n\n    #The number of students who suggested bacon can be calculated by adding the number of students who suggested mashed potatoes with the difference in the number of students who suggested bacon\n    bacon_suggested = mashed_potatoes + bacon_diff\n\n    return bacon_suggested", "mapping": {"c0": 182.0, "c1": 166.0}}
{"question": "A waiter had c0 customers. After some left he got c1 new customers. If he still had c2 customersHow many customers left?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #the waiter originally had c0 customers\n    customers_before = c0\n\n    #after some left, he got c1 new customers\n    customers_after1 = customers_before - c1\n\n    #if he still had c2 customers, then the number of customers who left can be calculated by subtracting c2 from the number of customers after some left and new customers arrived\n    customers_left = customers_after1 - c2\n\n    return customers_left", "mapping": {"c0": 13.0, "c1": 4.0, "c2": 9.0}}
{"question": "Every day Ryan spends c0 hours on learning english and some more hours on learning chinese. If he spends a total of c1 hours on learning english and chinese everydayHow many hours does he spend on learning chinese?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Ryan spends c0 hours on learning english\n    english_hours = c0\n\n    #Ryan spends a total of c1 hours on learning english and chinese everyday\n    total_hours = c1\n\n    #The number of hours Ryan spends on learning chinese can be calculated by subtracting the number of hours he spends on learning english from the total number of hours he spends on both languages\n    chinese_hours = total_hours - english_hours\n\n    return chinese_hours", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "A book has c0 chapters across c1 pages. The second chapter is c2 pages long.How many pages are in the second chapter?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of pages per chapter\n    pages_per_chapter = c1 // c0\n\n    #calculate the starting page of the second chapter\n    second_chapter_start = pages_per_chapter + 1\n\n    #calculate the ending page of the second chapter\n    second_chapter_end = second_chapter_start + c2 - 1\n\n    #calculate the number of pages in the second chapter\n    second_chapter_pages = second_chapter_end - second_chapter_start + 1\n\n    return second_chapter_pages", "mapping": {"c0": 2.0, "c1": 81.0, "c2": 68.0}}
{"question": "White t - shirts can be purchased in packages. If mom buys c0 packages which contain c1 white t - shirts in totalHow many white t - shirts does each package have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each package contains the same number of white t-shirts\n    num_per_package = c1 / c0\n\n    return num_per_package", "mapping": {"c0": 28.0, "c1": 56.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker make?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries and c1 cakes\n    pastries = c0\n    cakes = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    sold_cakes = c2\n    sold_pastries = c3\n\n    #Calculate how many cakes and pastries are left after selling\n    remaining_cakes = cakes - sold_cakes\n    remaining_pastries = pastries - sold_pastries\n\n    #Calculate the difference between remaining cakes and pastries\n    difference = remaining_cakes - remaining_pastries\n\n    return difference", "mapping": {"c0": 52.0, "c1": 84.0, "c2": 102.0, "c3": 94.0}}
{"question": "Jessie weighed c0 kilograms. After she started to go jogging everyday she lost c1 kilograms.How much does she weigh now?", "answer": [51.0], "response": "def Problem(c0, c1):\n    #Jessie weighed c0 kilograms before\n    weight_before = c0\n\n    #Jessie lost c1 kilograms after jogging everyday\n    weight_lost = c1\n\n    #Jessie's current weight can be calculated by subtracting the weight lost from her original weight\n    weight_now = weight_before - weight_lost\n\n    return weight_now", "mapping": {"c0": 71.0, "c1": 20.0}}
{"question": "Lawrence county has c0 kids. During summer break c1 kids go to camp and the rest stay home.How many kids stay home?", "answer": [268627.0], "response": "def Problem(c0, c1):\n    #there are originally c0 kids in Lawrence county\n    kids_before = c0\n\n    #c1 kids go to camp during summer break\n    kids_at_camp = c1\n\n    #The number of kids who stay home can be calculated by subtracting the number of kids at camp from the original number of kids\n    kids_at_home = kids_before - kids_at_camp\n\n    return kids_at_home", "mapping": {"c0": 898051.0, "c1": 629424.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many files did he delete?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files he had c2 apps and c3 files left\n    apps_after = c2\n    files_after = c3\n\n    #The number of files he deleted can be calculated by subtracting the number of files left from the original number of files\n    files_deleted = files_before - files_after\n\n    return files_deleted", "mapping": {"c0": 17.0, "c1": 21.0, "c2": 3.0, "c3": 7.0}}
{"question": "If you had c0 cookies and each bag has c1 cookiesHow many bags of cookies do you have?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #each bag has c1 cookies\n    cookies_per_bag = c1\n\n    #calculate the number of bags needed by dividing the total number of cookies by the number of cookies per bag\n    bags_needed = c0 // cookies_per_bag\n\n    return bags_needed", "mapping": {"c0": 33.0, "c1": 11.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges will they have after c2 days of harvest?", "answer": [143550.0], "response": "def oranges_harvested(c0, c1, c2):\n    #calculate the total number of sacks harvested after c2 days\n    sacks_harvested = c0 * c2\n\n    #calculate the total number of oranges in all the sacks harvested\n    oranges_harvested = sacks_harvested * c1\n\n    return oranges_harvested", "mapping": {"c0": 66.0, "c1": 25.0, "c2": 87.0}}
{"question": "Nell collects baseball cards. She had c0 cards. She gave c1 of her cards to Jeff.How many cards does Nell have left?", "answer": [106.0], "response": "def Problem(c0, c1):\n    #Nell originally had c0 cards\n    cards_before = c0\n\n    #Nell gave c1 cards to Jeff\n    given_away = c1\n\n    #The number of cards Nell has left can be calculated by subtracting the number of cards given away from the original number of cards\n    cards_left = cards_before - given_away\n\n    return cards_left", "mapping": {"c0": 242.0, "c1": 136.0}}
{"question": "Helen the hippo and her friends are preparing for thanksgiving at Helen's house. Helen baked c0 chocolate chip cookies yesterday and c1 raisin cookies and c2 chocolate chip cookies this morning.How many chocolate chip cookies did Helen bake?", "answer": [574.0], "response": "def Problem(c0, c1, c2):\n    #Helen baked c0 chocolate chip cookies yesterday\n    choc_chip_yesterday = c0\n\n    #Helen baked c1 raisin cookies this morning\n    raisin_today = c1\n\n    #Helen baked c2 chocolate chip cookies this morning\n    choc_chip_today = c2\n\n    #The total number of chocolate chip cookies Helen baked can be calculated by adding the number of chocolate chip cookies she baked yesterday and today\n    total_choc_chip = choc_chip_yesterday + choc_chip_today\n\n    return total_choc_chip", "mapping": {"c0": 90.0, "c1": 51.0, "c2": 484.0}}
{"question": "There were c0 roses in the vase. Jessica cut some more roses from her flower garden which had a total of c1 roses. There are now c2 roses in the vase.How many roses are left in the garden?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_in_vase = c0\n\n    #Jessica cut some more roses from her flower garden which had a total of c1 roses\n    roses_cut = c1\n\n    #There are now c2 roses in the vase\n    roses_in_vase_now = c2\n\n    #The number of roses left in the garden can be calculated by subtracting the number of roses in the vase now from the total number of roses Jessica had in her garden before cutting\n    roses_left_in_garden = c1 - (c2 - c0)\n\n    return roses_left_in_garden", "mapping": {"c0": 13.0, "c1": 12.0, "c2": 21.0}}
{"question": "Jerry had some action figures on a shelf in his room. Later he added c0 more action figures to the shelf and removed c1 of the old ones. If there are c2 action figures on his shelf nowHow many action figures did he have initially on the shelf?", "answer": [15.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jerry had some action figures on a shelf in his room\n    initial_figures = c2 + c1 - c0\n\n    return initial_figures\n\n#Explanation:\n#Initially, Jerry had some action figures on the shelf, let's call it x.\n#After he added c0 more action figures to the shelf, the total number of action figures became x + c0.\n#Later, he removed c1 of the old ones, so the total number of action figures became (x + c0) - c1.\n#We know that the current number of action figures on the shelf is c2, so we can set up an equation:\n#(x + c0) - c1 = c2\n#Solving for x, we get:\n#x = c2 + c1 - c0\n#Therefore, the initial number of action figures on the shelf was c2 + c1 - c0.", "mapping": {"c0": 2.0, "c1": 7.0, "c2": 10.0}}
{"question": "A book has c0 chapters across c1 pages. The first chapter is c2 pages long.How many pages are in the first chapter?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of pages per chapter\n    pages_per_chapter = c1 // c0\n\n    #calculate the number of pages in the first chapter\n    first_chapter_pages = c2 * pages_per_chapter\n\n    return first_chapter_pages", "mapping": {"c0": 2.0, "c1": 23.0, "c2": 10.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many more books did he sell than he bought?", "answer": [6.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul had c0 books\n    books_before = c0\n\n    #He sold some books and bought c1 new ones\n    sold = books_before - c1\n\n    #Now he has c2 books\n    books_after = c2\n\n    #The number of books he sold more than he bought can be calculated by subtracting the number of books after from the number of books before the garage sale\n    difference = sold - (books_after - c1)\n\n    return difference", "mapping": {"c0": 21.0, "c1": 42.0, "c2": 15.0}}
{"question": "Allan and Jake brought c0 balloons to the park. If Allan brought c1 balloonsHow many balloons did Jake bring to the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan brought c1 balloons\n    allan_brought = c1\n\n    #The total number of balloons brought to the park is c0\n    #Therefore, Jake brought the remaining balloons\n    jake_brought = c0 - allan_brought\n\n    return jake_brought", "mapping": {"c0": 3.0, "c1": 2.0}}
{"question": "There are c0 students in a school. If the school has c1 students in each grades and each grade has the same number of studentsHow many grades are there in total?", "answer": [54.0], "response": "def Problem(c0, c1):\n    #calculate the number of grades by dividing the total number of students by the number of students in each grade\n    num_grades = c0 // c1\n\n    return num_grades", "mapping": {"c0": 270.0, "c1": 5.0}}
{"question": "After finding some bottle caps at the park danny has c0 bottle caps in his collection. If he had c1 bottle caps in his collection earlierHow many bottle caps did he find at the park?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #Danny had c1 bottle caps earlier\n    earlier = c1\n\n    #Danny now has c0 bottle caps in his collection\n    now = c0\n\n    #The number of bottle caps Danny found at the park can be calculated by subtracting the number of bottle caps he had earlier from the number of bottle caps he has now\n    found = now - earlier\n\n    return found", "mapping": {"c0": 32.0, "c1": 25.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each of the c1 blocks. If he gives c2 mails to each house in a blockHow many houses are there in a block?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #the mailman has to give c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #he has to give mails to c1 blocks\n    num_blocks = c1\n\n    #he gives c2 mails to each house in a block\n    mails_per_house = c2\n\n    #The number of houses in a block can be calculated by dividing the total number of mails in a block by the number of mails given to each house\n    houses_per_block = mail_per_block / mails_per_house\n\n    return houses_per_block", "mapping": {"c0": 32.0, "c1": 55.0, "c2": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to asia and c2 bird families flew away to africaHow many more bird families flew away to africa than those that flew away to asia?", "answer": [27.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families living near the mountain\n    bird_families_before = c0\n\n    #c1 bird families flew away to asia\n    bird_families_asia = c1\n\n    #c2 bird families flew away to africa\n    bird_families_africa = c2\n\n    #calculate the difference between the number of bird families that flew away to africa and those that flew away to asia\n    difference = bird_families_africa - bird_families_asia\n\n    return difference", "mapping": {"c0": 41.0, "c1": 35.0, "c2": 62.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he gave c1 crayons to his friends while he lost c2 crayons.How many crayons had been lost or given away?", "answer": [229.0], "response": "def Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons for his birthday\n    initial_crayons = c0\n\n    #During the school year he gave c1 crayons to his friends\n    given_away = c1\n\n    #he lost c2 crayons\n    lost = c2\n\n    #The number of crayons lost or given away can be calculated by adding the number of crayons given away and the number of crayons lost\n    lost_or_given = given_away + lost\n\n    return lost_or_given", "mapping": {"c0": 65.0, "c1": 213.0, "c2": 16.0}}
{"question": "Rachel had to complete c0 pages of math homework and yet more pages of reading homework. If she had to complete a total of c1 pages of homeworkHow many pages of reading homework did she have to complete?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    #She had to complete a total of c1 pages of homework\n    total_pages = c1\n\n    #The number of pages of reading homework can be calculated by subtracting the number of math pages from the total number of pages\n    reading_pages = total_pages - math_pages\n\n    return reading_pages", "mapping": {"c0": 5.0, "c1": 7.0}}
{"question": "Brenda's mother made cookies for c0. She prepared c1 cookies but had to throw away c2 cookies. If each of them had the same number of cookiesHow many did each of them have?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Brenda's mother made c0 cookies\n    total_cookies = c0\n\n    #She prepared c1 cookies\n    prepared_cookies = c1\n\n    #She had to throw away c2 cookies\n    thrown_away_cookies = c2\n\n    #The number of cookies they each had can be calculated by subtracting the thrown away cookies from the total cookies, and then dividing by 2 (since they each had the same number)\n    each_cookies = (total_cookies - thrown_away_cookies) / 2\n\n    return each_cookies", "mapping": {"c0": 5.0, "c1": 22.0, "c2": 17.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many more roses than orchids are there in the vase now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of roses after Jessica cut some more\n    roses_after = c0 + c3\n\n    #calculate the total number of orchids after Jessica cut some more\n    orchids_after = c1 + c2\n\n    #calculate the difference between the number of roses and orchids\n    difference = roses_after - orchids_after\n\n    return difference", "mapping": {"c0": 6.0, "c1": 20.0, "c2": 21.0, "c3": 22.0}}
{"question": "He had a total of c0 saltwater animals in different aquariums. Each aquarium has c1 animals in it.How many aquariums did he have?", "answer": [20.0], "response": "def Problem(c0, c1):\n    #total number of saltwater animals\n    total_animals = c0\n\n    #number of animals in each aquarium\n    animals_per_aquarium = c1\n\n    #number of aquariums can be calculated by dividing the total number of animals by the number of animals in each aquarium\n    num_aquariums = total_animals // animals_per_aquarium\n\n    return num_aquariums", "mapping": {"c0": 40.0, "c1": 2.0}}
{"question": "Every day Ryan spends c0 hours on learning english and c1 hours on learning chinese. If he learns for c2 daysHow many hours does he spend on learning english and chinese in all?", "answer": [65.0], "response": "def total_learning_hours(c0, c1, c2):\n    #calculate the total hours spent on learning english and chinese by multiplying the daily hours by the number of days\n    english_hours = c0 * c2\n    chinese_hours = c1 * c2\n\n    #calculate the total hours spent on learning both languages\n    total_hours = english_hours + chinese_hours\n\n    return total_hours", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 5.0}}
{"question": "Rachel picked c0 apples from her tree. Thereafter c1 new apples grew on the tree. Now the tree has c2 apples still on it.How many apples did the tree have to begin with?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 apples from the tree\n    picked = c0\n\n    #c1 new apples grew on the tree\n    grew = c1\n\n    #Now the tree has c2 apples still on it\n    remaining = c2\n\n    #The number of apples the tree had to begin with can be calculated by subtracting the number of picked and grew apples from the remaining apples\n    initial = remaining - (picked + grew)\n\n    return initial", "mapping": {"c0": 7.0, "c1": 2.0, "c2": 6.0}}
{"question": "There were c0 people on the bus. At the next stop c1 more people got on the bus and c2 people got off.How many people are there on the bus now?", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 people on the bus\n    people_before = c0\n\n    #c1 more people got on the bus\n    people_on = c1\n\n    #c2 people got off the bus\n    people_off = c2\n\n    #The number of people on the bus now can be calculated by adding the number of people who got on the bus and subtracting the number of people who got off the bus from the original number of people\n    people_now = people_before + people_on - people_off\n\n    return people_now", "mapping": {"c0": 8.0, "c1": 12.0, "c2": 3.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 apps and c3 files left.How many more apps than files does he have left on the phone?", "answer": [17.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of apps left after deleting some apps\n    apps_left = c2\n\n    #calculate the number of files left after deleting some files\n    files_left = c3\n\n    #calculate the difference between the number of apps and files left\n    diff = apps_left - files_left\n\n    return diff", "mapping": {"c0": 15.0, "c1": 24.0, "c2": 21.0, "c3": 4.0}}
{"question": "Baker made c0 cakes. He bought c1 new cakes and sold c2 cakes.How many cakes does baker still have?", "answer": [190.0], "response": "def Problem(c0, c1, c2):\n    #Baker originally made c0 cakes\n    cakes_before = c0\n\n    #Baker bought c1 new cakes\n    bought = c1\n\n    #Baker sold c2 cakes\n    sold = c2\n\n    #The number of cakes Baker still has can be calculated by adding the number of cakes he bought to the original number of cakes and then subtracting the number of cakes he sold\n    cakes_after = cakes_before + bought - sold\n\n    return cakes_after", "mapping": {"c0": 173.0, "c1": 103.0, "c2": 86.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of sugar than cups of salt does she need to add now?", "answer": [2.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate how many more cups of sugar are needed\n    sugar_needed = c0 - (c1 - c3)\n\n    #calculate how many more cups of salt are needed\n    salt_needed = c2 - c3\n\n    #calculate the difference between the cups of sugar and salt needed\n    difference = sugar_needed - salt_needed\n\n    return difference", "mapping": {"c0": 11.0, "c1": 6.0, "c2": 9.0, "c3": 12.0}}
{"question": "Ryan learns english and chinese for c0 days. Every day he spends c1 hours on learning english and c2 hours on learning chinese.How many hours does he spend on learning english and chinese in all?", "answer": [63.0], "response": "def total_hours(c0, c1, c2):\n    # Ryan learns for c0 days\n    days = c0\n\n    # Ryan spends c1 hours on learning english every day\n    english_hours = c1\n\n    # Ryan spends c2 hours on learning chinese every day\n    chinese_hours = c2\n\n    # The total hours Ryan spends on learning english and chinese can be calculated by multiplying the number of days with the sum of hours spent on each language\n    total_hours = days * (english_hours + chinese_hours)\n\n    return total_hours", "mapping": {"c0": 7.0, "c1": 4.0, "c2": 5.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money is left?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan also bought a chocolate for 3 dollars\n    chocolate_price = 3\n\n    #The total amount spent can be calculated by adding the price of the candy and the chocolate\n    total_spent = candy_price + chocolate_price\n\n    #The amount of money left can be calculated by subtracting the total amount spent from the original amount of money Dan had\n    money_left = money_before - total_spent\n\n    return money_left", "mapping": {"c0": 7.0, "c1": 2.0}}
{"question": "During summer break c0 kids from Lawrence county stayed home and the rest went to camp. The total number of kids in Lawrence county is 91676.About how many kids in Lawrence county went to camp?", "answer": [30057.0], "response": "def Problem(c0):\n    #total number of kids in Lawrence county\n    total_kids = 91676\n\n    #number of kids who stayed home during summer break\n    stayed_home = c0\n\n    #number of kids who went to camp can be estimated by subtracting the number of kids who stayed home from the total number of kids\n    went_to_camp = total_kids - stayed_home\n\n    #rounding the answer to the nearest whole number\n    return round(went_to_camp)", "mapping": {"c0": 61619.0}}
{"question": "After Jessie started to go jogging everyday she lost c0 kilograms. She currently weighs c1 kilograms.How much did she weigh before starting to jog?", "answer": [192.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Jessie lost c0 kilograms after starting to jog\n    weight_lost = c0\n\n    #Jessie currently weighs c1 kilograms\n    current_weight = c1\n\n    #The weight Jessie had before starting to jog can be calculated by adding the weight she lost to her current weight\n    weight_before = current_weight + weight_lost\n\n    return weight_before", "mapping": {"c0": 126.0, "c1": 66.0}}
{"question": "Josh had c0 marbles in his collection. He lost c1 marbles and found c2 new ones.How many more marbles did he find than those he lost?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He lost c1 marbles\n    lost = c1\n\n    #He found c2 new marbles\n    found = c2\n\n    #The difference between the number of marbles he found and lost can be calculated by subtracting the number of lost marbles from the number of found marbles\n    difference = found - lost\n\n    return difference", "mapping": {"c0": 7.0, "c1": 8.0, "c2": 10.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left.How many more Ace cards than baseball cards does Nell have?", "answer": [265.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left\n    ace_after = c2\n    baseball_after = c3\n\n    #Calculate how many cards Nell gave to Jeff\n    cards_given = (ace_before - ace_after) + (baseball_before - baseball_after)\n\n    #Calculate the difference between the number of Ace cards and baseball cards Nell has now\n    difference = ace_after - baseball_after\n\n    #Calculate how many more Ace cards than baseball cards Nell has\n    more_ace = difference - cards_given\n\n    return more_ace", "mapping": {"c0": 239.0, "c1": 38.0, "c2": 376.0, "c3": 111.0}}
{"question": "In a school there are c0 boys and c1 girls. c2 more girls joined the school.How many more girls than boys does the school have?", "answer": [298.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 boys and c1 girls\n    boys = c0\n    girls = c1\n\n    #c2 more girls joined the school\n    new_girls = c2\n\n    #calculate the total number of girls after the new girls joined\n    total_girls = girls + new_girls\n\n    #calculate the difference between the total number of girls and the number of boys\n    difference = total_girls - boys\n\n    return difference", "mapping": {"c0": 362.0, "c1": 257.0, "c2": 403.0}}
{"question": "Paul got a box of some crayons for his birthday. By the end of the school year he had either lost or given away c0 of them and only had c1 left.How many crayons did he get for his birthday?", "answer": [728.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Paul got a box of crayons for his birthday\n    crayons_received = c0\n\n    #By the end of the school year, he had either lost or given away c0 of them and only had c1 left\n    crayons_left = c1\n\n    #The number of crayons he got for his birthday can be calculated by adding the number of crayons he had left to the number he lost or gave away\n    crayons_received = crayons_left + c0\n\n    return crayons_received", "mapping": {"c0": 551.0, "c1": 177.0}}
{"question": "Bryan took a look at his books as well. If he has a total of c0 books and each bookshelf contains c1 booksHow many bookshelves does he have?", "answer": [21.0], "response": "def Problem(c0, c1):\n    #total number of books Bryan has\n    total_books = c0\n\n    #number of books each bookshelf can hold\n    shelf_capacity = c1\n\n    #number of bookshelves Bryan has can be calculated by dividing the total number of books by the capacity of each bookshelf\n    num_shelves = total_books // shelf_capacity\n\n    #if there are any remaining books, add an extra shelf\n    if total_books % shelf_capacity != 0:\n        num_shelves += 1\n\n    return num_shelves", "mapping": {"c0": 42.0, "c1": 2.0}}
{"question": "Julia played tag with c0 kids on monday. If she played tag with c1 more kids on monday than on tuesdayHow many kids did she play with on tuesday?", "answer": [4.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with c0 kids on monday\n    monday_kids = c0\n\n    #She played tag with c1 more kids on monday than on tuesday\n    monday_tuesday_diff = c1\n\n    #Let's assume she played with x kids on tuesday\n    tuesday_kids = x\n\n    #According to the problem, she played with c1 more kids on monday than on tuesday\n    #So, the number of kids she played with on monday is tuesday_kids + c1\n    monday_kids = tuesday_kids + c1\n\n    #Now, we know the number of kids she played with on monday and tuesday\n    #We can use this information to find the value of x (number of kids she played with on tuesday)\n    #We know that she played with c0 kids on monday and c1 more kids on tuesday than on monday\n    #So, the number of kids she played with on tuesday is monday_kids - c1\n    tuesday_kids = monday_kids - c1\n\n    return tuesday_kids", "mapping": {"c0": 16.0, "c1": 12.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of unripe oranges and c1 sacks of ripe oranges per day.How many more sacks of ripe oranges than unripe oranges are harvested per day?", "answer": [45.0], "response": "def Problem(c0, c1):\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c0\n\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c1\n\n    #calculate the difference between the number of ripe and unripe oranges harvested\n    difference = ripe_oranges - unripe_oranges\n\n    return difference", "mapping": {"c0": 41.0, "c1": 86.0}}
{"question": "Allan brought c0 balloons. If Allan and Jake brought total of c1 balloons to the parkHow many balloons did Jake bring to the park?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Allan and Jake brought total of c1 balloons\n    total_balloons = c1\n\n    #Jake brought the remaining balloons, which can be calculated by subtracting Allan's balloons from the total balloons\n    jake_balloons = total_balloons - allan_balloons\n\n    return jake_balloons", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "The ring toss game at the carnival made c0 dollars per day. They were at the carnival for c1 days.How much money did they make?", "answer": [3168.0], "response": "def carnival_profit(c0, c1):\n    #calculate the total profit by multiplying the profit per day by the number of days\n    total_profit = c0 * c1\n    return total_profit", "mapping": {"c0": 144.0, "c1": 22.0}}
{"question": "Each basket of peaches has c0 red peaches and c1 green peaches. If there are c2 such basketsHow many peaches are in the baskets altogether?", "answer": [345.0], "response": "def Problem(c0, c1, c2):\n    #each basket has c0 red peaches and c1 green peaches\n    #there are c2 baskets\n    #total number of peaches can be calculated by multiplying the number of baskets with the total number of peaches in each basket\n    total_peaches = (c0 + c1) * c2\n\n    return total_peaches", "mapping": {"c0": 19.0, "c1": 4.0, "c2": 15.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many more sweet cookies than salty cookies did he eat?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies and c1 salty cookies\n    sweet_cookies_before = c0\n    salty_cookies_before = c1\n\n    #He ate c2 sweet cookies and c3 salty cookies\n    sweet_cookies_eaten = c2\n    salty_cookies_eaten = c3\n\n    #Calculate how many more sweet cookies than salty cookies he ate\n    difference = sweet_cookies_eaten - salty_cookies_eaten\n\n    return difference", "mapping": {"c0": 37.0, "c1": 11.0, "c2": 5.0, "c3": 2.0}}
{"question": "Jake has c0 fewer peaches than Steven. If Jake has c1 peaches.How many peaches does Steven have?", "answer": [28.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = c1\n    steven_peaches = jake_peaches + c0\n\n    return steven_peaches", "mapping": {"c0": 11.0, "c1": 17.0}}
{"question": "Paul got a box of c0 crayons for his birthday. During the school year he lost c1 crayons while he gave away c2 crayons to his friends.How many more crayons did he give to his friends than those he lost?", "answer": [77.0], "response": "def Problem(c0, c1, c2):\n    #Paul got c0 crayons for his birthday\n    initial_crayons = c0\n\n    #During the school year he lost c1 crayons\n    lost_crayons = c1\n\n    #He gave away c2 crayons to his friends\n    given_crayons = c2\n\n    #The difference between the number of crayons he gave away and the number of crayons he lost can be calculated by subtracting the lost crayons from the given crayons\n    difference = given_crayons - lost_crayons\n\n    return difference", "mapping": {"c0": 267.0, "c1": 231.0, "c2": 308.0}}
{"question": "If the cave is c0 feet deep and they need to travel c1 feetHow far is the end of the cave?", "answer": [2226.0], "response": "def Problem(c0, c1):\n    #the cave is originally c0 feet deep\n    cave_depth = c0\n\n    #they need to travel c1 feet\n    travel_distance = c1\n\n    #The distance to the end of the cave can be calculated by adding the distance they need to travel to the original depth of the cave\n    end_distance = cave_depth + travel_distance\n\n    return end_distance", "mapping": {"c0": 919.0, "c1": 1307.0}}
{"question": "There are c0 bananas and c1 oranges in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of bananas?", "answer": [29.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the size of each group of bananas by dividing the total number of bananas by the number of groups\n    banana_group_size = c0 / c2\n\n    return banana_group_size", "mapping": {"c0": 203.0, "c1": 63.0, "c2": 7.0, "c3": 95.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 eggs and c2 marbles.How many more eggs does Rebecca have than marbles?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of egg groups that can be made\n    egg_groups = c1 // c0\n\n    #calculate the number of remaining eggs\n    remaining_eggs = c1 % c0\n\n    #calculate the difference between the number of remaining eggs and the number of marbles\n    difference = remaining_eggs - c2\n\n    return difference", "mapping": {"c0": 5.0, "c1": 20.0, "c2": 6.0}}
{"question": "Paige raised c0 goldfish in the pond but stray cats loved eating them. c1 were eaten.How many goldfish remained?", "answer": [10.0], "response": "def Problem(c0, c1):\n    #there are originally c0 goldfish in the pond\n    goldfish_before = c0\n\n    #c1 goldfish were eaten by stray cats\n    eaten = c1\n\n    #The number of goldfish remaining can be calculated by subtracting the number of goldfish eaten from the original number of goldfish\n    goldfish_after = goldfish_before - eaten\n\n    return goldfish_after", "mapping": {"c0": 15.0, "c1": 5.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many push-ups did David do?", "answer": [78.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups\n    zachary_pushups = c0\n\n    #Zachary did c1 crunches\n    zachary_crunches = c1\n\n    #David did c2 more push-ups than Zachary\n    david_pushups = zachary_pushups + c2\n\n    #David did c3 less crunches than Zachary\n    david_crunches = zachary_crunches - c3\n\n    return david_pushups", "mapping": {"c0": 59.0, "c1": 44.0, "c2": 19.0, "c3": 27.0}}
{"question": "Dave had c0 apps on his phone. He deleted c1 apps.How many apps are left on his phone?", "answer": [14.0], "response": "def remaining_apps(c0, c1):\n    # Dave had c0 apps on his phone\n    apps_before = c0\n\n    # Dave deleted c1 apps\n    apps_deleted = c1\n\n    # The number of apps left on Dave's phone can be calculated by subtracting the number of deleted apps from the original number of apps\n    apps_left = apps_before - apps_deleted\n\n    return apps_left", "mapping": {"c0": 19.0, "c1": 5.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar c1 cups of flour and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate how many cups of flour are needed in total\n    flour_needed = c1 + c3\n\n    #calculate how many cups of sugar are needed in total\n    sugar_needed = c0\n\n    #calculate the difference between the cups of flour needed and the cups of sugar needed\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 14.0, "c2": 40.0, "c3": 4.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of ripe oranges will they have after c2 days of harvest?", "answer": [2050.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of ripe oranges per day\n    ripe_per_day = c0\n\n    #they harvest c1 sacks of unripe oranges per day\n    unripe_per_day = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #The number of sacks of ripe oranges after c2 days can be calculated by multiplying the number of days by the number of sacks of ripe oranges harvested per day\n    ripe_after = ripe_per_day * days\n\n    return ripe_after", "mapping": {"c0": 82.0, "c1": 61.0, "c2": 25.0}}
{"question": "Jack received c0 emails and c1 letters in the morning. He then received c2 emails and c3 letters in the afternoon.How many more emails did Jack receive in the morning than in the afternoon?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jack received c0 emails and c1 letters in the morning\n    morning_emails = c0\n    morning_letters = c1\n\n    #Jack received c2 emails and c3 letters in the afternoon\n    afternoon_emails = c2\n    afternoon_letters = c3\n\n    #Calculate the total number of emails received in the morning and afternoon\n    total_morning = morning_emails + morning_letters\n    total_afternoon = afternoon_emails + afternoon_letters\n\n    #Calculate the difference between the number of emails received in the morning and afternoon\n    difference = morning_emails - afternoon_emails\n\n    return difference", "mapping": {"c0": 10.0, "c1": 12.0, "c2": 3.0, "c3": 44.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games and c3 old games.How many old games do they have c4", "answer": [121.0], "response": "def Problem(c0, c1, c2, c3):\n    #Katie has c0 new games and c1 old games\n    katie_old = c1\n\n    #Katie's friends have c2 new games and c3 old games\n    friends_old = c3\n\n    #The total number of old games they have can be calculated by adding Katie's old games and her friends' old games\n    total_old = katie_old + friends_old\n\n    return total_old", "mapping": {"c0": 62.0, "c1": 80.0, "c2": 73.0, "c3": 41.0, "c4": 3.0}}
{"question": "Together Adam and Jackie have c0 apples. He has c1 apples more than Adam and Jackie together do. Adam has c2 more apples than Jackie.How many apples does He have?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Adam and Jackie together have c0 apples\n    together = c0\n\n    #He has c1 apples more than Adam and Jackie together do\n    he_more = c1\n\n    #Adam has c2 more apples than Jackie\n    adam_more = c2\n\n    #Let's solve for Adam's and Jackie's number of apples\n    #We can use algebra to solve for the number of apples each person has\n    #Let's call Adam's number of apples \"a\" and Jackie's number of apples \"j\"\n    #From the problem, we know that:\n    #a + j = together (equation 1)\n    #a = j + c2 (equation 2)\n    #We can substitute equation 2 into equation 1 to solve for j:\n    #j + c2 + j = together\n    #2j + c2 = together\n    #2j = together - c2\n    #j = (together - c2) / 2\n    j = (together - c2) / 2\n\n    #Now that we know Jackie's number of apples, we can solve for Adam's number of apples using equation 2:\n    a = j + c2\n\n    #Finally, we can solve for He's number of apples by adding Adam's and Jackie's number of apples and c1:\n    he = a + j + c1\n\n    return he", "mapping": {"c0": 12.0, "c1": 9.0, "c2": 8.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks per day and that each sack containes c1 oranges.How many oranges are harvested if they harvest a total of c2 sacks of oranges?", "answer": [420.0], "response": "def Problem(c0, c1, c2):\n    #each sack contains c1 oranges\n    oranges_per_sack = c1\n\n    #they harvest c0 sacks per day\n    sacks_per_day = c0\n\n    #they harvest a total of c2 sacks of oranges\n    total_sacks = c2\n\n    #The total number of oranges harvested can be calculated by multiplying the number of sacks by the number of oranges per sack\n    total_oranges = oranges_per_sack * sacks_per_day * total_sacks\n\n    return total_oranges", "mapping": {"c0": 67.0, "c1": 12.0, "c2": 35.0}}
{"question": "There are c0 oranges and c1 bananas in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of bananas?", "answer": [145.0], "response": "def Problem(c0, c1, c2, c3):\n    #number of bananas in each group can be calculated by dividing the total number of bananas by the number of groups\n    bananas_per_group = c1 / c2\n\n    return bananas_per_group", "mapping": {"c0": 87.0, "c1": 290.0, "c2": 2.0, "c3": 93.0}}
{"question": "There are c0 oranges and c1 bananas in Philip's collection. If the bananas are organized into c2 groups and oranges are organized into c3 groupsHow big is each group of oranges?", "answer": [24.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of oranges and bananas\n    total_fruits = c0 + c1\n\n    #calculate the total number of groups\n    total_groups = c2 + c3\n\n    #calculate the size of each group of oranges\n    orange_group_size = c0 // c3\n\n    return orange_group_size", "mapping": {"c0": 384.0, "c1": 192.0, "c2": 345.0, "c3": 16.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many more crunches than push-ups did Zachary do?", "answer": [12.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, c3):\n    #David did c0 more push-ups than Zachary\n    david_pushups = c2 + c0\n\n    #David did c1 less crunches than Zachary\n    david_crunches = c3 - c1\n\n    #Zachary did c2 push-ups\n    zachary_pushups = c2\n\n    #Zachary did c3 crunches\n    zachary_crunches = c3\n\n    #The number of more crunches than push-ups Zachary did can be calculated by subtracting the number of push-ups from the number of crunches\n    more_crunches = zachary_crunches - zachary_pushups\n\n    return more_crunches", "mapping": {"c0": 27.0, "c1": 7.0, "c2": 5.0, "c3": 17.0}}
{"question": "He also had c0 aquariums for freshwater animals and c1 aquariums for saltwater animals. Each aquarium has c2 animals in it.How many saltwater animals does Tyler have?", "answer": [1012.0], "response": "def Problem(c0, c1, c2):\n    #Tyler has c0 aquariums for freshwater animals and c1 aquariums for saltwater animals\n    #Each aquarium has c2 animals in it\n    #We need to calculate the total number of saltwater animals Tyler has\n\n    #First, we need to calculate the total number of animals in all the aquariums\n    total_animals = (c0 + c1) * c2\n\n    #Next, we need to calculate the number of saltwater animals by subtracting the number of freshwater animals from the total number of animals\n    saltwater_animals = c1 * c2\n\n    return saltwater_animals", "mapping": {"c0": 74.0, "c1": 22.0, "c2": 46.0}}
{"question": "There were c0 dollars in Olivia's wallet. After she visited a supermarket and a showroom there were c1 dollars left. If she spent c2 dollars at the showroomHow much did she spend at the supermarket?", "answer": [31.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 dollars in Olivia's wallet\n    money_before = c0\n\n    #after visiting the supermarket and showroom, there were c1 dollars left\n    money_after = c1\n\n    #she spent c2 dollars at the showroom\n    spent_showroom = c2\n\n    #the amount spent at the supermarket can be calculated by subtracting the amount spent at the showroom from the difference in money before and after\n    spent_supermarket = money_before - money_after - spent_showroom\n\n    return spent_supermarket", "mapping": {"c0": 106.0, "c1": 26.0, "c2": 49.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How much farther did the mouse jump than the grasshopper?", "answer": [28.0], "response": "def jumping_contest(c0, c1, c2):\n    #the grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #the frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #the mouse jumped c2 inches lesser than the frog\n    mouse_jump = frog_jump - c2\n\n    #the difference between the mouse jump and the grasshopper jump is how much farther the mouse jumped than the grasshopper\n    difference = mouse_jump - grasshopper_jump\n\n    return difference", "mapping": {"c0": 24.0, "c1": 33.0, "c2": 5.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 ripe apples and c2 unripe apples.How many apples did the tree have to begin with?", "answer": [12.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #Now the tree has c1 ripe apples and c2 unripe apples\n    ripe = c1\n    unripe = c2\n\n    #The total number of apples the tree had to begin with can be calculated by adding the number of picked, ripe, and unripe apples\n    total = picked + ripe + unripe\n\n    return total", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 4.0}}
{"question": "Frank was reading through his favorite book. The book had c0 pages and he read c1 pages per day.How many days did he take to finish the book?", "answer": [28.0], "response": "def Problem(c0, c1):\n    #Frank reads c1 pages per day\n    pages_per_day = c1\n\n    #He needs to read c0 pages in total\n    total_pages = c0\n\n    #The number of days he takes to finish the book can be calculated by dividing the total number of pages by the number of pages he reads per day\n    days_to_finish = total_pages // pages_per_day\n\n    return days_to_finish", "mapping": {"c0": 392.0, "c1": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground while Ed found c2 more marbles.How many more marbles did Ed have than Doug then?", "answer": [60.0], "response": "def Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0 + doug_marbles\n\n    #Doug lost c1 of his marbles at the playground\n    doug_marbles -= c1\n\n    #Ed found c2 more marbles\n    ed_marbles += c2\n\n    #The difference between Ed's and Doug's marbles can be calculated by subtracting Doug's marbles from Ed's marbles\n    difference = ed_marbles - doug_marbles\n\n    return difference", "mapping": {"c0": 24.0, "c1": 27.0, "c2": 9.0}}
{"question": "Faye was placing her pencils into rows with c0 pencils in each row. If she had c1 pencils and c2 crayonsHow many rows could she make?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of pencils\n    total_pencils = c1\n\n    #calculate the number of rows that can be made\n    rows = total_pencils // c0\n\n    return rows", "mapping": {"c0": 5.0, "c1": 35.0, "c2": 7.0}}
{"question": "Some children were riding on the bus. At the bus stop c0 more children got on the bus. Then there were c1 children altogether on the bus.How many children were riding on the bus before the bus stop?", "answer": [39.0], "response": "def Problem(c0, c1):\n    #there were originally x children on the bus\n    x = c1 - c0\n\n    return x", "mapping": {"c0": 2.0, "c1": 41.0}}
{"question": "Danny has c0 bottle caps in his collection. He found c1 bottle caps at the park.How many bottle caps does he have now?", "answer": [65.0], "response": "def bottle_caps(c0, c1):\n    # Danny has c0 bottle caps in his collection\n    original_caps = c0\n\n    # Danny found c1 bottle caps at the park\n    found_caps = c1\n\n    # The total number of bottle caps Danny has now is the sum of his original collection and the ones he found\n    total_caps = original_caps + found_caps\n\n    return total_caps", "mapping": {"c0": 12.0, "c1": 53.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park.How many more balloons did Allan have than Jake in the park?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Jake brought c1 balloons\n    jake_balloons = c1\n\n    #The difference in the number of balloons can be calculated by subtracting the number of balloons Jake brought from the number of balloons Allan brought\n    difference = allan_balloons - jake_balloons\n\n    return difference", "mapping": {"c0": 5.0, "c1": 3.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many more bird families flew away to africa than those that flew away to asia?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 bird families\n    bird_families_before = c0\n\n    #c1 bird families flew away to africa\n    bird_families_africa = c1\n\n    #c2 bird families flew away to asia\n    bird_families_asia = c2\n\n    #The difference between the number of bird families that flew away to africa and those that flew away to asia can be calculated by subtracting the number of bird families that flew away to asia from the number of bird families that flew away to africa\n    difference = bird_families_africa - bird_families_asia\n\n    return difference", "mapping": {"c0": 8.0, "c1": 42.0, "c2": 31.0}}
{"question": "Zachary did c0 push-ups and c1 crunches in gym class today. David did c2 more push-ups but c3 less crunches than zachary.How many more crunches than push-ups did Zachary do?", "answer": [12.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c0 push-ups and c1 crunches\n    zach_pushups = c0\n    zach_crunches = c1\n\n    #David did c2 more push-ups but c3 less crunches than Zachary\n    david_pushups = c0 + c2\n    david_crunches = c1 - c3\n\n    #calculate the difference between Zachary's crunches and push-ups\n    diff = zach_crunches - zach_pushups\n\n    #calculate how many more crunches Zachary did than push-ups\n    more_crunches = diff - (david_crunches - david_pushups)\n\n    return more_crunches", "mapping": {"c0": 46.0, "c1": 58.0, "c2": 38.0, "c3": 62.0}}
{"question": "The Ferris wheel in paradise park has c0 seats. If c1 people can ride the wheel at the same timeHow many people can each seat hold?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #the Ferris wheel has c0 seats\n    seats = c0\n\n    #c1 people can ride the wheel at the same time\n    riders = c1\n\n    #The number of people each seat can hold can be calculated by dividing the number of riders by the number of seats\n    per_seat = riders / seats\n\n    return per_seat", "mapping": {"c0": 4.0, "c1": 20.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many pages did she have to complete in all?", "answer": [15.0], "response": "def total_homework_pages(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_pages = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_pages = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    biology_pages = c2\n\n    #The total number of pages Rachel had to complete can be calculated by adding the number of pages for each subject\n    total_pages = math_pages + reading_pages + biology_pages\n\n    return total_pages", "mapping": {"c0": 2.0, "c1": 3.0, "c2": 10.0}}
{"question": "For Gwen's birthday she received c0 dollars from her mom. Her dad gave her c1 more dollars. If she spent c2 dollars.How much more money did she receive from her dad than she did from her mom?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Gwen received c0 dollars from her mom\n    mom_gift = c0\n\n    #Gwen's dad gave her c1 more dollars\n    dad_gift = c0 + c1\n\n    #Gwen spent c2 dollars\n    spent = c2\n\n    #The difference between the amount Gwen received from her dad and mom can be calculated by subtracting mom's gift from dad's gift\n    difference = dad_gift - mom_gift\n\n    return difference", "mapping": {"c0": 3.0, "c1": 6.0, "c2": 4.0}}
{"question": "Baker made c0 cakes. He sold c1 of them. Then he made c2 more cakes.How many cakes would baker still have?", "answer": [111.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker sold c1 cakes\n    cakes_sold = c1\n\n    #Baker made c2 more cakes\n    cakes_made = c2\n\n    #The number of cakes baker would still have can be calculated by subtracting the number of cakes sold from the original number of cakes and then adding the number of cakes made\n    cakes_after = cakes_before - cakes_sold + cakes_made\n\n    return cakes_after", "mapping": {"c0": 110.0, "c1": 75.0, "c2": 76.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many cakes would baker still have?", "answer": [59.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries and c1 cakes\n    cakes_before = c1\n\n    #Baker sold c2 cakes\n    cakes_sold = c2\n\n    #Baker still has cakes can be calculated by subtracting the number of cakes sold from the original number of cakes\n    cakes_after = cakes_before - cakes_sold\n\n    #Baker made c0 pastries\n    pastries_before = c0\n\n    #Baker sold c3 pastries\n    pastries_sold = c3\n\n    #Baker still has pastries can be calculated by subtracting the number of pastries sold from the original number of pastries\n    pastries_after = pastries_before - pastries_sold\n\n    #return the number of cakes baker still has\n    return cakes_after", "mapping": {"c0": 61.0, "c1": 167.0, "c2": 108.0, "c3": 44.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books have you read?", "answer": [14.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the difference between the number of movies and books read\n    diff = c3 - c2\n\n    return diff", "mapping": {"c0": 11.0, "c1": 17.0, "c2": 7.0, "c3": 21.0}}
{"question": "A mailman gives c0 junk mails to each house in a block. If the mailman has to give c1 pieces of junk mail to each block.How many houses are there in a block?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #the mailman gives c0 junk mails to each house in a block\n    junk_mails_per_house = c0\n\n    #the mailman has to give c1 pieces of junk mail to each block\n    total_junk_mails = c1\n\n    #The number of houses in a block can be calculated by dividing the total number of junk mails by the number of junk mails per house\n    houses_in_block = total_junk_mails / junk_mails_per_house\n\n    return houses_in_block", "mapping": {"c0": 2.0, "c1": 14.0}}
{"question": "Ed had c0 more marbles than Doug. Doug lost c1 of his marbles at the playground. If Ed had c2 marblesHow many marbles does Doug have now?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c2\n    doug_marbles = ed_marbles - c0\n\n    #Doug lost c1 of his marbles at the playground\n    doug_marbles -= c1\n\n    return doug_marbles\n\n#The function takes in three arguments: c0 (the number of marbles Ed has more than Doug), c1 (the number of marbles Doug lost at the playground), and c2 (the total number of marbles Ed has). \n\n#First, we calculate the number of marbles Doug had before he lost any at the playground. We know that Ed had c0 more marbles than Doug, and we also know that Ed has c2 marbles. So we can subtract c0 from c2 to get the number of marbles Doug had: ed_marbles - c0 = doug_marbles.\n\n#Then, we subtract c1 from doug_marbles to get the number of marbles Doug has now.\n\n#Finally, we return the number of marbles Doug has now.", "mapping": {"c0": 6.0, "c1": 7.0, "c2": 22.0}}
{"question": "Dan has $ c0. He bought a candy bar for $ c1 and a chocolate for $ 3.How much money did he spend to buy candy bar than he did to buy chocolate?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a candy bar for c1 dollars\n    candy_price = c1\n\n    #Dan bought a chocolate for 3 dollars\n    chocolate_price = 3\n\n    #The difference in money spent on candy bar and chocolate can be calculated by subtracting the candy price from the chocolate price\n    difference = candy_price - chocolate_price\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "A waiter had c0 customers. After some left he still had c1 customers.How many more customers stayed behind than those that left?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #there were originally c0 customers\n    customers_before = c0\n\n    #after some left, there are c1 customers remaining\n    customers_after = c1\n\n    #the number of customers that left can be calculated by subtracting the number of customers remaining from the original number of customers\n    left = customers_before - customers_after\n\n    #the number of customers that stayed behind can be calculated by subtracting the number of customers that left from the original number of customers\n    stayed = customers_before - left\n\n    #the difference between the number of customers that stayed and the number that left is the number of customers that stayed behind\n    difference = stayed - left\n\n    return difference", "mapping": {"c0": 3.0, "c1": 4.0}}
{"question": "Julia played tag with c0 kids on tuesday. If she played tag with c1 more kids on monday than on tuesdayHow many kids did she play with on monday?", "answer": [22.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with c0 kids on tuesday\n    kids_tuesday = c0\n\n    #She played tag with c1 more kids on monday than on tuesday\n    extra_kids = c1\n\n    #The number of kids she played with on monday can be calculated by adding the number of kids she played with on tuesday and the extra kids she played with on monday\n    kids_monday = kids_tuesday + extra_kids\n\n    return kids_monday", "mapping": {"c0": 14.0, "c1": 8.0}}
{"question": "Allan brought c0 balloons to the park. If Jake brought c1 more balloons than the number of balloons that Allan broughtHow many balloons did Jake bring to the park?", "answer": [11.0], "response": "def Problem(c0, c1):\n    #Allan brought c0 balloons\n    allan_balloons = c0\n\n    #Jake brought c1 more balloons than Allan\n    jake_balloons = allan_balloons + c1\n\n    return jake_balloons", "mapping": {"c0": 5.0, "c1": 6.0}}
{"question": "Jackie has c0 apples. Adam has c1 apples.How many more apples does Jackie have than Adam?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jackie has c0 apples\n    jackie_apples = c0\n\n    #Adam has c1 apples\n    adam_apples = c1\n\n    #The difference in the number of apples can be calculated by subtracting Adam's apples from Jackie's apples\n    difference = jackie_apples - adam_apples\n\n    return difference", "mapping": {"c0": 10.0, "c1": 8.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker make?", "answer": [112.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate how many cakes and pastries are left after selling\n    cakes_left = cakes_made - cakes_sold\n    pastries_left = pastries_made - pastries_sold\n\n    #Calculate the difference between the number of pastries and cakes left\n    difference = pastries_left - cakes_left\n\n    return difference", "mapping": {"c0": 19.0, "c1": 131.0, "c2": 70.0, "c3": 88.0}}
{"question": "For Gwen's birthday she received c0 dollars. She spent some money and has c1 dollars left with her.How much money did she spend?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Gwen originally had c0 dollars\n    money_before = c0\n\n    #Gwen now has c1 dollars left\n    money_after = c1\n\n    #The amount of money Gwen spent can be calculated by subtracting the money she has now from the money she had before\n    spent = money_before - money_after\n\n    return spent", "mapping": {"c0": 7.0, "c1": 5.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many red and yellow peaches are in the basket?", "answer": [32.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 red peaches and c1 yellow peaches in the basket\n    red_and_yellow = c0 + c1\n\n    return red_and_yellow", "mapping": {"c0": 18.0, "c1": 14.0, "c2": 17.0}}
{"question": "Matthew gave equal numbers of crackers and cakes to his c0 friends. If he had c1 crackers and c2 cakes initiallyHow many crackers did each person eat?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Matthew gave equal numbers of crackers and cakes to his c0 friends\n    #So, each friend got c1/c0 crackers and c2/c0 cakes\n    crackers_per_person = c1/c0\n\n    return crackers_per_person", "mapping": {"c0": 4.0, "c1": 32.0, "c2": 98.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvested c0 sacks of oranges.How many sacks did they harvest per day if they harvested for a total of c1 days?", "answer": [4.0], "response": "def Problem(c0, c1):\n    #they harvested c0 sacks of oranges in total\n    sacks_total = c0\n\n    #they harvested for c1 days\n    days = c1\n\n    #The number of sacks harvested per day can be calculated by dividing the total number of sacks by the number of days\n    sacks_per_day = sacks_total / days\n\n    return sacks_per_day", "mapping": {"c0": 56.0, "c1": 14.0}}
{"question": "Adam has c0 more apples than Jackie. Together Adam and Jackie have c1 apples. Bob has c2 apples more than Adam and Jackie together do.How many apples does Bob have?", "answer": [20.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Adam has c0 more apples than Jackie\n    adam_apples = c0 + jackie_apples\n\n    #Together Adam and Jackie have c1 apples\n    jackie_apples = (c1 - c0) / 2\n\n    #Bob has c2 apples more than Adam and Jackie together do\n    bob_apples = adam_apples + jackie_apples + c2\n\n    return bob_apples", "mapping": {"c0": 4.0, "c1": 14.0, "c2": 6.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in some cups of flour. If she still needs c2 more cups of flour than sugarHow many more cups of flour does she need to add?", "answer": [21.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2, cups_of_flour_added):\n    #the recipe calls for c0 cups of flour and c1 cups of sugar\n    cups_of_flour_needed = c0\n\n    #Mary already put in some cups of flour\n    cups_of_flour_needed -= cups_of_flour_added\n\n    #She still needs c2 more cups of flour than sugar\n    cups_of_sugar_needed = c1\n    cups_of_flour_needed += c2 * cups_of_sugar_needed\n\n    #Calculate how many more cups of flour she needs to add\n    more_cups_of_flour_needed = cups_of_flour_needed - cups_of_flour_added\n\n    return more_cups_of_flour_needed", "mapping": {"c0": 6.0, "c1": 13.0, "c2": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. c0 bird families flew away for the winter from near a mountain. If there were c1 bird families living near the mountain initiallyHow many bird families were left near the mountain?", "answer": [14.0], "response": "def bird_families_left(c0, c1):\n    #c0 bird families flew away for the winter\n    flew_away = c0\n\n    #c1 bird families were living near the mountain initially\n    initially = c1\n\n    #The number of bird families left near the mountain can be calculated by subtracting the number of bird families that flew away from the initial number of bird families\n    left = initially - flew_away\n\n    return left", "mapping": {"c0": 27.0, "c1": 41.0}}
{"question": "Jake has c0 fewer peaches than Steven. Steven has c1 more peaches than Jill. If Jill has c2 peachesHow many more peaches does Jill have than Jake?", "answer": [1.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Jill has c2 peaches\n    jill_peaches = c2\n\n    #Steven has c1 more peaches than Jill\n    steven_peaches = jill_peaches + c1\n\n    #Jake has c0 fewer peaches than Steven\n    jake_peaches = steven_peaches - c0\n\n    #The difference between Jill's and Jake's peaches can be calculated by subtracting Jake's peaches from Jill's peaches\n    difference = jill_peaches - jake_peaches\n\n    return difference", "mapping": {"c0": 16.0, "c1": 15.0, "c2": 12.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long. If there are a total of c2 pages in the bookHow many pages are in the second chapter?", "answer": [33.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #there are c0 chapters in the book\n    chapters = c0\n\n    #the first chapter is c1 pages long\n    first_chapter = c1\n\n    #there are c2 pages in the book in total\n    total_pages = c2\n\n    #To find out how many pages are in the second chapter, we need to subtract the number of pages in the first chapter from the total number of pages, and then divide the result by the number of remaining chapters\n    remaining_pages = total_pages - first_chapter\n    remaining_chapters = chapters - 1\n    pages_per_chapter = remaining_pages / remaining_chapters\n\n    #The result is the number of pages per chapter, which is the same for all chapters except the first one\n    return pages_per_chapter", "mapping": {"c0": 2.0, "c1": 60.0, "c2": 93.0}}
{"question": "Paul got a box of some crayons for his birthday. During the school year he gave c0 crayons to his friends while he lost c1 crayons. If he only had c2 crayons leftHow many crayons did he get for his birthday?", "answer": [1453.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Paul got a box of crayons for his birthday\n    #Let's call the number of crayons he got \"x\"\n    x = 0\n\n    #During the school year he gave c0 crayons to his friends\n    #So he had x - c0 crayons left\n    left_after_giving = x - c0\n\n    #He also lost c1 crayons\n    #So he had left_after_giving - c1 crayons left\n    left_after_losing = left_after_giving - c1\n\n    #If he only had c2 crayons left, then left_after_losing must be equal to c2\n    #So we can solve for x\n    x = left_after_losing + c2\n\n    return x", "mapping": {"c0": 563.0, "c1": 558.0, "c2": 332.0}}
{"question": "At the stop c0 more people got on the bus. Initially there were c1 people on the bus.How many people are there on the bus now?", "answer": [17.0], "response": "def Problem(c0, c1):\n    #initially there were c1 people on the bus\n    people_before = c1\n\n    #c0 more people got on the bus\n    got_on = c0\n\n    #The number of people on the bus now can be calculated by adding the number of people who got on the bus to the initial number of people\n    people_now = people_before + got_on\n\n    return people_now", "mapping": {"c0": 13.0, "c1": 4.0}}
{"question": "Julia played tag with some kids on monday. She played tag with c0 kids on tuesday. If she played with a total of c1 kidsHow many kids did she play with on monday?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with some kids on Monday\n    played_on_monday = c0\n\n    #She played tag with c0 kids on Tuesday\n    played_on_tuesday = c1 - c0\n\n    #The total number of kids she played with is c1\n    total_played = c1\n\n    #The number of kids she played with on Monday can be calculated by subtracting the number of kids she played with on Tuesday from the total number of kids she played with\n    played_on_monday = total_played - played_on_tuesday\n\n    return played_on_monday", "mapping": {"c0": 14.0, "c1": 16.0}}
{"question": "Baker's friend bought c0 cakes from him. If he had made c1 cakes initiallyHow many cakes would baker still have?", "answer": [32.0], "response": "def Problem(c0, c1):\n    #baker initially made c1 cakes\n    initial_cakes = c1\n\n    #baker's friend bought c0 cakes from him\n    bought_cakes = c0\n\n    #The number of cakes baker still has can be calculated by subtracting the number of cakes bought by his friend from the initial number of cakes he made\n    remaining_cakes = initial_cakes - bought_cakes\n\n    return remaining_cakes", "mapping": {"c0": 137.0, "c1": 169.0}}
{"question": "Jerry had c0 action figures and c1 books on a shelf in his room. Later he added c2 more action figures to the shelf.How many more action figures than books were on his shelf?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Jerry had c0 action figures and c1 books on a shelf in his room\n    action_figures = c0\n    books = c1\n\n    #Later he added c2 more action figures to the shelf\n    added_figures = c2\n\n    #The total number of action figures on the shelf now is the sum of the original number of action figures and the added ones\n    total_figures = action_figures + added_figures\n\n    #The difference between the total number of action figures and the number of books is the number of more action figures than books on the shelf\n    more_figures_than_books = total_figures - books\n\n    return more_figures_than_books", "mapping": {"c0": 5.0, "c1": 9.0, "c2": 7.0}}
{"question": "For c0 weeks of harvest Lewis earns a total of $ 133.How much money does he earn each week?", "answer": [7.0], "response": "def Problem(c0, total_earnings):\n    #calculate the amount earned per week by dividing the total earnings by the number of weeks\n    earnings_per_week = total_earnings / c0\n\n    return earnings_per_week", "mapping": {"c0": 19.0}}
{"question": "Paul had some books. After selling c0 in a garage sale he had c1 left.How many books did he have at the start?", "answer": [242.0], "response": "def Problem(c0, c1):\n    #Paul had c0 books at the start\n    books_start = c0\n\n    #After selling some books, he had c1 left\n    books_left = c1\n\n    #The number of books he had at the start can be calculated by adding the number of books he sold to the number of books he had left\n    books_before_sale = books_left + books_start - c0\n\n    return books_before_sale", "mapping": {"c0": 137.0, "c1": 105.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Over the weekend Fred delivered newspapers earning c2 dollars and washed cars earning c3 dollars.How much money did Fred earn over the weekend?", "answer": [90.0], "response": "def Problem(c0, c1, c2, c3):\n    #Fred had c0 dollars last week\n    fred_before = c0\n\n    #Fred earned c2 dollars delivering newspapers and c3 dollars washing cars\n    fred_earned = c2 + c3\n\n    #The total amount of money Fred has now can be calculated by adding his earnings to his original amount\n    fred_after = fred_before + fred_earned\n\n    #The amount of money Fred earned over the weekend can be calculated by subtracting his original amount from his total amount after earning\n    fred_weekend_earnings = fred_after - fred_before\n\n    return fred_weekend_earnings", "mapping": {"c0": 33.0, "c1": 95.0, "c2": 16.0, "c3": 74.0}}
{"question": "If you have c0 cookies in total and c1 bags having equal number of cookiesHow many cookies does each bag have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #there are c0 cookies in total\n    total_cookies = c0\n\n    #there are c1 bags with equal number of cookies\n    num_bags = c1\n\n    #The number of cookies in each bag can be calculated by dividing the total number of cookies by the number of bags\n    cookies_per_bag = total_cookies / num_bags\n\n    return cookies_per_bag", "mapping": {"c0": 14.0, "c1": 7.0}}
{"question": "Matthew gave equal numbers of crackers to his c0 friends. If he had c1 crackersHow many crackers did each person eat?", "answer": [2.0], "response": "def crackers_per_person(c0, c1):\n    # Matthew gave equal numbers of crackers to his c0 friends\n    num_friends = c0\n\n    # Matthew had c1 crackers\n    num_crackers = c1\n\n    # Each person ate the same number of crackers, so divide the total number of crackers by the number of friends\n    crackers_per_person = num_crackers / num_friends\n\n    return crackers_per_person", "mapping": {"c0": 18.0, "c1": 36.0}}
{"question": "Kelly has c0 nintendo games. She found c1 more nintendo games.How many does she need to give away so that she will have c2 games left?", "answer": [105.0], "response": "def Problem(c0, c1, c2):\n    #Kelly has c0 nintendo games\n    games_before = c0\n\n    #She found c1 more nintendo games\n    found = c1\n\n    #She needs to give away some games to have c2 games left\n    games_left = c2\n\n    #The number of games she needs to give away can be calculated by subtracting the number of games left from the sum of the original number of games and the number of games she found\n    to_give_away = games_before + found - games_left\n\n    return to_give_away", "mapping": {"c0": 80.0, "c1": 31.0, "c2": 6.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies do you still have to watch?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of movies already watched\n    movies_watched = c3\n\n    #calculate the total number of movies in the series\n    total_movies = c1\n\n    #calculate the number of movies left to watch\n    movies_left = total_movies - movies_watched\n\n    return movies_left", "mapping": {"c0": 4.0, "c1": 17.0, "c2": 19.0, "c3": 7.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many more sacks of unripe oranges than ripe oranges are harvested per day?", "answer": [69.0], "response": "def Problem(c0, c1):\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c0\n\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c1\n\n    #calculate the difference between the number of unripe oranges and ripe oranges harvested per day\n    difference = unripe_oranges - ripe_oranges\n\n    return difference", "mapping": {"c0": 5.0, "c1": 74.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 rent every weekHow much money does he pay as rent during the harvest season?", "answer": [527292.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Lewis earns c0 every week during the harvest season\n    weekly_earnings = c0\n\n    #The harvest season lasts for c1 weeks\n    harvest_weeks = c1\n\n    #Lewis has to pay c2 rent every week\n    weekly_rent = c2\n\n    #The total amount of rent paid during the harvest season can be calculated by multiplying the weekly rent by the number of weeks\n    total_rent = weekly_rent * harvest_weeks\n\n    return total_rent", "mapping": {"c0": 368.0, "c1": 1359.0, "c2": 388.0}}
{"question": "For the walls of the house he would use c0 nails in all to secure large planks of wood. If each plank needs c1 pieces of nails to be secured and an additional c2 nails were used.How many planks does John need for the house wall?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #total number of nails needed for the wall\n    total_nails = c0 + c2\n\n    #number of planks needed can be calculated by dividing the total number of nails by the number of nails needed for each plank\n    planks_needed = total_nails // c1\n\n    return planks_needed", "mapping": {"c0": 11.0, "c1": 3.0, "c2": 8.0}}
{"question": "c0 red peaches and c1 green peaches are in the basket.How many more red peaches than green peaches are in the basket?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #number of red peaches in the basket\n    red_peaches = c0\n\n    #number of green peaches in the basket\n    green_peaches = c1\n\n    #calculate the difference between the number of red and green peaches\n    difference = red_peaches - green_peaches\n\n    return difference", "mapping": {"c0": 17.0, "c1": 16.0}}
{"question": "Because of the decision Sofia asked the students to suggest specific types of food. If c0 students suggested adding mashed potatoes c1 suggested adding bacon to the menu and c2 suggested adding tomatoesHow many students participated in the suggestion of new food items?", "answer": [826.0], "response": "def Problem(c0, c1, c2):\n    #the number of students who suggested mashed potatoes is c0\n    mashed_potatoes = c0\n\n    #the number of students who suggested bacon is c1\n    bacon = c1\n\n    #the number of students who suggested tomatoes is c2\n    tomatoes = c2\n\n    #The total number of students who participated in the suggestion can be calculated by adding the number of students who suggested each food item\n    total_students = mashed_potatoes + bacon + tomatoes\n\n    return total_students", "mapping": {"c0": 324.0, "c1": 374.0, "c2": 128.0}}
{"question": "During summer break c0 kids from Lawrence county go to camp and the other c1 kids stay home.How many more kids stayed home compared to those who went to the camp?", "answer": [574664.0], "response": "def Problem(c0, c1):\n    #c0 kids go to camp\n    campers = c0\n\n    #c1 kids stay home\n    stay_home = c1\n\n    #The difference between the number of kids who stayed home and those who went to camp can be calculated by subtracting the number of campers from the number of kids who stayed home\n    difference = stay_home - campers\n\n    return difference", "mapping": {"c0": 202958.0, "c1": 777622.0}}
{"question": "c0 birds and c1 storks were sitting on the fence. c2 more storks came to join them.How many more birds than storks are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of birds on the fence\n    birds = c0 + c1\n\n    #calculate the total number of storks on the fence after c2 more storks join\n    storks = c1 + c2\n\n    #calculate the difference between the number of birds and storks on the fence\n    difference = birds - storks\n\n    return difference", "mapping": {"c0": 6.0, "c1": 3.0, "c2": 2.0}}
{"question": "There are c0 different books and c1 different movies in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books do you still have to read?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books and movies already read\n    books_read = c2\n    movies_watched = c3\n\n    #calculate the number of books and movies in the series\n    total_books = c0\n    total_movies = c1\n\n    #calculate the number of books left to read\n    books_left = total_books - books_read\n\n    return books_left", "mapping": {"c0": 22.0, "c1": 10.0, "c2": 12.0, "c3": 56.0}}
{"question": "There were c0 people on the bus. At the next stop c1 more people got on the bus. Each bus can not have more than c2 people.How many people are there on the bus now?", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 people on the bus\n    people_before = c0\n\n    #c1 more people got on the bus at the next stop\n    people_added = c1\n\n    #the maximum number of people the bus can hold is c2\n    max_capacity = c2\n\n    #calculate the number of people on the bus after the new passengers got on\n    people_after = min(people_before + people_added, max_capacity)\n\n    return people_after", "mapping": {"c0": 12.0, "c1": 4.0, "c2": 36.0}}
{"question": "A grocery store had c0 bottles of regular soda, c1 bottles of diet soda and c2 bottles of lite soda.How many bottles did they have total?", "answer": [110.0], "response": "def total_bottles(c0, c1, c2):\n    #calculate the total number of bottles by adding the number of bottles of each type\n    total = c0 + c1 + c2\n    return total", "mapping": {"c0": 57.0, "c1": 26.0, "c2": 27.0}}
{"question": "Because of the decision Sofia asked c0 students to suggest specific types of food. c1 students suggested adding bacon while others suggested adding mashed potatoes to the menu.How many students suggested mashed potatoes?", "answer": [24.0], "response": "def Problem(c0, c1):\n    #c0 students were asked to suggest specific types of food\n    total_students = c0\n\n    #c1 students suggested adding bacon\n    bacon_suggesters = c1\n\n    #The number of students who suggested mashed potatoes can be calculated by subtracting the number of students who suggested bacon from the total number of students who were asked to suggest food\n    mashed_potatoes_suggesters = total_students - bacon_suggesters\n\n    return mashed_potatoes_suggesters", "mapping": {"c0": 288.0, "c1": 264.0}}
{"question": "Edward spent $ c0. Then he spent $ c1 more. Now he has $ 17.How much did Edward have before he spent his money?", "answer": [34.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars\n    spent1 = c0\n\n    #Then he spent c1 more dollars\n    spent2 = c1\n\n    #Now he has 17 dollars\n    remaining = 17\n\n    #The amount of money Edward had before he spent any money can be calculated by adding the two amounts he spent and the remaining amount he has now to the original amount he had\n    original_amount = spent1 + spent2 + remaining\n\n    return original_amount", "mapping": {"c0": 9.0, "c1": 8.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are c0 bird families living near the mountain. If c1 bird families flew away to africa and c2 bird families flew away to asiaHow many bird families were left near the mountain?", "answer": [25.0], "response": "def remaining_bird_families(c0, c1, c2):\n    #calculate the total number of bird families that flew away\n    flew_away = c1 + c2\n\n    #calculate the number of bird families left near the mountain\n    remaining = c0 - flew_away\n\n    return remaining", "mapping": {"c0": 85.0, "c1": 23.0, "c2": 37.0}}
{"question": "In a school there are c0 girls and c1 boys. c2 more girls joined the school.How many girls are there in the school now?", "answer": [946.0], "response": "def Problem(c0, c1, c2):\n    #there are originally c0 girls in the school\n    girls_before = c0\n\n    #there are c1 boys in the school\n    boys = c1\n\n    #c2 more girls joined the school\n    girls_joined = c2\n\n    #The number of girls in the school now can be calculated by adding the original number of girls and the number of girls who joined\n    girls_now = girls_before + girls_joined\n\n    return girls_now", "mapping": {"c0": 902.0, "c1": 811.0, "c2": 44.0}}
{"question": "Dan has $ c0. He bought a chocolate for $ c1 and a candy bar for $ 2.How much money did he spend to buy chocolate than he did to buy candy bar?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #Dan has c0 dollars\n    money_before = c0\n\n    #Dan bought a chocolate for c1 dollars\n    chocolate_cost = c1\n\n    #Dan bought a candy bar for 2 dollars\n    candy_cost = 2\n\n    #The difference in cost between the chocolate and candy bar can be calculated by subtracting the cost of the candy bar from the cost of the chocolate\n    difference = chocolate_cost - candy_cost\n\n    return difference", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "At the arcade Dave had won c0 tickets. If he used c1 to buy some toys and c2 more to buy some clothesHow many tickets did Dave have left?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #Dave had originally won c0 tickets\n    tickets_before = c0\n\n    #Dave used c1 tickets to buy some toys\n    toys_cost = c1\n\n    #Dave used c2 more tickets to buy some clothes\n    clothes_cost = c2\n\n    #The number of tickets Dave has left can be calculated by subtracting the total cost of toys and clothes from the original number of tickets\n    tickets_left = tickets_before - (toys_cost + clothes_cost)\n\n    return tickets_left", "mapping": {"c0": 18.0, "c1": 5.0, "c2": 11.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school with each classroom having the same number of students. There are c2 seats on each school bus.How many students are in each class?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 classrooms in the school\n    classrooms = c0\n\n    #there are c1 students in the school\n    students = c1\n\n    #there are c2 seats on each school bus\n    seats_per_bus = c2\n\n    #The number of students in each class can be calculated by dividing the total number of students by the number of classrooms and then rounding up to the nearest whole number\n    students_per_class = math.ceil(students/classrooms)\n\n    return students_per_class", "mapping": {"c0": 24.0, "c1": 120.0, "c2": 84.0}}
{"question": "He then went to see the oranges being harvested. He found out that the harvest will go on for c0 days.How many sacks do they harvest per day if they harvested a total of c1 sacks of oranges?", "answer": [14.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #the harvest will go on for c0 days\n    days = c0\n\n    #they harvested a total of c1 sacks of oranges\n    total_sacks = c1\n\n    #The number of sacks harvested per day can be calculated by dividing the total number of sacks by the number of days\n    sacks_per_day = total_sacks / days\n\n    return sacks_per_day", "mapping": {"c0": 4.0, "c1": 56.0}}
{"question": "There were c0 roses in the vase. Jessica threw away c1 roses from the vase and cut some more new roses from her flower garden to put in the vase. There are now c2 roses in the vase.How many more roses did she throw away than those she cut from her garden?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #there were originally c0 roses in the vase\n    roses_before = c0\n\n    #Jessica threw away c1 roses from the vase\n    roses_thrown = c1\n\n    #She cut some more new roses from her flower garden to put in the vase\n    roses_cut = c2 - roses_before + roses_thrown\n\n    #The number of roses she threw away more than those she cut from her garden can be calculated by subtracting the number of roses cut from the number of roses thrown away\n    difference = roses_thrown - roses_cut\n\n    return difference", "mapping": {"c0": 21.0, "c1": 34.0, "c2": 15.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Allan then bought c2 more balloons at the park.How many more balloons did Jake have than Allan in the park?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons and Jake brought c1 balloons to the park\n    allan_balloons = c0\n    jake_balloons = c1\n\n    #Allan then bought c2 more balloons at the park\n    allan_balloons += c2\n\n    #Calculate how many more balloons Jake has than Allan in the park\n    difference = jake_balloons - allan_balloons\n\n    return difference", "mapping": {"c0": 2.0, "c1": 6.0, "c2": 3.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many sacks of oranges will they have after c2 days of harvest?", "answer": [2080.0], "response": "def Problem(c0, c1, c2):\n    #they harvest c0 sacks of ripe oranges per day\n    ripe_oranges = c0\n\n    #they harvest c1 sacks of unripe oranges per day\n    unripe_oranges = c1\n\n    #they harvest for c2 days\n    days = c2\n\n    #total number of ripe oranges after c2 days of harvest\n    total_ripe_oranges = ripe_oranges * days\n\n    #total number of unripe oranges after c2 days of harvest\n    total_unripe_oranges = unripe_oranges * days\n\n    #total number of oranges after c2 days of harvest\n    total_oranges = total_ripe_oranges + total_unripe_oranges\n\n    return total_oranges", "mapping": {"c0": 28.0, "c1": 52.0, "c2": 26.0}}
{"question": "Together Adam and Jackie have c0 apples. He has c1 apples more than adam and jackie together do.How many apples does he have?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Adam and Jackie have c0 apples together\n    apples_together = c0\n\n    #He has c1 apples more than Adam and Jackie together do\n    he_has = c1\n\n    #Let's assume Adam has x apples and Jackie has y apples\n    #Then we know that x + y = apples_together\n    #And he_has = x + y + he_has\n    #We can solve for x and y using these two equations\n    #x = (apples_together + he_has) / 2\n    #y = (apples_together + he_has) / 2\n    #So he has (apples_together + he_has) apples\n    he_has_total = apples_together + he_has\n\n    return he_has_total", "mapping": {"c0": 6.0, "c1": 4.0}}
{"question": "After a typhoon, c0 trees in Haley's backyard died. If she had grown c1 trees initiallyHow many more trees survived the typhoon than those that died?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #initially, there were c1 trees\n    initial_trees = c1\n\n    #after the typhoon, c0 trees died\n    trees_died = c0\n\n    #the number of trees that survived the typhoon can be calculated by subtracting the number of trees that died from the initial number of trees\n    trees_survived = initial_trees - trees_died\n\n    #the number of trees that died can be calculated by subtracting the number of trees that survived from the initial number of trees\n    trees_died = initial_trees - trees_survived\n\n    #the difference between the number of trees that survived and the number of trees that died is the answer\n    difference = trees_survived - trees_died\n\n    return difference", "mapping": {"c0": 2.0, "c1": 11.0}}
{"question": "Allan brought c0 balloons and Jake brought c1 balloons to the park. Jake then bought c2 more balloons at the park.How many balloons did Jake bring to the park?", "answer": [9.0], "response": "def Problem(c0, c1, c2):\n    #Allan brought c0 balloons and Jake brought c1 balloons to the park\n    jake_before = c1\n\n    #Jake then bought c2 more balloons at the park\n    jake_after = jake_before + c2\n\n    #The total number of balloons Jake brought to the park can be calculated by adding the number of balloons he brought originally with the number he bought at the park\n    jake_total = jake_before + c2\n\n    return jake_total", "mapping": {"c0": 5.0, "c1": 6.0, "c2": 3.0}}
{"question": "The Razorback shop makes $ c0 dollars off each t-shirt and $ c1 off each jersey. During the Arkansas and Texas tech game they sold c2 t-shirts and c3 jerseys.How much money did they make from selling the t-shirts?", "answer": [11346.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total revenue from selling t-shirts\n    tshirt_revenue = c0 * c2\n\n    return tshirt_revenue", "mapping": {"c0": 62.0, "c1": 99.0, "c2": 183.0, "c3": 31.0}}
{"question": "David did c0 more push-ups than Zachary in gym class today. If David did c1 push-upsHow many push-ups did Zachary do?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #David did c1 push-ups\n    david_pushups = c1\n\n    #David did c0 more push-ups than Zachary\n    zachary_pushups = david_pushups - c0\n\n    return zachary_pushups", "mapping": {"c0": 30.0, "c1": 37.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much more did his strawberries weigh than his dad's?", "answer": [13.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #His dad's strawberries weigh can be calculated by subtracting Marco's strawberries weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    #The difference in weight can be calculated by subtracting his dad's strawberries weight from Marco's strawberries weight\n    difference = marco_weight - dad_weight\n\n    return difference", "mapping": {"c0": 30.0, "c1": 47.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 crayons and c2 pencils in each row.How many crayons does she have?", "answer": [96.0], "response": "def count_crayons(c0, c1, c2):\n    #calculate the total number of rows\n    total_rows = c0\n\n    #calculate the total number of crayons\n    total_crayons = total_rows * c1\n\n    return total_crayons", "mapping": {"c0": 16.0, "c1": 6.0, "c2": 21.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the morning and evening?", "answer": [11.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning and c2 emails in the evening\n    morning_emails = c0\n    evening_emails = c2\n\n    #We don't need to calculate the number of emails in the afternoon\n    #We can simply return the number of emails in the morning and evening\n    return morning_emails, evening_emails", "mapping": {"c0": 3.0, "c1": 4.0, "c2": 8.0}}
{"question": "Jesse's room is c0 feet long. If she needs a carpet of size c1 square feetWhat is the width of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Jesse's room is c0 feet long\n    length = c0\n\n    #Jesse needs a carpet of size c1 square feet\n    area = c1\n\n    #The width of Jesse's room can be calculated by dividing the area of the carpet by the length of the room\n    width = area/length\n\n    return width", "mapping": {"c0": 7.0, "c1": 14.0}}
{"question": "Debby bought c0 water bottles when they were on sale. If she drank c1 bottles a day for c2 days.How many bottles does she have left?", "answer": [99.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Debby bought c0 water bottles\n    bottles_before = c0\n\n    #She drank c1 bottles a day for c2 days\n    bottles_drunk = c1 * c2\n\n    #The number of bottles she has left can be calculated by subtracting the number of bottles she drank from the original number of bottles\n    bottles_left = bottles_before - bottles_drunk\n\n    return bottles_left", "mapping": {"c0": 264.0, "c1": 15.0, "c2": 11.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the afternoon than in the evening?", "answer": [24.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    #c1 campers went rowing in the afternoon\n    #c2 campers went rowing in the evening\n\n    #The number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the evening from the number of campers who went rowing in the afternoon\n    afternoon_rowers = c1\n    evening_rowers = c2\n    difference = afternoon_rowers - evening_rowers\n\n    return difference", "mapping": {"c0": 33.0, "c1": 34.0, "c2": 10.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many books and magazines does he have in total?", "answer": [2436.0], "response": "def total_books_and_magazines(c0, c1, c2):\n    #calculate the total number of books by multiplying the number of books in each shelf by the number of shelves\n    total_books = c0 * c2\n\n    #calculate the total number of magazines by multiplying the number of magazines in each shelf by the number of shelves\n    total_magazines = c1 * c2\n\n    #calculate the total number of books and magazines by adding the total number of books and the total number of magazines\n    total = total_books + total_magazines\n\n    return total", "mapping": {"c0": 23.0, "c1": 61.0, "c2": 29.0}}
{"question": "Faye was placing her pencils and crayons into c0 rows with c1 pencils and c2 crayons in each row.How many crayons does she have?", "answer": [210.0], "response": "def count_crayons(c0, c1, c2):\n    #calculate the total number of pencils\n    total_pencils = c0 * c1\n\n    #calculate the total number of crayons\n    total_crayons = c0 * c2\n\n    #subtract the total number of pencils from the total number of items to get the total number of crayons\n    crayons = total_crayons - total_pencils\n\n    return crayons", "mapping": {"c0": 7.0, "c1": 36.0, "c2": 30.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many pastries would baker still have?", "answer": [45.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate how many pastries baker still has by subtracting the number of pastries sold from the number of pastries made\n    pastries_left = pastries_made - pastries_sold\n\n    return pastries_left", "mapping": {"c0": 7.0, "c1": 148.0, "c2": 15.0, "c3": 103.0}}
{"question": "Robin cut off c0 inches of his hair. If his hair was c1 inches long initiallyHow long is his hair now?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Robin's hair was initially c1 inches long\n    initial_length = c1\n\n    #Robin cut off c0 inches of his hair\n    cut_off = c0\n\n    #The length of Robin's hair now can be calculated by subtracting the amount he cut off from the initial length\n    current_length = initial_length - cut_off\n\n    return current_length", "mapping": {"c0": 13.0, "c1": 14.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables, each having the same number of chairs. If there are a total of c1 chairs in the backyardHow many chairs are there for each table?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #there are c0 sets of tables\n    num_tables = c0\n\n    #there are c1 chairs in total\n    num_chairs = c1\n\n    #The number of chairs per table can be calculated by dividing the total number of chairs by the number of tables\n    chairs_per_table = num_chairs / num_tables\n\n    return chairs_per_table", "mapping": {"c0": 2.0, "c1": 12.0}}
{"question": "Debby bought c0 water bottles and c1 soda bottles when they were on sale. If she drank c2 water bottles and c3 soda bottles a dayHow many days would the water bottles last?", "answer": [22.0], "response": "def Problem(c0, c1, c2, c3):\n    #Debby bought c0 water bottles and c1 soda bottles\n    water_bottles = c0\n\n    #Debby drank c2 water bottles and c3 soda bottles a day\n    water_per_day = c2\n\n    #Calculate how many days the water bottles would last\n    days = water_bottles // water_per_day\n\n    return days", "mapping": {"c0": 88.0, "c1": 13.0, "c2": 4.0, "c3": 87.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Jason washed cars over the weekend and now has c2 dollars.How much money did Jason make washing cars?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Jason had c1 dollars last week\n    jason_before = c1\n\n    #Now Jason has c2 dollars\n    jason_after = c2\n\n    #The amount of money Jason made washing cars can be calculated by subtracting his initial amount from his current amount\n    jason_made = jason_after - jason_before\n\n    return jason_made", "mapping": {"c0": 60.0, "c1": 19.0, "c2": 33.0}}
{"question": "Paul sold some books in a garage sale leaving him with c0 books. If he had c1 books initiallyHow many books did he sell?", "answer": [109.0], "response": "def Problem(c0, c1):\n    #Paul had c1 books initially\n    initial_books = c1\n\n    #Paul sold some books and now has c0 books\n    remaining_books = c0\n\n    #The number of books Paul sold can be calculated by subtracting the remaining books from the initial books\n    sold_books = initial_books - remaining_books\n\n    return sold_books", "mapping": {"c0": 27.0, "c1": 136.0}}
{"question": "Next on his checklist is wax to stick the feathers together. If the feathers require c0 g of wax and right now he has c1 gHow many more grams of wax does he need?", "answer": [146.0], "response": "def Problem(c0, c1):\n    #he needs c0 grams of wax\n    wax_needed = c0\n\n    #he currently has c1 grams of wax\n    wax_have = c1\n\n    #the additional amount of wax he needs can be calculated by subtracting the amount he has from the amount he needs\n    wax_needed_more = wax_needed - wax_have\n\n    return wax_needed_more", "mapping": {"c0": 166.0, "c1": 20.0}}
{"question": "The bananas in Philip's collection are organized into c0 groups. If there are a total of c1 bananas in Philip's banana collectionHow big is each group?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there are c0 groups of bananas in Philip's collection\n    groups = c0\n\n    #there are c1 bananas in total in Philip's collection\n    total_bananas = c1\n\n    #The size of each group can be calculated by dividing the total number of bananas by the number of groups\n    size_of_group = total_bananas / groups\n\n    return size_of_group", "mapping": {"c0": 196.0, "c1": 392.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches and the frog jumped c1 inches.How much farther did the frog jump than the grasshopper?", "answer": [3.0], "response": "def jumping_contest(c0, c1):\n    #calculate the difference between the distances jumped by the frog and the grasshopper\n    difference = c1 - c0\n    \n    return difference", "mapping": {"c0": 9.0, "c1": 12.0}}
{"question": "In Haley's class c0 boys love to play marbles and c1 boys love to play cards. If Haley has c2 marblesHow many will each of the boys receive?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #total number of boys in the class\n    total_boys = c0 + c1\n\n    #number of marbles each boy will receive\n    marbles_per_boy = c2 / total_boys\n\n    return marbles_per_boy", "mapping": {"c0": 13.0, "c1": 50.0, "c2": 26.0}}
{"question": "Steven has c0 peaches. Jake has c1 fewer peaches than Steven who has c2 more peaches than Jill.How many peaches does Jill have?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Steven has c0 peaches\n    steven_peaches = c0\n\n    #Jake has c1 fewer peaches than Steven\n    jake_peaches = steven_peaches - c1\n\n    #Steven has c2 more peaches than Jill\n    jill_peaches = steven_peaches - c2\n\n    #We need to find out how many peaches Jill has\n    return jill_peaches\n\n#We can call the function with some example values to test it\nprint(Problem(10, 2, 5)) #Expected output: 13 (Steven has 10, Jake has 8, Steven has 5 more than Jill who has 10-5=5)", "mapping": {"c0": 18.0, "c1": 12.0, "c2": 8.0}}
{"question": "In Haley's class c0 are boys who love to play marbles. If Haley gives c1 marbles to each boyHow many marbles did she have?", "answer": [99.0], "response": "def Problem(c0, c1):\n    #there are c0 boys in the class who love to play marbles\n    boys = c0\n\n    #Haley gives c1 marbles to each boy\n    marbles_per_boy = c1\n\n    #The total number of marbles Haley gave can be calculated by multiplying the number of boys by the number of marbles each boy received\n    total_marbles = boys * marbles_per_boy\n\n    return total_marbles", "mapping": {"c0": 11.0, "c1": 9.0}}
{"question": "Ed had c0 more marbles than Doug. Ed lost c1 of his marbles at the playground. If Ed had c2 marblesHow many more marbles did Ed have than Doug then?", "answer": [9.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Ed had c0 more marbles than Doug\n    ed_marbles = c0 + doug_marbles\n\n    #Ed lost c1 of his marbles at the playground\n    ed_marbles -= c1\n\n    #If Ed had c2 marbles, how many more marbles did Ed have than Doug then?\n    doug_marbles = ed_marbles - c2\n\n    return doug_marbles\n\n#Note: We need to know the number of marbles Doug had initially to calculate the number of marbles Ed had more than Doug. This information is not provided in the problem statement.", "mapping": {"c0": 30.0, "c1": 21.0, "c2": 91.0}}
{"question": "A farmer had c0 green tomatoes and c1 red tomatoes in his garden. If he picked c2 tomatoesHow many tomatoes are left?", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #the farmer had c0 green tomatoes and c1 red tomatoes\n    total_tomatoes = c0 + c1\n\n    #the farmer picked c2 tomatoes\n    picked_tomatoes = c2\n\n    #the number of tomatoes left can be calculated by subtracting the number of picked tomatoes from the total number of tomatoes\n    tomatoes_left = total_tomatoes - picked_tomatoes\n\n    return tomatoes_left", "mapping": {"c0": 105.0, "c1": 71.0, "c2": 137.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. If he has to pay $ c2 taxHow much money will have at the end of the harvest season?", "answer": [3834.0], "response": "def harvest_money(c0, c1, c2):\n    #calculate the total earnings before tax\n    total_earnings = c0 * c1\n\n    #subtract the tax from the total earnings to get the final amount of money\n    final_money = total_earnings - c2\n\n    return final_money", "mapping": {"c0": 21.0, "c1": 216.0, "c2": 702.0}}
{"question": "Nell collects baseball cards. She had c0 cards while Jeff had c1 cards. She gave some of her cards to Jeff and now has c2 cards left.How many cards does Jeff have now?", "answer": [265.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #Nell had c0 cards\n    nell_cards = c0\n\n    #Jeff had c1 cards\n    jeff_cards = c1\n\n    #Nell gave some of her cards to Jeff, so she now has c2 cards left\n    nell_cards_left = c2\n\n    #The number of cards Jeff has now can be calculated by adding the cards he had before to the cards he received from Nell\n    jeff_cards_now = jeff_cards + (nell_cards - nell_cards_left)\n\n    return jeff_cards_now", "mapping": {"c0": 566.0, "c1": 234.0, "c2": 535.0}}
{"question": "Rebecca wants to split a collection of marbles into groups of c0. Rebecca has c1 eggs and c2 marbles.How many groups will be created?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of marbles and eggs\n    total = c1 * 12 + c2\n\n    #calculate the number of groups that can be created\n    groups = total // c0\n\n    return groups", "mapping": {"c0": 4.0, "c1": 10.0, "c2": 20.0}}
{"question": "Matthew had c0 crackers. He has c1 crackers left after he gave equal numbers of crackers to his c2 friends.How many crackers did Matthew give to his friends?", "answer": [8.0], "response": "def crackers_given(c0, c1, c2):\n    # Matthew had c0 crackers\n    crackers_before = c0\n\n    # Matthew has c1 crackers left after giving crackers to his friends\n    crackers_after = c1\n\n    # Matthew gave equal numbers of crackers to his c2 friends\n    friends = c2\n\n    # The total number of crackers given to friends can be calculated by subtracting the number of crackers left from the number of crackers before and dividing by the number of friends\n    crackers_given = (crackers_before - crackers_after) / friends\n\n    return crackers_given", "mapping": {"c0": 31.0, "c1": 23.0, "c2": 5.0}}
{"question": "An industrial machine can make c0 shirts a minute. It worked for c1 minutes yesterday and for c2 minutes today.How many shirts did machine make today?", "answer": [72.0], "response": "def Problem(c0, c1, c2):\n    #the machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #yesterday, the machine worked for c1 minutes\n    minutes_yesterday = c1\n\n    #today, the machine worked for c2 minutes\n    minutes_today = c2\n\n    #The number of shirts the machine made today can be calculated by multiplying the number of minutes today by the number of shirts the machine can make per minute\n    shirts_today = minutes_today * shirts_per_minute\n\n    return shirts_today", "mapping": {"c0": 6.0, "c1": 5.0, "c2": 12.0}}
{"question": "Marco and his dad went strawberry picking. Marco's strawberries weighed c0 pounds. If together their strawberries weighed c1 pounds.How much more did his dad's strawberries weigh than his?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Marco's strawberries weighed c0 pounds\n    marco_weight = c0\n\n    #Together their strawberries weighed c1 pounds\n    total_weight = c1\n\n    #His dad's strawberries weigh can be calculated by subtracting Marco's strawberries weight from the total weight\n    dad_weight = total_weight - marco_weight\n\n    return dad_weight", "mapping": {"c0": 10.0, "c1": 26.0}}
{"question": "Rachel picked c0 apples from her tree. If the tree had c1 apples initially.How many apples are still there on the tree?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #the tree initially had c1 apples\n    initial_apples = c1\n\n    #Rachel picked c0 apples from the tree\n    picked_apples = c0\n\n    #The number of apples still on the tree can be calculated by subtracting the number of picked apples from the initial number of apples\n    remaining_apples = initial_apples - picked_apples\n\n    return remaining_apples", "mapping": {"c0": 4.0, "c1": 7.0}}
{"question": "After making some pies, chef had c0 apples left. Initially he had c1 applesHow many apples did he use?", "answer": [41.0], "response": "def Problem(c0, c1):\n    #chef initially had c1 apples\n    initial_apples = c1\n\n    #chef now has c0 apples left\n    remaining_apples = c0\n\n    #The number of apples used can be calculated by subtracting the remaining apples from the initial apples\n    used_apples = initial_apples - remaining_apples\n\n    return used_apples", "mapping": {"c0": 2.0, "c1": 43.0}}
{"question": "Allan brought c0 balloons and c1 balls while Jake brought c2 balloons and c3 balls to the park.How many balloons did Allan and Jake have in the park?", "answer": [8.0], "response": "def Problem(c0, c1, c2, c3):\n    #Allan brought c0 balloons and c1 balls\n    allan_balloons = c0\n    allan_balls = c1\n\n    #Jake brought c2 balloons and c3 balls\n    jake_balloons = c2\n    jake_balls = c3\n\n    #The total number of balloons in the park is the sum of balloons brought by Allan and Jake\n    total_balloons = allan_balloons + jake_balloons\n\n    return total_balloons", "mapping": {"c0": 3.0, "c1": 20.0, "c2": 5.0, "c3": 59.0}}
{"question": "There were c0 dollars in Olivia's wallet. She collected c1 more dollars from an atm. After she visited a supermarket there were c2 dollars left.How much more money did she spend at the supermarket than she collected at the atm?", "answer": [39.0], "response": "def Problem(c0, c1, c2):\n    #Olivia had c0 dollars in her wallet\n    initial_money = c0\n\n    #She collected c1 more dollars from an atm\n    collected_money = c1\n\n    #After visiting the supermarket, she had c2 dollars left\n    remaining_money = c2\n\n    #The amount of money she spent at the supermarket can be calculated by subtracting the remaining money from the total money she had initially\n    spent_money = initial_money - remaining_money\n\n    #The difference between the money she spent at the supermarket and the money she collected from the atm is the answer\n    difference = spent_money - collected_money\n\n    return difference", "mapping": {"c0": 53.0, "c1": 91.0, "c2": 14.0}}
{"question": "Faye was placing some pencils equally into c0 rows. If she had c1 pencilsHow many pencils did she place in each row?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #Faye placed c1 pencils equally into c0 rows\n    pencils_per_row = c1 // c0\n\n    return pencils_per_row", "mapping": {"c0": 2.0, "c1": 6.0}}
{"question": "Julia played tag with c0 kids on monday. She played tag with some more kids on tuesday. If she played with a total of c1 kidsHow many kids did she play with on tuesday?", "answer": [10.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Julia played tag with c0 kids on Monday\n    kids_on_monday = c0\n\n    #She played with a total of c1 kids\n    total_kids = c1\n\n    #To find out how many kids she played with on Tuesday, we need to subtract the number of kids she played with on Monday from the total number of kids she played with\n    kids_on_tuesday = total_kids - kids_on_monday\n\n    return kids_on_tuesday", "mapping": {"c0": 5.0, "c1": 15.0}}
{"question": "Danny collects bottle caps. He threw away c0 of the old ones at the park while he found c1 bottle caps new ones. Now he has c2 bottle caps in his collection.How many more bottle caps did danny find at the park than those he threw away?", "answer": [44.0], "response": "def Problem(c0, c1, c2):\n    #Danny threw away c0 bottle caps\n    thrown_away = c0\n\n    #Danny found c1 new bottle caps\n    found = c1\n\n    #Danny now has c2 bottle caps in his collection\n    total = c2\n\n    #The difference between the number of new bottle caps found and the number of old ones thrown away is the answer\n    difference = found - thrown_away\n\n    return difference", "mapping": {"c0": 6.0, "c1": 50.0, "c2": 60.0}}
{"question": "Paco had c0 cookies. He gave c1 cookies to his friend and ate c2 cookies.How many cookies did Paco have left?", "answer": [12.0], "response": "def Problem(c0, c1, c2):\n    #Paco had c0 cookies\n    cookies_before = c0\n\n    #He gave c1 cookies to his friend\n    cookies_given = c1\n\n    #He also ate c2 cookies\n    cookies_eaten = c2\n\n    #The number of cookies Paco has left can be calculated by subtracting the number of cookies given and eaten from the original number of cookies\n    cookies_left = cookies_before - cookies_given - cookies_eaten\n\n    return cookies_left", "mapping": {"c0": 36.0, "c1": 14.0, "c2": 10.0}}
{"question": "They decided to hold the party in their backyard. If they have c0 sets of tables and each set has c1 chairsHow many more chairs than tables do they have?", "answer": [45.0], "response": "def Problem(c0, c1):\n    #there are c0 sets of tables\n    tables = c0\n\n    #each set of tables has c1 chairs\n    chairs_per_table = c1\n\n    #The total number of chairs can be calculated by multiplying the number of tables by the number of chairs per table\n    total_chairs = tables * chairs_per_table\n\n    #The difference between the number of chairs and the number of tables is the number of extra chairs\n    extra_chairs = total_chairs - tables\n\n    return extra_chairs", "mapping": {"c0": 5.0, "c1": 10.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Ron's height. Dean is c1 feet taller than Ron. If Ron stands at c2 feetHow deep was the water?", "answer": [208.0], "response": "def Problem(c0, c1, c2):\n    #Ron's height is c2 feet\n    ron_height = c2\n\n    #Dean is c1 feet taller than Ron\n    dean_height = ron_height + c1\n\n    #The depth of the water is c0 times Ron's height\n    water_depth = c0 * ron_height\n\n    return water_depth", "mapping": {"c0": 16.0, "c1": 9.0, "c2": 13.0}}
{"question": "A farmer had c0 tomatoes and c1 potatoes in his garden. If he picked c2 tomatoesHow many tomatoes and potatoes does he have left?", "answer": [136.0], "response": "def Problem(c0, c1, c2):\n    #the farmer had c0 tomatoes and c1 potatoes\n    tomatoes_before = c0\n    potatoes_before = c1\n\n    #the farmer picked c2 tomatoes\n    tomatoes_picked = c2\n\n    #the number of tomatoes and potatoes left can be calculated by subtracting the number of picked tomatoes from the original number of tomatoes and the original number of potatoes\n    tomatoes_left = tomatoes_before - tomatoes_picked\n    potatoes_left = potatoes_before\n\n    return tomatoes_left, potatoes_left", "mapping": {"c0": 177.0, "c1": 12.0, "c2": 53.0}}
{"question": "c0 red peaches, c1 yellow peaches and c2 green peaches are in the basket.How many more green peaches than red peaches are in the basket?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #number of red peaches\n    red_peaches = c0\n\n    #number of yellow peaches\n    yellow_peaches = c1\n\n    #number of green peaches\n    green_peaches = c2\n\n    #calculate the difference between the number of green and red peaches\n    difference = green_peaches - red_peaches\n\n    return difference", "mapping": {"c0": 7.0, "c1": 71.0, "c2": 8.0}}
{"question": "c0 campers went rowing in the morning. c1 campers went rowing in the afternoon.How many more campers went rowing in the afternoon than in the morning?", "answer": [9.0], "response": "def Problem(c0, c1):\n    #number of campers who went rowing in the morning\n    morning_campers = c0\n\n    #number of campers who went rowing in the afternoon\n    afternoon_campers = c1\n\n    #calculate the difference between the number of campers who went rowing in the afternoon and morning\n    difference = afternoon_campers - morning_campers\n\n    return difference", "mapping": {"c0": 52.0, "c1": 61.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 orchids and c3 roses in the vase.How many roses did she cut?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #there were originally c0 roses and c1 orchids in the vase\n    roses_before = c0\n    orchids_before = c1\n\n    #Jessica cut some more roses and orchids from her flower garden\n    roses_cut = c3 - roses_before\n    orchids_cut = c2 - orchids_before\n\n    #The number of roses she cut can be calculated by subtracting the original number of roses from the current number of roses\n    return roses_cut", "mapping": {"c0": 13.0, "c1": 84.0, "c2": 91.0, "c3": 14.0}}
{"question": "Debby bought some water bottles when they were on sale. She drank c0 bottles a day. If the bottles lasted for c1 daysHow many bottles had she bought?", "answer": [8066.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Debby drank c0 bottles a day\n    bottles_per_day = c0\n\n    #The bottles lasted for c1 days\n    days_lasted = c1\n\n    #The total number of bottles Debby bought can be calculated by multiplying the number of bottles she drank per day by the number of days the bottles lasted\n    total_bottles = bottles_per_day * days_lasted\n\n    return total_bottles", "mapping": {"c0": 109.0, "c1": 74.0}}
{"question": "Edward spent $ c0 to buy c1 books each book costing him the same amount of money. Now he has $ 12.How much did each book cost?", "answer": [3.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Edward spent c0 dollars to buy c1 books\n    total_spent = c0\n    num_books = c1\n\n    #Now he has $12\n    remaining_money = 12\n\n    #The cost of each book can be calculated by dividing the total amount spent by the number of books bought\n    cost_per_book = total_spent / num_books\n\n    return cost_per_book\n\n#Example usage:\nprint(Problem(24, 6)) #Output: 4.0 (each book costs $4)", "mapping": {"c0": 6.0, "c1": 2.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces does Robin have?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum and c1 packages of candy\n    gum_packages = c0\n    candy_packages = c1\n\n    #There are c2 pieces in each package\n    pieces_per_package = c2\n\n    #The total number of pieces Robin has can be calculated by multiplying the number of packages by the number of pieces per package\n    total_pieces = (gum_packages + candy_packages) * pieces_per_package\n\n    return total_pieces", "mapping": {"c0": 28.0, "c1": 14.0, "c2": 6.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more movies than books are there in the ' crazy silly school ' series?", "answer": [6.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of movies and books after reading/watching\n    movies_after = c0 + c3\n    books_after = c1 + c2\n\n    #calculate the difference between the number of movies and books\n    difference = movies_after - books_after\n\n    return difference", "mapping": {"c0": 17.0, "c1": 11.0, "c2": 13.0, "c3": 63.0}}
{"question": "Jack received c0 emails in the morning, c1 emails in the afternoon and c2 emails in the evening.How many emails did Jack receive in the morning and afternoon?", "answer": [13.0], "response": "def Problem(c0, c1, c2):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received c1 emails in the afternoon\n    afternoon_emails = c1\n\n    #Jack received c2 emails in the evening\n    evening_emails = c2\n\n    #The total number of emails Jack received in the morning and afternoon can be calculated by adding the number of morning emails and afternoon emails\n    total_emails = morning_emails + afternoon_emails\n\n    return total_emails", "mapping": {"c0": 5.0, "c1": 8.0, "c2": 72.0}}
{"question": "Randy uses c0 blocks to build a tower. If he had c1 blocksHow many blocks are left?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #Randy uses c0 blocks to build a tower\n    used_blocks = c0\n\n    #If he had c1 blocks, we need to subtract the used blocks from the total blocks to find out how many blocks are left\n    left_blocks = c1 - used_blocks\n\n    return left_blocks", "mapping": {"c0": 36.0, "c1": 59.0}}
{"question": "Marco and his dad went strawberry picking. Together their strawberries weighed c0 pounds. His dad's strawberries weighed c1 pounds.How much did marco's strawberries weigh?", "answer": [3.0], "response": "def Problem(c0, c1):\n    #the total weight of strawberries is c0 pounds\n    total_weight = c0\n\n    #his dad's strawberries weigh c1 pounds\n    dad_weight = c1\n\n    #Marco's strawberries weigh the difference between the total weight and his dad's strawberries\n    marco_weight = total_weight - dad_weight\n\n    return marco_weight", "mapping": {"c0": 20.0, "c1": 17.0}}
{"question": "Haley grew c0 trees in her backyard. After a typhoon c1 died. Then she grew c2 more trees.How many trees does she have left?", "answer": [10.0], "response": "def Problem(c0, c1, c2):\n    #Haley originally grew c0 trees\n    trees_before = c0\n\n    #After the typhoon, c1 trees died\n    trees_lost = c1\n\n    #Then she grew c2 more trees\n    trees_grown = c2\n\n    #The number of trees she has left can be calculated by subtracting the number of trees lost from the original number of trees and then adding the number of trees grown\n    trees_left = trees_before - trees_lost + trees_grown\n\n    return trees_left", "mapping": {"c0": 9.0, "c1": 4.0, "c2": 5.0}}
{"question": "Stray cats loved eating goldfish in the pond leaving c0 goldfish. Paige had raised c1 goldfish in the pond initially.How many goldfish disappeared?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Paige initially had c1 goldfish in the pond\n    initial_goldfish = c1\n\n    #Now there are c0 goldfish left in the pond\n    remaining_goldfish = c0\n\n    #The number of goldfish that disappeared can be calculated by subtracting the remaining goldfish from the initial goldfish\n    disappeared_goldfish = initial_goldfish - remaining_goldfish\n\n    return disappeared_goldfish", "mapping": {"c0": 6.0, "c1": 8.0}}
{"question": "Danny collects bottle caps and wrappers. He found c0 bottle caps and c1 wrappers at the park. Now he has c2 wrappers and c3 bottle caps in his collection.How many more bottle caps than wrappers does danny have now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #Danny originally had c0 bottle caps and c1 wrappers\n    bottle_caps_before = c0\n    wrappers_before = c1\n\n    #Now Danny has c2 wrappers and c3 bottle caps\n    bottle_caps_after = c3\n    wrappers_after = c2\n\n    #Danny has x more bottle caps than wrappers, where x is the difference between the number of bottle caps and wrappers\n    difference = bottle_caps_after - wrappers_after\n\n    return difference", "mapping": {"c0": 58.0, "c1": 25.0, "c2": 11.0, "c3": 12.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour and c1 cups of sugar. She already put in c2 cups of sugar.How many more cups of flour than cups of sugar does she need to add now?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #calculate how many cups of sugar Mary still needs to add\n    sugar_needed = c1 - c2\n\n    #calculate how many cups of flour Mary needs to add\n    flour_needed = c0 - sugar_needed\n\n    #calculate the difference between the cups of flour and sugar needed\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 4.0}}
{"question": "Jesse's room is c0 feet long and c1 feet wide. If each tile is of size c2 square feetHow many tiles does she need to cover the whole floor?", "answer": [6.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total area of the floor\n    floor_area = c0 * c1\n\n    #calculate the number of tiles needed by dividing the total area of the floor by the area of each tile\n    tiles_needed = floor_area / c2\n\n    #round up the number of tiles to the nearest integer\n    tiles_needed = int(tiles_needed) + (tiles_needed % 1 > 0)\n\n    return tiles_needed", "mapping": {"c0": 2.0, "c1": 12.0, "c2": 4.0}}
{"question": "An industrial machine can make c0 shirts a minute. It worked for c1 minutes yesterday and for c2 shirts today.How many shirts did machine make altogether?", "answer": [156.0], "response": "def Problem(c0, c1, c2):\n    #machine can make c0 shirts a minute\n    shirts_per_minute = c0\n\n    #machine worked for c1 minutes yesterday\n    minutes_yesterday = c1\n\n    #machine made c2 shirts today\n    shirts_today = c2\n\n    #total number of shirts made can be calculated by multiplying the number of minutes worked yesterday by the number of shirts made per minute, and adding the number of shirts made today\n    total_shirts = (shirts_per_minute * minutes_yesterday) + shirts_today\n\n    return total_shirts", "mapping": {"c0": 6.0, "c1": 12.0, "c2": 14.0}}
{"question": "Paco had c0 sweet cookies and c1 salty cookies. He ate c2 sweet cookies and c3 salty cookies.How many salty cookies did Paco have left?", "answer": [3.0], "response": "def Problem(c0, c1, c2, c3):\n    #Paco had c0 sweet cookies and c1 salty cookies\n    salty_cookies_before = c1\n\n    #Paco ate c3 salty cookies\n    salty_cookies_ate = c3\n\n    #The number of salty cookies left can be calculated by subtracting the number of salty cookies ate from the original number of salty cookies\n    salty_cookies_after = salty_cookies_before - salty_cookies_ate\n\n    return salty_cookies_after", "mapping": {"c0": 9.0, "c1": 6.0, "c2": 36.0, "c3": 3.0}}
{"question": "Robin cut off c0 inches of his hair. If his hair is now c1 inches longHow long was his hair before he cut?", "answer": [30.0], "response": "def Problem(c0, c1):\n    #Robin cut off c0 inches of his hair\n    cut_off = c0\n\n    #His hair is now c1 inches long\n    hair_now = c1\n\n    #The length of his hair before he cut can be calculated by adding the length of his hair now to the length he cut off\n    hair_before = hair_now + cut_off\n\n    return hair_before", "mapping": {"c0": 20.0, "c1": 10.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches farther than the frog.How far did the frog jump?", "answer": [53.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches farther than the frog\n    mouse_jump = frog_jump + c2\n\n    return frog_jump", "mapping": {"c0": 36.0, "c1": 17.0, "c2": 15.0}}
{"question": "Robin has c0 packages of gum and c1 packages of candy. There are c2 pieces in each package.How many pieces of gum does Robin have?", "answer": [112.0], "response": "def Problem(c0, c1, c2):\n    #Robin has c0 packages of gum\n    gum_packages = c0\n\n    #Each package of gum has c2 pieces\n    gum_pieces_per_package = c2\n\n    #The total number of gum pieces can be calculated by multiplying the number of gum packages by the number of pieces per package\n    total_gum_pieces = gum_packages * gum_pieces_per_package\n\n    return total_gum_pieces", "mapping": {"c0": 28.0, "c1": 13.0, "c2": 4.0}}
{"question": "Baker made c0 cakes and c1 pastries. If he sold c2 cakes and c3 pastriesHow many more cakes than pastries did baker sell?", "answer": [11.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 cakes and c1 pastries\n    cakes_made = c0\n    pastries_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate the difference between the number of cakes and pastries sold\n    difference = cakes_sold - pastries_sold\n\n    return difference", "mapping": {"c0": 157.0, "c1": 169.0, "c2": 158.0, "c3": 147.0}}
{"question": "In a school there are c0 girls and the rest are boys. If there are c1 more girls than boysHow many pupils are there in that school?", "answer": [1455.0], "response": "def Problem(c0, c1):\n    #there are originally c0 girls in the school\n    girls = c0\n\n    #there are c1 more girls than boys, so we can calculate the number of boys as (c0 + c1)\n    boys = c0 + c1\n\n    #The total number of pupils in the school is the sum of girls and boys\n    pupils = girls + boys\n\n    return pupils", "mapping": {"c0": 868.0, "c1": 281.0}}
{"question": "David did c0 push-ups in gym class today. David did c1 more push-ups than Zachary.How many push-ups did Zachary and David do altogether?", "answer": [53.0], "response": "def Problem(c0, c1):\n    #David did c0 push-ups\n    david_pushups = c0\n\n    #David did c1 more push-ups than Zachary\n    zachary_pushups = david_pushups - c1\n\n    #The total number of push-ups they did altogether can be calculated by adding David's push-ups to Zachary's push-ups\n    total_pushups = david_pushups + zachary_pushups\n\n    return total_pushups", "mapping": {"c0": 51.0, "c1": 49.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There were c0 bird families living near the mountain. If c1 bird families flew away for winterHow many more bird families stayed behind than those that flew away for the winter?", "answer": [73.0], "response": "def Problem(c0, c1):\n    #there were originally c0 bird families\n    original_families = c0\n\n    #c1 bird families flew away for winter\n    flew_away = c1\n\n    #The number of bird families that stayed behind can be calculated by subtracting the number of bird families that flew away from the original number of bird families\n    stayed_behind = original_families - flew_away\n\n    #The number of bird families that flew away can be calculated by subtracting the number of bird families that stayed behind from the original number of bird families\n    flew_away = original_families - stayed_behind\n\n    #The difference between the number of bird families that stayed behind and the number that flew away can be calculated by subtracting the number of bird families that flew away from the number that stayed behind\n    difference = stayed_behind - flew_away\n\n    return difference", "mapping": {"c0": 87.0, "c1": 7.0}}
{"question": "A school has c0 pupils. There are c1 girls and the rest are boys.How many boys are there in that school?", "answer": [253.0], "response": "def Problem(c0, c1):\n    #there are originally c0 pupils in the school\n    pupils_before = c0\n\n    #there are c1 girls in the school\n    girls = c1\n\n    #The number of boys in the school can be calculated by subtracting the number of girls from the total number of pupils\n    boys = pupils_before - girls\n\n    return boys", "mapping": {"c0": 485.0, "c1": 232.0}}
{"question": "Baker made c0 pastries and c1 cakes. If he sold c2 cakes and c3 pastriesHow many more pastries than cakes did baker make?", "answer": [123.0], "response": "def Problem(c0, c1, c2, c3):\n    #Baker made c0 pastries and c1 cakes\n    pastries_made = c0\n    cakes_made = c1\n\n    #Baker sold c2 cakes and c3 pastries\n    cakes_sold = c2\n    pastries_sold = c3\n\n    #Calculate how many pastries and cakes are left after selling\n    pastries_left = pastries_made - pastries_sold\n    cakes_left = cakes_made - cakes_sold\n\n    #Calculate the difference between the number of pastries and cakes left\n    difference = pastries_left - cakes_left\n\n    return difference", "mapping": {"c0": 134.0, "c1": 11.0, "c2": 140.0, "c3": 92.0}}
{"question": "Nell collects baseball cards. She had c0 cards while Jeff had c1 cards. She gave some of her cards to jeff and now has c2 cards left.How many cards did Nell give to Jeff?", "answer": [276.0], "response": "def Problem(c0, c1, c2):\n    #Nell had c0 cards and Jeff had c1 cards\n    nell_cards = c0\n    jeff_cards = c1\n\n    #Nell gave some of her cards to Jeff\n    nell_gave = nell_cards - c2\n\n    #Jeff now has c1 + nell_gave cards\n    jeff_now = jeff_cards + nell_gave\n\n    #The number of cards Nell gave to Jeff can be calculated by subtracting Jeff's original number of cards from his current number of cards\n    cards_given = jeff_now - c1\n\n    return cards_given", "mapping": {"c0": 528.0, "c1": 11.0, "c2": 252.0}}
{"question": "The school is planning a field trip. The school has c0 classrooms. There are c1 students in the school and c2 seats on each school bus. If c3 students do n't want to go for the tripHow many buses are needed to take the trip?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of seats available on all the buses\n    total_seats = c0 * c2\n\n    #subtract the number of students who don't want to go from the total number of students\n    actual_students = c1 - c3\n\n    #calculate the number of buses needed by dividing the actual number of students by the number of seats on each bus and rounding up to the nearest integer\n    buses_needed = math.ceil(actual_students / c2)\n\n    return buses_needed", "mapping": {"c0": 66.0, "c1": 102.0, "c2": 8.0, "c3": 22.0}}
{"question": "c0 people can ride the Ferris wheel in paradise park at the same time. If each seat on the Ferris wheel can hold c1 peopleHow many seats does the Ferris wheel have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each seat on the Ferris wheel can hold c1 people\n    seats_capacity = c1\n\n    #c0 people can ride the Ferris wheel at the same time\n    total_people = c0\n\n    #The number of seats the Ferris wheel has can be calculated by dividing the total number of people by the capacity of each seat\n    seats = total_people // seats_capacity\n\n    return seats", "mapping": {"c0": 4.0, "c1": 2.0}}
{"question": "Dave had c0 apps and c1 files on his phone. After deleting some apps and files he had c2 files and c3 apps left.How many more apps than files does he have left on the phone?", "answer": [7.0], "response": "def Problem(c0, c1, c2, c3):\n    #Dave had c0 apps and c1 files on his phone\n    apps_before = c0\n    files_before = c1\n\n    #After deleting some apps and files he had c2 files and c3 apps left\n    apps_after = c3\n    files_after = c2\n\n    #The number of apps left after deleting can be calculated by subtracting the number of deleted apps from the original number of apps\n    apps_deleted = apps_before - apps_after\n\n    #The number of files left after deleting can be calculated by subtracting the number of deleted files from the original number of files\n    files_deleted = files_before - files_after\n\n    #The difference between the number of apps and files left can be calculated by subtracting the number of files left from the number of apps left\n    difference = apps_after - files_after\n\n    return difference", "mapping": {"c0": 24.0, "c1": 9.0, "c2": 5.0, "c3": 12.0}}
{"question": "c0 campers went rowing in the morning c1 campers went rowing in the afternoon and c2 campers went rowing in the evening.How many more campers went rowing in the morning than in the afternoon?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    morning = c0\n\n    #c1 campers went rowing in the afternoon\n    afternoon = c1\n\n    #c2 campers went rowing in the evening\n    evening = c2\n\n    #The difference between the number of campers rowing in the morning and afternoon can be calculated by subtracting the number of afternoon campers from the number of morning campers\n    difference = morning - afternoon\n\n    return difference", "mapping": {"c0": 44.0, "c1": 39.0, "c2": 31.0}}
{"question": "Frank was reading through his favorite book. The book had c0 chapters, each with the same number of pages. It has a total of c1 pages. It took Frank c2 days to finish the book.How many pages are in each chapter?", "answer": [198.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #there are c0 chapters in the book\n    chapters = c0\n\n    #the book has c1 pages in total\n    pages = c1\n\n    #it took Frank c2 days to finish the book\n    days = c2\n\n    #The number of pages in each chapter can be calculated by dividing the total number of pages by the number of chapters\n    pages_per_chapter = pages / chapters\n\n    return pages_per_chapter", "mapping": {"c0": 3.0, "c1": 594.0, "c2": 607.0}}
{"question": "Jesse has c0 square feet of carpet. If her room is c1 feet long and c2 feet wideHow much more carpet does she need to cover the whole floor?", "answer": [62.0], "response": "def Problem(c0, c1, c2):\n    #calculate the area of the room\n    room_area = c1 * c2\n\n    #calculate the remaining carpet needed to cover the whole floor\n    remaining_carpet = room_area - c0\n\n    return remaining_carpet", "mapping": {"c0": 18.0, "c1": 4.0, "c2": 20.0}}
{"question": "There are many different books in the ' crazy silly school ' series. If you have read c0 of the books and are yet to read c1 booksHow many books are there in the ' crazy silly school ' series?", "answer": [21.0], "response": "def total_books(c0, c1):\n    #the total number of books in the series can be calculated by adding the number of books read to the number of books yet to be read\n    total = c0 + c1\n    return total", "mapping": {"c0": 13.0, "c1": 8.0}}
{"question": "Nell collects cards. She had c0 baseball cards and c1 Ace cards. She gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left.How many more baseball cards than Ace cards does Nell have?", "answer": [123.0], "response": "def Problem(c0, c1, c2, c3):\n    #Nell had c0 baseball cards and c1 Ace cards\n    baseball_before = c0\n    ace_before = c1\n\n    #Nell gave some of her cards to Jeff and now has c2 Ace cards and c3 baseball cards left\n    ace_after = c2\n    baseball_after = c3\n\n    #Nell gave away (baseball_before - baseball_after) baseball cards and (ace_before - ace_after) Ace cards\n    #So now she has (baseball_after) baseball cards and (ace_after) Ace cards\n    baseball_now = baseball_after\n    ace_now = ace_after\n\n    #Nell has (baseball_now - ace_now) more baseball cards than Ace cards\n    difference = baseball_now - ace_now\n\n    return difference", "mapping": {"c0": 438.0, "c1": 18.0, "c2": 55.0, "c3": 178.0}}
{"question": "Matthew had c0 crackers. If Matthew gave equal numbers of crackers to his c1 friends and still had c2 crackers leftHow many crackers did Matthew give to his friends?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef crackers_given(c0, c1, c2):\n    #Matthew had c0 crackers\n    crackers_before = c0\n\n    #Matthew gave equal numbers of crackers to his c1 friends\n    friends = c1\n    crackers_given = crackers_before // friends\n\n    #Matthew still had c2 crackers left\n    crackers_left = c2\n\n    #The number of crackers Matthew gave to his friends can be calculated by subtracting the number of crackers left from the original number of crackers\n    crackers_given = crackers_before - crackers_left\n\n    return crackers_given", "mapping": {"c0": 24.0, "c1": 3.0, "c2": 17.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How much farther did the grasshopper jump than the mouse?", "answer": [41.0], "response": "def jumping_contest(c0, c1, c2):\n    #grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #frog jumped c1 inches less than the grasshopper\n    frog_jump = grasshopper_jump - c1\n\n    #mouse jumped c2 inches less than the frog\n    mouse_jump = frog_jump - c2\n\n    #calculate how much farther the grasshopper jumped than the mouse\n    grasshopper_mouse_diff = grasshopper_jump - mouse_jump\n\n    return grasshopper_mouse_diff", "mapping": {"c0": 21.0, "c1": 25.0, "c2": 16.0}}
{"question": "They decided to hold the party in their backyard. They have c0 sets of tables and each set has c1 chairs. If there are c2 people sitting on chairsHow many chairs are left unoccupied?", "answer": [49.0], "response": "def Problem(c0, c1, c2):\n    #calculate the total number of chairs available\n    total_chairs = c0 * c1\n\n    #calculate the number of chairs occupied\n    occupied_chairs = c2\n\n    #calculate the number of chairs left unoccupied\n    unoccupied_chairs = total_chairs - occupied_chairs\n\n    return unoccupied_chairs", "mapping": {"c0": 10.0, "c1": 6.0, "c2": 11.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If there were c1 visitors the previous day and c2 visitors the day before thatHow many visited the Buckingham palace within the past c3 days?", "answer": [1791.0], "response": "def visitors_within_c3_days(c0, c1, c2, c3):\n    #calculate the total number of visitors within the past c3 days by adding the number of visitors from each day\n    total_visitors = c0 + c1 + c2\n\n    #if c3 is greater than or equal to 3, we need to subtract the number of visitors from 3 days ago to get the total number of visitors within the past c3 days\n    if c3 >= 3:\n        total_visitors -= c3-3\n\n    return total_visitors", "mapping": {"c0": 512.0, "c1": 471.0, "c2": 808.0, "c3": 89.0}}
{"question": "He then went to see the oranges being harvested. He found out that they harvest c0 sacks of ripe oranges and c1 sacks of unripe oranges per day.How many more sacks of ripe oranges than unripe oranges are harvested per day?", "answer": [19.0], "response": "def Problem(c0, c1):\n    #number of sacks of ripe oranges harvested per day\n    ripe_oranges = c0\n\n    #number of sacks of unripe oranges harvested per day\n    unripe_oranges = c1\n\n    #calculate the difference between the number of ripe and unripe oranges harvested\n    difference = ripe_oranges - unripe_oranges\n\n    return difference", "mapping": {"c0": 44.0, "c1": 25.0}}
{"question": "White t - shirts can be purchased in packages of c0. If mom buys c1 packages of white t - shirts and c2 trousersHow many white t - shirts will she have?", "answer": [3021.0], "response": "def Problem(c0, c1, c2):\n    #each package contains c0 white t-shirts\n    shirts_per_package = c0\n\n    #mom buys c1 packages of white t-shirts\n    packages_bought = c1\n\n    #mom also buys c2 trousers (which don't affect the number of white t-shirts)\n    trousers_bought = c2\n\n    #The total number of white t-shirts can be calculated by multiplying the number of packages bought by the number of shirts per package\n    total_shirts = packages_bought * shirts_per_package\n\n    return total_shirts", "mapping": {"c0": 53.0, "c1": 57.0, "c2": 34.0}}
{"question": "Paul had c0 books. After selling some in a garage sale he bought c1 new ones. If he has c2 books nowHow many books did he sell?", "answer": [94.0], "response": "def Problem(c0, c1, c2):\n    #Paul had c0 books\n    books_before = c0\n\n    #After selling some in a garage sale he bought c1 new ones\n    sold_and_bought = c1\n\n    #Now he has c2 books\n    books_after = c2\n\n    #The number of books he sold can be calculated by subtracting the number of books he has now from the sum of the number of books he had before and the number of books he bought after the garage sale\n    sold = books_before + sold_and_bought - books_after\n\n    return sold", "mapping": {"c0": 2.0, "c1": 150.0, "c2": 58.0}}
{"question": "c0 storks and c1 birds were sitting on the fence. c2 more birds came to join them.How many more storks than birds are sitting on the fence?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #total number of birds on the fence\n    birds = c1 + c2\n\n    #total number of storks on the fence\n    storks = c0\n\n    #difference between the number of storks and birds\n    diff = storks - birds\n\n    return diff", "mapping": {"c0": 6.0, "c1": 2.0, "c2": 3.0}}
{"question": "Bryan took a look at his books and magazines. If he has c0 books and c1 magazines in each of his c2 bookshelvesHow many books does he have in total?", "answer": [621.0], "response": "def total_books(c0, c1, c2):\n    #calculate the total number of books by multiplying the number of books in each shelf by the number of shelves\n    total = c0 * c2\n    return total", "mapping": {"c0": 27.0, "c1": 80.0, "c2": 23.0}}
{"question": "Paul got a box of c0 crayons and c1 erasers for his birthday. At the end of the school year he only had c2 left while not having lost a single erasers.How many more crayons than erasers did he have left?", "answer": [353.0], "response": "def Problem(c0, c1, c2):\n    #Paul got a box of c0 crayons and c1 erasers for his birthday\n    crayons = c0\n\n    #At the end of the school year he only had c2 left while not having lost a single erasers\n    left = c2\n\n    #The number of erasers he had left can be calculated by subtracting the number of crayons he had from the total number of items he had left\n    erasers = left - crayons\n\n    #The number of crayons more than erasers he had left can be calculated by subtracting the number of erasers from the number of crayons\n    more_crayons = crayons - erasers\n\n    return more_crayons", "mapping": {"c0": 531.0, "c1": 38.0, "c2": 391.0}}
{"question": "Lewis earns a total of $ c0 during the harvest. If he earns $ c1 each weekHow many weeks did the harvest last?", "answer": [76.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Lewis earns a total of c0 during the harvest\n    total_earnings = c0\n\n    #He earns c1 each week\n    weekly_earnings = c1\n\n    #The number of weeks he worked can be calculated by dividing his total earnings by his weekly earnings\n    weeks_worked = total_earnings / weekly_earnings\n\n    return weeks_worked", "mapping": {"c0": 1216.0, "c1": 16.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many apps did he delete?", "answer": [17.0], "response": "def Problem(c0, c1, c2):\n    #Dave had c0 apps on his phone\n    apps_before = c0\n\n    #He added c1 new apps\n    added = c1\n\n    #After deleting some he had c2 left\n    apps_after = c2\n\n    #The number of apps he deleted can be calculated by subtracting the number of apps after deleting from the total number of apps before adding\n    deleted = (apps_before + added) - apps_after\n\n    return deleted", "mapping": {"c0": 10.0, "c1": 11.0, "c2": 4.0}}
{"question": "The ring toss game at the carnival made the same amount of money each day. In total in c0 days they earned c1 dollars.How much did they make per day?", "answer": [33.0], "response": "def Problem(c0, c1):\n    #the carnival made c1 dollars in c0 days\n    total_money = c1\n\n    #to find out how much they made per day, we divide the total money by the number of days\n    money_per_day = total_money / c0\n\n    return money_per_day", "mapping": {"c0": 5.0, "c1": 165.0}}
{"question": "There were c0 roses and c1 orchids in the vase. Jessica cut some more roses and orchids from her flower garden. There are now c2 roses and c3 orchids in the vase.How many more roses than orchids are there in the vase now?", "answer": [10.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of roses after Jessica cut some more\n    roses_after = c0 + (c2 - c0)\n\n    #calculate the number of orchids after Jessica cut some more\n    orchids_after = c1 + (c3 - c1)\n\n    #calculate the difference between the number of roses and orchids\n    difference = roses_after - orchids_after\n\n    return difference", "mapping": {"c0": 5.0, "c1": 3.0, "c2": 12.0, "c3": 2.0}}
{"question": "The Ferris wheel in paradise park has some seats. Each seat can hold c0 people. If c1 people can ride the wheel at the same timeHow many seats does the Ferris wheel have?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #each seat can hold c0 people\n    seat_capacity = c0\n\n    #c1 people can ride the wheel at the same time\n    total_riders = c1\n\n    #The number of seats the Ferris wheel has can be calculated by dividing the total number of riders by the seat capacity\n    num_seats = total_riders // seat_capacity\n\n    return num_seats", "mapping": {"c0": 9.0, "c1": 18.0}}
{"question": "Dave had some apps on his phone. After deleting c0 of them he had c1 left.How many apps did he have on his phone at the start?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #Dave had some apps on his phone\n    apps_before = None\n\n    #After deleting c0 of them he had c1 left\n    apps_after = c1\n\n    #The number of apps Dave had on his phone at the start can be calculated by adding the number of apps he deleted to the number of apps he had left\n    apps_before = apps_after + c0\n\n    return apps_before", "mapping": {"c0": 18.0, "c1": 5.0}}
{"question": "There are c0 different movies and c1 different books in the ' crazy silly school ' series. If you read c2 of the books and watched c3 of the moviesHow many more books than movies are there in the ' crazy silly school ' series?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the number of books left after reading c2 of them\n    books_left = c1 - c2\n\n    #calculate the number of movies left after watching c3 of them\n    movies_left = c0 - c3\n\n    #calculate the difference between the number of books and movies left\n    difference = books_left - movies_left\n\n    return difference", "mapping": {"c0": 14.0, "c1": 15.0, "c2": 11.0, "c3": 40.0}}
{"question": "Randy has c0 blocks. He uses c1 blocks to build a tower and c2 blocks to build a house.How many more blocks did he use to build the house than he did to build the tower?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Randy has c0 blocks\n    blocks_before = c0\n\n    #He uses c1 blocks to build a tower\n    tower_blocks = c1\n\n    #He uses c2 blocks to build a house\n    house_blocks = c2\n\n    #The difference between the number of blocks used to build the house and the number of blocks used to build the tower can be calculated by subtracting the number of tower blocks from the number of house blocks\n    difference = house_blocks - tower_blocks\n\n    return difference", "mapping": {"c0": 86.0, "c1": 79.0, "c2": 82.0}}
{"question": "With c0 dollars c1 packs of dvds can be bought.How much does each pack cost?", "answer": [14.0], "response": "def Problem(c0, c1):\n    #each pack of dvds costs c0/c1 dollars\n    cost_per_pack = c0/c1\n\n    return cost_per_pack", "mapping": {"c0": 28.0, "c1": 2.0}}
{"question": "Last week Fred had c0 dollars and Jason had c1 dollars. Jason delivered newspapers and now has c2 dollars. Fred washed cars over the weekend and now has c3 dollars.How much money did Jason earn by delivering newspapers?", "answer": [26.0], "response": "def Problem(c0, c1, c2, c3):\n    #Jason had c1 dollars last week and now has c2 dollars\n    jason_before = c1\n    jason_after = c2\n\n    #Fred had c0 dollars last week and now has c3 dollars\n    fred_before = c0\n    fred_after = c3\n\n    #Jason earned the difference between his money before and after\n    jason_earned = jason_after - jason_before\n\n    return jason_earned", "mapping": {"c0": 78.0, "c1": 31.0, "c2": 57.0, "c3": 90.0}}
{"question": "Josh had c0 marbles in his collection. He found c1 marbles while he lost c2 marbles.How many more marbles did he lose than those he found?", "answer": [14.0], "response": "def Problem(c0, c1, c2):\n    #Josh had c0 marbles in his collection\n    marbles_before = c0\n\n    #He found c1 marbles\n    marbles_found = c1\n\n    #He lost c2 marbles\n    marbles_lost = c2\n\n    #The difference between the number of marbles lost and found can be calculated by subtracting the number of marbles found from the number of marbles lost\n    difference = marbles_lost - marbles_found\n\n    return difference", "mapping": {"c0": 15.0, "c1": 9.0, "c2": 23.0}}
{"question": "Jack received c0 emails in the morning and some more in the afternoon. If he received a total of c1 emails in the dayHow many emails did Jack receive in the afternoon?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Jack received c0 emails in the morning\n    morning_emails = c0\n\n    #Jack received a total of c1 emails in the day\n    total_emails = c1\n\n    #The number of emails Jack received in the afternoon can be calculated by subtracting the number of morning emails from the total emails\n    afternoon_emails = total_emails - morning_emails\n\n    return afternoon_emails", "mapping": {"c0": 4.0, "c1": 5.0}}
{"question": "Luke gained c0 points in each round of a game. If he played c1 rounds of a trivia gameHow many points did he score in the game?", "answer": [22922.0], "response": "def Problem(c0, c1):\n    #Luke gained c0 points in each round of the game\n    points_per_round = c0\n\n    #Luke played c1 rounds of the game\n    rounds_played = c1\n\n    #The total number of points Luke scored in the game can be calculated by multiplying the number of points per round by the number of rounds played\n    total_points = points_per_round * rounds_played\n\n    return total_points", "mapping": {"c0": 146.0, "c1": 157.0}}
{"question": "There were some roses in the vase. Jessica cut c0 more roses from her flower garden and put them in the vase. There are now c1 roses in the vase.How many roses were there in the vase at the beginning?", "answer": [7.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #there were originally some roses in the vase\n    #let's call this number x\n    x = c1 - c0\n\n    return x\n\n#Explanation:\n#We know that Jessica cut c0 more roses from her garden and put them in the vase.\n#So, the number of roses in the vase after she put them in is c1.\n#Therefore, the number of roses in the vase before she put them in is c1 - c0.\n#We assign this value to x and return it.", "mapping": {"c0": 16.0, "c1": 23.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The frog jumped c1 inches farther than the grasshopper and the mouse jumped c2 inches lesser than the frog.How far did the frog jump?", "answer": [58.0], "response": "def jumping_contest(c0, c1, c2):\n    #The frog jumped c1 inches farther than the grasshopper\n    frog_jump = c0 + c1\n\n    #The mouse jumped c2 inches lesser than the frog\n    mouse_jump = frog_jump - c2\n\n    return frog_jump", "mapping": {"c0": 19.0, "c1": 39.0, "c2": 94.0}}
{"question": "Adam has c0 more apples than Jackie. Jackie has c1 oranges and c2 apples.How many apples does Adam have?", "answer": [16.0], "response": "def Problem(c0, c1, c2):\n    #Jackie has c2 apples, so Adam has c0 + c2 apples\n    adam_apples = c0 + c2\n\n    return adam_apples", "mapping": {"c0": 5.0, "c1": 89.0, "c2": 11.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace that day. If c1 people visited the Buckingham palace within the past c2 daysHow many visitors visited the Buckingham palace on the previous day?", "answer": [274.0], "response": "def Problem(c0, c1, c2):\n    #calculate the average number of visitors per day\n    avg_visitors_per_day = c1 / c2\n\n    #calculate the number of visitors on the previous day\n    visitors_previous_day = (2 * c0) - (c2 * avg_visitors_per_day)\n\n    return visitors_previous_day", "mapping": {"c0": 132.0, "c1": 406.0, "c2": 327.0}}
{"question": "c0 campers went rowing and c1 campers went hiking in the morning. c2 campers went rowing in the afternoon.How many more campers went rowing in the morning than in the afternoon?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #c0 campers went rowing in the morning\n    rowing_morning = c0\n\n    #c1 campers went hiking in the morning\n    hiking_morning = c1\n\n    #c2 campers went rowing in the afternoon\n    rowing_afternoon = c2\n\n    #The number of campers who went rowing in the morning can be calculated by subtracting the number of campers who went hiking from the original number of campers who went rowing\n    rowing_morning_campers = rowing_morning - hiking_morning\n\n    #The number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the morning from the total number of campers who went rowing\n    rowing_afternoon_campers = rowing_afternoon - rowing_morning_campers\n\n    #The difference between the number of campers who went rowing in the morning and the number of campers who went rowing in the afternoon can be calculated by subtracting the number of campers who went rowing in the afternoon from the number of campers who went rowing in the morning\n    difference = rowing_morning_campers - rowing_afternoon_campers\n\n    return difference", "mapping": {"c0": 29.0, "c1": 66.0, "c2": 26.0}}
{"question": "Dave had c0 apps on his phone. After adding some he had c1 left.How many apps did he add?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Dave had c0 apps on his phone\n    apps_before = c0\n\n    #After adding some apps, he had c1 left\n    apps_after = c1\n\n    #The number of apps he added can be calculated by subtracting the number of apps he had before from the number of apps he had after\n    added = apps_after - apps_before\n\n    return added", "mapping": {"c0": 17.0, "c1": 18.0}}
{"question": "There were c0 parents in the program and c1 pupils too.How many more pupils were present compared to parents in the program?", "answer": [347.0], "response": "def Problem(c0, c1):\n    #there were c0 parents in the program\n    parents = c0\n\n    #there were c1 pupils in the program\n    pupils = c1\n\n    #The difference between the number of pupils and parents can be calculated by subtracting the number of parents from the number of pupils\n    difference = pupils - parents\n\n    return difference", "mapping": {"c0": 174.0, "c1": 521.0}}
{"question": "Paco ate c0 cookies and had c1 cookies left.How many cookies did he have in the beginning?", "answer": [54.0], "response": "def Problem(c0, c1):\n    #Paco ate c0 cookies and had c1 cookies left\n    #The number of cookies Paco had in the beginning can be calculated by adding the number of cookies he ate to the number of cookies he had left\n    cookies_before = c0 + c1\n\n    return cookies_before", "mapping": {"c0": 19.0, "c1": 35.0}}
{"question": "If each bag has c0 cookies and you had c1 cookies in totalHow many bags of cookies do you have?", "answer": [7.0], "response": "def Problem(c0, c1):\n    #each bag has c0 cookies\n    cookies_per_bag = c0\n\n    #you have c1 cookies in total\n    total_cookies = c1\n\n    #The number of bags you have can be calculated by dividing the total number of cookies by the number of cookies per bag\n    bags_of_cookies = total_cookies // cookies_per_bag\n\n    return bags_of_cookies", "mapping": {"c0": 3.0, "c1": 21.0}}
{"question": "The grasshopper, the frog and the mouse had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the frog and the mouse jumped c2 inches lesser than the frog.How far did the mouse jump?", "answer": [8.0], "response": "def jumping_contest(c0, c1, c2):\n    #the grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #the frog jumped c1 inches less than the grasshopper\n    frog_jump = grasshopper_jump - c1\n\n    #the mouse jumped c2 inches less than the frog\n    mouse_jump = frog_jump - c2\n\n    return mouse_jump", "mapping": {"c0": 39.0, "c1": 19.0, "c2": 12.0}}
{"question": "Being his favorite, he saved checking on the grapevines for his last stop. He was told by c0 of the pickers that they fill c1 drums of grapes in c2 days.How many drums of grapes would be filled per day?", "answer": [15.0], "response": "def Problem(c0, c1, c2):\n    #c1 drums of grapes are filled in c2 days\n    drums_per_day = c1/c2\n\n    return drums_per_day", "mapping": {"c0": 94.0, "c1": 90.0, "c2": 6.0}}
{"question": "Katie had c0 new games and c1 old games. Her friends had c2 new games and c3 old games.How many new games do they have together?", "answer": [92.0], "response": "def Problem(c0, c1, c2, c3):\n    #Katie has c0 new games and her friends have c2 new games\n    new_games = c0 + c2\n\n    return new_games", "mapping": {"c0": 84.0, "c1": 19.0, "c2": 8.0, "c3": 69.0}}
{"question": "Being his favorite, he saved checking on the grapevines after c0 stops. He was told by c1 of the pickers that they fill c2 drums of grapes per day.How many drums of grapes would be filled in c3 days?", "answer": [6264.0], "response": "def grapevine_problem(c0, c1, c2, c3):\n    # The number of stops he made checking on the grapevines is c0\n    stops = c0\n\n    # The number of pickers who told him about the grape production is c1\n    pickers = c1\n\n    # The number of drums of grapes filled per day is c2\n    drums_per_day = c2\n\n    # The number of days he wants to calculate the grape production for is c3\n    days = c3\n\n    # The total number of drums of grapes filled in c3 days can be calculated by multiplying the number of pickers, drums per day, and days\n    total_drums = pickers * drums_per_day * days\n\n    return total_drums", "mapping": {"c0": 57.0, "c1": 252.0, "c2": 108.0, "c3": 58.0}}
{"question": "After eating a hearty meal they went to see the Buckingham palace. There, Rachel learned that c0 visitors came to the Buckingham palace on the previous day. If c1 people visited the Buckingham palace within the past c2 daysHow many visitors visited the Buckingham palace on that day?", "answer": [784.0], "response": "def Problem(c0, c1, c2):\n    #c0 visitors came to the Buckingham palace on the previous day\n    visitors_previous_day = c0\n\n    #c1 people visited the Buckingham palace within the past c2 days\n    visitors_past_c2_days = c1\n\n    #To find the number of visitors on that day, we need to subtract the visitors who came on the previous day from the total visitors who visited within the past c2 days\n    visitors_on_that_day = visitors_past_c2_days - visitors_previous_day\n\n    return visitors_on_that_day", "mapping": {"c0": 45.0, "c1": 829.0, "c2": 85.0}}
{"question": "Adam has c0 apples. Jackie has c1 apples.How many more apples does Jackie have than Adam?", "answer": [1.0], "response": "def Problem(c0, c1):\n    #Adam has c0 apples\n    adam_apples = c0\n\n    #Jackie has c1 apples\n    jackie_apples = c1\n\n    #The difference in the number of apples can be calculated by subtracting Adam's apples from Jackie's apples\n    difference = jackie_apples - adam_apples\n\n    return difference", "mapping": {"c0": 9.0, "c1": 10.0}}
{"question": "There are c0 baskets of peaches. Each basket has c1 red peaches and some more green peaches. If there are a total of c2 peaches in all basketsHow many green peaches are in each basket?", "answer": [2.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each basket has c1 red peaches\n    red_peaches = c1\n\n    #total number of peaches in all baskets is c2\n    total_peaches = c2\n\n    #total number of green peaches can be calculated by subtracting the number of red peaches from the total number of peaches\n    green_peaches = total_peaches - (c0 * red_peaches)\n\n    #number of green peaches in each basket can be calculated by dividing the total number of green peaches by the number of baskets\n    green_peaches_per_basket = green_peaches / c0\n\n    return green_peaches_per_basket", "mapping": {"c0": 2.0, "c1": 4.0, "c2": 12.0}}
{"question": "A chef had c0 apples and c1 peaches. After making some pies, he had c2 apples left.How many apples did he use?", "answer": [1.0], "response": "def Problem(c0, c1, c2):\n    #the chef had c0 apples and c1 peaches\n    apples_before = c0\n\n    #after making some pies, he had c2 apples left\n    apples_after = c2\n\n    #the number of apples used can be calculated by subtracting the number of apples left from the original number of apples\n    apples_used = apples_before - apples_after\n\n    return apples_used", "mapping": {"c0": 40.0, "c1": 54.0, "c2": 39.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each of the c1 blocks. If there are c2 houses on a blockHow many pieces of junk mail should he give each house?", "answer": [2.0], "response": "def Problem(c0, c1, c2):\n    #the mailman has to give c0 pieces of junk mail to each block\n    mail_per_block = c0\n\n    #there are c1 blocks\n    num_blocks = c1\n\n    #there are c2 houses on each block\n    num_houses_per_block = c2\n\n    #The number of pieces of junk mail each house should receive can be calculated by dividing the total number of pieces of mail per block by the number of houses on each block\n    mail_per_house = mail_per_block / num_houses_per_block\n\n    return mail_per_house", "mapping": {"c0": 38.0, "c1": 78.0, "c2": 19.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of flour c1 cups of sugar and c2 cups of salt. She already put in c3 cups of flour.How many more cups of flour than cups of sugar does she need to add now?", "answer": [1.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate how many more cups of flour Mary needs to add\n    flour_needed = c0 - c3\n\n    #calculate how many cups of sugar Mary needs to add\n    sugar_needed = c1\n\n    #calculate the difference between the cups of flour needed and cups of sugar needed\n    difference = flour_needed - sugar_needed\n\n    return difference", "mapping": {"c0": 10.0, "c1": 2.0, "c2": 80.0, "c3": 7.0}}
{"question": "Julia played tag with c0 kids on monday and c1 kids on tuesday. She played cards with c2 kids on wednesday.How many kids did she play with altogether?", "answer": [38.0], "response": "def Problem(c0, c1, c2):\n    #Julia played tag with c0 kids on Monday\n    tag_monday = c0\n\n    #Julia played tag with c1 kids on Tuesday\n    tag_tuesday = c1\n\n    #Julia played cards with c2 kids on Wednesday\n    cards_wednesday = c2\n\n    #The total number of kids Julia played with can be calculated by adding the number of kids she played with on each day\n    total_kids = tag_monday + tag_tuesday + cards_wednesday\n\n    return total_kids", "mapping": {"c0": 13.0, "c1": 10.0, "c2": 15.0}}
{"question": "Jesse needs a carpet of size c0 square feet to cover her room. If her room is c1 feet longWhat is the width of her room?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #the area of the room is c0 square feet\n    room_area = c0\n\n    #the length of the room is c1 feet\n    room_length = c1\n\n    #the width of the room can be calculated by dividing the area of the room by its length\n    room_width = room_area / room_length\n\n    return room_width", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "There are c0 skittles in Steven's skittles collection. Steven also has c1 erasers. If the skittles and erasers are organized into c2 groupsHow big is each group?", "answer": [57.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #there are c0 skittles in Steven's collection\n    skittles = c0\n\n    #there are c1 erasers in Steven's collection\n    erasers = c1\n\n    #the total number of items in Steven's collection is the sum of skittles and erasers\n    total_items = skittles + erasers\n\n    #the size of each group can be calculated by dividing the total number of items by the number of groups\n    group_size = total_items / c2\n\n    return group_size", "mapping": {"c0": 4502.0, "c1": 4276.0, "c2": 154.0}}
{"question": "A mailman has to give c0 pieces of junk mail to each house in each of the c1 blocks. If there are c2 houses in each blockHow many pieces of junk mail should he give in total?", "answer": [1088.0], "response": "def Problem(c0, c1, c2):\n    #the mailman has to give c0 pieces of junk mail to each house\n    mail_per_house = c0\n\n    #there are c1 blocks\n    blocks = c1\n\n    #there are c2 houses in each block\n    houses_per_block = c2\n\n    #The total number of pieces of junk mail can be calculated by multiplying the number of houses per block by the number of blocks and then multiplying that by the number of pieces of mail per house\n    total_mail = mail_per_house * houses_per_block * blocks\n\n    return total_mail", "mapping": {"c0": 4.0, "c1": 16.0, "c2": 17.0}}
{"question": "A book has c0 chapters. The first chapter is c1 pages long the second chapter is c2 pages long and the third chapter is c3 pages long.How many more pages does the first chapter have than the third chapter?", "answer": [32.0], "response": "def Problem(c0, c1, c2, c3):\n    #calculate the total number of pages in the book\n    total_pages = c1 + c2 + c3\n\n    #calculate the average number of pages per chapter\n    avg_pages = total_pages / c0\n\n    #calculate the number of pages in the first chapter\n    first_chapter_pages = c1\n\n    #calculate the number of pages in the third chapter\n    third_chapter_pages = c3\n\n    #calculate the difference in pages between the first and third chapter\n    difference = first_chapter_pages - third_chapter_pages\n\n    return difference", "mapping": {"c0": 3.0, "c1": 53.0, "c2": 75.0, "c3": 21.0}}
{"question": "Dave had c0 apps on his phone. He added c1 new apps. After deleting some he had c2 left.How many more apps did he add than he deleted?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Dave had c0 apps on his phone\n    apps_before = c0\n\n    #He added c1 new apps\n    added = c1\n\n    #After deleting some he had c2 left\n    apps_after = c2\n\n    #The number of apps he deleted can be calculated by subtracting the number of apps after from the number of apps before\n    deleted = apps_before - apps_after\n\n    #The number of apps he added more than he deleted can be calculated by subtracting the number of apps deleted from the number of apps added\n    more_added = added - deleted\n\n    return more_added", "mapping": {"c0": 21.0, "c1": 89.0, "c2": 24.0}}
{"question": "Bobby ate c0 pieces of candy. Then he ate c1 more. If he initially had c2 pieces of candyHow many pieces of candy does he still have left?", "answer": [4.0], "response": "def Problem(c0, c1, c2):\n    #Bobby initially had c2 pieces of candy\n    initial_candy = c2\n\n    #Bobby ate c0 pieces of candy\n    candy_eaten = c0\n\n    #Bobby ate c1 more pieces of candy\n    more_candy_eaten = c1\n\n    #The number of pieces of candy Bobby still has can be calculated by subtracting the total number of candy he ate from the initial number of candy he had\n    candy_left = initial_candy - candy_eaten - more_candy_eaten\n\n    return candy_left", "mapping": {"c0": 17.0, "c1": 15.0, "c2": 36.0}}
{"question": "Winter is almost here and most animals are migrating to warmer countries. There are some bird families living near the mountain. c0 bird families flew away for winter while c1 bird families stayed behind.How many bird families were living near the mountain at the start?", "answer": [34.0], "response": "def bird_families(c0, c1):\n    #c0 bird families flew away for winter\n    flew_away = c0\n\n    #c1 bird families stayed behind\n    stayed_behind = c1\n\n    #The total number of bird families living near the mountain at the start can be calculated by adding the number of bird families that flew away to the number of bird families that stayed behind\n    total_families = flew_away + stayed_behind\n\n    return total_families", "mapping": {"c0": 20.0, "c1": 14.0}}
{"question": "Frank was reading through some books. Each book had c0 pages and it took Frank c1 days to finish each book. If he takes c2 days to finish all booksHow many books did he read?", "answer": [41.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1, c2):\n    #each book has c0 pages\n    pages_per_book = c0\n\n    #it takes Frank c1 days to finish each book\n    days_per_book = c1\n\n    #it takes Frank c2 days to finish all books\n    total_days = c2\n\n    #The number of books Frank read can be calculated by dividing the total number of days by the number of days it takes to finish one book\n    books_read = total_days // days_per_book\n\n    return books_read", "mapping": {"c0": 66.0, "c1": 12.0, "c2": 492.0}}
{"question": "David did c0 more push-ups but c1 less crunches than Zachary in gym class today. If Zachary did c2 push-ups and c3 crunchesHow many more push-ups than crunches did Zachary do?", "answer": [25.0], "response": "def Problem(c0, c1, c2, c3):\n    #Zachary did c2 push-ups and c3 crunches\n    zachary_pushups = c2\n    zachary_crunches = c3\n\n    #David did c0 more push-ups but c1 less crunches than Zachary\n    david_pushups = zachary_pushups + c0\n    david_crunches = zachary_crunches - c1\n\n    #calculate the difference between Zachary's push-ups and crunches\n    zachary_difference = zachary_pushups - zachary_crunches\n\n    #calculate the difference between David's push-ups and crunches\n    david_difference = david_pushups - david_crunches\n\n    #calculate the difference between Zachary's and David's push-ups and crunches\n    difference = zachary_difference - david_difference\n\n    return difference", "mapping": {"c0": 36.0, "c1": 33.0, "c2": 58.0, "c3": 33.0}}
{"question": "Rebecca wants to split a collection of eggs into groups of c0. Rebecca has c1 marbles and c2 eggs.How many more eggs does Rebecca have than marbles?", "answer": [7.0], "response": "def Problem(c0, c1, c2):\n    #calculate the number of egg groups that can be made\n    egg_groups = c2 // c0\n\n    #calculate the number of eggs left over after making the egg groups\n    eggs_left = c2 % c0\n\n    #calculate the difference between the number of eggs and marbles\n    difference = eggs_left - c1\n\n    return difference", "mapping": {"c0": 20.0, "c1": 5.0, "c2": 12.0}}
{"question": "Baker made c0 cakes. Then he made c1 more cakes. He sold c2 of them.How many more cakes did baker make than those he sold?", "answer": [127.0], "response": "def Problem(c0, c1, c2):\n    #Baker made c0 cakes\n    cakes_before = c0\n\n    #Baker made c1 more cakes\n    more_cakes = c1\n\n    #Baker sold c2 cakes\n    sold_cakes = c2\n\n    #The number of cakes Baker made more than those he sold can be calculated by subtracting the number of sold cakes from the total number of cakes he made\n    cakes_made = cakes_before + more_cakes\n    more_than_sold = cakes_made - sold_cakes\n\n    return more_than_sold", "mapping": {"c0": 81.0, "c1": 92.0, "c2": 46.0}}
{"question": "c0 red peaches and some more green peaches are in the basket. If there are a total of c1 peaches in the basketHow many green peaches are in the basket?", "answer": [5.0], "response": "def Problem(c0, c1):\n    #there are originally c0 red peaches in the basket\n    red_peaches = c0\n\n    #there are a total of c1 peaches in the basket\n    total_peaches = c1\n\n    #The number of green peaches can be calculated by subtracting the number of red peaches from the total number of peaches\n    green_peaches = total_peaches - red_peaches\n\n    return green_peaches", "mapping": {"c0": 10.0, "c1": 15.0}}
{"question": "c0 campers went rowing in the morning. c1 campers went rowing in the afternoon.How many more campers went rowing in the morning than in the afternoon?", "answer": [23.0], "response": "def Problem(c0, c1):\n    #number of campers who went rowing in the morning\n    morning_campers = c0\n\n    #number of campers who went rowing in the afternoon\n    afternoon_campers = c1\n\n    #calculate the difference between the number of campers who went rowing in the morning and afternoon\n    difference = morning_campers - afternoon_campers\n\n    return difference", "mapping": {"c0": 62.0, "c1": 39.0}}
{"question": "In a school there are c0 girls and c1 boys. There are also c2 teachersHow many people are there in that school?", "answer": [1396.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 girls in the school\n    girls = c0\n\n    #there are c1 boys in the school\n    boys = c1\n\n    #there are c2 teachers in the school\n    teachers = c2\n\n    #The total number of people in the school can be calculated by adding the number of girls, boys, and teachers\n    total_people = girls + boys + teachers\n\n    return total_people", "mapping": {"c0": 315.0, "c1": 309.0, "c2": 772.0}}
{"question": "In Haley's class some boys love to play marbles. If Haley has c0 marbles and she gave c1 marbles to each boyHow many boys did she give the marbles to?", "answer": [2.0], "response": "def Problem(c0, c1):\n    #Haley has c0 marbles\n    marbles_before = c0\n\n    #each boy gets c1 marbles\n    marbles_per_boy = c1\n\n    #The number of boys Haley gave marbles to can be calculated by dividing the total number of marbles she gave by the number of marbles each boy received\n    num_boys = marbles_before // marbles_per_boy\n\n    return num_boys", "mapping": {"c0": 10.0, "c1": 5.0}}
{"question": "Lewis earns $ c0 every week during the c1 weeks of harvest. He also earns $ c2 per week for working overtime. If he works overtime every weekHow much money does he earn during harvest season?", "answer": [1054997.0], "response": "Let's think about it step by step:\n\ndef harvest_earnings(c0, c1, c2):\n    #Lewis earns c0 every week during harvest season\n    regular_earnings = c0 * c1\n\n    #Lewis earns c2 per week for working overtime\n    overtime_earnings = c2 * c1\n\n    #Total earnings during harvest season is the sum of regular earnings and overtime earnings\n    total_earnings = regular_earnings + overtime_earnings\n\n    return total_earnings", "mapping": {"c0": 28.0, "c1": 1091.0, "c2": 939.0}}
{"question": "Rachel had to complete c0 pages of math homework, c1 pages of reading homework and c2 more pages of biology homework.How many more pages of math homework than biology homework did she have?", "answer": [8.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of math homework\n    math_hw = c0\n\n    #Rachel had to complete c1 pages of reading homework\n    reading_hw = c1\n\n    #Rachel had to complete c2 more pages of biology homework\n    bio_hw = c2\n\n    #The difference between the number of pages of math homework and biology homework can be calculated by subtracting the number of pages of biology homework from the number of pages of math homework\n    diff = math_hw - bio_hw\n\n    return diff", "mapping": {"c0": 11.0, "c1": 2.0, "c2": 3.0}}
{"question": "Adam has c0 more apples than jackie. Adam has c1 apples.How many apples does Jackie have?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Adam has c0 more apples than Jackie\n    adam_apples = c1\n\n    #Jackie has c0 less apples than Adam\n    jackie_apples = adam_apples - c0\n\n    return jackie_apples", "mapping": {"c0": 3.0, "c1": 9.0}}
{"question": "Rachel picked c0 ripe apples from her tree. Now the tree has c1 ripe apples and c2 unripe apples.How many ripe apples did the tree have to begin with?", "answer": [5.0], "response": "def Problem(c0, c1, c2):\n    #Rachel picked c0 ripe apples from the tree\n    picked = c0\n\n    #Now the tree has c1 ripe apples and c2 unripe apples\n    ripe = c1\n\n    #The number of ripe apples the tree had to begin with can be calculated by adding the number of apples picked to the current number of ripe apples\n    initial_ripe = picked + ripe\n\n    return initial_ripe", "mapping": {"c0": 3.0, "c1": 2.0, "c2": 27.0}}
{"question": "Melissa scored c0 points in each game. She also got c1 bonus points in each game.How many points did she score in c2 games?", "answer": [15089.0], "response": "def total_points(c0, c1, c2):\n    #calculate the total points per game by adding the regular points and bonus points\n    total_per_game = c0 + c1\n\n    #calculate the total points by multiplying the total points per game by the number of games played\n    total_points = total_per_game * c2\n\n    return total_points", "mapping": {"c0": 109.0, "c1": 82.0, "c2": 79.0}}
{"question": "Rachel had to complete c0 pages of reading homework, c1 pages of math homework and c2 more pages of biology homework.How many more pages of math homework than reading homework did she have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #Rachel had to complete c0 pages of reading homework\n    reading = c0\n\n    #Rachel had to complete c1 pages of math homework\n    math = c1\n\n    #Rachel had to complete c2 more pages of biology homework than reading homework\n    biology = c2\n\n    #The difference between the number of math and reading pages can be calculated by subtracting the number of reading pages from the number of math pages\n    difference = math - reading\n\n    return difference", "mapping": {"c0": 4.0, "c1": 7.0, "c2": 19.0}}
{"question": "After resting they decided to go for a swim. The depth of the water is c0 times Dean's height. If Ron is c1 feet tall and Dean is c2 feet shorter than RonHow deep was the water?", "answer": [81.0], "response": "def Problem(c0, c1, c2):\n    #Dean's height is c2 feet shorter than Ron\n    dean_height = c1 - c2\n\n    #The depth of the water is c0 times Dean's height\n    water_depth = c0 * dean_height\n\n    return water_depth", "mapping": {"c0": 9.0, "c1": 15.0, "c2": 6.0}}
{"question": "In a school there are c0 girls and c1 boys. There are also c2 teachersHow many pupils are there in that school?", "answer": [626.0], "response": "def Problem(c0, c1, c2):\n    #there are c0 girls and c1 boys in the school\n    pupils = c0 + c1\n\n    #there are also c2 teachers in the school\n    total = pupils + c2\n\n    return total", "mapping": {"c0": 308.0, "c1": 318.0, "c2": 36.0}}
{"question": "Friends of Katie had c0 games and she had c1 ds games.How many more games does Katie have than her friends?", "answer": [6.0], "response": "def Problem(c0, c1):\n    #Katie has c1 ds games\n    katie_games = c1\n\n    #Katie's friends have c0 games\n    friends_games = c0\n\n    #The difference between the number of games Katie has and her friends have can be calculated by subtracting the number of friends' games from Katie's games\n    difference = katie_games - friends_games\n\n    return difference", "mapping": {"c0": 57.0, "c1": 63.0}}
{"question": "Luke scored c0 points after playing c1 rounds of a trivia game. If he gained the same number of points each roundHow many points did he score per round?", "answer": [42.0], "response": "Let's think about it step by step:\n\ndef Problem(c0, c1):\n    #Luke scored c0 points after playing c1 rounds of a trivia game\n    total_points = c0\n    rounds_played = c1\n\n    #If he gained the same number of points each round, we can calculate the points per round by dividing the total points by the number of rounds played\n    points_per_round = total_points / rounds_played\n\n    return points_per_round", "mapping": {"c0": 84.0, "c1": 2.0}}
{"question": "Next on his checklist is wax to stick the feathers together and colors to paint them. He needs a total of c0 g of colors to paint them. He needs c1 g of wax more. If the feathers require a total of c2 g of waxHow many grams of wax does he already have?", "answer": [331.0], "response": "def Problem(c0, c1, c2):\n    #he needs c0 g of colors and c1 g of wax more\n    total_wax_needed = c1 + c2\n\n    #he already has c2 g of wax\n    wax_before = c2\n\n    #The amount of wax he already has can be calculated by subtracting the total wax needed from the wax he already has\n    wax_after = wax_before - total_wax_needed\n\n    return wax_after", "mapping": {"c0": 57.0, "c1": 22.0, "c2": 353.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds. They put c1 seeds in each flower bed and only c2 seeds grew into flowers in each flower bed.How many flower beds did they have?", "answer": [3.0], "response": "def Problem(c0, c1, c2):\n    #total number of seeds planted\n    total_seeds = c0\n\n    #number of seeds in each flower bed\n    seeds_per_bed = c1\n\n    #number of seeds that grew into flowers in each flower bed\n    flowers_per_bed = c2\n\n    #number of flower beds can be calculated by dividing the total number of seeds by the product of seeds per bed and flowers per bed\n    flower_beds = total_seeds // (seeds_per_bed * flowers_per_bed)\n\n    return flower_beds", "mapping": {"c0": 36.0, "c1": 12.0, "c2": 58.0}}
{"question": "At the zoo, a cage had c0 snakes and c1 alligators. If c2 snakes and c3 alligators were hidingHow many alligators were not hiding?", "answer": [56.0], "response": "def Problem(c0, c1, c2, c3):\n    #there are originally c0 snakes and c1 alligators in the cage\n    snakes = c0\n    alligators = c1\n\n    #c2 snakes and c3 alligators are hiding\n    hiding_snakes = c2\n    hiding_alligators = c3\n\n    #The number of alligators not hiding can be calculated by subtracting the number of hiding alligators from the original number of alligators\n    not_hiding_alligators = alligators - hiding_alligators\n\n    return not_hiding_alligators", "mapping": {"c0": 3.0, "c1": 75.0, "c2": 82.0, "c3": 19.0}}
{"question": "Paige was helping her mom plant flowers and together they planted c0 seeds. They put c1 seeds in each flower bed and only c2 seeds grew into flowers in each flower bed.How many flowers did they grow?", "answer": [220.0], "response": "def Problem(c0, c1, c2):\n    #total number of seeds planted\n    seeds_planted = c0\n\n    #number of seeds in each flower bed\n    seeds_per_bed = c1\n\n    #number of seeds that grew into flowers in each flower bed\n    seeds_to_flowers = c2\n\n    #total number of flower beds\n    flower_beds = seeds_planted // seeds_per_bed\n\n    #total number of flowers grown\n    flowers_grown = flower_beds * seeds_to_flowers\n\n    return flowers_grown", "mapping": {"c0": 55.0, "c1": 15.0, "c2": 60.0}}
{"question": "Mary is baking a cake. The recipe calls for c0 cups of sugar and c1 cups of flour. She already put in c2 cups of sugar.How many more cups of sugar does she need to add?", "answer": [3.0], "response": "def sugar_needed(c0, c1, c2):\n    #calculate the remaining cups of sugar needed by subtracting the amount already added from the total amount needed\n    remaining_sugar = c0 - c2\n    return remaining_sugar", "mapping": {"c0": 7.0, "c1": 10.0, "c2": 4.0}}
{"question": "The grasshopper and the frog had a jumping contest. The grasshopper jumped c0 inches. The grasshopper jumped c1 inches farther than the grasshopper.How far did the frog jump?", "answer": [11.0], "response": "def jumping_contest(c0, c1):\n    #The grasshopper jumped c0 inches\n    grasshopper_jump = c0\n\n    #The grasshopper jumped c1 inches farther than the grasshopper\n    frog_jump = grasshopper_jump + c1\n\n    return frog_jump", "mapping": {"c0": 13.0, "c1": 2.0}}
